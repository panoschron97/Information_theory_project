
//Χρονόπουλος Παναγιώτης , ΑΜ : 321/2015222.

package icsd15222_information_theory;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Scanner;

            public class Icsd15222_information_theory 

            {
                
            static ArrayList<String> dataofnorwegianfile = new ArrayList<String>();
            static ArrayList<String> dataoffrenchfile = new ArrayList<String>();
            static ArrayList<String> dataofenglishfile = new ArrayList<String>();
            static Scanner inputforaction = new Scanner(System.in);    

            public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException, IOException 
    
            {
                
            boolean condition = true;
        
            while(condition)
        
            {
        
            System.out.println("\nInformation theory exercise. \n");
            System.out.println("01 - Read file(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("02 - Calculation of characters(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("03 - Estimate the probability distribution(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("04 - Calculate the entropy of the distribution(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("05 - Count the number of pairs that resulted(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("06 - Calculate the distribution in pairs of neighboring characters(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("07 - Calculate the joint entropy(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("08 - Calculate the conditional entropy(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("09 - Make a fixed length of code per character in the text(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("10 - Make a fixed length of code per pair of characters in the text(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("11 - Generate Shannon-Fano encoding(Snomannen-by-Nesbo-Jo.txt). ");
            System.out.println("12 - Read file(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("13 - Calculation of characters(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("14 - Estimate the probability distribution(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("15 - Calculate the entropy of the distribution(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("16 - Count the number of pairs that resulted(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("17 - Calculate the distribution in pairs of neighboring characters(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("18 - Calculate the joint entropy(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("19 - Calculate the conditional entropy(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("20 - Make a fixed length of code per character in the text(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("21 - Make a fixed length of code per pair of characters in the text(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("22 - Generate Shannon-Fano encoding(Le-bonhomme-de-neige-by-Nesbo_-Jo.txt). ");
            System.out.println("23 - Read file(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("24 - Calculation of characters(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("25 - Estimate the probability distribution(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("26 - Calculate the entropy of the distribution(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("27 - Count the number of pairs that resulted(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("28 - Calculate the distribution in pairs of neighboring characters(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("29 - Calculate the joint entropy(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("30 - Calculate the conditional entropy(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("31 - Make a fixed length of code per character in the text(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("32 - Make a fixed length of code per pair of characters in the text(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("33 - Generate Shannon-Fano encoding(The-Snowman-by-Jo-Nesbo.txt). ");
            System.out.println("34 - Closing the program. ");
        
            System.out.print("\nGive a number : ");
            int choice = inputforaction.nextInt();
        
            switch(choice)
         
            {
        
            case 1:
            readoffile();        
            break;
            case 2:
            calculationofcharacters();
            break;
            case 3:
            estimatetheprobabilitydistribution();
            break;
            case 4:
            calculatetheentropyofthedistribution();
            break;
            case 5:
            countthenumberofpairsthatresulted();   
            break; 
            case 6:
            calculatethedistributioninpairsofneighboringcharacters();   
            break; 
            case 7:
            calculatethejointentropy();   
            break; 
            case 8:
            calculatetheconditionalentropy();   
            break; 
            case 9:
            fixedlengthofcodepercharacterinthetext();
            break;
            case 10:
            fixedlengthofcodeperpairofcharactersinthetext();
            break;
            case 11:
            generateshannonfanoencoding();
            break;
            case 12:
            readoffile1();
            break;
            case 13:
            calculationofcharacters1();;
            break;
            case 14:
            estimatetheprobabilitydistribution1();    
            break;    
            case 15:
            calculatetheentropyofthedistribution1();   
            break;  
            case 16:
            countthenumberofpairsthatresulted1();   
            break; 
            case 17:
            calculatethedistributioninpairsofneighboringcharacters1();   
            break; 
            case 18:
            calculatethejointentropy1();   
            break; 
            case 19:
            calculatetheconditionalentropy1();   
            break; 
            case 20:
            fixedlengthofcodepercharacterinthetext1();    
            break;    
            case 21:
            fixedlengthofcodeperpairofcharactersinthetext1();
            break;
            case 22:
            generateshannonfanoencoding1();
            break;
            case 23:
            readoffile2();   
            break;
            case 24:
            calculationofcharacters2();
            break;
            case 25:
            estimatetheprobabilitydistribution2();
            break;
            case 26:
            calculatetheentropyofthedistribution2();
            break;
            case 27:
            countthenumberofpairsthatresulted2();   
            break; 
            case 28:
            calculatethedistributioninpairsofneighboringcharacters2();    
            break; 
            case 29:
            calculatethejointentropy2();   
            break; 
            case 30:
            calculatetheconditionalentropy2();   
            break; 
            case 31:
            fixedlengthofcodepercharacterinthetext2();   
            break; 
            case 32:
            fixedlengthofcodeperpairofcharactersinthetext2();
            break;
            case 33:
            generateshannonfanoencoding2();
            break;
            case 34:
            condition = false;
            break;
        
            default : System.out.println("\nInvalid number , please try again. ");
  
            }
        
            }
        
            System.out.println();    

            }

            private static void readoffile() 
    
            {
                
            if(dataofnorwegianfile.isEmpty())  
             
            {    
                
            try    
        
            {

            File file = new File("Snomannen-by-Nesbo-Jo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+©()’?«»:–;…!&-]" , " ").replaceAll("Æ" , "AE").replaceAll("Ø" , "O").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u"); 
            
            readLine = readLine.toLowerCase();
          
            System.out.println(readLine);
            
            dataofnorwegianfile.add(readLine);
   
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");
            
            }
            
            } 

            private static void calculationofcharacters() 
    
            {
                
            double countforcharactersa = 0.0;    
            double countforcharactersb = 0.0;  
            double countforcharactersc = 0.0;
            double countforcharactersd = 0.0;  
            double countforcharacterse = 0.0;  
            double countforcharactersf = 0.0;  
            double countforcharactersg = 0.0;  
            double countforcharactersh = 0.0;  
            double countforcharactersi = 0.0;  
            double countforcharactersj = 0.0;  
            double countforcharactersk = 0.0;  
            double countforcharactersl = 0.0;  
            double countforcharactersm = 0.0;  
            double countforcharactersn = 0.0;  
            double countforcharacterso = 0.0; 
            double countforcharactersp = 0.0;  
            double countforcharactersq = 0.0;  
            double countforcharactersr = 0.0;  
            double countforcharacterss = 0.0;  
            double countforcharacterst = 0.0;  
            double countforcharactersu = 0.0;
            double countforcharactersv = 0.0;  
            double countforcharactersw = 0.0;  
            double countforcharactersx = 0.0;  
            double countforcharactersy = 0.0;  
            double countforcharactersz = 0.0;  
            double countforcharactersdot = 0.0;    
            double countforcharacterscomma = 0.0;  
            double countforcharactersvacuum = 0.0; 
            
            for(String data : dataofnorwegianfile)
            
            {
                
            if(data.contains("a"))
            
            {
                
            countforcharactersa = countforcharactersa+1.0;    
                
            }   
            
            if(data.contains("b"))
            
            {
                
            countforcharactersb = countforcharactersb+1.0;    
                
            }   
            
            if(data.contains("c"))
            
            {
                
            countforcharactersc = countforcharactersc+1.0;    
                
            }   
            
            if(data.contains("d"))
            
            {
                
            countforcharactersd = countforcharactersd+1.0;    
                
            }   
            
            if(data.contains("e"))
            
            {
                
            countforcharacterse = countforcharacterse+1.0;    
                
            }  
            
            if(data.contains("f"))
            
            {
                
            countforcharactersf = countforcharactersf+1.0;    
                
            }  
            
            if(data.contains("g"))
            
            {
                
            countforcharactersg = countforcharactersg+1.0;    
                
            }  
            
            if(data.contains("h"))
            
            {
                
            countforcharactersh = countforcharactersh+1.0;    
                
            }  
             
            if(data.contains("i"))
            
            {
                
            countforcharactersi = countforcharactersi+1.0;    
                
            }  
             
            if(data.contains("j"))
            
            {
                
            countforcharactersj = countforcharactersj+1.0;    
                
            }  
             
            if(data.contains("k"))
            
            {
                
            countforcharactersk = countforcharactersk+1.0;    
                
            }  
             
            if(data.contains("l"))
            
            {
                
            countforcharactersl = countforcharactersl+1.0;    
                
            }  
             
            if(data.contains("m"))
            
            {
                
            countforcharactersm = countforcharactersm+1.0;    
                
            }  
             
            if(data.contains("n"))
            
            {
                
            countforcharactersn = countforcharactersn+1.0;    
                
            }  
             
            if(data.contains("o"))
            
            {
                
            countforcharacterso = countforcharacterso+1.0;    
                
            }  
             
            if(data.contains("p"))
            
            {
                
            countforcharactersp = countforcharactersp+1.0;    
                
            }  
             
            if(data.contains("q"))
            
            {
                
            countforcharactersq = countforcharactersq+1.0;    
                
            }  
             
            if(data.contains("r"))
            
            {
                
            countforcharactersr = countforcharactersr+1.0;    
                
            }  
             
            if(data.contains("s"))
            
            {
                
            countforcharacterss = countforcharacterss+1.0;    
                
            }  
             
            if(data.contains("t"))
            
            {
                
            countforcharacterst = countforcharacterst+1.0;    
                
            }  
             
            if(data.contains("u"))
            
            {
                
            countforcharactersu = countforcharactersu+1.0;    
                
            }    
             
            if(data.contains("v"))
            
            {
                
            countforcharactersv = countforcharactersv+1.0;    
                
            }   
            
            if(data.contains("w"))
            
            {
                
            countforcharactersw = countforcharactersw+1.0;    
                
            }
            
            if(data.contains("x"))
            
            {
                
            countforcharactersx = countforcharactersx+1.0;    
                
            }
             
            if(data.contains("y"))
            
            {
                
            countforcharactersy = countforcharactersy+1.0;    
                
            }
             
            if(data.contains("z"))
            
            {
                
            countforcharactersz = countforcharactersz+1.0;    
                
            } 
           
            if(data.contains("."))
            
            {
                
            countforcharactersdot = countforcharactersdot+1.0;    
                
            }   
            
            if(data.contains(","))
            
            {
                
            countforcharacterscomma = countforcharacterscomma+1.0;    
                
            }  
             
            if(data.contains(" "))
            
            {
                
            countforcharactersvacuum = countforcharactersvacuum+1.0;    
                
            }   
                
            } 
            
            System.out.println("\nThe number of characters a is = " + countforcharactersa );
            System.out.println("\nThe number of characters b is = " + countforcharactersb );
            System.out.println("\nThe number of characters c is = " + countforcharactersc );
            System.out.println("\nThe number of characters d is = " + countforcharactersd );
            System.out.println("\nThe number of characters e is = " + countforcharacterse );
            System.out.println("\nThe number of characters f is = " + countforcharactersf );
            System.out.println("\nThe number of characters g is = " + countforcharactersg );
            System.out.println("\nThe number of characters h is = " + countforcharactersh );
            System.out.println("\nThe number of characters i is = " + countforcharactersi );
            System.out.println("\nThe number of characters j is = " + countforcharactersj );
            System.out.println("\nThe number of characters k is = " + countforcharactersk );
            System.out.println("\nThe number of characters l is = " + countforcharactersl );
            System.out.println("\nThe number of characters m is = " + countforcharactersm );
            System.out.println("\nThe number of characters n is = " + countforcharactersn );
            System.out.println("\nThe number of characters o is = " + countforcharacterso );
            System.out.println("\nThe number of characters p is = " + countforcharactersp );
            System.out.println("\nThe number of characters q is = " + countforcharactersq );
            System.out.println("\nThe number of characters r is = " + countforcharactersr );
            System.out.println("\nThe number of characters s is = " + countforcharacterss );
            System.out.println("\nThe number of characters t is = " + countforcharacterst );
            System.out.println("\nThe number of characters u is = " + countforcharactersu );
            System.out.println("\nThe number of characters v is = " + countforcharactersv );
            System.out.println("\nThe number of characters w is = " + countforcharactersw );
            System.out.println("\nThe number of characters x is = " + countforcharactersx );
            System.out.println("\nThe number of characters y is = " + countforcharactersy );
            System.out.println("\nThe number of characters z is = " + countforcharactersz );
            System.out.println("\nThe number of characters . is = " + countforcharactersdot );
            System.out.println("\nThe number of characters , is = " + countforcharacterscomma );
            System.out.println("\nThe number of characters vacuum is = " + countforcharactersvacuum );
            System.out.println("\nThe sum of all the characters is = " + (countforcharactersa+countforcharactersb+countforcharactersc+countforcharactersd+countforcharacterse+countforcharactersf+countforcharactersg+countforcharactersh
                                                                       + countforcharactersi+countforcharactersj+countforcharactersk+countforcharactersl+countforcharactersm+countforcharactersn+countforcharacterso+countforcharactersp
                                                                       + countforcharactersq+countforcharactersr+countforcharacterss+countforcharacterst+countforcharactersu+countforcharactersv+countforcharactersw+countforcharactersx
                                                                       + countforcharactersy+countforcharactersz+countforcharactersdot+countforcharacterscomma+countforcharactersvacuum));
                
            }

            private static void estimatetheprobabilitydistribution() 
    
            {
        
            double pa = 4782.0/94693.0;  
            double pb = 2689.0/94693.0;
            double pc = 374.0/94693.0;
            double pd = 4186.0/94693.0;
            double pe = 4850.0/94693.0;
            double pf = 2986.0/94693.0;
            double pg = 3934.0/94693.0;
            double ph = 4117.0/94693.0;
            double pi = 4279.0/94693.0;
            double pj = 2767.0/94693.0;  
            double pk = 4083.0/94693.0;
            double pl = 4076.0/94693.0;
            double pm = 3731.0/94693.0;
            double pn = 4495.0/94693.0;
            double po = 4288.0/94693.0;
            double pp = 3191.0/94693.0;
            double pq = 10.0/94693.0;  
            double pr = 4607.0/94693.0;
            double ps = 4419.0/94693.0;
            double pt = 4564.0/94693.0;
            double pu = 3412.0/94693.0;
            double pv = 3682.0/94693.0;
            double pw = 81.0/94693.0;
            double px = 36.0/94693.0;  
            double py = 2679.0/94693.0;
            double pz = 30.0/94693.0;
            double pdot = 4445.0/94693.0;
            double pcomma = 2867.0/94693.0;
            double pvacuum = 5033.0/94693.0;
            double sumprobability = pa+pb+pc+pd+pe+pf+pg+ph+pi+pg+pk+pl+pm+pn+po+pp+pq+pr+ps+pt+pu+pv+pw+px+py+pz+pdot+pcomma+pvacuum;
                
            System.out.println("\nP(a) = 4782.0/94693.0 = " + pa );
            System.out.println("\nP(b) = 2689.0/94693.0 = " + pb );
            System.out.println("\nP(c) = 374.0/94693.0 = " + pc );
            System.out.println("\nP(d) = 4186.0/94693.0 = " + pd );
            System.out.println("\nP(e) = 4850.0/94693.0 = " + pe );
            System.out.println("\nP(f) = 2986.0/94693.0 = " + pf );
            System.out.println("\nP(g) = 3934.0/94693.0 = " + pg );
            System.out.println("\nP(h) = 4117.0/94693.0 = " + ph );
            System.out.println("\nP(i) = 4279.0/94693.0 = " + pi );
            System.out.println("\nP(j) = 2767.0/94693.0 = " + pj );
            System.out.println("\nP(k) = 4083.0/94693.0 = " + pk );
            System.out.println("\nP(l) = 4076.0/94693.0 = " + pl );
            System.out.println("\nP(m) = 3731.0/94693.0 = " + pm );
            System.out.println("\nP(n) = 4495.0/94693.0 = " + pn );
            System.out.println("\nP(o) = 4288.0/94693.0 = " + po );
            System.out.println("\nP(p) = 3191.0/94693.0 = " + pp );
            System.out.println("\nP(q) = 10.0/94693.0 = " + pq );
            System.out.println("\nP(r) = 4607.0/94693.0 = " + pr );
            System.out.println("\nP(s) = 4419.0/94693.0 = " + ps );
            System.out.println("\nP(t) = 4564.0/94693.0 = " + pt );
            System.out.println("\nP(u) = 3412.0/94693.0 = " + pu );
            System.out.println("\nP(v) = 3682.0/94693.0 = " + pv );
            System.out.println("\nP(w) = 81.0/94693.0 = " + pw );
            System.out.println("\nP(x) = 36.0/94693.0 = " + px );
            System.out.println("\nP(y) = 2679.0/94693.0 = " + py );
            System.out.println("\nP(z) = 30.0/94693.0 = " + pz );
            System.out.println("\nP(.) = 4445.0/94693.0 = " + pdot );
            System.out.println("\nP(,) = 2867.0/94693.0 = " + pcomma );
            System.out.println("\nP(vacuum) = 5033.0/94693.0 = " + pvacuum );
            System.out.println("\nThe sum of the probability is = " + sumprobability );
            
            }

            private static void calculatetheentropyofthedistribution() 
    
            {
             
            double pa = 4782.0/94693.0;  
            double pb = 2689.0/94693.0;
            double pc = 374.0/94693.0;
            double pd = 4186.0/94693.0;
            double pe = 4850.0/94693.0;
            double pf = 2986.0/94693.0;
            double pg = 3934.0/94693.0;
            double ph = 4117.0/94693.0;
            double pi = 4279.0/94693.0;
            double pj = 2767.0/94693.0;  
            double pk = 4083.0/94693.0;
            double pl = 4076.0/94693.0;
            double pm = 3731.0/94693.0;
            double pn = 4495.0/94693.0;
            double po = 4288.0/94693.0;
            double pp = 3191.0/94693.0;
            double pq = 10.0/94693.0;  
            double pr = 4607.0/94693.0;
            double ps = 4419.0/94693.0;
            double pt = 4564.0/94693.0;
            double pu = 3412.0/94693.0;
            double pv = 3682.0/94693.0;
            double pw = 81.0/94693.0;
            double px = 36.0/94693.0;  
            double py = 2679.0/94693.0;
            double pz = 30.0/94693.0;
            double pdot = 4445.0/94693.0;
            double pcomma = 2867.0/94693.0;
            double pvacuum = 5033.0/94693.0; 
            
            double entropypa = pa*(Math.log(1/pa));
            double entropypb = pb*(Math.log(1/pb));
            double entropypc = pc*(Math.log(1/pc));
            double entropypd = pd*(Math.log(1/pd));
            double entropype = pe*(Math.log(1/pe));
            double entropypf = pf*(Math.log(1/pf));
            double entropypg = pg*(Math.log(1/pg));
            double entropyph = ph*(Math.log(1/ph));
            double entropypi = pi*(Math.log(1/pi));
            double entropypj = pj*(Math.log(1/pj));
            double entropypk = pk*(Math.log(1/pk));
            double entropypl = pl*(Math.log(1/pl));
            double entropypm = pm*(Math.log(1/pm));
            double entropypn = pn*(Math.log(1/pn));
            double entropypo = po*(Math.log(1/po));
            double entropypp = pp*(Math.log(1/pp));
            double entropypq = pq*(Math.log(1/pq));
            double entropypr = pr*(Math.log(1/pr));
            double entropyps = ps*(Math.log(1/ps));
            double entropypt = pt*(Math.log(1/pt));
            double entropypu = pu*(Math.log(1/pu));
            double entropypv = pv*(Math.log(1/pv));
            double entropypw = pw*(Math.log(1/pw));
            double entropypx = px*(Math.log(1/px));
            double entropypy = py*(Math.log(1/py));
            double entropypz = pz*(Math.log(1/pz));
            double entropypdot = pdot*(Math.log(1/pdot));
            double entropypcomma = pcomma*(Math.log(1/pcomma));
            double entropypvacuum = pvacuum*(Math.log(1/pvacuum));
            double sumentropy = entropypa+entropypb+entropypc+entropypd+entropype+entropypf+entropypg+entropyph
                                +entropypi+entropypj+entropypk+entropypl+entropypm+entropypn+entropypo+entropypp
                                +entropypq+entropypr+entropyps+entropypt+entropypu+entropypv+entropypw+entropypx
                                +entropypy+entropypz+entropypdot+entropypcomma+entropypvacuum;
            
            System.out.println("\nP(a)*log(1/P(a)) = " + entropypa );
            System.out.println("\nP(b)*log(1/P(b)) = " + entropypb );
            System.out.println("\nP(c)*log(1/P(c)) = " + entropypc );
            System.out.println("\nP(d)*log(1/P(d)) = " + entropypd ); 
            System.out.println("\nP(e)*log(1/P(e)) = " + entropype ); 
            System.out.println("\nP(f)*log(1/P(f)) = " + entropypf );
            System.out.println("\nP(g)*log(1/P(g)) = " + entropypg );
            System.out.println("\nP(h)*log(1/P(h)) = " + entropyph );
            System.out.println("\nP(i)*log(1/P(i)) = " + entropypi );
            System.out.println("\nP(j)*log(1/P(j)) = " + entropypj );
            System.out.println("\nP(k)*log(1/P(k)) = " + entropypk ); 
            System.out.println("\nP(l)*log(1/P(l)) = " + entropypl ); 
            System.out.println("\nP(m)*log(1/P(m)) = " + entropypm );
            System.out.println("\nP(n)*log(1/P(n)) = " + entropypn );
            System.out.println("\nP(o)*log(1/P(o)) = " + entropypo );
            System.out.println("\nP(p)*log(1/P(p)) = " + entropypp );
            System.out.println("\nP(q)*log(1/P(q)) = " + entropypq );
            System.out.println("\nP(r)*log(1/P(r)) = " + entropypr ); 
            System.out.println("\nP(s)*log(1/P(s)) = " + entropyps ); 
            System.out.println("\nP(t)*log(1/P(t)) = " + entropypt );
            System.out.println("\nP(u)*log(1/P(u)) = " + entropypu );
            System.out.println("\nP(v)*log(1/P(v)) = " + entropypv );
            System.out.println("\nP(w)*log(1/P(w)) = " + entropypw );
            System.out.println("\nP(x)*log(1/P(x)) = " + entropypx );
            System.out.println("\nP(y)*log(1/P(y)) = " + entropypy ); 
            System.out.println("\nP(z)*log(1/P(z)) = " + entropypz ); 
            System.out.println("\nP(dot)*log(1/P(dot)) = " + entropypdot );
            System.out.println("\nP(comma)*log(1/P(comma)) = " + entropypcomma );
            System.out.println("\nP(vacuum)*log(1/P(vacuum)) = " + entropypvacuum );
            System.out.println("\nThe sum of the H(s) is = " + sumentropy );
       
            }

            private static void readoffile1() 
                    
            {
                
            if(dataoffrenchfile.isEmpty())    
             
            {    
                
            try    
        
            {

            File file = new File("Le-bonhomme-de-neige-by-Nesbo_-Jo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+'–’:©«»—”“/?…!();&-]" , " ").replace("]" , " ").replace("[", " ").replaceAll("Ø" , "O").replaceAll("[ÌÍÎÏ]" , "I").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("Ç" , "C").replaceAll("ç" , "c").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[ìíîï]", "i").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u").replaceAll("œ" , "oe"); 
            
            readLine = readLine.toLowerCase();
          
            System.out.println(readLine);
            
            dataoffrenchfile.add(readLine);
   
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");
        
            }
            
            }

            private static void calculationofcharacters1() 
    
            {
                
            double countforcharactersa = 0.0;    
            double countforcharactersb = 0.0;  
            double countforcharactersc = 0.0;
            double countforcharactersd = 0.0;  
            double countforcharacterse = 0.0;  
            double countforcharactersf = 0.0;  
            double countforcharactersg = 0.0;  
            double countforcharactersh = 0.0;  
            double countforcharactersi = 0.0;  
            double countforcharactersj = 0.0;  
            double countforcharactersk = 0.0;  
            double countforcharactersl = 0.0;  
            double countforcharactersm = 0.0;  
            double countforcharactersn = 0.0;  
            double countforcharacterso = 0.0; 
            double countforcharactersp = 0.0;  
            double countforcharactersq = 0.0;  
            double countforcharactersr = 0.0;  
            double countforcharacterss = 0.0;  
            double countforcharacterst = 0.0;  
            double countforcharactersu = 0.0;
            double countforcharactersv = 0.0;  
            double countforcharactersw = 0.0;  
            double countforcharactersx = 0.0;  
            double countforcharactersy = 0.0;  
            double countforcharactersz = 0.0;  
            double countforcharactersdot = 0.0;    
            double countforcharacterscomma = 0.0;  
            double countforcharactersvacuum = 0.0; 
            
            for(String data : dataoffrenchfile)
            
            {
                
            if(data.contains("a"))
            
            {
                
            countforcharactersa = countforcharactersa+1.0;    
                
            }   
            
            if(data.contains("b"))
            
            {
                
            countforcharactersb = countforcharactersb+1.0;    
                
            }   
            
            if(data.contains("c"))
            
            {
                
            countforcharactersc = countforcharactersc+1.0;    
                
            }   
            
            if(data.contains("d"))
            
            {
                
            countforcharactersd = countforcharactersd+1.0;    
                
            }   
            
            if(data.contains("e"))
            
            {
                
            countforcharacterse = countforcharacterse+1.0;    
                
            }  
            
            if(data.contains("f"))
            
            {
                
            countforcharactersf = countforcharactersf+1.0;    
                
            }  
            
            if(data.contains("g"))
            
            {
                
            countforcharactersg = countforcharactersg+1.0;    
                
            }  
            
            if(data.contains("h"))
            
            {
                
            countforcharactersh = countforcharactersh+1.0;    
                
            }  
             
            if(data.contains("i"))
            
            {
                
            countforcharactersi = countforcharactersi+1.0;    
                
            }  
             
            if(data.contains("j"))
            
            {
                
            countforcharactersj = countforcharactersj+1.0;    
                
            }  
             
            if(data.contains("k"))
            
            {
                
            countforcharactersk = countforcharactersk+1.0;    
                
            }  
             
            if(data.contains("l"))
            
            {
                
            countforcharactersl = countforcharactersl+1.0;    
                
            }  
             
            if(data.contains("m"))
            
            {
                
            countforcharactersm = countforcharactersm+1.0;    
                
            }  
             
            if(data.contains("n"))
            
            {
                
            countforcharactersn = countforcharactersn+1.0;    
                
            }  
             
            if(data.contains("o"))
            
            {
                
            countforcharacterso = countforcharacterso+1.0;    
                
            }  
             
            if(data.contains("p"))
            
            {
                
            countforcharactersp = countforcharactersp+1.0;    
                
            }  
             
            if(data.contains("q"))
            
            {
                
            countforcharactersq = countforcharactersq+1.0;    
                
            }  
             
            if(data.contains("r"))
            
            {
                
            countforcharactersr = countforcharactersr+1.0;    
                
            }  
             
            if(data.contains("s"))
            
            {
                
            countforcharacterss = countforcharacterss+1.0;    
                
            }  
             
            if(data.contains("t"))
            
            {
                
            countforcharacterst = countforcharacterst+1.0;    
                
            }  
             
            if(data.contains("u"))
            
            {
                
            countforcharactersu = countforcharactersu+1.0;    
                
            }    
             
            if(data.contains("v"))
            
            {
                
            countforcharactersv = countforcharactersv+1.0;    
                
            }   
            
            if(data.contains("w"))
            
            {
                
            countforcharactersw = countforcharactersw+1.0;    
                
            }
            
            if(data.contains("x"))
            
            {
                
            countforcharactersx = countforcharactersx+1.0;    
                
            }
             
            if(data.contains("y"))
            
            {
                
            countforcharactersy = countforcharactersy+1.0;    
                
            }
             
            if(data.contains("z"))
            
            {
                
            countforcharactersz = countforcharactersz+1.0;    
                
            } 
           
            if(data.contains("."))
            
            {
                
            countforcharactersdot = countforcharactersdot+1.0;    
                
            }   
            
            if(data.contains(","))
            
            {
                
            countforcharacterscomma = countforcharacterscomma+1.0;    
                
            }  
             
            if(data.contains(" "))
            
            {
                
            countforcharactersvacuum = countforcharactersvacuum+1.0;    
                
            }   
                
            } 
            
            System.out.println("\nThe number of characters a is = " + countforcharactersa );
            System.out.println("\nThe number of characters b is = " + countforcharactersb );
            System.out.println("\nThe number of characters c is = " + countforcharactersc );
            System.out.println("\nThe number of characters d is = " + countforcharactersd );
            System.out.println("\nThe number of characters e is = " + countforcharacterse );
            System.out.println("\nThe number of characters f is = " + countforcharactersf );
            System.out.println("\nThe number of characters g is = " + countforcharactersg );
            System.out.println("\nThe number of characters h is = " + countforcharactersh );
            System.out.println("\nThe number of characters i is = " + countforcharactersi );
            System.out.println("\nThe number of characters j is = " + countforcharactersj );
            System.out.println("\nThe number of characters k is = " + countforcharactersk );
            System.out.println("\nThe number of characters l is = " + countforcharactersl );
            System.out.println("\nThe number of characters m is = " + countforcharactersm );
            System.out.println("\nThe number of characters n is = " + countforcharactersn );
            System.out.println("\nThe number of characters o is = " + countforcharacterso );
            System.out.println("\nThe number of characters p is = " + countforcharactersp );
            System.out.println("\nThe number of characters q is = " + countforcharactersq );
            System.out.println("\nThe number of characters r is = " + countforcharactersr );
            System.out.println("\nThe number of characters s is = " + countforcharacterss );
            System.out.println("\nThe number of characters t is = " + countforcharacterst );
            System.out.println("\nThe number of characters u is = " + countforcharactersu );
            System.out.println("\nThe number of characters v is = " + countforcharactersv );
            System.out.println("\nThe number of characters w is = " + countforcharactersw );
            System.out.println("\nThe number of characters x is = " + countforcharactersx );
            System.out.println("\nThe number of characters y is = " + countforcharactersy );
            System.out.println("\nThe number of characters z is = " + countforcharactersz );
            System.out.println("\nThe number of characters . is = " + countforcharactersdot );
            System.out.println("\nThe number of characters , is = " + countforcharacterscomma );
            System.out.println("\nThe number of characters vacuum is = " + countforcharactersvacuum );
            System.out.println("\nThe sum of all the characters is = " + (countforcharactersa+countforcharactersb+countforcharactersc+countforcharactersd+countforcharacterse+countforcharactersf+countforcharactersg+countforcharactersh
                                                                       + countforcharactersi+countforcharactersj+countforcharactersk+countforcharactersl+countforcharactersm+countforcharactersn+countforcharacterso+countforcharactersp
                                                                       + countforcharactersq+countforcharactersr+countforcharacterss+countforcharacterst+countforcharactersu+countforcharactersv+countforcharactersw+countforcharactersx
                                                                       + countforcharactersy+countforcharactersz+countforcharactersdot+countforcharacterscomma+countforcharactersvacuum));
                
            }

            private static void estimatetheprobabilitydistribution1() 
    
            {
                
            double pa = 4869.0/100811.0;  
            double pb = 2578.0/100811.0;
            double pc = 4129.0/100811.0;
            double pd = 4066.0/100811.0;
            double pe = 5004.0/100811.0;
            double pf = 2424.0/100811.0;
            double pg = 2556.0/100811.0;
            double ph = 3209.0/100811.0;
            double pi = 4807.0/100811.0;
            double pj = 1949.0/100811.0;  
            double pk = 994.0/100811.0;
            double pl = 4456.0/100811.0;
            double pm = 3829.0/100811.0;
            double pn = 4606.0/100811.0;
            double po = 4681.0/100811.0;
            double pp = 3961.0/100811.0;
            double pq = 3026.0/100811.0;
            double pr = 4733.0/100811.0;
            double ps = 4654.0/100811.0;  
            double pt = 4724.0/100811.0;
            double pu = 4645.0/100811.0;
            double pv = 3388.0/100811.0;
            double pw = 82.0/100811.0;
            double px = 1605.0/100811.0;
            double py = 2214.0/100811.0;
            double pz = 666.0/100811.0;
            double pdot = 4532.0/100811.0;
            double pcomma = 3239.0/100811.0;
            double pvacuum = 5185.0/100811.0;
            double sumprobability = pa+pb+pc+pd+pe+pf+pg+ph+pi+pj+pk+pl+pm+pn+po+pp+pq+pr+ps+pt+pu+pv+pw+px+py+pz+pdot+pcomma+pvacuum;
                
            System.out.println("\nP(a) = 4869.0/100811.0 = " + pa );
            System.out.println("\nP(b) = 2578.0/100811.0 = " + pb );
            System.out.println("\nP(c) = 4129.0/100811.0 = " + pc );
            System.out.println("\nP(d) = 4066.0/100811.0 = " + pd );
            System.out.println("\nP(e) = 5004.0/100811.0 = " + pe );
            System.out.println("\nP(f) = 2424.0/100811.0 = " + pf );
            System.out.println("\nP(g) = 2556.0/100811.0 = " + pg );
            System.out.println("\nP(h) = 3209.0/100811.0 = " + ph );
            System.out.println("\nP(i) = 4807.0/100811.0 = " + pi );
            System.out.println("\nP(j) = 1949.0/100811.0 = " + pj );
            System.out.println("\nP(k) = 994.0/100811.0 = " + pk );
            System.out.println("\nP(l) = 4456.0/100811.0 = " + pl );
            System.out.println("\nP(m) = 3829.0/100811.0 = " + pm );
            System.out.println("\nP(n) = 4606.0/100811.0 = " + pn );
            System.out.println("\nP(o) = 4681.0/100811.0 = " + po );
            System.out.println("\nP(p) = 3961.0/100811.0 = " + pp );
            System.out.println("\nP(q) = 3026.0/100811.0 = " + pq );
            System.out.println("\nP(r) = 4733.0/100811.0 = " + pr );
            System.out.println("\nP(s) = 4654.0/100811.0 = " + ps );
            System.out.println("\nP(t) = 4724.0/100811.0 = " + pt );
            System.out.println("\nP(u) = 4645.0/100811.0 = " + pu );
            System.out.println("\nP(v) = 3388.0/100811.0 = " + pv );
            System.out.println("\nP(w) = 82.0/100811.0 = " + pw );
            System.out.println("\nP(x) = 1605.0/100811.0 = " + px );
            System.out.println("\nP(y) = 2214.0/100811.0 = " + py );
            System.out.println("\nP(z) = 666.0/100811.0 = " + pz );
            System.out.println("\nP(.) = 4532.0/100811.0 = " + pdot );
            System.out.println("\nP(,) = 3239.0/100811.0 = " + pcomma );
            System.out.println("\nP(vacuum) = 5185.0/100811.0 = " + pvacuum );
            System.out.println("\nThe sum of the probability is = " + sumprobability );
        
            }

            private static void calculatetheentropyofthedistribution1() 
    
            {
                
            double pa = 4869.0/100811.0;  
            double pb = 2578.0/100811.0;
            double pc = 4129.0/100811.0;
            double pd = 4066.0/100811.0;
            double pe = 5004.0/100811.0;
            double pf = 2424.0/100811.0;
            double pg = 2556.0/100811.0;
            double ph = 3209.0/100811.0;
            double pi = 4807.0/100811.0;
            double pj = 1949.0/100811.0;  
            double pk = 994.0/100811.0;
            double pl = 4456.0/100811.0;
            double pm = 3829.0/100811.0;
            double pn = 4606.0/100811.0;
            double po = 4681.0/100811.0;
            double pp = 3961.0/100811.0;
            double pq = 3026.0/100811.0;
            double pr = 4733.0/100811.0;
            double ps = 4654.0/100811.0;  
            double pt = 4724.0/100811.0;
            double pu = 4645.0/100811.0;
            double pv = 3388.0/100811.0;
            double pw = 82.0/100811.0;
            double px = 1605.0/100811.0;
            double py = 2214.0/100811.0;
            double pz = 666.0/100811.0;
            double pdot = 4532.0/100811.0;
            double pcomma = 3239.0/100811.0;
            double pvacuum = 5185.0/100811.0;
            double sumprobability = pa+pb+pc+pd+pe+pf+pg+ph+pi+pj+pk+pl+pm+pn+po+pp+pq+pr+ps+pt+pu+pv+pw+px+py+pz+pdot+pcomma+pvacuum;
            
            double entropypa = pa*(Math.log(1/pa));
            double entropypb = pb*(Math.log(1/pb));
            double entropypc = pc*(Math.log(1/pc));
            double entropypd = pd*(Math.log(1/pd));
            double entropype = pe*(Math.log(1/pe));
            double entropypf = pf*(Math.log(1/pf));
            double entropypg = pg*(Math.log(1/pg));
            double entropyph = ph*(Math.log(1/ph));
            double entropypi = pi*(Math.log(1/pi));
            double entropypj = pj*(Math.log(1/pj));
            double entropypk = pk*(Math.log(1/pk));
            double entropypl = pl*(Math.log(1/pl));
            double entropypm = pm*(Math.log(1/pm));
            double entropypn = pn*(Math.log(1/pn));
            double entropypo = po*(Math.log(1/po));
            double entropypp = pp*(Math.log(1/pp));
            double entropypq = pq*(Math.log(1/pq));
            double entropypr = pr*(Math.log(1/pr));
            double entropyps = ps*(Math.log(1/ps));
            double entropypt = pt*(Math.log(1/pt));
            double entropypu = pu*(Math.log(1/pu));
            double entropypv = pv*(Math.log(1/pv));
            double entropypw = pw*(Math.log(1/pw));
            double entropypx = px*(Math.log(1/px));
            double entropypy = py*(Math.log(1/py));
            double entropypz = pz*(Math.log(1/pz));
            double entropypdot = pdot*(Math.log(1/pdot));
            double entropypcomma = pcomma*(Math.log(1/pcomma));
            double entropypvacuum = pvacuum*(Math.log(1/pvacuum));
            double sumentropy = entropypa+entropypb+entropypc+entropypd+entropype+entropypf+entropypg+entropyph
                                +entropypi+entropypj+entropypk+entropypl+entropypm+entropypn+entropypo+entropypp
                                +entropypq+entropypr+entropyps+entropypt+entropypu+entropypv+entropypw+entropypx
                                +entropypy+entropypz+entropypdot+entropypcomma+entropypvacuum;
            
            System.out.println("\nP(a)*log(1/P(a)) = " + entropypa );
            System.out.println("\nP(b)*log(1/P(b)) = " + entropypb );
            System.out.println("\nP(c)*log(1/P(c)) = " + entropypc );
            System.out.println("\nP(d)*log(1/P(d)) = " + entropypd ); 
            System.out.println("\nP(e)*log(1/P(e)) = " + entropype ); 
            System.out.println("\nP(f)*log(1/P(f)) = " + entropypf );
            System.out.println("\nP(g)*log(1/P(g)) = " + entropypg );
            System.out.println("\nP(h)*log(1/P(h)) = " + entropyph );
            System.out.println("\nP(i)*log(1/P(i)) = " + entropypi );
            System.out.println("\nP(j)*log(1/P(j)) = " + entropypj );
            System.out.println("\nP(k)*log(1/P(k)) = " + entropypk ); 
            System.out.println("\nP(l)*log(1/P(l)) = " + entropypl ); 
            System.out.println("\nP(m)*log(1/P(m)) = " + entropypm );
            System.out.println("\nP(n)*log(1/P(n)) = " + entropypn );
            System.out.println("\nP(o)*log(1/P(o)) = " + entropypo );
            System.out.println("\nP(p)*log(1/P(p)) = " + entropypp );
            System.out.println("\nP(q)*log(1/P(q)) = " + entropypq );
            System.out.println("\nP(r)*log(1/P(r)) = " + entropypr ); 
            System.out.println("\nP(s)*log(1/P(s)) = " + entropyps ); 
            System.out.println("\nP(t)*log(1/P(t)) = " + entropypt );
            System.out.println("\nP(u)*log(1/P(u)) = " + entropypu );
            System.out.println("\nP(v)*log(1/P(v)) = " + entropypv );
            System.out.println("\nP(w)*log(1/P(w)) = " + entropypw );
            System.out.println("\nP(x)*log(1/P(x)) = " + entropypx );
            System.out.println("\nP(y)*log(1/P(y)) = " + entropypy ); 
            System.out.println("\nP(z)*log(1/P(z)) = " + entropypz ); 
            System.out.println("\nP(dot)*log(1/P(dot)) = " + entropypdot );
            System.out.println("\nP(comma)*log(1/P(comma)) = " + entropypcomma );
            System.out.println("\nP(vacuum)*log(1/P(vacuum)) = " + entropypvacuum );
            System.out.println("\nThe sum of the H(s) is = " + sumentropy );  
      
            }

            private static void countthenumberofpairsthatresulted() 
    
            {
                
            double countforcharactersa1 = 0.0;   
            double countforcharactersa2 = 0.0;  
            double countforcharactersa3 = 0.0;  
            double countforcharactersa4 = 0.0; 
            double countforcharactersa5 = 0.0; 
            double countforcharactersa6 = 0.0; 
            double countforcharactersa7 = 0.0; 
            double countforcharactersa8 = 0.0;   
            double countforcharactersa9 = 0.0;  
            double countforcharactersa10 = 0.0;  
            double countforcharactersa11 = 0.0; 
            double countforcharactersa12 = 0.0; 
            double countforcharactersa13 = 0.0; 
            double countforcharactersa14 = 0.0; 
            double countforcharactersa15 = 0.0;   
            double countforcharactersa16 = 0.0;  
            double countforcharactersa17 = 0.0;  
            double countforcharactersa18 = 0.0; 
            double countforcharactersa19 = 0.0; 
            double countforcharactersa20 = 0.0; 
            double countforcharactersa21 = 0.0; 
            double countforcharactersa22 = 0.0;   
            double countforcharactersa23 = 0.0;  
            double countforcharactersa24 = 0.0;  
            double countforcharactersa25 = 0.0; 
            double countforcharactersa26 = 0.0; 
            double countforcharactersa27 = 0.0; 
            double countforcharactersa28 = 0.0; 
            double countforcharactersa29 = 0.0; 
            double countforcharactersb1 = 0.0;   
            double countforcharactersb2 = 0.0;  
            double countforcharactersb3 = 0.0;  
            double countforcharactersb4 = 0.0; 
            double countforcharactersb5 = 0.0; 
            double countforcharactersb6 = 0.0; 
            double countforcharactersb7 = 0.0; 
            double countforcharactersb8 = 0.0;   
            double countforcharactersb9 = 0.0;  
            double countforcharactersb10 = 0.0;  
            double countforcharactersb11 = 0.0; 
            double countforcharactersb12 = 0.0; 
            double countforcharactersb13 = 0.0; 
            double countforcharactersb14 = 0.0; 
            double countforcharactersb15 = 0.0;   
            double countforcharactersb16 = 0.0;  
            double countforcharactersb17 = 0.0;  
            double countforcharactersb18 = 0.0; 
            double countforcharactersb19 = 0.0; 
            double countforcharactersb20 = 0.0; 
            double countforcharactersb21 = 0.0; 
            double countforcharactersb22 = 0.0;   
            double countforcharactersb23 = 0.0;  
            double countforcharactersb24 = 0.0;  
            double countforcharactersb25 = 0.0; 
            double countforcharactersb26 = 0.0; 
            double countforcharactersb27 = 0.0; 
            double countforcharactersb28 = 0.0; 
            double countforcharactersb29 = 0.0; 
            double countforcharactersc1 = 0.0;   
            double countforcharactersc2 = 0.0;  
            double countforcharactersc3 = 0.0;  
            double countforcharactersc4 = 0.0; 
            double countforcharactersc5 = 0.0; 
            double countforcharactersc6 = 0.0; 
            double countforcharactersc7 = 0.0; 
            double countforcharactersc8 = 0.0;   
            double countforcharactersc9 = 0.0;  
            double countforcharactersc10 = 0.0;  
            double countforcharactersc11 = 0.0; 
            double countforcharactersc12 = 0.0; 
            double countforcharactersc13 = 0.0; 
            double countforcharactersc14 = 0.0; 
            double countforcharactersc15 = 0.0;   
            double countforcharactersc16 = 0.0;  
            double countforcharactersc17 = 0.0;  
            double countforcharactersc18 = 0.0; 
            double countforcharactersc19 = 0.0; 
            double countforcharactersc20 = 0.0; 
            double countforcharactersc21 = 0.0; 
            double countforcharactersc22 = 0.0;   
            double countforcharactersc23 = 0.0;  
            double countforcharactersc24 = 0.0;  
            double countforcharactersc25 = 0.0; 
            double countforcharactersc26 = 0.0; 
            double countforcharactersc27 = 0.0; 
            double countforcharactersc28 = 0.0; 
            double countforcharactersc29 = 0.0; 
            double countforcharactersd1 = 0.0;   
            double countforcharactersd2 = 0.0;  
            double countforcharactersd3 = 0.0;  
            double countforcharactersd4 = 0.0; 
            double countforcharactersd5 = 0.0; 
            double countforcharactersd6 = 0.0; 
            double countforcharactersd7 = 0.0; 
            double countforcharactersd8 = 0.0;   
            double countforcharactersd9 = 0.0;  
            double countforcharactersd10 = 0.0;  
            double countforcharactersd11 = 0.0; 
            double countforcharactersd12 = 0.0; 
            double countforcharactersd13 = 0.0; 
            double countforcharactersd14 = 0.0; 
            double countforcharactersd15 = 0.0;   
            double countforcharactersd16 = 0.0;  
            double countforcharactersd17 = 0.0;  
            double countforcharactersd18 = 0.0; 
            double countforcharactersd19 = 0.0; 
            double countforcharactersd20 = 0.0; 
            double countforcharactersd21 = 0.0; 
            double countforcharactersd22 = 0.0;   
            double countforcharactersd23 = 0.0;  
            double countforcharactersd24 = 0.0;  
            double countforcharactersd25 = 0.0; 
            double countforcharactersd26 = 0.0; 
            double countforcharactersd27 = 0.0; 
            double countforcharactersd28 = 0.0; 
            double countforcharactersd29 = 0.0; 
            double countforcharacterse1 = 0.0;   
            double countforcharacterse2 = 0.0;  
            double countforcharacterse3 = 0.0;  
            double countforcharacterse4 = 0.0; 
            double countforcharacterse5 = 0.0; 
            double countforcharacterse6 = 0.0; 
            double countforcharacterse7 = 0.0; 
            double countforcharacterse8 = 0.0;   
            double countforcharacterse9 = 0.0;  
            double countforcharacterse10 = 0.0;  
            double countforcharacterse11 = 0.0; 
            double countforcharacterse12 = 0.0; 
            double countforcharacterse13 = 0.0; 
            double countforcharacterse14 = 0.0; 
            double countforcharacterse15 = 0.0;   
            double countforcharacterse16 = 0.0;  
            double countforcharacterse17 = 0.0;  
            double countforcharacterse18 = 0.0; 
            double countforcharacterse19 = 0.0; 
            double countforcharacterse20 = 0.0; 
            double countforcharacterse21 = 0.0; 
            double countforcharacterse22 = 0.0;   
            double countforcharacterse23 = 0.0;  
            double countforcharacterse24 = 0.0;  
            double countforcharacterse25 = 0.0; 
            double countforcharacterse26 = 0.0; 
            double countforcharacterse27 = 0.0; 
            double countforcharacterse28 = 0.0; 
            double countforcharacterse29 = 0.0; 
            double countforcharactersf1 = 0.0;   
            double countforcharactersf2 = 0.0;  
            double countforcharactersf3 = 0.0;  
            double countforcharactersf4 = 0.0; 
            double countforcharactersf5 = 0.0; 
            double countforcharactersf6 = 0.0; 
            double countforcharactersf7 = 0.0; 
            double countforcharactersf8 = 0.0;   
            double countforcharactersf9 = 0.0;  
            double countforcharactersf10 = 0.0;  
            double countforcharactersf11 = 0.0; 
            double countforcharactersf12 = 0.0; 
            double countforcharactersf13 = 0.0; 
            double countforcharactersf14 = 0.0; 
            double countforcharactersf15 = 0.0;   
            double countforcharactersf16 = 0.0;  
            double countforcharactersf17 = 0.0;  
            double countforcharactersf18 = 0.0; 
            double countforcharactersf19 = 0.0; 
            double countforcharactersf20 = 0.0; 
            double countforcharactersf21 = 0.0; 
            double countforcharactersf22 = 0.0;   
            double countforcharactersf23 = 0.0;  
            double countforcharactersf24 = 0.0;  
            double countforcharactersf25 = 0.0; 
            double countforcharactersf26 = 0.0; 
            double countforcharactersf27 = 0.0; 
            double countforcharactersf28 = 0.0; 
            double countforcharactersf29 = 0.0; 
            double countforcharactersg1 = 0.0;   
            double countforcharactersg2 = 0.0;  
            double countforcharactersg3 = 0.0;  
            double countforcharactersg4 = 0.0; 
            double countforcharactersg5 = 0.0; 
            double countforcharactersg6 = 0.0; 
            double countforcharactersg7 = 0.0; 
            double countforcharactersg8 = 0.0;   
            double countforcharactersg9 = 0.0;  
            double countforcharactersg10 = 0.0;  
            double countforcharactersg11 = 0.0; 
            double countforcharactersg12 = 0.0; 
            double countforcharactersg13 = 0.0; 
            double countforcharactersg14 = 0.0; 
            double countforcharactersg15 = 0.0;   
            double countforcharactersg16 = 0.0;  
            double countforcharactersg17 = 0.0;  
            double countforcharactersg18 = 0.0; 
            double countforcharactersg19 = 0.0; 
            double countforcharactersg20 = 0.0; 
            double countforcharactersg21 = 0.0; 
            double countforcharactersg22 = 0.0;   
            double countforcharactersg23 = 0.0;  
            double countforcharactersg24 = 0.0;  
            double countforcharactersg25 = 0.0; 
            double countforcharactersg26 = 0.0; 
            double countforcharactersg27 = 0.0; 
            double countforcharactersg28 = 0.0; 
            double countforcharactersg29 = 0.0; 
            double countforcharactersh1 = 0.0;   
            double countforcharactersh2 = 0.0;  
            double countforcharactersh3 = 0.0;  
            double countforcharactersh4 = 0.0; 
            double countforcharactersh5 = 0.0; 
            double countforcharactersh6 = 0.0; 
            double countforcharactersh7 = 0.0; 
            double countforcharactersh8 = 0.0;   
            double countforcharactersh9 = 0.0;  
            double countforcharactersh10 = 0.0;  
            double countforcharactersh11 = 0.0; 
            double countforcharactersh12 = 0.0; 
            double countforcharactersh13 = 0.0; 
            double countforcharactersh14 = 0.0; 
            double countforcharactersh15 = 0.0;   
            double countforcharactersh16 = 0.0;  
            double countforcharactersh17 = 0.0;  
            double countforcharactersh18 = 0.0; 
            double countforcharactersh19 = 0.0; 
            double countforcharactersh20 = 0.0; 
            double countforcharactersh21 = 0.0; 
            double countforcharactersh22 = 0.0;   
            double countforcharactersh23 = 0.0;  
            double countforcharactersh24 = 0.0;  
            double countforcharactersh25 = 0.0; 
            double countforcharactersh26 = 0.0; 
            double countforcharactersh27 = 0.0; 
            double countforcharactersh28 = 0.0; 
            double countforcharactersh29 = 0.0; 
            double countforcharactersi1 = 0.0;   
            double countforcharactersi2 = 0.0;  
            double countforcharactersi3 = 0.0;  
            double countforcharactersi4 = 0.0; 
            double countforcharactersi5 = 0.0; 
            double countforcharactersi6 = 0.0; 
            double countforcharactersi7 = 0.0; 
            double countforcharactersi8 = 0.0;   
            double countforcharactersi9 = 0.0;  
            double countforcharactersi10 = 0.0;  
            double countforcharactersi11 = 0.0; 
            double countforcharactersi12 = 0.0; 
            double countforcharactersi13 = 0.0; 
            double countforcharactersi14 = 0.0; 
            double countforcharactersi15 = 0.0;   
            double countforcharactersi16 = 0.0;  
            double countforcharactersi17 = 0.0;  
            double countforcharactersi18 = 0.0; 
            double countforcharactersi19 = 0.0; 
            double countforcharactersi20 = 0.0; 
            double countforcharactersi21 = 0.0; 
            double countforcharactersi22 = 0.0;   
            double countforcharactersi23 = 0.0;  
            double countforcharactersi24 = 0.0;  
            double countforcharactersi25 = 0.0; 
            double countforcharactersi26 = 0.0; 
            double countforcharactersi27 = 0.0; 
            double countforcharactersi28 = 0.0; 
            double countforcharactersi29 = 0.0; 
            double countforcharactersj1 = 0.0;   
            double countforcharactersj2 = 0.0;  
            double countforcharactersj3 = 0.0;  
            double countforcharactersj4 = 0.0; 
            double countforcharactersj5 = 0.0; 
            double countforcharactersj6 = 0.0; 
            double countforcharactersj7 = 0.0; 
            double countforcharactersj8 = 0.0;   
            double countforcharactersj9 = 0.0;  
            double countforcharactersj10 = 0.0;  
            double countforcharactersj11 = 0.0; 
            double countforcharactersj12 = 0.0; 
            double countforcharactersj13 = 0.0; 
            double countforcharactersj14 = 0.0; 
            double countforcharactersj15 = 0.0;   
            double countforcharactersj16 = 0.0;  
            double countforcharactersj17 = 0.0;  
            double countforcharactersj18 = 0.0; 
            double countforcharactersj19 = 0.0; 
            double countforcharactersj20 = 0.0; 
            double countforcharactersj21 = 0.0; 
            double countforcharactersj22 = 0.0;   
            double countforcharactersj23 = 0.0;  
            double countforcharactersj24 = 0.0;  
            double countforcharactersj25 = 0.0; 
            double countforcharactersj26 = 0.0; 
            double countforcharactersj27 = 0.0; 
            double countforcharactersj28 = 0.0; 
            double countforcharactersj29 = 0.0; 
            double countforcharactersk1 = 0.0;   
            double countforcharactersk2 = 0.0;  
            double countforcharactersk3 = 0.0;  
            double countforcharactersk4 = 0.0; 
            double countforcharactersk5 = 0.0; 
            double countforcharactersk6 = 0.0; 
            double countforcharactersk7 = 0.0; 
            double countforcharactersk8 = 0.0;   
            double countforcharactersk9 = 0.0;  
            double countforcharactersk10 = 0.0;  
            double countforcharactersk11 = 0.0; 
            double countforcharactersk12 = 0.0; 
            double countforcharactersk13 = 0.0; 
            double countforcharactersk14 = 0.0; 
            double countforcharactersk15 = 0.0;   
            double countforcharactersk16 = 0.0;  
            double countforcharactersk17 = 0.0;  
            double countforcharactersk18 = 0.0; 
            double countforcharactersk19 = 0.0; 
            double countforcharactersk20 = 0.0; 
            double countforcharactersk21 = 0.0; 
            double countforcharactersk22 = 0.0;   
            double countforcharactersk23 = 0.0;  
            double countforcharactersk24 = 0.0;  
            double countforcharactersk25 = 0.0; 
            double countforcharactersk26 = 0.0; 
            double countforcharactersk27 = 0.0; 
            double countforcharactersk28 = 0.0; 
            double countforcharactersk29 = 0.0; 
            double countforcharactersl1 = 0.0;   
            double countforcharactersl2 = 0.0;  
            double countforcharactersl3 = 0.0;  
            double countforcharactersl4 = 0.0; 
            double countforcharactersl5 = 0.0; 
            double countforcharactersl6 = 0.0; 
            double countforcharactersl7 = 0.0; 
            double countforcharactersl8 = 0.0;   
            double countforcharactersl9 = 0.0;  
            double countforcharactersl10 = 0.0;  
            double countforcharactersl11 = 0.0; 
            double countforcharactersl12 = 0.0; 
            double countforcharactersl13 = 0.0; 
            double countforcharactersl14 = 0.0; 
            double countforcharactersl15 = 0.0;   
            double countforcharactersl16 = 0.0;  
            double countforcharactersl17 = 0.0;  
            double countforcharactersl18 = 0.0; 
            double countforcharactersl19 = 0.0; 
            double countforcharactersl20 = 0.0; 
            double countforcharactersl21 = 0.0; 
            double countforcharactersl22 = 0.0;   
            double countforcharactersl23 = 0.0;  
            double countforcharactersl24 = 0.0;  
            double countforcharactersl25 = 0.0; 
            double countforcharactersl26 = 0.0; 
            double countforcharactersl27 = 0.0; 
            double countforcharactersl28 = 0.0; 
            double countforcharactersl29 = 0.0; 
            double countforcharactersm1 = 0.0;   
            double countforcharactersm2 = 0.0;  
            double countforcharactersm3 = 0.0;  
            double countforcharactersm4 = 0.0; 
            double countforcharactersm5 = 0.0; 
            double countforcharactersm6 = 0.0; 
            double countforcharactersm7 = 0.0; 
            double countforcharactersm8 = 0.0;   
            double countforcharactersm9 = 0.0;  
            double countforcharactersm10 = 0.0;  
            double countforcharactersm11 = 0.0; 
            double countforcharactersm12 = 0.0; 
            double countforcharactersm13 = 0.0; 
            double countforcharactersm14 = 0.0; 
            double countforcharactersm15 = 0.0;   
            double countforcharactersm16 = 0.0;  
            double countforcharactersm17 = 0.0;  
            double countforcharactersm18 = 0.0; 
            double countforcharactersm19 = 0.0; 
            double countforcharactersm20 = 0.0; 
            double countforcharactersm21 = 0.0; 
            double countforcharactersm22 = 0.0;   
            double countforcharactersm23 = 0.0;  
            double countforcharactersm24 = 0.0;  
            double countforcharactersm25 = 0.0; 
            double countforcharactersm26 = 0.0; 
            double countforcharactersm27 = 0.0; 
            double countforcharactersm28 = 0.0; 
            double countforcharactersm29 = 0.0; 
            double countforcharactersn1 = 0.0;   
            double countforcharactersn2 = 0.0;  
            double countforcharactersn3 = 0.0;  
            double countforcharactersn4 = 0.0; 
            double countforcharactersn5 = 0.0; 
            double countforcharactersn6 = 0.0; 
            double countforcharactersn7 = 0.0; 
            double countforcharactersn8 = 0.0;   
            double countforcharactersn9 = 0.0;  
            double countforcharactersn10 = 0.0;  
            double countforcharactersn11 = 0.0; 
            double countforcharactersn12 = 0.0; 
            double countforcharactersn13 = 0.0; 
            double countforcharactersn14 = 0.0; 
            double countforcharactersn15 = 0.0;   
            double countforcharactersn16 = 0.0;  
            double countforcharactersn17 = 0.0;  
            double countforcharactersn18 = 0.0; 
            double countforcharactersn19 = 0.0; 
            double countforcharactersn20 = 0.0; 
            double countforcharactersn21 = 0.0; 
            double countforcharactersn22 = 0.0;   
            double countforcharactersn23 = 0.0;  
            double countforcharactersn24 = 0.0;  
            double countforcharactersn25 = 0.0; 
            double countforcharactersn26 = 0.0; 
            double countforcharactersn27 = 0.0; 
            double countforcharactersn28 = 0.0; 
            double countforcharactersn29 = 0.0; 
            double countforcharacterso1 = 0.0;   
            double countforcharacterso2 = 0.0;  
            double countforcharacterso3 = 0.0;  
            double countforcharacterso4 = 0.0; 
            double countforcharacterso5 = 0.0; 
            double countforcharacterso6 = 0.0; 
            double countforcharacterso7 = 0.0; 
            double countforcharacterso8 = 0.0;   
            double countforcharacterso9 = 0.0;  
            double countforcharacterso10 = 0.0;  
            double countforcharacterso11 = 0.0; 
            double countforcharacterso12 = 0.0; 
            double countforcharacterso13 = 0.0; 
            double countforcharacterso14 = 0.0; 
            double countforcharacterso15 = 0.0;   
            double countforcharacterso16 = 0.0;  
            double countforcharacterso17 = 0.0;  
            double countforcharacterso18 = 0.0; 
            double countforcharacterso19 = 0.0; 
            double countforcharacterso20 = 0.0; 
            double countforcharacterso21 = 0.0; 
            double countforcharacterso22 = 0.0;   
            double countforcharacterso23 = 0.0;  
            double countforcharacterso24 = 0.0;  
            double countforcharacterso25 = 0.0; 
            double countforcharacterso26 = 0.0; 
            double countforcharacterso27 = 0.0; 
            double countforcharacterso28 = 0.0; 
            double countforcharacterso29 = 0.0; 
            double countforcharactersp1 = 0.0;   
            double countforcharactersp2 = 0.0;  
            double countforcharactersp3 = 0.0;  
            double countforcharactersp4 = 0.0; 
            double countforcharactersp5 = 0.0; 
            double countforcharactersp6 = 0.0; 
            double countforcharactersp7 = 0.0; 
            double countforcharactersp8 = 0.0;   
            double countforcharactersp9 = 0.0;  
            double countforcharactersp10 = 0.0;  
            double countforcharactersp11 = 0.0; 
            double countforcharactersp12 = 0.0; 
            double countforcharactersp13 = 0.0; 
            double countforcharactersp14 = 0.0; 
            double countforcharactersp15 = 0.0;   
            double countforcharactersp16 = 0.0;  
            double countforcharactersp17 = 0.0;  
            double countforcharactersp18 = 0.0; 
            double countforcharactersp19 = 0.0; 
            double countforcharactersp20 = 0.0; 
            double countforcharactersp21 = 0.0; 
            double countforcharactersp22 = 0.0;   
            double countforcharactersp23 = 0.0;  
            double countforcharactersp24 = 0.0;  
            double countforcharactersp25 = 0.0; 
            double countforcharactersp26 = 0.0; 
            double countforcharactersp27 = 0.0; 
            double countforcharactersp28 = 0.0; 
            double countforcharactersp29 = 0.0; 
            double countforcharactersq1 = 0.0;   
            double countforcharactersq2 = 0.0;  
            double countforcharactersq3 = 0.0;  
            double countforcharactersq4 = 0.0; 
            double countforcharactersq5 = 0.0; 
            double countforcharactersq6 = 0.0; 
            double countforcharactersq7 = 0.0; 
            double countforcharactersq8 = 0.0;   
            double countforcharactersq9 = 0.0;  
            double countforcharactersq10 = 0.0;  
            double countforcharactersq11 = 0.0; 
            double countforcharactersq12 = 0.0; 
            double countforcharactersq13 = 0.0; 
            double countforcharactersq14 = 0.0; 
            double countforcharactersq15 = 0.0;   
            double countforcharactersq16 = 0.0;  
            double countforcharactersq17 = 0.0;  
            double countforcharactersq18 = 0.0; 
            double countforcharactersq19 = 0.0; 
            double countforcharactersq20 = 0.0; 
            double countforcharactersq21 = 0.0; 
            double countforcharactersq22 = 0.0;   
            double countforcharactersq23 = 0.0;  
            double countforcharactersq24 = 0.0;  
            double countforcharactersq25 = 0.0; 
            double countforcharactersq26 = 0.0; 
            double countforcharactersq27 = 0.0; 
            double countforcharactersq28 = 0.0; 
            double countforcharactersq29 = 0.0; 
            double countforcharactersr1 = 0.0;   
            double countforcharactersr2 = 0.0;  
            double countforcharactersr3 = 0.0;  
            double countforcharactersr4 = 0.0; 
            double countforcharactersr5 = 0.0; 
            double countforcharactersr6 = 0.0; 
            double countforcharactersr7 = 0.0; 
            double countforcharactersr8 = 0.0;   
            double countforcharactersr9 = 0.0;  
            double countforcharactersr10 = 0.0;  
            double countforcharactersr11 = 0.0; 
            double countforcharactersr12 = 0.0; 
            double countforcharactersr13 = 0.0; 
            double countforcharactersr14 = 0.0; 
            double countforcharactersr15 = 0.0;   
            double countforcharactersr16 = 0.0;  
            double countforcharactersr17 = 0.0;  
            double countforcharactersr18 = 0.0; 
            double countforcharactersr19 = 0.0; 
            double countforcharactersr20 = 0.0; 
            double countforcharactersr21 = 0.0; 
            double countforcharactersr22 = 0.0;   
            double countforcharactersr23 = 0.0;  
            double countforcharactersr24 = 0.0;  
            double countforcharactersr25 = 0.0; 
            double countforcharactersr26 = 0.0; 
            double countforcharactersr27 = 0.0; 
            double countforcharactersr28 = 0.0; 
            double countforcharactersr29 = 0.0; 
            double countforcharacterss1 = 0.0;   
            double countforcharacterss2 = 0.0;  
            double countforcharacterss3 = 0.0;  
            double countforcharacterss4 = 0.0; 
            double countforcharacterss5 = 0.0; 
            double countforcharacterss6 = 0.0; 
            double countforcharacterss7 = 0.0; 
            double countforcharacterss8 = 0.0;   
            double countforcharacterss9 = 0.0;  
            double countforcharacterss10 = 0.0;  
            double countforcharacterss11 = 0.0; 
            double countforcharacterss12 = 0.0; 
            double countforcharacterss13 = 0.0; 
            double countforcharacterss14 = 0.0; 
            double countforcharacterss15 = 0.0;   
            double countforcharacterss16 = 0.0;  
            double countforcharacterss17 = 0.0;  
            double countforcharacterss18 = 0.0; 
            double countforcharacterss19 = 0.0; 
            double countforcharacterss20 = 0.0; 
            double countforcharacterss21 = 0.0; 
            double countforcharacterss22 = 0.0;   
            double countforcharacterss23 = 0.0;  
            double countforcharacterss24 = 0.0;  
            double countforcharacterss25 = 0.0; 
            double countforcharacterss26 = 0.0; 
            double countforcharacterss27 = 0.0; 
            double countforcharacterss28 = 0.0; 
            double countforcharacterss29 = 0.0; 
            double countforcharacterst1 = 0.0;   
            double countforcharacterst2 = 0.0;  
            double countforcharacterst3 = 0.0;  
            double countforcharacterst4 = 0.0; 
            double countforcharacterst5 = 0.0; 
            double countforcharacterst6 = 0.0; 
            double countforcharacterst7 = 0.0; 
            double countforcharacterst8 = 0.0;   
            double countforcharacterst9 = 0.0;  
            double countforcharacterst10 = 0.0;  
            double countforcharacterst11 = 0.0; 
            double countforcharacterst12 = 0.0; 
            double countforcharacterst13 = 0.0; 
            double countforcharacterst14 = 0.0; 
            double countforcharacterst15 = 0.0;   
            double countforcharacterst16 = 0.0;  
            double countforcharacterst17 = 0.0;  
            double countforcharacterst18 = 0.0; 
            double countforcharacterst19 = 0.0; 
            double countforcharacterst20 = 0.0; 
            double countforcharacterst21 = 0.0; 
            double countforcharacterst22 = 0.0;   
            double countforcharacterst23 = 0.0;  
            double countforcharacterst24 = 0.0;  
            double countforcharacterst25 = 0.0; 
            double countforcharacterst26 = 0.0; 
            double countforcharacterst27 = 0.0; 
            double countforcharacterst28 = 0.0; 
            double countforcharacterst29 = 0.0; 
            double countforcharactersu1 = 0.0;   
            double countforcharactersu2 = 0.0;  
            double countforcharactersu3 = 0.0;  
            double countforcharactersu4 = 0.0; 
            double countforcharactersu5 = 0.0; 
            double countforcharactersu6 = 0.0; 
            double countforcharactersu7 = 0.0; 
            double countforcharactersu8 = 0.0;   
            double countforcharactersu9 = 0.0;  
            double countforcharactersu10 = 0.0;  
            double countforcharactersu11 = 0.0; 
            double countforcharactersu12 = 0.0; 
            double countforcharactersu13 = 0.0; 
            double countforcharactersu14 = 0.0; 
            double countforcharactersu15 = 0.0;   
            double countforcharactersu16 = 0.0;  
            double countforcharactersu17 = 0.0;  
            double countforcharactersu18 = 0.0; 
            double countforcharactersu19 = 0.0; 
            double countforcharactersu20 = 0.0; 
            double countforcharactersu21 = 0.0; 
            double countforcharactersu22 = 0.0;   
            double countforcharactersu23 = 0.0;  
            double countforcharactersu24 = 0.0;  
            double countforcharactersu25 = 0.0; 
            double countforcharactersu26 = 0.0; 
            double countforcharactersu27 = 0.0; 
            double countforcharactersu28 = 0.0; 
            double countforcharactersu29 = 0.0; 
            double countforcharactersv1 = 0.0;   
            double countforcharactersv2 = 0.0;  
            double countforcharactersv3 = 0.0;  
            double countforcharactersv4 = 0.0; 
            double countforcharactersv5 = 0.0; 
            double countforcharactersv6 = 0.0; 
            double countforcharactersv7 = 0.0; 
            double countforcharactersv8 = 0.0;   
            double countforcharactersv9 = 0.0;  
            double countforcharactersv10 = 0.0;  
            double countforcharactersv11 = 0.0; 
            double countforcharactersv12 = 0.0; 
            double countforcharactersv13 = 0.0; 
            double countforcharactersv14 = 0.0; 
            double countforcharactersv15 = 0.0;   
            double countforcharactersv16 = 0.0;  
            double countforcharactersv17 = 0.0;  
            double countforcharactersv18 = 0.0; 
            double countforcharactersv19 = 0.0; 
            double countforcharactersv20 = 0.0; 
            double countforcharactersv21 = 0.0; 
            double countforcharactersv22 = 0.0;   
            double countforcharactersv23 = 0.0;  
            double countforcharactersv24 = 0.0;  
            double countforcharactersv25 = 0.0; 
            double countforcharactersv26 = 0.0; 
            double countforcharactersv27 = 0.0; 
            double countforcharactersv28 = 0.0; 
            double countforcharactersv29 = 0.0; 
            double countforcharactersw1 = 0.0;   
            double countforcharactersw2 = 0.0;  
            double countforcharactersw3 = 0.0;  
            double countforcharactersw4 = 0.0; 
            double countforcharactersw5 = 0.0; 
            double countforcharactersw6 = 0.0; 
            double countforcharactersw7 = 0.0; 
            double countforcharactersw8 = 0.0;   
            double countforcharactersw9 = 0.0;  
            double countforcharactersw10 = 0.0;  
            double countforcharactersw11 = 0.0; 
            double countforcharactersw12 = 0.0; 
            double countforcharactersw13 = 0.0; 
            double countforcharactersw14 = 0.0; 
            double countforcharactersw15 = 0.0;   
            double countforcharactersw16 = 0.0;  
            double countforcharactersw17 = 0.0;  
            double countforcharactersw18 = 0.0; 
            double countforcharactersw19 = 0.0; 
            double countforcharactersw20 = 0.0; 
            double countforcharactersw21 = 0.0; 
            double countforcharactersw22 = 0.0;   
            double countforcharactersw23 = 0.0;  
            double countforcharactersw24 = 0.0;  
            double countforcharactersw25 = 0.0; 
            double countforcharactersw26 = 0.0; 
            double countforcharactersw27 = 0.0; 
            double countforcharactersw28 = 0.0; 
            double countforcharactersw29 = 0.0; 
            double countforcharactersx1 = 0.0;   
            double countforcharactersx2 = 0.0;  
            double countforcharactersx3 = 0.0;  
            double countforcharactersx4 = 0.0; 
            double countforcharactersx5 = 0.0; 
            double countforcharactersx6 = 0.0; 
            double countforcharactersx7 = 0.0; 
            double countforcharactersx8 = 0.0;   
            double countforcharactersx9 = 0.0;  
            double countforcharactersx10 = 0.0;  
            double countforcharactersx11 = 0.0; 
            double countforcharactersx12 = 0.0; 
            double countforcharactersx13 = 0.0; 
            double countforcharactersx14 = 0.0; 
            double countforcharactersx15 = 0.0;   
            double countforcharactersx16 = 0.0;  
            double countforcharactersx17 = 0.0;  
            double countforcharactersx18 = 0.0; 
            double countforcharactersx19 = 0.0; 
            double countforcharactersx20 = 0.0; 
            double countforcharactersx21 = 0.0; 
            double countforcharactersx22 = 0.0;   
            double countforcharactersx23 = 0.0;  
            double countforcharactersx24 = 0.0;  
            double countforcharactersx25 = 0.0; 
            double countforcharactersx26 = 0.0; 
            double countforcharactersx27 = 0.0; 
            double countforcharactersx28 = 0.0; 
            double countforcharactersx29 = 0.0; 
            double countforcharactersy1 = 0.0;   
            double countforcharactersy2 = 0.0;  
            double countforcharactersy3 = 0.0;  
            double countforcharactersy4 = 0.0; 
            double countforcharactersy5 = 0.0; 
            double countforcharactersy6 = 0.0; 
            double countforcharactersy7 = 0.0; 
            double countforcharactersy8 = 0.0;   
            double countforcharactersy9 = 0.0;  
            double countforcharactersy10 = 0.0;  
            double countforcharactersy11 = 0.0; 
            double countforcharactersy12 = 0.0; 
            double countforcharactersy13 = 0.0; 
            double countforcharactersy14 = 0.0; 
            double countforcharactersy15 = 0.0;   
            double countforcharactersy16 = 0.0;  
            double countforcharactersy17 = 0.0;  
            double countforcharactersy18 = 0.0; 
            double countforcharactersy19 = 0.0; 
            double countforcharactersy20 = 0.0; 
            double countforcharactersy21 = 0.0; 
            double countforcharactersy22 = 0.0;   
            double countforcharactersy23 = 0.0;  
            double countforcharactersy24 = 0.0;  
            double countforcharactersy25 = 0.0; 
            double countforcharactersy26 = 0.0; 
            double countforcharactersy27 = 0.0; 
            double countforcharactersy28 = 0.0; 
            double countforcharactersy29 = 0.0; 
            double countforcharactersz1 = 0.0;   
            double countforcharactersz2 = 0.0;  
            double countforcharactersz3 = 0.0;  
            double countforcharactersz4 = 0.0; 
            double countforcharactersz5 = 0.0; 
            double countforcharactersz6 = 0.0; 
            double countforcharactersz7 = 0.0; 
            double countforcharactersz8 = 0.0;   
            double countforcharactersz9 = 0.0;  
            double countforcharactersz10 = 0.0;  
            double countforcharactersz11 = 0.0; 
            double countforcharactersz12 = 0.0; 
            double countforcharactersz13 = 0.0; 
            double countforcharactersz14 = 0.0; 
            double countforcharactersz15 = 0.0;   
            double countforcharactersz16 = 0.0;  
            double countforcharactersz17 = 0.0;  
            double countforcharactersz18 = 0.0; 
            double countforcharactersz19 = 0.0; 
            double countforcharactersz20 = 0.0; 
            double countforcharactersz21 = 0.0; 
            double countforcharactersz22 = 0.0;   
            double countforcharactersz23 = 0.0;  
            double countforcharactersz24 = 0.0;  
            double countforcharactersz25 = 0.0; 
            double countforcharactersz26 = 0.0; 
            double countforcharactersz27 = 0.0; 
            double countforcharactersz28 = 0.0; 
            double countforcharactersz29 = 0.0; 
            double countforcharactersdot1 = 0.0;   
            double countforcharactersdot2 = 0.0;  
            double countforcharactersdot3 = 0.0;  
            double countforcharactersdot4 = 0.0; 
            double countforcharactersdot5 = 0.0; 
            double countforcharactersdot6 = 0.0; 
            double countforcharactersdot7 = 0.0; 
            double countforcharactersdot8 = 0.0;   
            double countforcharactersdot9 = 0.0;  
            double countforcharactersdot10 = 0.0;  
            double countforcharactersdot11 = 0.0; 
            double countforcharactersdot12 = 0.0; 
            double countforcharactersdot13 = 0.0; 
            double countforcharactersdot14 = 0.0; 
            double countforcharactersdot15 = 0.0;   
            double countforcharactersdot16 = 0.0;  
            double countforcharactersdot17 = 0.0;  
            double countforcharactersdot18 = 0.0; 
            double countforcharactersdot19 = 0.0; 
            double countforcharactersdot20 = 0.0; 
            double countforcharactersdot21 = 0.0; 
            double countforcharactersdot22 = 0.0;   
            double countforcharactersdot23 = 0.0;  
            double countforcharactersdot24 = 0.0;  
            double countforcharactersdot25 = 0.0; 
            double countforcharactersdot26 = 0.0; 
            double countforcharactersdot27 = 0.0; 
            double countforcharactersdot28 = 0.0; 
            double countforcharactersdot29 = 0.0; 
            double countforcharacterscomma1 = 0.0;   
            double countforcharacterscomma2 = 0.0;  
            double countforcharacterscomma3 = 0.0;  
            double countforcharacterscomma4 = 0.0; 
            double countforcharacterscomma5 = 0.0; 
            double countforcharacterscomma6 = 0.0; 
            double countforcharacterscomma7 = 0.0; 
            double countforcharacterscomma8 = 0.0;   
            double countforcharacterscomma9 = 0.0;  
            double countforcharacterscomma10 = 0.0;  
            double countforcharacterscomma11 = 0.0; 
            double countforcharacterscomma12 = 0.0; 
            double countforcharacterscomma13 = 0.0; 
            double countforcharacterscomma14 = 0.0; 
            double countforcharacterscomma15 = 0.0;   
            double countforcharacterscomma16 = 0.0;  
            double countforcharacterscomma17 = 0.0;  
            double countforcharacterscomma18 = 0.0; 
            double countforcharacterscomma19 = 0.0; 
            double countforcharacterscomma20 = 0.0; 
            double countforcharacterscomma21 = 0.0; 
            double countforcharacterscomma22 = 0.0;   
            double countforcharacterscomma23 = 0.0;  
            double countforcharacterscomma24 = 0.0;  
            double countforcharacterscomma25 = 0.0; 
            double countforcharacterscomma26 = 0.0; 
            double countforcharacterscomma27 = 0.0; 
            double countforcharacterscomma28 = 0.0; 
            double countforcharacterscomma29 = 0.0; 
            double countforcharactersvacuum1 = 0.0;   
            double countforcharactersvacuum2 = 0.0;  
            double countforcharactersvacuum3 = 0.0;  
            double countforcharactersvacuum4 = 0.0; 
            double countforcharactersvacuum5 = 0.0; 
            double countforcharactersvacuum6 = 0.0; 
            double countforcharactersvacuum7 = 0.0; 
            double countforcharactersvacuum8 = 0.0;   
            double countforcharactersvacuum9 = 0.0;  
            double countforcharactersvacuum10 = 0.0;  
            double countforcharactersvacuum11 = 0.0; 
            double countforcharactersvacuum12 = 0.0; 
            double countforcharactersvacuum13 = 0.0; 
            double countforcharactersvacuum14 = 0.0; 
            double countforcharactersvacuum15 = 0.0;   
            double countforcharactersvacuum16 = 0.0;  
            double countforcharactersvacuum17 = 0.0;  
            double countforcharactersvacuum18 = 0.0; 
            double countforcharactersvacuum19 = 0.0; 
            double countforcharactersvacuum20 = 0.0; 
            double countforcharactersvacuum21 = 0.0; 
            double countforcharactersvacuum22 = 0.0;   
            double countforcharactersvacuum23 = 0.0;  
            double countforcharactersvacuum24 = 0.0;  
            double countforcharactersvacuum25 = 0.0; 
            double countforcharactersvacuum26 = 0.0; 
            double countforcharactersvacuum27 = 0.0; 
            double countforcharactersvacuum28 = 0.0; 
            double countforcharactersvacuum29 = 0.0; 
            
            for(String data : dataofnorwegianfile)
            
            {
                
            if(data.contains("aa"))
            
            {
                
            countforcharactersa1 = countforcharactersa1+1.0;    
                
            }  
            
            if(data.contains("ab"))
            
            {
                
            countforcharactersa2 = countforcharactersa2+1.0;    
                
            }  
            
            if(data.contains("ac"))
            
            {
                
            countforcharactersa3 = countforcharactersa3+1.0;    
                
            }  
            
            if(data.contains("ad"))
            
            {
                
            countforcharactersa4 = countforcharactersa4+1.0;    
                
            }  
            
            if(data.contains("ae"))
            
            {
                
            countforcharactersa5 = countforcharactersa5+1.0;    
                
            }  
            
            if(data.contains("af"))
            
            {
                
            countforcharactersa6 = countforcharactersa6+1.0;    
                
            }  
            
            if(data.contains("ag"))
            
            {
                
            countforcharactersa7 = countforcharactersa7+1.0;    
                
            }  
            
            if(data.contains("ah"))
            
            {
                
            countforcharactersa8 = countforcharactersa8+1.0;    
                
            }  
            
            if(data.contains("ai"))
            
            {
                
            countforcharactersa9 = countforcharactersa9+1.0;    
                
            }  
            
            if(data.contains("aj"))
            
            {
                
            countforcharactersa10 = countforcharactersa10+1.0;    
                
            }  
            
            if(data.contains("ak"))
            
            {
                
            countforcharactersa11 = countforcharactersa11+1.0;    
                
            }  
            
            if(data.contains("al"))
            
            {
                
            countforcharactersa12 = countforcharactersa12+1.0;    
                
            }  
            
            if(data.contains("am"))
            
            {
                
            countforcharactersa13 = countforcharactersa13+1.0;    
                
            }  
            
            if(data.contains("an"))
            
            {
                
            countforcharactersa14 = countforcharactersa14+1.0;    
                
            }  
             
            if(data.contains("ao"))
            
            {
                
            countforcharactersa15 = countforcharactersa15+1.0;    
                
            }  
            
            if(data.contains("ap"))
            
            {
                
            countforcharactersa16 = countforcharactersa16+1.0;    
                
            }  
            
            if(data.contains("aq"))
            
            {
                
            countforcharactersa17 = countforcharactersa17+1.0;    
                
            }  
            
            if(data.contains("ar"))
            
            {
                
            countforcharactersa18 = countforcharactersa18+1.0;    
                
            }  
            
            if(data.contains("as"))
            
            {
                
            countforcharactersa19 = countforcharactersa19+1.0;    
                
            }  
            
            if(data.contains("at"))
            
            {
                
            countforcharactersa20 = countforcharactersa20+1.0;    
                
            }  
            
            if(data.contains("au"))
            
            {
                
            countforcharactersa21 = countforcharactersa21+1.0;    
                
            }  
            
            if(data.contains("av"))
            
            {
                
            countforcharactersa22 = countforcharactersa22+1.0;    
                
            }  
            
            if(data.contains("aw"))
            
            {
                
            countforcharactersa23 = countforcharactersa23+1.0;    
                
            }  
            
            if(data.contains("ax"))
            
            {
                
            countforcharactersa24 = countforcharactersa24+1.0;    
                
            }  
            
            if(data.contains("ay"))
            
            {
                
            countforcharactersa25 = countforcharactersa25+1.0;    
                
            }  
            
            if(data.contains("az"))
            
            {
                
            countforcharactersa26 = countforcharactersa26+1.0;    
                
            }  
            
            if(data.contains("a."))
            
            {
                
            countforcharactersa27 = countforcharactersa27+1.0;    
                
            }  
            
            if(data.contains("a,"))
            
            {
                
            countforcharactersa28 = countforcharactersa28+1.0;    
                
            }  
            
            if(data.contains("a "))
            
            {
                
            countforcharactersa29 = countforcharactersa29+1.0;    
                
            }  
            
            if(data.contains("ba"))
            
            {
                
            countforcharactersb1 = countforcharactersb1+1.0;    
                
            }  
            
            if(data.contains("bb"))
            
            {
                
            countforcharactersb2 = countforcharactersb2+1.0;    
                
            }  
            
            if(data.contains("bc"))
            
            {
                
            countforcharactersb3 = countforcharactersb3+1.0;    
                
            }  
            
            if(data.contains("bd"))
            
            {
                
            countforcharactersb4 = countforcharactersb4+1.0;    
                
            }  
            
            if(data.contains("be"))
            
            {
                
            countforcharactersb5 = countforcharactersb5+1.0;    
                
            }  
            
            if(data.contains("bf"))
            
            {
                
            countforcharactersb6 = countforcharactersb6+1.0;    
                
            }  
            
            if(data.contains("bg"))
            
            {
                
            countforcharactersb7 = countforcharactersb7+1.0;    
                
            }  
            
            if(data.contains("bh"))
            
            {
                
            countforcharactersb8 = countforcharactersb8+1.0;    
                
            }  
            
            if(data.contains("bi"))
            
            {
                
            countforcharactersb9 = countforcharactersb9+1.0;    
                
            }  
            
            if(data.contains("bj"))
            
            {
                
            countforcharactersb10 = countforcharactersb10+1.0;    
                
            }  
            
            if(data.contains("bk"))
            
            {
                
            countforcharactersb11 = countforcharactersb11+1.0;    
                
            }  
            
            if(data.contains("bl"))
            
            {
                
            countforcharactersb12 = countforcharactersb12+1.0;    
                
            }  
            
            if(data.contains("bm"))
            
            {
                
            countforcharactersb13 = countforcharactersb13+1.0;    
                
            }  
            
            if(data.contains("bn"))
            
            {
                
            countforcharactersb14 = countforcharactersb14+1.0;    
                
            }  
             
            if(data.contains("bo"))
            
            {
                
            countforcharactersb15 = countforcharactersb15+1.0;    
                
            }  
            
            if(data.contains("bp"))
            
            {
                
            countforcharactersb16 = countforcharactersb16+1.0;    
                
            }  
            
            if(data.contains("bq"))
            
            {
                
            countforcharactersb17 = countforcharactersb17+1.0;    
                
            }  
            
            if(data.contains("br"))
            
            {
                
            countforcharactersb18 = countforcharactersb18+1.0;    
                
            }  
            
            if(data.contains("bs"))
            
            {
                
            countforcharactersb19 = countforcharactersb19+1.0;    
                
            }  
            
            if(data.contains("bt"))
            
            {
                
            countforcharactersb20 = countforcharactersb20+1.0;    
                
            }  
            
            if(data.contains("bu"))
            
            {
                
            countforcharactersb21 = countforcharactersb21+1.0;    
                
            }  
            
            if(data.contains("bv"))
            
            {
                
            countforcharactersb22 = countforcharactersb22+1.0;    
                
            }  
            
            if(data.contains("bw"))
            
            {
                
            countforcharactersb23 = countforcharactersb23+1.0;    
                
            }  
            
            if(data.contains("bx"))
            
            {
                
            countforcharactersb24 = countforcharactersb24+1.0;    
                
            }  
            
            if(data.contains("by"))
            
            {
                
            countforcharactersb25 = countforcharactersb25+1.0;    
                
            }  
            
            if(data.contains("bz"))
            
            {
                
            countforcharactersb26 = countforcharactersb26+1.0;    
                
            }  
            
            if(data.contains("b."))
            
            {
                
            countforcharactersb27 = countforcharactersb27+1.0;    
                
            }  
            
            if(data.contains("b,"))
            
            {
                
            countforcharactersb28 = countforcharactersb28+1.0;    
                
            }  
            
            if(data.contains("b "))
            
            {
                
            countforcharactersb29 = countforcharactersb29+1.0;    
                
            }  
            
            if(data.contains("ca"))
            
            {
                
            countforcharactersc1 = countforcharactersc1+1.0;    
                
            }  
            
            if(data.contains("cb"))
            
            {
                
            countforcharactersc2 = countforcharactersc2+1.0;    
                
            }  
            
            if(data.contains("cc"))
            
            {
                
            countforcharactersc3 = countforcharactersc3+1.0;    
                
            }  
            
            if(data.contains("cd"))
            
            {
                
            countforcharactersc4 = countforcharactersc4+1.0;    
                
            }  
            
            if(data.contains("ce"))
            
            {
                
            countforcharactersc5 = countforcharactersc5+1.0;    
                
            }  
            
            if(data.contains("cf"))
            
            {
                
            countforcharactersc6 = countforcharactersc6+1.0;    
                
            }  
            
            if(data.contains("cg"))
            
            {
                
            countforcharactersc7 = countforcharactersc7+1.0;    
                
            }  
            
            if(data.contains("ch"))
            
            {
                
            countforcharactersc8 = countforcharactersc8+1.0;    
                
            }  
            
            if(data.contains("ci"))
            
            {
                
            countforcharactersc9 = countforcharactersc9+1.0;    
                
            }  
            
            if(data.contains("cj"))
            
            {
                
            countforcharactersc10 = countforcharactersc10+1.0;    
                
            }  
            
            if(data.contains("ck"))
            
            {
                
            countforcharactersc11 = countforcharactersc11+1.0;    
                
            }  
            
            if(data.contains("cl"))
            
            {
                
            countforcharactersc12 = countforcharactersc12+1.0;    
                
            }  
            
            if(data.contains("cm"))
            
            {
                
            countforcharactersc13 = countforcharactersc13+1.0;    
                
            }  
            
            if(data.contains("cn"))
            
            {
                
            countforcharactersc14 = countforcharactersc14+1.0;    
                
            }  
             
            if(data.contains("co"))
            
            {
                
            countforcharactersc15 = countforcharactersc15+1.0;    
                
            }  
            
            if(data.contains("cp"))
            
            {
                
            countforcharactersc16 = countforcharactersc16+1.0;    
                
            }  
            
            if(data.contains("cq"))
            
            {
                
            countforcharactersc17 = countforcharactersc17+1.0;    
                
            }  
            
            if(data.contains("cr"))
            
            {
                
            countforcharactersc18 = countforcharactersc18+1.0;    
                
            }  
            
            if(data.contains("cs"))
            
            {
                
            countforcharactersc19 = countforcharactersc19+1.0;    
                
            }  
            
            if(data.contains("ct"))
            
            {
                
            countforcharactersc20 = countforcharactersc20+1.0;    
                
            }  
            
            if(data.contains("cu"))
            
            {
                
            countforcharactersc21 = countforcharactersc21+1.0;    
                
            }  
            
            if(data.contains("cv"))
            
            {
                
            countforcharactersc22 = countforcharactersc22+1.0;    
                
            }  
            
            if(data.contains("cw"))
            
            {
                
            countforcharactersc23 = countforcharactersc23+1.0;    
                
            }  
            
            if(data.contains("cx"))
            
            {
                
            countforcharactersc24 = countforcharactersc24+1.0;    
                
            }  
            
            if(data.contains("cy"))
            
            {
                
            countforcharactersc25 = countforcharactersc25+1.0;    
                
            }  
            
            if(data.contains("cz"))
            
            {
                
            countforcharactersc26 = countforcharactersc26+1.0;    
                
            }  
            
            if(data.contains("c."))
            
            {
                
            countforcharactersc27 = countforcharactersc27+1.0;    
                
            }  
            
            if(data.contains("c,"))
            
            {
                
            countforcharactersc28 = countforcharactersc28+1.0;    
                
            }  
            
            if(data.contains("c "))
            
            {
                
            countforcharactersc29 = countforcharactersc29+1.0;    
                
            } 
            
            if(data.contains("da"))
            
            {
                
            countforcharactersd1 = countforcharactersd1+1.0;    
                
            }  
            
            if(data.contains("db"))
            
            {
                
            countforcharactersd2 = countforcharactersd2+1.0;    
                
            }  
            
            if(data.contains("dc"))
            
            {
                
            countforcharactersd3 = countforcharactersd3+1.0;    
                
            }  
            
            if(data.contains("dd"))
            
            {
                
            countforcharactersd4 = countforcharactersd4+1.0;    
                
            }  
            
            if(data.contains("de"))
            
            {
                
            countforcharactersd5 = countforcharactersd5+1.0;    
                
            }  
            
            if(data.contains("df"))
            
            {
                
            countforcharactersd6 = countforcharactersd6+1.0;    
                
            }  
            
            if(data.contains("dg"))
            
            {
                
            countforcharactersd7 = countforcharactersd7+1.0;    
                
            }  
            
            if(data.contains("dh"))
            
            {
                
            countforcharactersd8 = countforcharactersd8+1.0;    
                
            }  
            
            if(data.contains("di"))
            
            {
                
            countforcharactersd9 = countforcharactersd9+1.0;    
                
            }  
            
            if(data.contains("dj"))
            
            {
                
            countforcharactersd10 = countforcharactersd10+1.0;    
                
            }  
            
            if(data.contains("dk"))
            
            {
                
            countforcharactersd11 = countforcharactersd11+1.0;    
                
            }  
            
            if(data.contains("dl"))
            
            {
                
            countforcharactersd12 = countforcharactersd12+1.0;    
                
            }  
            
            if(data.contains("dm"))
            
            {
                
            countforcharactersd13 = countforcharactersd13+1.0;    
                
            }  
            
            if(data.contains("dn"))
            
            {
                
            countforcharactersd14 = countforcharactersd14+1.0;    
                
            }  
             
            if(data.contains("do"))
            
            {
                
            countforcharactersd15 = countforcharactersd15+1.0;    
                
            }  
            
            if(data.contains("dp"))
            
            {
                
            countforcharactersd16 = countforcharactersd16+1.0;    
                
            }  
            
            if(data.contains("dq"))
            
            {
                
            countforcharactersd17 = countforcharactersd17+1.0;    
                
            }  
            
            if(data.contains("dr"))
            
            {
                
            countforcharactersd18 = countforcharactersd18+1.0;    
                
            }  
            
            if(data.contains("ds"))
            
            {
                
            countforcharactersd19 = countforcharactersd19+1.0;    
                
            }  
            
            if(data.contains("dt"))
            
            {
                
            countforcharactersd20 = countforcharactersd20+1.0;    
                
            }  
            
            if(data.contains("du"))
            
            {
                
            countforcharactersd21 = countforcharactersd21+1.0;    
                
            }  
            
            if(data.contains("dv"))
            
            {
                
            countforcharactersd22 = countforcharactersd22+1.0;    
                
            }  
            
            if(data.contains("dw"))
            
            {
                
            countforcharactersd23 = countforcharactersd23+1.0;    
                
            }  
            
            if(data.contains("dx"))
            
            {
                
            countforcharactersd24 = countforcharactersd24+1.0;    
                
            }  
            
            if(data.contains("dy"))
            
            {
                
            countforcharactersd25 = countforcharactersd25+1.0;    
                
            }  
            
            if(data.contains("dz"))
            
            {
                
            countforcharactersd26 = countforcharactersd26+1.0;    
                
            }  
            
            if(data.contains("d."))
            
            {
                
            countforcharactersd27 = countforcharactersd27+1.0;    
                
            }  
            
            if(data.contains("d,"))
            
            {
                
            countforcharactersd28 = countforcharactersd28+1.0;    
                
            }  
            
            if(data.contains("d "))
            
            {
                
            countforcharactersd29 = countforcharactersd29+1.0;    
                
            }  
            
            if(data.contains("ea"))
            
            {
                
            countforcharacterse1 = countforcharacterse1+1.0;    
                
            }  
            
            if(data.contains("eb"))
            
            {
                
            countforcharacterse2 = countforcharacterse2+1.0;    
                
            }  
            
            if(data.contains("ec"))
            
            {
                
            countforcharacterse3 = countforcharacterse3+1.0;    
                
            }  
            
            if(data.contains("ed"))
            
            {
                
            countforcharacterse4 = countforcharacterse4+1.0;    
                
            }  
            
            if(data.contains("ee"))
            
            {
                
            countforcharacterse5 = countforcharacterse5+1.0;    
                
            }  
            
            if(data.contains("ef"))
            
            {
                
            countforcharacterse6 = countforcharacterse6+1.0;    
                
            }  
            
            if(data.contains("eg"))
            
            {
                
            countforcharacterse7 = countforcharacterse7+1.0;    
                
            }  
            
            if(data.contains("eh"))
            
            {
                
            countforcharacterse8 = countforcharacterse8+1.0;    
                
            }  
            
            if(data.contains("ei"))
            
            {
                
            countforcharacterse9 = countforcharacterse9+1.0;    
                
            }  
            
            if(data.contains("ej"))
            
            {
                
            countforcharacterse10 = countforcharacterse10+1.0;    
                
            }  
            
            if(data.contains("ek"))
            
            {
                
            countforcharacterse11 = countforcharacterse11+1.0;    
                
            }  
            
            if(data.contains("el"))
            
            {
                
            countforcharacterse12 = countforcharacterse12+1.0;    
                
            }  
            
            if(data.contains("em"))
            
            {
                
            countforcharacterse13 = countforcharacterse13+1.0;    
                
            }  
            
            if(data.contains("en"))
            
            {
                
            countforcharacterse14 = countforcharacterse14+1.0;    
                
            }  
             
            if(data.contains("eo"))
            
            {
                
            countforcharacterse15 = countforcharacterse15+1.0;    
                
            }  
            
            if(data.contains("ep"))
            
            {
                
            countforcharacterse16 = countforcharacterse16+1.0;    
                
            }  
            
            if(data.contains("eq"))
            
            {
                
            countforcharacterse17 = countforcharacterse17+1.0;    
                
            }  
            
            if(data.contains("er"))
            
            {
                
            countforcharacterse18 = countforcharacterse18+1.0;    
                
            }  
            
            if(data.contains("es"))
            
            {
                
            countforcharacterse19 = countforcharacterse19+1.0;    
                
            }  
            
            if(data.contains("et"))
            
            {
                
            countforcharacterse20 = countforcharacterse20+1.0;    
                
            }  
            
            if(data.contains("eu"))
            
            {
                
            countforcharacterse21 = countforcharacterse21+1.0;    
                
            }  
            
            if(data.contains("ev"))
            
            {
                
            countforcharacterse22 = countforcharacterse22+1.0;    
                
            }  
            
            if(data.contains("ew"))
            
            {
                
            countforcharacterse23 = countforcharacterse23+1.0;    
                
            }  
            
            if(data.contains("ex"))
            
            {
                
            countforcharacterse24 = countforcharacterse24+1.0;    
                
            }  
            
            if(data.contains("ey"))
            
            {
                
            countforcharacterse25 = countforcharacterse25+1.0;    
                
            }  
            
            if(data.contains("ez"))
            
            {
                
            countforcharacterse26 = countforcharacterse26+1.0;    
                
            }  
            
            if(data.contains("e."))
            
            {
                
            countforcharacterse27 = countforcharacterse27+1.0;    
                
            }  
            
            if(data.contains("e,"))
            
            {
                
            countforcharacterse28 = countforcharacterse28+1.0;    
                
            }  
            
            if(data.contains("e "))
            
            {
                
            countforcharacterse29 = countforcharacterse29+1.0;    
                
            }  
            
            if(data.contains("fa"))
            
            {
                
            countforcharactersf1 = countforcharactersf1+1.0;    
                
            }  
            
            if(data.contains("fb"))
            
            {
                
            countforcharactersf2 = countforcharactersf2+1.0;    
                
            }  
            
            if(data.contains("fc"))
            
            {
                
            countforcharactersf3 = countforcharactersf3+1.0;    
                
            }  
            
            if(data.contains("fd"))
            
            {
                
            countforcharactersf4 = countforcharactersf4+1.0;    
                
            }  
            
            if(data.contains("fe"))
            
            {
                
            countforcharactersf5 = countforcharactersf5+1.0;    
                
            }  
            
            if(data.contains("ff"))
            
            {
                
            countforcharactersf6 = countforcharactersf6+1.0;    
                
            }  
            
            if(data.contains("fg"))
            
            {
                
            countforcharactersf7 = countforcharactersf7+1.0;    
                
            }  
            
            if(data.contains("fh"))
            
            {
                
            countforcharactersf8 = countforcharactersf8+1.0;    
                
            }  
            
            if(data.contains("fi"))
            
            {
                
            countforcharactersf9 = countforcharactersf9+1.0;    
                
            }  
            
            if(data.contains("fj"))
            
            {
                
            countforcharactersf10 = countforcharactersf10+1.0;    
                
            }  
            
            if(data.contains("fk"))
            
            {
                
            countforcharactersf11 = countforcharactersf11+1.0;    
                
            }  
            
            if(data.contains("fl"))
            
            {
                
            countforcharactersf12 = countforcharactersf12+1.0;    
                
            }  
            
            if(data.contains("fm"))
            
            {
                
            countforcharactersf13 = countforcharactersf13+1.0;    
                
            }  
            
            if(data.contains("fn"))
            
            {
                
            countforcharactersf14 = countforcharactersf14+1.0;    
                
            }  
             
            if(data.contains("fo"))
            
            {
                
            countforcharactersf15 = countforcharactersf15+1.0;    
                
            }  
            
            if(data.contains("fp"))
            
            {
                
            countforcharactersf16 = countforcharactersf16+1.0;    
                
            }  
            
            if(data.contains("fq"))
            
            {
                
            countforcharactersf17 = countforcharactersf17+1.0;    
                
            }  
            
            if(data.contains("fr"))
            
            {
                
            countforcharactersf18 = countforcharactersf18+1.0;    
                
            }  
            
            if(data.contains("fs"))
            
            {
                
            countforcharactersf19 = countforcharactersf19+1.0;    
                
            }  
            
            if(data.contains("ft"))
            
            {
                
            countforcharactersf20 = countforcharactersf20+1.0;    
                
            }  
            
            if(data.contains("fu"))
            
            {
                
            countforcharactersf21 = countforcharactersf21+1.0;    
                
            }  
            
            if(data.contains("fv"))
            
            {
                
            countforcharactersf22 = countforcharactersf22+1.0;    
                
            }  
            
            if(data.contains("fw"))
            
            {
                
            countforcharactersf23 = countforcharactersf23+1.0;    
                
            }  
            
            if(data.contains("fx"))
            
            {
                
            countforcharactersf24 = countforcharactersf24+1.0;    
                
            }  
            
            if(data.contains("fy"))
            
            {
                
            countforcharactersf25 = countforcharactersf25+1.0;    
                
            }  
            
            if(data.contains("fz"))
            
            {
                
            countforcharactersf26 = countforcharactersf26+1.0;    
                
            }  
            
            if(data.contains("f."))
            
            {
                
            countforcharactersf27 = countforcharactersf27+1.0;    
                
            }  
            
            if(data.contains("f,"))
            
            {
                
            countforcharactersf28 = countforcharactersf28+1.0;    
                
            }  
            
            if(data.contains("f "))
            
            {
                
            countforcharactersf29 = countforcharactersf29+1.0;    
                
            } 
            
            if(data.contains("ga"))
            
            {
                
            countforcharactersg1 = countforcharactersg1+1.0;    
                
            }  
            
            if(data.contains("gb"))
            
            {
                
            countforcharactersg2 = countforcharactersg2+1.0;    
                
            }  
            
            if(data.contains("gc"))
            
            {
                
            countforcharactersg3 = countforcharactersg3+1.0;    
                
            }  
            
            if(data.contains("gd"))
            
            {
                
            countforcharactersg4 = countforcharactersg4+1.0;    
                
            }  
            
            if(data.contains("ge"))
            
            {
                
            countforcharactersg5 = countforcharactersg5+1.0;    
                
            }  
            
            if(data.contains("gf"))
            
            {
                
            countforcharactersg6 = countforcharactersg6+1.0;    
                
            }  
            
            if(data.contains("gg"))
            
            {
                
            countforcharactersg7 = countforcharactersg7+1.0;    
                
            }  
            
            if(data.contains("gh"))
            
            {
                
            countforcharactersg8 = countforcharactersg8+1.0;    
                
            }  
            
            if(data.contains("gi"))
            
            {
                
            countforcharactersg9 = countforcharactersg9+1.0;    
                
            }  
            
            if(data.contains("gj"))
            
            {
                
            countforcharactersg10 = countforcharactersg10+1.0;    
                
            }  
            
            if(data.contains("gk"))
            
            {
                
            countforcharactersg11 = countforcharactersg11+1.0;    
                
            }  
            
            if(data.contains("gl"))
            
            {
                
            countforcharactersg12 = countforcharactersg12+1.0;    
                
            }  
            
            if(data.contains("gm"))
            
            {
                
            countforcharactersg13 = countforcharactersg13+1.0;    
                
            }  
            
            if(data.contains("gn"))
            
            {
                
            countforcharactersg14 = countforcharactersg14+1.0;    
                
            }  
             
            if(data.contains("go"))
            
            {
                
            countforcharactersg15 = countforcharactersg15+1.0;    
                
            }  
            
            if(data.contains("gp"))
            
            {
                
            countforcharactersg16 = countforcharactersg16+1.0;    
                
            }  
            
            if(data.contains("gq"))
            
            {
                
            countforcharactersg17 = countforcharactersg17+1.0;    
                
            }  
            
            if(data.contains("gr"))
            
            {
                
            countforcharactersg18 = countforcharactersg18+1.0;    
                
            }  
            
            if(data.contains("gs"))
            
            {
                
            countforcharactersg19 = countforcharactersg19+1.0;    
                
            }  
            
            if(data.contains("gt"))
            
            {
                
            countforcharactersg20 = countforcharactersg20+1.0;    
                
            }  
            
            if(data.contains("gu"))
            
            {
                
            countforcharactersg21 = countforcharactersg21+1.0;    
                
            }  
            
            if(data.contains("gv"))
            
            {
                
            countforcharactersg22 = countforcharactersg22+1.0;    
                
            }  
            
            if(data.contains("gw"))
            
            {
                
            countforcharactersg23 = countforcharactersg23+1.0;    
                
            }  
            
            if(data.contains("gx"))
            
            {
                
            countforcharactersg24 = countforcharactersg24+1.0;    
                
            }  
            
            if(data.contains("gy"))
            
            {
                
            countforcharactersg25 = countforcharactersg25+1.0;    
                
            }  
            
            if(data.contains("gz"))
            
            {
                
            countforcharactersg26 = countforcharactersg26+1.0;    
                
            }  
            
            if(data.contains("g."))
            
            {
                
            countforcharactersg27 = countforcharactersg27+1.0;    
                
            }  
            
            if(data.contains("g,"))
            
            {
                
            countforcharactersg28 = countforcharactersg28+1.0;    
                
            }  
            
            if(data.contains("g "))
            
            {
                
            countforcharactersg29 = countforcharactersg29+1.0;    
                
            }  
            
            if(data.contains("ha"))
            
            {
                
            countforcharactersh1 = countforcharactersh1+1.0;    
                
            }  
            
            if(data.contains("hb"))
            
            {
                
            countforcharactersh2 = countforcharactersh2+1.0;    
                
            }  
            
            if(data.contains("hc"))
            
            {
                
            countforcharactersh3 = countforcharactersh3+1.0;    
                
            }  
            
            if(data.contains("hd"))
            
            {
                
            countforcharactersh4 = countforcharactersh4+1.0;    
                
            }  
            
            if(data.contains("he"))
            
            {
                
            countforcharactersh5 = countforcharactersh5+1.0;    
                
            }  
            
            if(data.contains("hf"))
            
            {
                
            countforcharactersh6 = countforcharactersh6+1.0;    
                
            }  
            
            if(data.contains("hg"))
            
            {
                
            countforcharactersh7 = countforcharactersh7+1.0;    
                
            }  
            
            if(data.contains("hh"))
            
            {
                
            countforcharactersh8 = countforcharactersh8+1.0;    
                
            }  
            
            if(data.contains("hi"))
            
            {
                
            countforcharactersh9 = countforcharactersh9+1.0;    
                
            }  
            
            if(data.contains("hj"))
            
            {
                
            countforcharactersh10 = countforcharactersh10+1.0;    
                
            }  
            
            if(data.contains("hk"))
            
            {
                
            countforcharactersh11 = countforcharactersh11+1.0;    
                
            }  
            
            if(data.contains("hl"))
            
            {
                
            countforcharactersh12 = countforcharactersh12+1.0;    
                
            }  
            
            if(data.contains("hm"))
            
            {
                
            countforcharactersh13 = countforcharactersh13+1.0;    
                
            }  
            
            if(data.contains("hn"))
            
            {
                
            countforcharactersh14 = countforcharactersh14+1.0;    
                
            }  
             
            if(data.contains("ho"))
            
            {
                
            countforcharactersh15 = countforcharactersh15+1.0;    
                
            }  
            
            if(data.contains("hp"))
            
            {
                
            countforcharactersh16 = countforcharactersh16+1.0;    
                
            }  
            
            if(data.contains("hq"))
            
            {
                
            countforcharactersh17 = countforcharactersh17+1.0;    
                
            }  
            
            if(data.contains("hr"))
            
            {
                
            countforcharactersh18 = countforcharactersh18+1.0;    
                
            }  
            
            if(data.contains("hs"))
            
            {
                
            countforcharactersh19 = countforcharactersh19+1.0;    
                
            }  
            
            if(data.contains("ht"))
            
            {
                
            countforcharactersh20 = countforcharactersh20+1.0;    
                
            }  
            
            if(data.contains("hu"))
            
            {
                
            countforcharactersh21 = countforcharactersh21+1.0;    
                
            }  
            
            if(data.contains("hv"))
            
            {
                
            countforcharactersh22 = countforcharactersh22+1.0;    
                
            }  
            
            if(data.contains("hw"))
            
            {
                
            countforcharactersh23 = countforcharactersh23+1.0;    
                
            }  
            
            if(data.contains("hx"))
            
            {
                
            countforcharactersh24 = countforcharactersh24+1.0;    
                
            }  
            
            if(data.contains("hy"))
            
            {
                
            countforcharactersh25 = countforcharactersh25+1.0;    
                
            }  
            
            if(data.contains("hz"))
            
            {
                
            countforcharactersh26 = countforcharactersh26+1.0;    
                
            }  
            
            if(data.contains("h."))
            
            {
                
            countforcharactersh27 = countforcharactersh27+1.0;    
                
            }  
            
            if(data.contains("h,"))
            
            {
                
            countforcharactersh28 = countforcharactersh28+1.0;    
                
            }  
            
            if(data.contains("h "))
            
            {
                
            countforcharactersh29 = countforcharactersh29+1.0;    
                
            }  
            
            if(data.contains("ia"))
            
            {
                
            countforcharactersi1 = countforcharactersi1+1.0;    
                
            }  
            
            if(data.contains("ib"))
            
            {
                
            countforcharactersi2 = countforcharactersi2+1.0;    
                
            }  
            
            if(data.contains("ic"))
            
            {
                
            countforcharactersi3 = countforcharactersi3+1.0;    
                
            }  
            
            if(data.contains("id"))
            
            {
                
            countforcharactersi4 = countforcharactersi4+1.0;    
                
            }  
            
            if(data.contains("ie"))
            
            {
                
            countforcharactersi5 = countforcharactersi5+1.0;    
                
            }  
            
            if(data.contains("if"))
            
            {
                
            countforcharactersi6 = countforcharactersi6+1.0;    
                
            }  
            
            if(data.contains("ig"))
            
            {
                
            countforcharactersi7 = countforcharactersi7+1.0;    
                
            }  
            
            if(data.contains("ih"))
            
            {
                
            countforcharactersi8 = countforcharactersi8+1.0;    
                
            }  
            
            if(data.contains("ii"))
            
            {
                
            countforcharactersi9 = countforcharactersi9+1.0;    
                
            }  
            
            if(data.contains("ij"))
            
            {
                
            countforcharactersi10 = countforcharactersi10+1.0;    
                
            }  
            
            if(data.contains("ik"))
            
            {
                
            countforcharactersi11 = countforcharactersi11+1.0;    
                
            }  
            
            if(data.contains("il"))
            
            {
                
            countforcharactersi12 = countforcharactersi12+1.0;    
                
            }  
            
            if(data.contains("im"))
            
            {
                
            countforcharactersi13 = countforcharactersi13+1.0;    
                
            }  
            
            if(data.contains("in"))
            
            {
                
            countforcharactersi14 = countforcharactersi14+1.0;    
                
            }  
             
            if(data.contains("io"))
            
            {
                
            countforcharactersi15 = countforcharactersi15+1.0;    
                
            }  
            
            if(data.contains("ip"))
            
            {
                
            countforcharactersi16 = countforcharactersi16+1.0;    
                
            }  
            
            if(data.contains("iq"))
            
            {
                
            countforcharactersi17 = countforcharactersi17+1.0;    
                
            }  
            
            if(data.contains("ir"))
            
            {
                
            countforcharactersi18 = countforcharactersi18+1.0;    
                
            }  
            
            if(data.contains("is"))
            
            {
                
            countforcharactersi19 = countforcharactersi19+1.0;    
                
            }  
            
            if(data.contains("it"))
            
            {
                
            countforcharactersi20 = countforcharactersi20+1.0;    
                
            }  
            
            if(data.contains("iu"))
            
            {
                
            countforcharactersi21 = countforcharactersi21+1.0;    
                
            }  
            
            if(data.contains("iv"))
            
            {
                
            countforcharactersi22 = countforcharactersi22+1.0;    
                
            }  
            
            if(data.contains("iw"))
            
            {
                
            countforcharactersi23 = countforcharactersi23+1.0;    
                
            }  
            
            if(data.contains("ix"))
            
            {
                
            countforcharactersi24 = countforcharactersi24+1.0;    
                
            }  
            
            if(data.contains("iy"))
            
            {
                
            countforcharactersi25 = countforcharactersi25+1.0;    
                
            }  
            
            if(data.contains("iz"))
            
            {
                
            countforcharactersi26 = countforcharactersi26+1.0;    
                
            }  
            
            if(data.contains("i."))
            
            {
                
            countforcharactersi27 = countforcharactersi27+1.0;    
                
            }  
            
            if(data.contains("i,"))
            
            {
                
            countforcharactersi28 = countforcharactersi28+1.0;    
                
            }  
            
            if(data.contains("i "))
            
            {
                
            countforcharactersi29 = countforcharactersi29+1.0;    
                
            } 
            
            if(data.contains("ja"))
            
            {
                
            countforcharactersj1 = countforcharactersj1+1.0;    
                
            }  
            
            if(data.contains("jb"))
            
            {
                
            countforcharactersj2 = countforcharactersj2+1.0;    
                
            }  
            
            if(data.contains("jc"))
            
            {
                
            countforcharactersj3 = countforcharactersj3+1.0;    
                
            }  
            
            if(data.contains("jd"))
            
            {
                
            countforcharactersj4 = countforcharactersj4+1.0;    
                
            }  
            
            if(data.contains("je"))
            
            {
                
            countforcharactersj5 = countforcharactersj5+1.0;    
                
            }  
            
            if(data.contains("jf"))
            
            {
                
            countforcharactersj6 = countforcharactersj6+1.0;    
                
            }  
            
            if(data.contains("jg"))
            
            {
                
            countforcharactersj7 = countforcharactersj7+1.0;    
                
            }  
            
            if(data.contains("jh"))
            
            {
                
            countforcharactersj8 = countforcharactersj8+1.0;    
                
            }  
            
            if(data.contains("ji"))
            
            {
                
            countforcharactersj9 = countforcharactersj9+1.0;    
                
            }  
            
            if(data.contains("jj"))
            
            {
                
            countforcharactersj10 = countforcharactersj10+1.0;    
                
            }  
            
            if(data.contains("jk"))
            
            {
                
            countforcharactersj11 = countforcharactersj11+1.0;    
                
            }  
            
            if(data.contains("jl"))
            
            {
                
            countforcharactersj12 = countforcharactersj12+1.0;    
                
            }  
            
            if(data.contains("jm"))
            
            {
                
            countforcharactersj13 = countforcharactersj13+1.0;    
                
            }  
            
            if(data.contains("jn"))
            
            {
                
            countforcharactersj14 = countforcharactersj14+1.0;    
                
            }  
             
            if(data.contains("jo"))
            
            {
                
            countforcharactersj15 = countforcharactersj15+1.0;    
                
            }  
            
            if(data.contains("jp"))
            
            {
                
            countforcharactersj16 = countforcharactersj16+1.0;    
                
            }  
            
            if(data.contains("jq"))
            
            {
                
            countforcharactersj17 = countforcharactersj17+1.0;    
                
            }  
            
            if(data.contains("jr"))
            
            {
                
            countforcharactersj18 = countforcharactersj18+1.0;    
                
            }  
            
            if(data.contains("js"))
            
            {
                
            countforcharactersj19 = countforcharactersj19+1.0;    
                
            }  
            
            if(data.contains("jt"))
            
            {
                
            countforcharactersj20 = countforcharactersj20+1.0;    
                
            }  
            
            if(data.contains("ju"))
            
            {
                
            countforcharactersj21 = countforcharactersj21+1.0;    
                
            }  
            
            if(data.contains("jv"))
            
            {
                
            countforcharactersj22 = countforcharactersj22+1.0;    
                
            }  
            
            if(data.contains("jw"))
            
            {
                
            countforcharactersj23 = countforcharactersj23+1.0;    
                
            }  
            
            if(data.contains("jx"))
            
            {
                
            countforcharactersj24 = countforcharactersj24+1.0;    
                
            }  
            
            if(data.contains("jy"))
            
            {
                
            countforcharactersj25 = countforcharactersj25+1.0;    
                
            }  
            
            if(data.contains("jz"))
            
            {
                
            countforcharactersj26 = countforcharactersj26+1.0;    
                
            }  
            
            if(data.contains("j."))
            
            {
                
            countforcharactersj27 = countforcharactersj27+1.0;    
                
            }  
            
            if(data.contains("j,"))
            
            {
                
            countforcharactersj28 = countforcharactersj28+1.0;    
                
            }  
            
            if(data.contains("j "))
            
            {
                
            countforcharactersj29 = countforcharactersj29+1.0;    
                
            }  
            
            if(data.contains("ka"))
            
            {
                
            countforcharactersk1 = countforcharactersk1+1.0;    
                
            }  
            
            if(data.contains("kb"))
            
            {
                
            countforcharactersk2 = countforcharactersk2+1.0;    
                
            }  
            
            if(data.contains("kc"))
            
            {
                
            countforcharactersk3 = countforcharactersk3+1.0;    
                
            }  
            
            if(data.contains("kd"))
            
            {
                
            countforcharactersk4 = countforcharactersk4+1.0;    
                
            }  
            
            if(data.contains("ke"))
            
            {
                
            countforcharactersk5 = countforcharactersk5+1.0;    
                
            }  
            
            if(data.contains("kf"))
            
            {
                
            countforcharactersk6 = countforcharactersk6+1.0;    
                
            }  
            
            if(data.contains("kg"))
            
            {
                
            countforcharactersk7 = countforcharactersk7+1.0;    
                
            }  
            
            if(data.contains("kh"))
            
            {
                
            countforcharactersk8 = countforcharactersk8+1.0;    
                
            }  
            
            if(data.contains("ki"))
            
            {
                
            countforcharactersk9 = countforcharactersk9+1.0;    
                
            }  
            
            if(data.contains("kj"))
            
            {
                
            countforcharactersk10 = countforcharactersk10+1.0;    
                
            }  
            
            if(data.contains("kk"))
            
            {
                
            countforcharactersk11 = countforcharactersk11+1.0;    
                
            }  
            
            if(data.contains("kl"))
            
            {
                
            countforcharactersk12 = countforcharactersk12+1.0;    
                
            }  
            
            if(data.contains("km"))
            
            {
                
            countforcharactersk13 = countforcharactersk13+1.0;    
                
            }  
            
            if(data.contains("kn"))
            
            {
                
            countforcharactersk14 = countforcharactersk14+1.0;    
                
            }  
             
            if(data.contains("ko"))
            
            {
                
            countforcharactersk15 = countforcharactersk15+1.0;    
                
            }  
            
            if(data.contains("kp"))
            
            {
                
            countforcharactersk16 = countforcharactersk16+1.0;    
                
            }  
            
            if(data.contains("kq"))
            
            {
                
            countforcharactersk17 = countforcharactersk17+1.0;    
                
            }  
            
            if(data.contains("kr"))
            
            {
                
            countforcharactersk18 = countforcharactersk18+1.0;    
                
            }  
            
            if(data.contains("ks"))
            
            {
                
            countforcharactersk19 = countforcharactersk19+1.0;    
                
            }  
            
            if(data.contains("kt"))
            
            {
                
            countforcharactersk20 = countforcharactersk20+1.0;    
                
            }  
            
            if(data.contains("ku"))
            
            {
                
            countforcharactersk21 = countforcharactersk21+1.0;    
                
            }  
            
            if(data.contains("kv"))
            
            {
                
            countforcharactersk22 = countforcharactersk22+1.0;    
                
            }  
            
            if(data.contains("kw"))
            
            {
                
            countforcharactersk23 = countforcharactersk23+1.0;    
                
            }  
            
            if(data.contains("kx"))
            
            {
                
            countforcharactersk24 = countforcharactersk24+1.0;    
                
            }  
            
            if(data.contains("ky"))
            
            {
                
            countforcharactersk25 = countforcharactersk25+1.0;    
                
            }  
            
            if(data.contains("kz"))
            
            {
                
            countforcharactersk26 = countforcharactersk26+1.0;    
                
            }  
            
            if(data.contains("k."))
            
            {
                
            countforcharactersk27 = countforcharactersk27+1.0;    
                
            }  
            
            if(data.contains("k,"))
            
            {
                
            countforcharactersk28 = countforcharactersk28+1.0;    
                
            }  
            
            if(data.contains("k "))
            
            {
                
            countforcharactersk29 = countforcharactersk29+1.0;    
                
            }  
            
            if(data.contains("la"))
            
            {
                
            countforcharactersl1 = countforcharactersl1+1.0;    
                
            }  
            
            if(data.contains("lb"))
            
            {
                
            countforcharactersl2 = countforcharactersl2+1.0;    
                
            }  
            
            if(data.contains("lc"))
            
            {
                
            countforcharactersl3 = countforcharactersl3+1.0;    
                
            }  
            
            if(data.contains("ld"))
            
            {
                
            countforcharactersl4 = countforcharactersl4+1.0;    
                
            }  
            
            if(data.contains("le"))
            
            {
                
            countforcharactersl5 = countforcharactersl5+1.0;    
                
            }  
            
            if(data.contains("lf"))
            
            {
                
            countforcharactersl6 = countforcharactersl6+1.0;    
                
            }  
            
            if(data.contains("lg"))
            
            {
                
            countforcharactersl7 = countforcharactersl7+1.0;    
                
            }  
            
            if(data.contains("lh"))
            
            {
                
            countforcharactersl8 = countforcharactersl8+1.0;    
                
            }  
            
            if(data.contains("li"))
            
            {
                
            countforcharactersl9 = countforcharactersl9+1.0;    
                
            }  
            
            if(data.contains("lj"))
            
            {
                
            countforcharactersl10 = countforcharactersl10+1.0;    
                
            }  
            
            if(data.contains("lk"))
            
            {
                
            countforcharactersl11 = countforcharactersl11+1.0;    
                
            }  
            
            if(data.contains("ll"))
            
            {
                
            countforcharactersl12 = countforcharactersl12+1.0;    
                
            }  
            
            if(data.contains("lm"))
            
            {
                
            countforcharactersl13 = countforcharactersl13+1.0;    
                
            }  
            
            if(data.contains("ln"))
            
            {
                
            countforcharactersl14 = countforcharactersl14+1.0;    
                
            }  
             
            if(data.contains("lo"))
            
            {
                
            countforcharactersl15 = countforcharactersl15+1.0;    
                
            }  
            
            if(data.contains("lp"))
            
            {
                
            countforcharactersl16 = countforcharactersl16+1.0;    
                
            }  
            
            if(data.contains("lq"))
            
            {
                
            countforcharactersl17 = countforcharactersl17+1.0;    
                
            }  
            
            if(data.contains("lr"))
            
            {
                
            countforcharactersl18 = countforcharactersl18+1.0;    
                
            }  
            
            if(data.contains("ls"))
            
            {
                
            countforcharactersl19 = countforcharactersl19+1.0;    
                
            }  
            
            if(data.contains("lt"))
            
            {
                
            countforcharactersl20 = countforcharactersl20+1.0;    
                
            }  
            
            if(data.contains("lu"))
            
            {
                
            countforcharactersl21 = countforcharactersl21+1.0;    
                
            }  
            
            if(data.contains("lv"))
            
            {
                
            countforcharactersl22 = countforcharactersl22+1.0;    
                
            }  
            
            if(data.contains("lw"))
            
            {
                
            countforcharactersl23 = countforcharactersl23+1.0;    
                
            }  
            
            if(data.contains("lx"))
            
            {
                
            countforcharactersl24 = countforcharactersl24+1.0;    
                
            }  
            
            if(data.contains("ly"))
            
            {
                
            countforcharactersl25 = countforcharactersl25+1.0;    
                
            }  
            
            if(data.contains("lz"))
            
            {
                
            countforcharactersl26 = countforcharactersl26+1.0;    
                
            }  
            
            if(data.contains("l."))
            
            {
                
            countforcharactersl27 = countforcharactersl27+1.0;    
                
            }  
            
            if(data.contains("l,"))
            
            {
                
            countforcharactersl28 = countforcharactersl28+1.0;    
                
            }  
            
            if(data.contains("l "))
            
            {
                
            countforcharactersl29 = countforcharactersl29+1.0;    
                
            }  
          
            if(data.contains("ma"))
            
            {
                
            countforcharactersm1 = countforcharactersm1+1.0;    
                
            }  
            
            if(data.contains("mb"))
            
            {
                
            countforcharactersm2 = countforcharactersm2+1.0;    
                
            }  
            
            if(data.contains("mc"))
            
            {
                
            countforcharactersm3 = countforcharactersm3+1.0;    
                
            }  
            
            if(data.contains("md"))
            
            {
                
            countforcharactersm4 = countforcharactersm4+1.0;    
                
            }  
            
            if(data.contains("me"))
            
            {
                
            countforcharactersm5 = countforcharactersm5+1.0;    
                
            }  
            
            if(data.contains("mf"))
            
            {
                
            countforcharactersm6 = countforcharactersm6+1.0;    
                
            }  
            
            if(data.contains("mg"))
            
            {
                
            countforcharactersm7 = countforcharactersm7+1.0;    
                
            }  
            
            if(data.contains("mh"))
            
            {
                
            countforcharactersm8 = countforcharactersm8+1.0;    
                
            }  
            
            if(data.contains("mi"))
            
            {
                
            countforcharactersm9 = countforcharactersm9+1.0;    
                
            }  
            
            if(data.contains("mj"))
            
            {
                
            countforcharactersm10 = countforcharactersm10+1.0;    
                
            }  
            
            if(data.contains("mk"))
            
            {
                
            countforcharactersm11 = countforcharactersm11+1.0;    
                
            }  
            
            if(data.contains("ml"))
            
            {
                
            countforcharactersm12 = countforcharactersm12+1.0;    
                
            }  
            
            if(data.contains("mm"))
            
            {
                
            countforcharactersm13 = countforcharactersm13+1.0;    
                
            }  
            
            if(data.contains("mn"))
            
            {
                
            countforcharactersm14 = countforcharactersm14+1.0;    
                
            }  
             
            if(data.contains("mo"))
            
            {
                
            countforcharactersm15 = countforcharactersm15+1.0;    
                
            }  
            
            if(data.contains("mp"))
            
            {
                
            countforcharactersm16 = countforcharactersm16+1.0;    
                
            }  
            
            if(data.contains("mq"))
            
            {
                
            countforcharactersm17 = countforcharactersm17+1.0;    
                
            }  
            
            if(data.contains("mr"))
            
            {
                
            countforcharactersm18 = countforcharactersm18+1.0;    
                
            }  
            
            if(data.contains("ms"))
            
            {
                
            countforcharactersm19 = countforcharactersm19+1.0;    
                
            }  
            
            if(data.contains("mt"))
            
            {
                
            countforcharactersm20 = countforcharactersm20+1.0;    
                
            }  
            
            if(data.contains("mu"))
            
            {
                
            countforcharactersm21 = countforcharactersm21+1.0;    
                
            }  
            
            if(data.contains("mv"))
            
            {
                
            countforcharactersm22 = countforcharactersm22+1.0;    
                
            }  
            
            if(data.contains("mw"))
            
            {
                
            countforcharactersm23 = countforcharactersm23+1.0;    
                
            }  
            
            if(data.contains("mx"))
            
            {
                
            countforcharactersm24 = countforcharactersm24+1.0;    
                
            }  
            
            if(data.contains("my"))
            
            {
                
            countforcharactersm25 = countforcharactersm25+1.0;    
                
            }  
            
            if(data.contains("mz"))
            
            {
                
            countforcharactersm26 = countforcharactersm26+1.0;    
                
            }  
            
            if(data.contains("m."))
            
            {
                
            countforcharactersm27 = countforcharactersm27+1.0;    
                
            }  
            
            if(data.contains("m,"))
            
            {
                
            countforcharactersm28 = countforcharactersm28+1.0;    
                
            }  
            
            if(data.contains("m "))
            
            {
                
            countforcharactersm29 = countforcharactersm29+1.0;    
                
            }  
            
            if(data.contains("na"))
            
            {
                
            countforcharactersn1 = countforcharactersn1+1.0;    
                
            }  
            
            if(data.contains("nb"))
            
            {
                
            countforcharactersn2 = countforcharactersn2+1.0;    
                
            }  
            
            if(data.contains("nc"))
            
            {
                
            countforcharactersn3 = countforcharactersn3+1.0;    
                
            }  
            
            if(data.contains("nd"))
            
            {
                
            countforcharactersn4 = countforcharactersn4+1.0;    
                
            }  
            
            if(data.contains("ne"))
            
            {
                
            countforcharactersn5 = countforcharactersn5+1.0;    
                
            }  
            
            if(data.contains("nf"))
            
            {
                
            countforcharactersn6 = countforcharactersn6+1.0;    
                
            }  
            
            if(data.contains("ng"))
            
            {
                
            countforcharactersn7 = countforcharactersn7+1.0;    
                
            }  
            
            if(data.contains("nh"))
            
            {
                
            countforcharactersn8 = countforcharactersn8+1.0;    
                
            }  
            
            if(data.contains("ni"))
            
            {
                
            countforcharactersn9 = countforcharactersn9+1.0;    
                
            }  
            
            if(data.contains("nj"))
            
            {
                
            countforcharactersn10 = countforcharactersn10+1.0;    
                
            }  
            
            if(data.contains("nk"))
            
            {
                
            countforcharactersn11 = countforcharactersn11+1.0;    
                
            }  
            
            if(data.contains("nl"))
            
            {
                
            countforcharactersn12 = countforcharactersn12+1.0;    
                
            }  
            
            if(data.contains("nm"))
            
            {
                
            countforcharactersn13 = countforcharactersn13+1.0;    
                
            }  
            
            if(data.contains("nn"))
            
            {
                
            countforcharactersn14 = countforcharactersn14+1.0;    
                
            }  
             
            if(data.contains("no"))
            
            {
                
            countforcharactersn15 = countforcharactersn15+1.0;    
                
            }  
            
            if(data.contains("np"))
            
            {
                
            countforcharactersn16 = countforcharactersn16+1.0;    
                
            }  
            
            if(data.contains("nq"))
            
            {
                
            countforcharactersn17 = countforcharactersn17+1.0;    
                
            }  
            
            if(data.contains("nr"))
            
            {
                
            countforcharactersn18 = countforcharactersn18+1.0;    
                
            }  
            
            if(data.contains("ns"))
            
            {
                
            countforcharactersn19 = countforcharactersn19+1.0;    
                
            }  
            
            if(data.contains("nt"))
            
            {
                
            countforcharactersn20 = countforcharactersn20+1.0;    
                
            }  
            
            if(data.contains("nu"))
            
            {
                
            countforcharactersn21 = countforcharactersn21+1.0;    
                
            }  
            
            if(data.contains("nv"))
            
            {
                
            countforcharactersn22 = countforcharactersn22+1.0;    
                
            }  
            
            if(data.contains("nw"))
            
            {
                
            countforcharactersn23 = countforcharactersn23+1.0;    
                
            }  
            
            if(data.contains("nx"))
            
            {
                
            countforcharactersn24 = countforcharactersn24+1.0;    
                
            }  
            
            if(data.contains("ny"))
            
            {
                
            countforcharactersn25 = countforcharactersn25+1.0;    
                
            }  
            
            if(data.contains("nz"))
            
            {
                
            countforcharactersn26 = countforcharactersn26+1.0;    
                
            }  
            
            if(data.contains("n."))
            
            {
                
            countforcharactersn27 = countforcharactersn27+1.0;    
                
            }  
            
            if(data.contains("n,"))
            
            {
                
            countforcharactersn28 = countforcharactersn28+1.0;    
                
            }  
            
            if(data.contains("n "))
            
            {
                
            countforcharactersn29 = countforcharactersn29+1.0;    
                
            }  
            
            if(data.contains("oa"))
            
            {
                
            countforcharacterso1 = countforcharacterso1+1.0;    
                
            }  
            
            if(data.contains("ob"))
            
            {
                
            countforcharacterso2 = countforcharacterso2+1.0;    
                
            }  
            
            if(data.contains("oc"))
            
            {
                
            countforcharacterso3 = countforcharacterso3+1.0;    
                
            }  
            
            if(data.contains("od"))
            
            {
                
            countforcharacterso4 = countforcharacterso4+1.0;    
                
            }  
            
            if(data.contains("oe"))
            
            {
                
            countforcharacterso5 = countforcharacterso5+1.0;    
                
            }  
            
            if(data.contains("of"))
            
            {
                
            countforcharacterso6 = countforcharacterso6+1.0;    
                
            }  
            
            if(data.contains("og"))
            
            {
                
            countforcharacterso7 = countforcharacterso7+1.0;    
                
            }  
            
            if(data.contains("oh"))
            
            {
                
            countforcharacterso8 = countforcharacterso8+1.0;    
                
            }  
            
            if(data.contains("oi"))
            
            {
                
            countforcharacterso9 = countforcharacterso9+1.0;    
                
            }  
            
            if(data.contains("oj"))
            
            {
                
            countforcharacterso10 = countforcharacterso10+1.0;    
                
            }  
            
            if(data.contains("ok"))
            
            {
                
            countforcharacterso11 = countforcharacterso11+1.0;    
                
            }  
            
            if(data.contains("ol"))
            
            {
                
            countforcharacterso12 = countforcharacterso12+1.0;    
                
            }  
            
            if(data.contains("om"))
            
            {
                
            countforcharacterso13 = countforcharacterso13+1.0;    
                
            }  
            
            if(data.contains("on"))
            
            {
                
            countforcharacterso14 = countforcharacterso14+1.0;    
                
            }  
             
            if(data.contains("oo"))
            
            {
                
            countforcharacterso15 = countforcharacterso15+1.0;    
                
            }  
            
            if(data.contains("op"))
            
            {
                
            countforcharacterso16 = countforcharacterso16+1.0;    
                
            }  
            
            if(data.contains("oq"))
            
            {
                
            countforcharacterso17 = countforcharacterso17+1.0;    
                
            }  
            
            if(data.contains("or"))
            
            {
                
            countforcharacterso18 = countforcharacterso18+1.0;    
                
            }  
            
            if(data.contains("os"))
            
            {
                
            countforcharacterso19 = countforcharacterso19+1.0;    
                
            }  
            
            if(data.contains("ot"))
            
            {
                
            countforcharacterso20 = countforcharacterso20+1.0;    
                
            }  
            
            if(data.contains("ou"))
            
            {
                
            countforcharacterso21 = countforcharacterso21+1.0;    
                
            }  
            
            if(data.contains("ov"))
            
            {
                
            countforcharacterso22 = countforcharacterso22+1.0;    
                
            }  
            
            if(data.contains("ow"))
            
            {
                
            countforcharacterso23 = countforcharacterso23+1.0;    
                
            }  
            
            if(data.contains("ox"))
            
            {
                
            countforcharacterso24 = countforcharacterso24+1.0;    
                
            }  
            
            if(data.contains("oy"))
            
            {
                
            countforcharacterso25 = countforcharacterso25+1.0;    
                
            }  
            
            if(data.contains("oz"))
            
            {
                
            countforcharacterso26 = countforcharacterso26+1.0;    
                
            }  
            
            if(data.contains("o."))
            
            {
                
            countforcharacterso27 = countforcharacterso27+1.0;    
                
            }  
            
            if(data.contains("o,"))
            
            {
                
            countforcharacterso28 = countforcharacterso28+1.0;    
                
            }  
            
            if(data.contains("o "))
            
            {
                
            countforcharacterso29 = countforcharacterso29+1.0;    
                
            } 
            
            if(data.contains("pa"))
            
            {
                
            countforcharactersp1 = countforcharactersp1+1.0;    
                
            }  
            
            if(data.contains("pb"))
            
            {
                
            countforcharactersp2 = countforcharactersp2+1.0;    
                
            }  
            
            if(data.contains("pc"))
            
            {
                
            countforcharactersp3 = countforcharactersp3+1.0;    
                
            }  
            
            if(data.contains("pd"))
            
            {
                
            countforcharactersp4 = countforcharactersp4+1.0;    
                
            }  
            
            if(data.contains("pe"))
            
            {
                
            countforcharactersp5 = countforcharactersp5+1.0;    
                
            }  
            
            if(data.contains("pf"))
            
            {
                
            countforcharactersp6 = countforcharactersp6+1.0;    
                
            }  
            
            if(data.contains("pg"))
            
            {
                
            countforcharactersp7 = countforcharactersp7+1.0;    
                
            }  
            
            if(data.contains("ph"))
            
            {
                
            countforcharactersp8 = countforcharactersp8+1.0;    
                
            }  
            
            if(data.contains("pi"))
            
            {
                
            countforcharactersp9 = countforcharactersp9+1.0;    
                
            }  
            
            if(data.contains("pj"))
            
            {
                
            countforcharactersp10 = countforcharactersp10+1.0;    
                
            }  
            
            if(data.contains("pk"))
            
            {
                
            countforcharactersp11 = countforcharactersp11+1.0;    
                
            }  
            
            if(data.contains("pl"))
            
            {
                
            countforcharactersp12 = countforcharactersp12+1.0;    
                
            }  
            
            if(data.contains("pm"))
            
            {
                
            countforcharactersp13 = countforcharactersp13+1.0;    
                
            }  
            
            if(data.contains("pn"))
            
            {
                
            countforcharactersp14 = countforcharactersp14+1.0;    
                
            }  
             
            if(data.contains("po"))
            
            {
                
            countforcharactersp15 = countforcharactersp15+1.0;    
                
            }  
            
            if(data.contains("pp"))
            
            {
                
            countforcharactersp16 = countforcharactersp16+1.0;    
                
            }  
            
            if(data.contains("pq"))
            
            {
                
            countforcharactersp17 = countforcharactersp17+1.0;    
                
            }  
            
            if(data.contains("pr"))
            
            {
                
            countforcharactersp18 = countforcharactersp18+1.0;    
                
            }  
            
            if(data.contains("ps"))
            
            {
                
            countforcharactersp19 = countforcharactersp19+1.0;    
                
            }  
            
            if(data.contains("pt"))
            
            {
                
            countforcharactersp20 = countforcharactersp20+1.0;    
                
            }  
            
            if(data.contains("pu"))
            
            {
                
            countforcharactersp21 = countforcharactersp21+1.0;    
                
            }  
            
            if(data.contains("pv"))
            
            {
                
            countforcharactersp22 = countforcharactersp22+1.0;    
                
            }  
            
            if(data.contains("pw"))
            
            {
                
            countforcharactersp23 = countforcharactersp23+1.0;    
                
            }  
            
            if(data.contains("px"))
            
            {
                
            countforcharactersp24 = countforcharactersp24+1.0;    
                
            }  
            
            if(data.contains("py"))
            
            {
                
            countforcharactersp25 = countforcharactersp25+1.0;    
                
            }  
            
            if(data.contains("pz"))
            
            {
                
            countforcharactersp26 = countforcharactersp26+1.0;    
                
            }  
            
            if(data.contains("p."))
            
            {
                
            countforcharactersp27 = countforcharactersp27+1.0;    
                
            }  
            
            if(data.contains("p,"))
            
            {
                
            countforcharactersp28 = countforcharactersp28+1.0;    
                
            }  
            
            if(data.contains("p "))
            
            {
                
            countforcharactersp29 = countforcharactersp29+1.0;    
                
            }  
            
            if(data.contains("qa"))
            
            {
                
            countforcharactersq1 = countforcharactersq1+1.0;    
                
            }  
            
            if(data.contains("qb"))
            
            {
                
            countforcharactersq2 = countforcharactersq2+1.0;    
                
            }  
            
            if(data.contains("qc"))
            
            {
                
            countforcharactersq3 = countforcharactersq3+1.0;    
                
            }  
            
            if(data.contains("qd"))
            
            {
                
            countforcharactersq4 = countforcharactersq4+1.0;    
                
            }  
            
            if(data.contains("qe"))
            
            {
                
            countforcharactersq5 = countforcharactersq5+1.0;    
                
            }  
            
            if(data.contains("qf"))
            
            {
                
            countforcharactersq6 = countforcharactersq6+1.0;    
                
            }  
            
            if(data.contains("qg"))
            
            {
                
            countforcharactersq7 = countforcharactersq7+1.0;    
                
            }  
            
            if(data.contains("qh"))
            
            {
                
            countforcharactersq8 = countforcharactersq8+1.0;    
                
            }  
            
            if(data.contains("qi"))
            
            {
                
            countforcharactersq9 = countforcharactersq9+1.0;    
                
            }  
            
            if(data.contains("qj"))
            
            {
                
            countforcharactersq10 = countforcharactersq10+1.0;    
                
            }  
            
            if(data.contains("qk"))
            
            {
                
            countforcharactersq11 = countforcharactersq11+1.0;    
                
            }  
            
            if(data.contains("ql"))
            
            {
                
            countforcharactersq12 = countforcharactersq12+1.0;    
                
            }  
            
            if(data.contains("qm"))
            
            {
                
            countforcharactersq13 = countforcharactersq13+1.0;    
                
            }  
            
            if(data.contains("qn"))
            
            {
                
            countforcharactersq14 = countforcharactersq14+1.0;    
                
            }  
             
            if(data.contains("qo"))
            
            {
                
            countforcharactersq15 = countforcharactersq15+1.0;    
                
            }  
            
            if(data.contains("qp"))
            
            {
                
            countforcharactersq16 = countforcharactersq16+1.0;    
                
            }  
            
            if(data.contains("qq"))
            
            {
                
            countforcharactersq17 = countforcharactersq17+1.0;    
                
            }  
            
            if(data.contains("qr"))
            
            {
                
            countforcharactersq18 = countforcharactersq18+1.0;    
                
            }  
            
            if(data.contains("qs"))
            
            {
                
            countforcharactersq19 = countforcharactersq19+1.0;    
                
            }  
            
            if(data.contains("qt"))
            
            {
                
            countforcharactersq20 = countforcharactersq20+1.0;    
                
            }  
            
            if(data.contains("qu"))
            
            {
                
            countforcharactersq21 = countforcharactersq21+1.0;    
                
            }  
            
            if(data.contains("qv"))
            
            {
                
            countforcharactersq22 = countforcharactersq22+1.0;    
                
            }  
            
            if(data.contains("qw"))
            
            {
                
            countforcharactersq23 = countforcharactersq23+1.0;    
                
            }  
            
            if(data.contains("qx"))
            
            {
                
            countforcharactersq24 = countforcharactersq24+1.0;    
                
            }  
            
            if(data.contains("qy"))
            
            {
                
            countforcharactersq25 = countforcharactersq25+1.0;    
                
            }  
            
            if(data.contains("qz"))
            
            {
                
            countforcharactersq26 = countforcharactersq26+1.0;    
                
            }  
            
            if(data.contains("q."))
            
            {
                
            countforcharactersq27 = countforcharactersq27+1.0;    
                
            }  
            
            if(data.contains("q,"))
            
            {
                
            countforcharactersq28 = countforcharactersq28+1.0;    
                
            }  
            
            if(data.contains("q "))
            
            {
                
            countforcharactersq29 = countforcharactersq29+1.0;    
                
            }  
            
            if(data.contains("ra"))
            
            {
                
            countforcharactersr1 = countforcharactersr1+1.0;    
                
            }  
            
            if(data.contains("rb"))
            
            {
                
            countforcharactersr2 = countforcharactersr2+1.0;    
                
            }  
            
            if(data.contains("rc"))
            
            {
                
            countforcharactersr3 = countforcharactersr3+1.0;    
                
            }  
            
            if(data.contains("rd"))
            
            {
                
            countforcharactersr4 = countforcharactersr4+1.0;    
                
            }  
            
            if(data.contains("re"))
            
            {
                
            countforcharactersr5 = countforcharactersr5+1.0;    
                
            }  
            
            if(data.contains("rf"))
            
            {
                
            countforcharactersr6 = countforcharactersr6+1.0;    
                
            }  
            
            if(data.contains("rg"))
            
            {
                
            countforcharactersr7 = countforcharactersr7+1.0;    
                
            }  
            
            if(data.contains("rh"))
            
            {
                
            countforcharactersr8 = countforcharactersr8+1.0;    
                
            }  
            
            if(data.contains("ri"))
            
            {
                
            countforcharactersr9 = countforcharactersr9+1.0;    
                
            }  
            
            if(data.contains("rj"))
            
            {
                
            countforcharactersr10 = countforcharactersr10+1.0;    
                
            }  
            
            if(data.contains("rk"))
            
            {
                
            countforcharactersr11 = countforcharactersr11+1.0;    
                
            }  
            
            if(data.contains("rl"))
            
            {
                
            countforcharactersr12 = countforcharactersr12+1.0;    
                
            }  
            
            if(data.contains("rm"))
            
            {
                
            countforcharactersr13 = countforcharactersr13+1.0;    
                
            }  
            
            if(data.contains("rn"))
            
            {
                
            countforcharactersr14 = countforcharactersr14+1.0;    
                
            }  
             
            if(data.contains("ro"))
            
            {
                
            countforcharactersr15 = countforcharactersr15+1.0;    
                
            }  
            
            if(data.contains("rp"))
            
            {
                
            countforcharactersr16 = countforcharactersr16+1.0;    
                
            }  
            
            if(data.contains("rq"))
            
            {
                
            countforcharactersr17 = countforcharactersr17+1.0;    
                
            }  
            
            if(data.contains("rr"))
            
            {
                
            countforcharactersr18 = countforcharactersr18+1.0;    
                
            }  
            
            if(data.contains("rs"))
            
            {
                
            countforcharactersr19 = countforcharactersr19+1.0;    
                
            }  
            
            if(data.contains("rt"))
            
            {
                
            countforcharactersr20 = countforcharactersr20+1.0;    
                
            }  
            
            if(data.contains("ru"))
            
            {
                
            countforcharactersr21 = countforcharactersr21+1.0;    
                
            }  
            
            if(data.contains("rv"))
            
            {
                
            countforcharactersr22 = countforcharactersr22+1.0;    
                
            }  
            
            if(data.contains("rw"))
            
            {
                
            countforcharactersr23 = countforcharactersr23+1.0;    
                
            }  
            
            if(data.contains("rx"))
            
            {
                
            countforcharactersr24 = countforcharactersr24+1.0;    
                
            }  
            
            if(data.contains("ry"))
            
            {
                
            countforcharactersr25 = countforcharactersr25+1.0;    
                
            }  
            
            if(data.contains("rz"))
            
            {
                
            countforcharactersr26 = countforcharactersr26+1.0;    
                
            }  
            
            if(data.contains("r."))
            
            {
                
            countforcharactersr27 = countforcharactersr27+1.0;    
                
            }  
            
            if(data.contains("r,"))
            
            {
                
            countforcharactersr28 = countforcharactersr28+1.0;    
                
            }  
            
            if(data.contains("r "))
            
            {
                
            countforcharactersr29 = countforcharactersr29+1.0;    
                
            }  
            
            if(data.contains("sa"))
            
            {
                
            countforcharacterss1 = countforcharacterss1+1.0;    
                
            }  
            
            if(data.contains("sb"))
            
            {
                
            countforcharacterss2 = countforcharacterss2+1.0;    
                
            }  
            
            if(data.contains("sc"))
            
            {
                
            countforcharacterss3 = countforcharacterss3+1.0;    
                
            }  
            
            if(data.contains("sd"))
            
            {
                
            countforcharacterss4 = countforcharacterss4+1.0;    
                
            }  
            
            if(data.contains("se"))
            
            {
                
            countforcharacterss5 = countforcharacterss5+1.0;    
                
            }  
            
            if(data.contains("sf"))
            
            {
                
            countforcharacterss6 = countforcharacterss6+1.0;    
                
            }  
            
            if(data.contains("sg"))
            
            {
                
            countforcharacterss7 = countforcharacterss7+1.0;    
                
            }  
            
            if(data.contains("sh"))
            
            {
                
            countforcharacterss8 = countforcharacterss8+1.0;    
                
            }  
            
            if(data.contains("si"))
            
            {
                
            countforcharacterss9 = countforcharacterss9+1.0;    
                
            }  
            
            if(data.contains("sj"))
            
            {
                
            countforcharacterss10 = countforcharacterss10+1.0;    
                
            }  
            
            if(data.contains("sk"))
            
            {
                
            countforcharacterss11 = countforcharacterss11+1.0;    
                
            }  
            
            if(data.contains("sl"))
            
            {
                
            countforcharacterss12 = countforcharacterss12+1.0;    
                
            }  
            
            if(data.contains("sm"))
            
            {
                
            countforcharacterss13 = countforcharacterss13+1.0;    
                
            }  
            
            if(data.contains("sn"))
            
            {
                
            countforcharacterss14 = countforcharacterss14+1.0;    
                
            }  
             
            if(data.contains("so"))
            
            {
                
            countforcharacterss15 = countforcharacterss15+1.0;    
                
            }  
            
            if(data.contains("sp"))
            
            {
                
            countforcharacterss16 = countforcharacterss16+1.0;    
                
            }  
            
            if(data.contains("sq"))
            
            {
                
            countforcharacterss17 = countforcharacterss17+1.0;    
                
            }  
            
            if(data.contains("sr"))
            
            {
                
            countforcharacterss18 = countforcharacterss18+1.0;    
                
            }  
            
            if(data.contains("ss"))
            
            {
                
            countforcharacterss19 = countforcharacterss19+1.0;    
                
            }  
            
            if(data.contains("st"))
            
            {
                
            countforcharacterss20 = countforcharacterss20+1.0;    
                
            }  
            
            if(data.contains("su"))
            
            {
                
            countforcharacterss21 = countforcharacterss21+1.0;    
                
            }  
            
            if(data.contains("sv"))
            
            {
                
            countforcharacterss22 = countforcharacterss22+1.0;    
                
            }  
            
            if(data.contains("sw"))
            
            {
                
            countforcharacterss23 = countforcharacterss23+1.0;    
                
            }  
            
            if(data.contains("sx"))
            
            {
                
            countforcharacterss24 = countforcharacterss24+1.0;    
                
            }  
            
            if(data.contains("sy"))
            
            {
                
            countforcharacterss25 = countforcharacterss25+1.0;    
                
            }  
            
            if(data.contains("sz"))
            
            {
                
            countforcharacterss26 = countforcharacterss26+1.0;    
                
            }  
            
            if(data.contains("s."))
            
            {
                
            countforcharacterss27 = countforcharacterss27+1.0;    
                
            }  
            
            if(data.contains("s,"))
            
            {
                
            countforcharacterss28 = countforcharacterss28+1.0;    
                
            }  
            
            if(data.contains("s "))
            
            {
                
            countforcharacterss29 = countforcharacterss29+1.0;    
                
            }  
            
            if(data.contains("ta"))
            
            {
                
            countforcharacterst1 = countforcharacterst1+1.0;    
                
            }  
            
            if(data.contains("tb"))
            
            {
                
            countforcharacterst2 = countforcharacterst2+1.0;    
                
            }  
            
            if(data.contains("tc"))
            
            {
                
            countforcharacterst3 = countforcharacterst3+1.0;    
                
            }  
            
            if(data.contains("td"))
            
            {
                
            countforcharacterst4 = countforcharacterst4+1.0;    
                
            }  
            
            if(data.contains("te"))
            
            {
                
            countforcharacterst5 = countforcharacterst5+1.0;    
                
            }  
            
            if(data.contains("tf"))
            
            {
                
            countforcharacterst6 = countforcharacterst6+1.0;    
                
            }  
            
            if(data.contains("tg"))
            
            {
                
            countforcharacterst7 = countforcharacterst7+1.0;    
                
            }  
            
            if(data.contains("th"))
            
            {
                
            countforcharacterst8 = countforcharacterst8+1.0;    
                
            }  
            
            if(data.contains("ti"))
            
            {
                
            countforcharacterst9 = countforcharacterst9+1.0;    
                
            }  
            
            if(data.contains("tj"))
            
            {
                
            countforcharacterst10 = countforcharacterst10+1.0;    
                
            }  
            
            if(data.contains("tk"))
            
            {
                
            countforcharacterst11 = countforcharacterst11+1.0;    
                
            }  
            
            if(data.contains("tl"))
            
            {
                
            countforcharacterst12 = countforcharacterst12+1.0;    
                
            }  
            
            if(data.contains("tm"))
            
            {
                
            countforcharacterst13 = countforcharacterst13+1.0;    
                
            }  
            
            if(data.contains("tn"))
            
            {
                
            countforcharacterst14 = countforcharacterst14+1.0;    
                
            }  
             
            if(data.contains("to"))
            
            {
                
            countforcharacterst15 = countforcharacterst15+1.0;    
                
            }  
            
            if(data.contains("tp"))
            
            {
                
            countforcharacterst16 = countforcharacterst16+1.0;    
                
            }  
            
            if(data.contains("tq"))
            
            {
                
            countforcharacterst17 = countforcharacterst17+1.0;    
                
            }  
            
            if(data.contains("tr"))
            
            {
                
            countforcharacterst18 = countforcharacterst18+1.0;    
                
            }  
            
            if(data.contains("ts"))
            
            {
                
            countforcharacterst19 = countforcharacterst19+1.0;    
                
            }  
            
            if(data.contains("tt"))
            
            {
                
            countforcharacterst20 = countforcharacterst20+1.0;    
                
            }  
            
            if(data.contains("tu"))
            
            {
                
            countforcharacterst21 = countforcharacterst21+1.0;    
                
            }  
            
            if(data.contains("tv"))
            
            {
                
            countforcharacterst22 = countforcharacterst22+1.0;    
                
            }  
            
            if(data.contains("tw"))
            
            {
                
            countforcharacterst23 = countforcharacterst23+1.0;    
                
            }  
            
            if(data.contains("tx"))
            
            {
                
            countforcharacterst24 = countforcharacterst24+1.0;    
                
            }  
            
            if(data.contains("ty"))
            
            {
                
            countforcharacterst25 = countforcharacterst25+1.0;    
                
            }  
            
            if(data.contains("tz"))
            
            {
                
            countforcharacterst26 = countforcharacterst26+1.0;    
                
            }  
            
            if(data.contains("t."))
            
            {
                
            countforcharacterst27 = countforcharacterst27+1.0;    
                
            }  
            
            if(data.contains("t,"))
            
            {
                
            countforcharacterst28 = countforcharacterst28+1.0;    
                
            }  
            
            if(data.contains("t "))
            
            {
                
            countforcharacterst29 = countforcharacterst29+1.0;    
                
            }  
            
            if(data.contains("ua"))
            
            {
                
            countforcharactersu1 = countforcharactersu1+1.0;    
                
            }  
            
            if(data.contains("ub"))
            
            {
                
            countforcharactersu2 = countforcharactersu2+1.0;    
                
            }  
            
            if(data.contains("uc"))
            
            {
                
            countforcharactersu3 = countforcharactersu3+1.0;    
                
            }  
            
            if(data.contains("ud"))
            
            {
                
            countforcharactersu4 = countforcharactersu4+1.0;    
                
            }  
            
            if(data.contains("ue"))
            
            {
                
            countforcharactersu5 = countforcharactersu5+1.0;    
                
            }  
            
            if(data.contains("uf"))
            
            {
                
            countforcharactersu6 = countforcharactersu6+1.0;    
                
            }  
            
            if(data.contains("ug"))
            
            {
                
            countforcharactersu7 = countforcharactersu7+1.0;    
                
            }  
            
            if(data.contains("uh"))
            
            {
                
            countforcharactersu8 = countforcharactersu8+1.0;    
                
            }  
            
            if(data.contains("ui"))
            
            {
                
            countforcharactersu9 = countforcharactersu9+1.0;    
                
            }  
            
            if(data.contains("uj"))
            
            {
                
            countforcharactersu10 = countforcharactersu10+1.0;    
                
            }  
            
            if(data.contains("uk"))
            
            {
                
            countforcharactersu11 = countforcharactersu11+1.0;    
                
            }  
            
            if(data.contains("ul"))
            
            {
                
            countforcharactersu12 = countforcharactersu12+1.0;    
                
            }  
            
            if(data.contains("um"))
            
            {
                
            countforcharactersu13 = countforcharactersu13+1.0;    
                
            }  
            
            if(data.contains("un"))
            
            {
                
            countforcharactersu14 = countforcharactersu14+1.0;    
                
            }  
             
            if(data.contains("uo"))
            
            {
                
            countforcharactersu15 = countforcharactersu15+1.0;    
                
            }  
            
            if(data.contains("up"))
            
            {
                
            countforcharactersu16 = countforcharactersu16+1.0;    
                
            }  
            
            if(data.contains("uq"))
            
            {
                
            countforcharactersu17 = countforcharactersu17+1.0;    
                
            }  
            
            if(data.contains("ur"))
            
            {
                
            countforcharactersu18 = countforcharactersu18+1.0;    
                
            }  
            
            if(data.contains("us"))
            
            {
                
            countforcharactersu19 = countforcharactersu19+1.0;    
                
            }  
            
            if(data.contains("ut"))
            
            {
                
            countforcharactersu20 = countforcharactersu20+1.0;    
                
            }  
            
            if(data.contains("uu"))
            
            {
                
            countforcharactersu21 = countforcharactersu21+1.0;    
                
            }  
            
            if(data.contains("uv"))
            
            {
                
            countforcharactersu22 = countforcharactersu22+1.0;    
                
            }  
            
            if(data.contains("uw"))
            
            {
                
            countforcharactersu23 = countforcharactersu23+1.0;    
                
            }  
            
            if(data.contains("ux"))
            
            {
                
            countforcharactersu24 = countforcharactersu24+1.0;    
                
            }  
            
            if(data.contains("uy"))
            
            {
                
            countforcharactersu25 = countforcharactersu25+1.0;    
                
            }  
            
            if(data.contains("uz"))
            
            {
                
            countforcharactersu26 = countforcharactersu26+1.0;    
                
            }  
            
            if(data.contains("u."))
            
            {
                
            countforcharactersu27 = countforcharactersu27+1.0;    
                
            }  
            
            if(data.contains("u,"))
            
            {
                
            countforcharactersu28 = countforcharactersu28+1.0;    
                
            }  
            
            if(data.contains("u "))
            
            {
                
            countforcharactersu29 = countforcharactersu29+1.0;    
                
            }  
            
            if(data.contains("va"))
            
            {
                
            countforcharactersv1 = countforcharactersv1+1.0;    
                
            }  
            
            if(data.contains("vb"))
            
            {
                
            countforcharactersv2 = countforcharactersv2+1.0;    
                
            }  
            
            if(data.contains("vc"))
            
            {
                
            countforcharactersv3 = countforcharactersv3+1.0;    
                
            }  
            
            if(data.contains("vd"))
            
            {
                
            countforcharactersv4 = countforcharactersv4+1.0;    
                
            }  
            
            if(data.contains("ve"))
            
            {
                
            countforcharactersv5 = countforcharactersv5+1.0;    
                
            }  
            
            if(data.contains("vf"))
            
            {
                
            countforcharactersv6 = countforcharactersv6+1.0;    
                
            }  
            
            if(data.contains("vg"))
            
            {
                
            countforcharactersv7 = countforcharactersv7+1.0;    
                
            }  
            
            if(data.contains("vh"))
            
            {
                
            countforcharactersv8 = countforcharactersv8+1.0;    
                
            }  
            
            if(data.contains("vi"))
            
            {
                
            countforcharactersv9 = countforcharactersv9+1.0;    
                
            }  
            
            if(data.contains("vj"))
            
            {
                
            countforcharactersv10 = countforcharactersv10+1.0;    
                
            }  
            
            if(data.contains("vk"))
            
            {
                
            countforcharactersv11 = countforcharactersv11+1.0;    
                
            }  
            
            if(data.contains("vl"))
            
            {
                
            countforcharactersv12 = countforcharactersv12+1.0;    
                
            }  
            
            if(data.contains("vm"))
            
            {
                
            countforcharactersv13 = countforcharactersv13+1.0;    
                
            }  
            
            if(data.contains("vn"))
            
            {
                
            countforcharactersv14 = countforcharactersv14+1.0;    
                
            }  
             
            if(data.contains("vo"))
            
            {
                
            countforcharactersv15 = countforcharactersv15+1.0;    
                
            }  
            
            if(data.contains("vp"))
            
            {
                
            countforcharactersv16 = countforcharactersv16+1.0;    
                
            }  
            
            if(data.contains("vq"))
            
            {
                
            countforcharactersv17 = countforcharactersv17+1.0;    
                
            }  
            
            if(data.contains("vr"))
            
            {
                
            countforcharactersv18 = countforcharactersv18+1.0;    
                
            }  
            
            if(data.contains("vs"))
            
            {
                
            countforcharactersv19 = countforcharactersv19+1.0;    
                
            }  
            
            if(data.contains("vt"))
            
            {
                
            countforcharactersv20 = countforcharactersv20+1.0;    
                
            }  
            
            if(data.contains("vu"))
            
            {
                
            countforcharactersv21 = countforcharactersv21+1.0;    
                
            }  
            
            if(data.contains("vv"))
            
            {
                
            countforcharactersv22 = countforcharactersv22+1.0;    
                
            }  
            
            if(data.contains("vw"))
            
            {
                
            countforcharactersv23 = countforcharactersv23+1.0;    
                
            }  
            
            if(data.contains("vx"))
            
            {
                
            countforcharactersv24 = countforcharactersv24+1.0;    
                
            }  
            
            if(data.contains("vy"))
            
            {
                
            countforcharactersv25 = countforcharactersv25+1.0;    
                
            }  
            
            if(data.contains("vz"))
            
            {
                
            countforcharactersv26 = countforcharactersv26+1.0;    
                
            }  
            
            if(data.contains("v."))
            
            {
                
            countforcharactersv27 = countforcharactersv27+1.0;    
                
            }  
            
            if(data.contains("v,"))
            
            {
                
            countforcharactersv28 = countforcharactersv28+1.0;    
                
            }  
            
            if(data.contains("v "))
            
            {
                
            countforcharactersv29 = countforcharactersv29+1.0;    
                
            }  
            
            if(data.contains("wa"))
            
            {
                
            countforcharactersw1 = countforcharactersw1+1.0;    
                
            }  
            
            if(data.contains("wb"))
            
            {
                
            countforcharactersw2 = countforcharactersw2+1.0;    
                
            }  
            
            if(data.contains("wc"))
            
            {
                
            countforcharactersw3 = countforcharactersw3+1.0;    
                
            }  
            
            if(data.contains("wd"))
            
            {
                
            countforcharactersw4 = countforcharactersw4+1.0;    
                
            }  
            
            if(data.contains("we"))
            
            {
                
            countforcharactersw5 = countforcharactersw5+1.0;    
                
            }  
            
            if(data.contains("wf"))
            
            {
                
            countforcharactersw6 = countforcharactersw6+1.0;    
                
            }  
            
            if(data.contains("wg"))
            
            {
                
            countforcharactersw7 = countforcharactersw7+1.0;    
                
            }  
            
            if(data.contains("wh"))
            
            {
                
            countforcharactersw8 = countforcharactersw8+1.0;    
                
            }  
            
            if(data.contains("wi"))
            
            {
                
            countforcharactersw9 = countforcharactersw9+1.0;    
                
            }  
            
            if(data.contains("wj"))
            
            {
                
            countforcharactersw10 = countforcharactersw10+1.0;    
                
            }  
            
            if(data.contains("wk"))
            
            {
                
            countforcharactersw11 = countforcharactersw11+1.0;    
                
            }  
            
            if(data.contains("wl"))
            
            {
                
            countforcharactersw12 = countforcharactersw12+1.0;    
                
            }  
            
            if(data.contains("wm"))
            
            {
                
            countforcharactersw13 = countforcharactersw13+1.0;    
                
            }  
            
            if(data.contains("wn"))
            
            {
                
            countforcharactersw14 = countforcharactersw14+1.0;    
                
            }  
             
            if(data.contains("wo"))
            
            {
                
            countforcharactersw15 = countforcharactersw15+1.0;    
                
            }  
            
            if(data.contains("wp"))
            
            {
                
            countforcharactersw16 = countforcharactersw16+1.0;    
                
            }  
            
            if(data.contains("wq"))
            
            {
                
            countforcharactersw17 = countforcharactersw17+1.0;    
                
            }  
            
            if(data.contains("wr"))
            
            {
                
            countforcharactersw18 = countforcharactersw18+1.0;    
                
            }  
            
            if(data.contains("ws"))
            
            {
                
            countforcharactersw19 = countforcharactersw19+1.0;    
                
            }  
            
            if(data.contains("wt"))
            
            {
                
            countforcharactersw20 = countforcharactersw20+1.0;    
                
            }  
            
            if(data.contains("wu"))
            
            {
                
            countforcharactersw21 = countforcharactersw21+1.0;    
                
            }  
            
            if(data.contains("wv"))
            
            {
                
            countforcharactersw22 = countforcharactersw22+1.0;    
                
            }  
            
            if(data.contains("ww"))
            
            {
                
            countforcharactersw23 = countforcharactersw23+1.0;    
                
            }  
            
            if(data.contains("wx"))
            
            {
                
            countforcharactersw24 = countforcharactersw24+1.0;    
                
            }  
            
            if(data.contains("wy"))
            
            {
                
            countforcharactersw25 = countforcharactersw25+1.0;    
                
            }  
            
            if(data.contains("wz"))
            
            {
                
            countforcharactersw26 = countforcharactersw26+1.0;    
                
            }  
            
            if(data.contains("w."))
            
            {
                
            countforcharactersw27 = countforcharactersw27+1.0;    
                
            }  
            
            if(data.contains("w,"))
            
            {
                
            countforcharactersw28 = countforcharactersw28+1.0;    
                
            }  
            
            if(data.contains("w "))
            
            {
                
            countforcharactersw29 = countforcharactersw29+1.0;    
                
            }  
            
            if(data.contains("xa"))
            
            {
                
            countforcharactersx1 = countforcharactersx1+1.0;    
                
            }  
            
            if(data.contains("xb"))
            
            {
                
            countforcharactersx2 = countforcharactersx2+1.0;    
                
            }  
            
            if(data.contains("xc"))
            
            {
                
            countforcharactersx3 = countforcharactersx3+1.0;    
                
            }  
            
            if(data.contains("xd"))
            
            {
                
            countforcharactersx4 = countforcharactersx4+1.0;    
                
            }  
            
            if(data.contains("xe"))
            
            {
                
            countforcharactersx5 = countforcharactersx5+1.0;    
                
            }  
            
            if(data.contains("xf"))
            
            {
                
            countforcharactersx6 = countforcharactersx6+1.0;    
                
            }  
            
            if(data.contains("xg"))
            
            {
                
            countforcharactersx7 = countforcharactersx7+1.0;    
                
            }  
            
            if(data.contains("xh"))
            
            {
                
            countforcharactersx8 = countforcharactersx8+1.0;    
                
            }  
            
            if(data.contains("xi"))
            
            {
                
            countforcharactersx9 = countforcharactersx9+1.0;    
                
            }  
            
            if(data.contains("xj"))
            
            {
                
            countforcharactersx10 = countforcharactersx10+1.0;    
                
            }  
            
            if(data.contains("xk"))
            
            {
                
            countforcharactersx11 = countforcharactersx11+1.0;    
                
            }  
            
            if(data.contains("xl"))
            
            {
                
            countforcharactersx12 = countforcharactersx12+1.0;    
                
            }  
            
            if(data.contains("xm"))
            
            {
                
            countforcharactersx13 = countforcharactersx13+1.0;    
                
            }  
            
            if(data.contains("xn"))
            
            {
                
            countforcharactersx14 = countforcharactersx14+1.0;    
                
            }  
             
            if(data.contains("xo"))
            
            {
                
            countforcharactersx15 = countforcharactersx15+1.0;    
                
            }  
            
            if(data.contains("xp"))
            
            {
                
            countforcharactersx16 = countforcharactersx16+1.0;    
                
            }  
            
            if(data.contains("xq"))
            
            {
                
            countforcharactersx17 = countforcharactersx17+1.0;    
                
            }  
            
            if(data.contains("xr"))
            
            {
                
            countforcharactersx18 = countforcharactersx18+1.0;    
                
            }  
            
            if(data.contains("xs"))
            
            {
                
            countforcharactersx19 = countforcharactersx19+1.0;    
                
            }  
            
            if(data.contains("xt"))
            
            {
                
            countforcharactersx20 = countforcharactersx20+1.0;    
                
            }  
            
            if(data.contains("xu"))
            
            {
                
            countforcharactersx21 = countforcharactersx21+1.0;    
                
            }  
            
            if(data.contains("xv"))
            
            {
                
            countforcharactersx22 = countforcharactersx22+1.0;    
                
            }  
            
            if(data.contains("xw"))
            
            {
                
            countforcharactersx23 = countforcharactersx23+1.0;    
                
            }  
            
            if(data.contains("xx"))
            
            {
                
            countforcharactersx24 = countforcharactersx24+1.0;    
                
            }  
            
            if(data.contains("xy"))
            
            {
                
            countforcharactersx25 = countforcharactersx25+1.0;    
                
            }  
            
            if(data.contains("xz"))
            
            {
                
            countforcharactersx26 = countforcharactersx26+1.0;    
                
            }  
            
            if(data.contains("x."))
            
            {
                
            countforcharactersx27 = countforcharactersx27+1.0;    
                
            }  
            
            if(data.contains("x,"))
            
            {
                
            countforcharactersx28 = countforcharactersx28+1.0;    
                
            }  
            
            if(data.contains("x "))
            
            {
                
            countforcharactersx29 = countforcharactersx29+1.0;    
                
            }  
            
            if(data.contains("ya"))
            
            {
                
            countforcharactersy1 = countforcharactersy1+1.0;    
                
            }  
            
            if(data.contains("yb"))
            
            {
                
            countforcharactersy2 = countforcharactersy2+1.0;    
                
            }  
            
            if(data.contains("yc"))
            
            {
                
            countforcharactersy3 = countforcharactersy3+1.0;    
                
            }  
            
            if(data.contains("yd"))
            
            {
                
            countforcharactersy4 = countforcharactersy4+1.0;    
                
            }  
            
            if(data.contains("ye"))
            
            {
                
            countforcharactersy5 = countforcharactersy5+1.0;    
                
            }  
            
            if(data.contains("yf"))
            
            {
                
            countforcharactersy6 = countforcharactersy6+1.0;    
                
            }  
            
            if(data.contains("yg"))
            
            {
                
            countforcharactersy7 = countforcharactersy7+1.0;    
                
            }  
            
            if(data.contains("yh"))
            
            {
                
            countforcharactersy8 = countforcharactersy8+1.0;    
                
            }  
            
            if(data.contains("yi"))
            
            {
                
            countforcharactersy9 = countforcharactersy9+1.0;    
                
            }  
            
            if(data.contains("yj"))
            
            {
                
            countforcharactersy10 = countforcharactersy10+1.0;    
                
            }  
            
            if(data.contains("yk"))
            
            {
                
            countforcharactersy11 = countforcharactersy11+1.0;    
                
            }  
            
            if(data.contains("yl"))
            
            {
                
            countforcharactersy12 = countforcharactersy12+1.0;    
                
            }  
            
            if(data.contains("ym"))
            
            {
                
            countforcharactersy13 = countforcharactersy13+1.0;    
                
            }  
            
            if(data.contains("yn"))
            
            {
                
            countforcharactersy14 = countforcharactersy14+1.0;    
                
            }  
             
            if(data.contains("yo"))
            
            {
                
            countforcharactersy15 = countforcharactersy15+1.0;    
                
            }  
            
            if(data.contains("yp"))
            
            {
                
            countforcharactersy16 = countforcharactersy16+1.0;    
                
            }  
            
            if(data.contains("yq"))
            
            {
                
            countforcharactersy17 = countforcharactersy17+1.0;    
                
            }  
            
            if(data.contains("yr"))
            
            {
                
            countforcharactersy18 = countforcharactersy18+1.0;    
                
            }  
            
            if(data.contains("ys"))
            
            {
                
            countforcharactersy19 = countforcharactersy19+1.0;    
                
            }  
            
            if(data.contains("yt"))
            
            {
                
            countforcharactersy20 = countforcharactersy20+1.0;    
                
            }  
            
            if(data.contains("yu"))
            
            {
                
            countforcharactersy21 = countforcharactersy21+1.0;    
                
            }  
            
            if(data.contains("yv"))
            
            {
                
            countforcharactersy22 = countforcharactersy22+1.0;    
                
            }  
            
            if(data.contains("yw"))
            
            {
                
            countforcharactersy23 = countforcharactersy23+1.0;    
                
            }  
            
            if(data.contains("yx"))
            
            {
                
            countforcharactersy24 = countforcharactersy24+1.0;    
                
            }  
            
            if(data.contains("yy"))
            
            {
                
            countforcharactersy25 = countforcharactersy25+1.0;    
                
            }  
            
            if(data.contains("yz"))
            
            {
                
            countforcharactersy26 = countforcharactersy26+1.0;    
                
            }  
            
            if(data.contains("y."))
            
            {
                
            countforcharactersy27 = countforcharactersy27+1.0;    
                
            }  
            
            if(data.contains("y,"))
            
            {
                
            countforcharactersy28 = countforcharactersy28+1.0;    
                
            }  
            
            if(data.contains("y "))
            
            {
                
            countforcharactersy29 = countforcharactersy29+1.0;    
                
            }  
            
            if(data.contains("za"))
            
            {
                
            countforcharactersz1 = countforcharactersz1+1.0;    
                
            }  
            
            if(data.contains("zb"))
            
            {
                
            countforcharactersz2 = countforcharactersz2+1.0;    
                
            }  
            
            if(data.contains("zc"))
            
            {
                
            countforcharactersz3 = countforcharactersz3+1.0;    
                
            }  
            
            if(data.contains("zd"))
            
            {
                
            countforcharactersz4 = countforcharactersz4+1.0;    
                
            }  
            
            if(data.contains("ze"))
            
            {
                
            countforcharactersz5 = countforcharactersz5+1.0;    
                
            }  
            
            if(data.contains("zf"))
            
            {
                
            countforcharactersz6 = countforcharactersz6+1.0;    
                
            }  
            
            if(data.contains("zg"))
            
            {
                
            countforcharactersz7 = countforcharactersz7+1.0;    
                
            }  
            
            if(data.contains("zh"))
            
            {
                
            countforcharactersz8 = countforcharactersz8+1.0;    
                
            }  
            
            if(data.contains("zi"))
            
            {
                
            countforcharactersz9 = countforcharactersz9+1.0;    
                
            }  
            
            if(data.contains("zj"))
            
            {
                
            countforcharactersz10 = countforcharactersz10+1.0;    
                
            }  
            
            if(data.contains("zk"))
            
            {
                
            countforcharactersz11 = countforcharactersz11+1.0;    
                
            }  
            
            if(data.contains("zl"))
            
            {
                
            countforcharactersz12 = countforcharactersz12+1.0;    
                
            }  
            
            if(data.contains("zm"))
            
            {
                
            countforcharactersz13 = countforcharactersz13+1.0;    
                
            }  
            
            if(data.contains("zn"))
            
            {
                
            countforcharactersz14 = countforcharactersz14+1.0;    
                
            }  
             
            if(data.contains("zo"))
            
            {
                
            countforcharactersz15 = countforcharactersz15+1.0;    
                
            }  
            
            if(data.contains("zp"))
            
            {
                
            countforcharactersz16 = countforcharactersz16+1.0;    
                
            }  
            
            if(data.contains("zq"))
            
            {
                
            countforcharactersz17 = countforcharactersz17+1.0;    
                
            }  
            
            if(data.contains("zr"))
            
            {
                
            countforcharactersz18 = countforcharactersz18+1.0;    
                
            }  
            
            if(data.contains("zs"))
            
            {
                
            countforcharactersz19 = countforcharactersz19+1.0;    
                
            }  
            
            if(data.contains("zt"))
            
            {
                
            countforcharactersz20 = countforcharactersz20+1.0;    
                
            }  
            
            if(data.contains("zu"))
            
            {
                
            countforcharactersz21 = countforcharactersz21+1.0;    
                
            }  
            
            if(data.contains("zv"))
            
            {
                
            countforcharactersz22 = countforcharactersz22+1.0;    
                
            }  
            
            if(data.contains("zw"))
            
            {
                
            countforcharactersz23 = countforcharactersz23+1.0;    
                
            }  
            
            if(data.contains("zx"))
            
            {
                
            countforcharactersz24 = countforcharactersz24+1.0;    
                
            }  
            
            if(data.contains("zy"))
            
            {
                
            countforcharactersz25 = countforcharactersz25+1.0;    
                
            }  
            
            if(data.contains("zz"))
            
            {
                
            countforcharactersz26 = countforcharactersz26+1.0;    
                
            }  
            
            if(data.contains("z."))
            
            {
                
            countforcharactersz27 = countforcharactersz27+1.0;    
                
            }  
            
            if(data.contains("z,"))
            
            {
                
            countforcharactersz28 = countforcharactersz28+1.0;    
                
            }  
            
            if(data.contains("z "))
            
            {
                
            countforcharactersz29 = countforcharactersz29+1.0;    
                
            }  
            
            if(data.contains(".a"))
            
            {
                
            countforcharactersdot1 = countforcharactersdot1+1.0;    
                
            }  
            
            if(data.contains(".b"))
            
            {
                
            countforcharactersdot2 = countforcharactersdot2+1.0;    
                
            }  
            
            if(data.contains(".c"))
            
            {
                
            countforcharactersdot3 = countforcharactersdot3+1.0;    
                
            }  
            
            if(data.contains(".d"))
            
            {
                
            countforcharactersdot4 = countforcharactersdot4+1.0;    
                
            }  
            
            if(data.contains(".e"))
            
            {
                
            countforcharactersdot5 = countforcharactersdot5+1.0;    
                
            }  
            
            if(data.contains(".f"))
            
            {
                
            countforcharactersdot6 = countforcharactersdot6+1.0;    
                
            }  
            
            if(data.contains(".g"))
            
            {
                
            countforcharactersdot7 = countforcharactersdot7+1.0;    
                
            }  
            
            if(data.contains(".h"))
            
            {
                
            countforcharactersdot8 = countforcharactersdot8+1.0;    
                
            }  
            
            if(data.contains(".i"))
            
            {
                
            countforcharactersdot9 = countforcharactersdot9+1.0;    
                
            }  
            
            if(data.contains(".j"))
            
            {
                
            countforcharactersdot10 = countforcharactersdot10+1.0;    
                
            }  
            
            if(data.contains(".k"))
            
            {
                
            countforcharactersdot11 = countforcharactersdot11+1.0;    
                
            }  
            
            if(data.contains(".l"))
            
            {
                
            countforcharactersdot12 = countforcharactersdot12+1.0;    
                
            }  
            
            if(data.contains(".m"))
            
            {
                
            countforcharactersdot13 = countforcharactersdot13+1.0;    
                
            }  
            
            if(data.contains(".n"))
            
            {
                
            countforcharactersdot14 = countforcharactersdot14+1.0;    
                
            }  
             
            if(data.contains(".o"))
            
            {
                
            countforcharactersdot15 = countforcharactersdot15+1.0;    
                
            }  
            
            if(data.contains(".p"))
            
            {
                
            countforcharactersdot16 = countforcharactersdot16+1.0;    
                
            }  
            
            if(data.contains(".q"))
            
            {
                
            countforcharactersdot17 = countforcharactersdot17+1.0;    
                
            }  
            
            if(data.contains(".r"))
            
            {
                
            countforcharactersdot18 = countforcharactersdot18+1.0;    
                
            }  
            
            if(data.contains(".s"))
            
            {
                
            countforcharactersdot19 = countforcharactersdot19+1.0;    
                
            }  
            
            if(data.contains(".t"))
            
            {
                
            countforcharactersdot20 = countforcharactersdot20+1.0;    
                
            }  
            
            if(data.contains(".u"))
            
            {
                
            countforcharactersdot21 = countforcharactersdot21+1.0;    
                
            }  
            
            if(data.contains(".v"))
            
            {
                
            countforcharactersdot22 = countforcharactersdot22+1.0;    
                
            }  
            
            if(data.contains(".w"))
            
            {
                
            countforcharactersdot23 = countforcharactersdot23+1.0;    
                
            }  
            
            if(data.contains(".x"))
            
            {
                
            countforcharactersdot24 = countforcharactersdot24+1.0;    
                
            }  
            
            if(data.contains(".y"))
            
            {
                
            countforcharactersdot25 = countforcharactersdot25+1.0;    
                
            }  
            
            if(data.contains(".z"))
            
            {
                
            countforcharactersdot26 = countforcharactersdot26+1.0;    
                
            }  
            
            if(data.contains(".."))
            
            {
                
            countforcharactersdot27 = countforcharactersdot27+1.0;    
                
            }  
            
            if(data.contains(".,"))
            
            {
                
            countforcharactersdot28 = countforcharactersdot28+1.0;    
                
            }  
            
            if(data.contains(". "))
            
            {
                
            countforcharactersdot29 = countforcharactersdot29+1.0;    
                
            }  
            
            if(data.contains(",a"))
            
            {
                
            countforcharacterscomma1 = countforcharacterscomma1+1.0;    
                
            }  
            
            if(data.contains(",b"))
            
            {
                
            countforcharacterscomma2 = countforcharacterscomma2+1.0;    
                
            }  
            
            if(data.contains(",c"))
            
            {
                
            countforcharacterscomma3 = countforcharacterscomma3+1.0;    
                
            }  
            
            if(data.contains(",d"))
            
            {
                
            countforcharacterscomma4 = countforcharacterscomma4+1.0;    
                
            }  
            
            if(data.contains(",e"))
            
            {
                
            countforcharacterscomma5 = countforcharacterscomma5+1.0;    
                
            }  
            
            if(data.contains(",f"))
            
            {
                
            countforcharacterscomma6 = countforcharacterscomma6+1.0;    
                
            }  
            
            if(data.contains(",g"))
            
            {
                
            countforcharacterscomma7 = countforcharacterscomma7+1.0;    
                
            }  
            
            if(data.contains(",h"))
            
            {
                
            countforcharacterscomma8 = countforcharacterscomma8+1.0;    
                
            }  
            
            if(data.contains(",i"))
            
            {
                
            countforcharacterscomma9 = countforcharacterscomma9+1.0;    
                
            }  
            
            if(data.contains(",j"))
            
            {
                
            countforcharacterscomma10 = countforcharacterscomma10+1.0;    
                
            }  
            
            if(data.contains(",k"))
            
            {
                
            countforcharacterscomma11 = countforcharacterscomma11+1.0;    
                
            }  
            
            if(data.contains(",l"))
            
            {
                
            countforcharacterscomma12 = countforcharacterscomma12+1.0;    
                
            }  
            
            if(data.contains(",m"))
            
            {
                
            countforcharacterscomma13 = countforcharacterscomma13+1.0;    
                
            }  
            
            if(data.contains(",n"))
            
            {
                
            countforcharacterscomma14 = countforcharacterscomma14+1.0;    
                
            }  
             
            if(data.contains(",o"))
            
            {
                
            countforcharacterscomma15 = countforcharacterscomma15+1.0;    
                
            }  
            
            if(data.contains(",p"))
            
            {
                
            countforcharacterscomma16 = countforcharacterscomma16+1.0;    
                
            }  
            
            if(data.contains(",q"))
            
            {
                
            countforcharacterscomma17 = countforcharacterscomma17+1.0;    
                
            }  
            
            if(data.contains(",r"))
            
            {
                
            countforcharacterscomma18 = countforcharacterscomma18+1.0;    
                
            }  
            
            if(data.contains(",s"))
            
            {
                
            countforcharacterscomma19 = countforcharacterscomma19+1.0;    
                
            }  
            
            if(data.contains(",t"))
            
            {
                
            countforcharacterscomma20 = countforcharacterscomma20+1.0;    
                
            }  
            
            if(data.contains(",u"))
            
            {
                
            countforcharacterscomma21 = countforcharacterscomma21+1.0;    
                
            }  
            
            if(data.contains(",v"))
            
            {
                
            countforcharacterscomma22 = countforcharacterscomma22+1.0;    
                
            }  
            
            if(data.contains(",w"))
            
            {
                
            countforcharacterscomma23 = countforcharacterscomma23+1.0;    
                
            }  
            
            if(data.contains(",x"))
            
            {
                
            countforcharacterscomma24 = countforcharacterscomma24+1.0;    
                
            }  
            
            if(data.contains(",y"))
            
            {
                
            countforcharacterscomma25 = countforcharacterscomma25+1.0;    
                
            }  
            
            if(data.contains(",z"))
            
            {
                
            countforcharacterscomma26 = countforcharacterscomma26+1.0;    
                
            }  
            
            if(data.contains(",."))
            
            {
                
            countforcharacterscomma27 = countforcharacterscomma27+1.0;    
                
            }  
            
            if(data.contains(",,"))
            
            {
                
            countforcharacterscomma28 = countforcharacterscomma28+1.0;    
                
            }  
            
            if(data.contains(", "))
            
            {
                
            countforcharacterscomma29 = countforcharacterscomma29+1.0;    
                
            }  
            
            if(data.contains(" a"))
            
            {
                
            countforcharactersvacuum1 = countforcharactersvacuum1+1.0;    
                
            }  
            
            if(data.contains(" b"))
            
            {
                
            countforcharactersvacuum2 = countforcharactersvacuum2+1.0;    
                
            }  
            
            if(data.contains(" c"))
            
            {
                
            countforcharactersvacuum3 = countforcharactersvacuum3+1.0;    
                
            }  
            
            if(data.contains(" d"))
            
            {
                
            countforcharactersvacuum4 = countforcharactersvacuum4+1.0;    
                
            }  
            
            if(data.contains(" e"))
            
            {
                
            countforcharactersvacuum5 = countforcharactersvacuum5+1.0;    
                
            }  
            
            if(data.contains(" f"))
            
            {
                
            countforcharactersvacuum6 = countforcharactersvacuum6+1.0;    
                
            }  
            
            if(data.contains(" g"))
            
            {
                
            countforcharactersvacuum7 = countforcharactersvacuum7+1.0;    
                
            }  
            
            if(data.contains(" h"))
            
            {
                
            countforcharactersvacuum8 = countforcharactersvacuum8+1.0;    
                
            }  
            
            if(data.contains(" i"))
            
            {
                
            countforcharactersvacuum9 = countforcharactersvacuum9+1.0;    
                
            }  
            
            if(data.contains(" j"))
            
            {
                
            countforcharactersvacuum10 = countforcharactersvacuum10+1.0;    
                
            }  
            
            if(data.contains(" k"))
            
            {
                
            countforcharactersvacuum11 = countforcharactersvacuum11+1.0;    
                
            }  
            
            if(data.contains(" l"))
            
            {
                
            countforcharactersvacuum12 = countforcharactersvacuum12+1.0;    
                
            }  
            
            if(data.contains(" m"))
            
            {
                
            countforcharactersvacuum13 = countforcharactersvacuum13+1.0;    
                
            }  
            
            if(data.contains(" n"))
            
            {
                
            countforcharactersvacuum14 = countforcharactersvacuum14+1.0;    
                
            }  
             
            if(data.contains(" o"))
            
            {
                
            countforcharactersvacuum15 = countforcharactersvacuum15+1.0;    
                
            }  
            
            if(data.contains(" p"))
            
            {
                
            countforcharactersvacuum16 = countforcharactersvacuum16+1.0;    
                
            }  
            
            if(data.contains(" q"))
            
            {
                
            countforcharactersvacuum17 = countforcharactersvacuum17+1.0;    
                
            }  
            
            if(data.contains(" r"))
            
            {
                
            countforcharactersvacuum18 = countforcharactersvacuum18+1.0;    
                
            }  
            
            if(data.contains(" s"))
            
            {
                
            countforcharactersvacuum19 = countforcharactersvacuum19+1.0;    
                
            }  
            
            if(data.contains(" t"))
            
            {
                
            countforcharactersvacuum20 = countforcharactersvacuum20+1.0;    
                
            }  
            
            if(data.contains(" u"))
            
            {
                
            countforcharactersvacuum21 = countforcharactersvacuum21+1.0;    
                
            }  
            
            if(data.contains(" v"))
            
            {
                
            countforcharactersvacuum22 = countforcharactersvacuum22+1.0;    
                
            }  
            
            if(data.contains(" w"))
            
            {
                
            countforcharactersvacuum23 = countforcharactersvacuum23+1.0;    
                
            }  
            
            if(data.contains(" x"))
            
            {
                
            countforcharactersvacuum24 = countforcharactersvacuum24+1.0;    
                
            }  
            
            if(data.contains(" y"))
            
            {
                
            countforcharactersvacuum25 = countforcharactersvacuum25+1.0;    
                
            }  
            
            if(data.contains(" z"))
            
            {
                
            countforcharactersvacuum26 = countforcharactersvacuum26+1.0;    
                
            }  
            
            if(data.contains(" ."))
            
            {
                
            countforcharactersvacuum27 = countforcharactersvacuum27+1.0;    
                
            }  
            
            if(data.contains(" ,"))
            
            {
                
            countforcharactersvacuum28 = countforcharactersvacuum28+1.0;    
                
            }  
            
            if(data.contains("  "))
            
            {
                
            countforcharactersvacuum29 = countforcharactersvacuum29+1.0;    
                
            }  
            
            }
            
            System.out.println("\nThe number of pair characters aa is = " + countforcharactersa1 );
            System.out.println("\nThe number of pair characters ab is = " + countforcharactersa2 );
            System.out.println("\nThe number of pair characters ac is = " + countforcharactersa3 );
            System.out.println("\nThe number of pair characters ad is = " + countforcharactersa4 );
            System.out.println("\nThe number of pair characters ae is = " + countforcharactersa5 );
            System.out.println("\nThe number of pair characters af is = " + countforcharactersa6 );
            System.out.println("\nThe number of pair characters ag is = " + countforcharactersa7 );
            System.out.println("\nThe number of pair characters ah is = " + countforcharactersa8 );
            System.out.println("\nThe number of pair characters ai is = " + countforcharactersa9 );
            System.out.println("\nThe number of pair characters aj is = " + countforcharactersa10 );
            System.out.println("\nThe number of pair characters ak is = " + countforcharactersa11 );
            System.out.println("\nThe number of pair characters al is = " + countforcharactersa12 );
            System.out.println("\nThe number of pair characters am is = " + countforcharactersa13 );
            System.out.println("\nThe number of pair characters an is = " + countforcharactersa14 );
            System.out.println("\nThe number of pair characters ao is = " + countforcharactersa15 );
            System.out.println("\nThe number of pair characters ap is = " + countforcharactersa16 );
            System.out.println("\nThe number of pair characters aq is = " + countforcharactersa17 );
            System.out.println("\nThe number of pair characters ar is = " + countforcharactersa18 );
            System.out.println("\nThe number of pair characters as is = " + countforcharactersa19 );
            System.out.println("\nThe number of pair characters at is = " + countforcharactersa20 );
            System.out.println("\nThe number of pair characters au is = " + countforcharactersa21 );
            System.out.println("\nThe number of pair characters av is = " + countforcharactersa22 );
            System.out.println("\nThe number of pair characters aw is = " + countforcharactersa23 );
            System.out.println("\nThe number of pair characters ax is = " + countforcharactersa24 );
            System.out.println("\nThe number of pair characters ay is = " + countforcharactersa25 );
            System.out.println("\nThe number of pair characters az is = " + countforcharactersa26 );
            System.out.println("\nThe number of pair characters a. is = " + countforcharactersa27 );
            System.out.println("\nThe number of pair characters a, is = " + countforcharactersa28 );
            System.out.println("\nThe number of pair characters avacuum is = " + countforcharactersa29 );
            System.out.println("\nThe number of pair characters ba is = " + countforcharactersb1 );
            System.out.println("\nThe number of pair characters bb is = " + countforcharactersb2 );
            System.out.println("\nThe number of pair characters bc is = " + countforcharactersb3 );
            System.out.println("\nThe number of pair characters bd is = " + countforcharactersb4 );
            System.out.println("\nThe number of pair characters be is = " + countforcharactersb5 );
            System.out.println("\nThe number of pair characters bf is = " + countforcharactersb6 );
            System.out.println("\nThe number of pair characters bg is = " + countforcharactersb7 );
            System.out.println("\nThe number of pair characters bh is = " + countforcharactersb8 );
            System.out.println("\nThe number of pair characters bi is = " + countforcharactersb9 );
            System.out.println("\nThe number of pair characters bj is = " + countforcharactersb10 );
            System.out.println("\nThe number of pair characters bk is = " + countforcharactersb11 );
            System.out.println("\nThe number of pair characters bl is = " + countforcharactersb12 );
            System.out.println("\nThe number of pair characters bm is = " + countforcharactersb13 );
            System.out.println("\nThe number of pair characters bn is = " + countforcharactersb14 );
            System.out.println("\nThe number of pair characters bo is = " + countforcharactersb15 );
            System.out.println("\nThe number of pair characters bp is = " + countforcharactersb16 );
            System.out.println("\nThe number of pair characters bq is = " + countforcharactersb17 );
            System.out.println("\nThe number of pair characters br is = " + countforcharactersb18 );
            System.out.println("\nThe number of pair characters bs is = " + countforcharactersb19 );
            System.out.println("\nThe number of pair characters bt is = " + countforcharactersb20 );
            System.out.println("\nThe number of pair characters bu is = " + countforcharactersb21 );
            System.out.println("\nThe number of pair characters bv is = " + countforcharactersb22 );
            System.out.println("\nThe number of pair characters bw is = " + countforcharactersb23 );
            System.out.println("\nThe number of pair characters bx is = " + countforcharactersb24 );
            System.out.println("\nThe number of pair characters by is = " + countforcharactersb25 );
            System.out.println("\nThe number of pair characters bz is = " + countforcharactersb26 );
            System.out.println("\nThe number of pair characters b. is = " + countforcharactersb27 );
            System.out.println("\nThe number of pair characters b, is = " + countforcharactersb28 );
            System.out.println("\nThe number of pair characters bvacuum is = " + countforcharactersb29 );
            System.out.println("\nThe number of pair characters ca is = " + countforcharactersc1 );
            System.out.println("\nThe number of pair characters cb is = " + countforcharactersc2 );
            System.out.println("\nThe number of pair characters cc is = " + countforcharactersc3 );
            System.out.println("\nThe number of pair characters cd is = " + countforcharactersc4 );
            System.out.println("\nThe number of pair characters ce is = " + countforcharactersc5 );
            System.out.println("\nThe number of pair characters cf is = " + countforcharactersc6 );
            System.out.println("\nThe number of pair characters cg is = " + countforcharactersc7 );
            System.out.println("\nThe number of pair characters ch is = " + countforcharactersc8 );
            System.out.println("\nThe number of pair characters ci is = " + countforcharactersc9 );
            System.out.println("\nThe number of pair characters cj is = " + countforcharactersc10 );
            System.out.println("\nThe number of pair characters ck is = " + countforcharactersc11 );
            System.out.println("\nThe number of pair characters cl is = " + countforcharactersc12 );
            System.out.println("\nThe number of pair characters cm is = " + countforcharactersc13 );
            System.out.println("\nThe number of pair characters cn is = " + countforcharactersc14 );
            System.out.println("\nThe number of pair characters co is = " + countforcharactersc15 );
            System.out.println("\nThe number of pair characters cp is = " + countforcharactersc16 );
            System.out.println("\nThe number of pair characters cq is = " + countforcharactersc17 );
            System.out.println("\nThe number of pair characters cr is = " + countforcharactersc18 );
            System.out.println("\nThe number of pair characters cs is = " + countforcharactersc19 );
            System.out.println("\nThe number of pair characters ct is = " + countforcharactersc20 );
            System.out.println("\nThe number of pair characters cu is = " + countforcharactersc21 );
            System.out.println("\nThe number of pair characters cv is = " + countforcharactersc22 );
            System.out.println("\nThe number of pair characters cw is = " + countforcharactersc23 );
            System.out.println("\nThe number of pair characters cx is = " + countforcharactersc24 );
            System.out.println("\nThe number of pair characters cy is = " + countforcharactersc25 );
            System.out.println("\nThe number of pair characters cz is = " + countforcharactersc26 );
            System.out.println("\nThe number of pair characters c. is = " + countforcharactersc27 );
            System.out.println("\nThe number of pair characters c, is = " + countforcharactersc28 );
            System.out.println("\nThe number of pair characters cvacuum is = " + countforcharactersc29 );
            System.out.println("\nThe number of pair characters da is = " + countforcharactersd1 );
            System.out.println("\nThe number of pair characters db is = " + countforcharactersd2 );
            System.out.println("\nThe number of pair characters dc is = " + countforcharactersd3 );
            System.out.println("\nThe number of pair characters dd is = " + countforcharactersd4 );
            System.out.println("\nThe number of pair characters de is = " + countforcharactersd5 );
            System.out.println("\nThe number of pair characters df is = " + countforcharactersd6 );
            System.out.println("\nThe number of pair characters dg is = " + countforcharactersd7 );
            System.out.println("\nThe number of pair characters dh is = " + countforcharactersd8 );
            System.out.println("\nThe number of pair characters di is = " + countforcharactersd9 );
            System.out.println("\nThe number of pair characters dj is = " + countforcharactersd10 );
            System.out.println("\nThe number of pair characters dk is = " + countforcharactersd11 );
            System.out.println("\nThe number of pair characters dl is = " + countforcharactersd12 );
            System.out.println("\nThe number of pair characters dm is = " + countforcharactersd13 );
            System.out.println("\nThe number of pair characters dn is = " + countforcharactersd14 );
            System.out.println("\nThe number of pair characters do is = " + countforcharactersd15 );
            System.out.println("\nThe number of pair characters dp is = " + countforcharactersd16 );
            System.out.println("\nThe number of pair characters dq is = " + countforcharactersd17 );
            System.out.println("\nThe number of pair characters dr is = " + countforcharactersd18 );
            System.out.println("\nThe number of pair characters ds is = " + countforcharactersd19 );
            System.out.println("\nThe number of pair characters dt is = " + countforcharactersd20 );
            System.out.println("\nThe number of pair characters du is = " + countforcharactersd21 );
            System.out.println("\nThe number of pair characters dv is = " + countforcharactersd22 );
            System.out.println("\nThe number of pair characters dw is = " + countforcharactersd23 );
            System.out.println("\nThe number of pair characters dx is = " + countforcharactersd24 );
            System.out.println("\nThe number of pair characters dy is = " + countforcharactersd25 );
            System.out.println("\nThe number of pair characters dz is = " + countforcharactersd26 );
            System.out.println("\nThe number of pair characters d. is = " + countforcharactersd27 );
            System.out.println("\nThe number of pair characters d, is = " + countforcharactersd28 );
            System.out.println("\nThe number of pair characters dvacuum is = " + countforcharactersd29 );
            System.out.println("\nThe number of pair characters ea is = " + countforcharacterse1 );
            System.out.println("\nThe number of pair characters eb is = " + countforcharacterse2 );
            System.out.println("\nThe number of pair characters ec is = " + countforcharacterse3 );
            System.out.println("\nThe number of pair characters ed is = " + countforcharacterse4 );
            System.out.println("\nThe number of pair characters ee is = " + countforcharacterse5 );
            System.out.println("\nThe number of pair characters ef is = " + countforcharacterse6 );
            System.out.println("\nThe number of pair characters eg is = " + countforcharacterse7 );
            System.out.println("\nThe number of pair characters eh is = " + countforcharacterse8 );
            System.out.println("\nThe number of pair characters ei is = " + countforcharacterse9 );
            System.out.println("\nThe number of pair characters ej is = " + countforcharacterse10 );
            System.out.println("\nThe number of pair characters ek is = " + countforcharacterse11 );
            System.out.println("\nThe number of pair characters el is = " + countforcharacterse12 );
            System.out.println("\nThe number of pair characters em is = " + countforcharacterse13 );
            System.out.println("\nThe number of pair characters en is = " + countforcharacterse14 );
            System.out.println("\nThe number of pair characters eo is = " + countforcharacterse15 );
            System.out.println("\nThe number of pair characters ep is = " + countforcharacterse16 );
            System.out.println("\nThe number of pair characters eq is = " + countforcharacterse17 );
            System.out.println("\nThe number of pair characters er is = " + countforcharacterse18 );
            System.out.println("\nThe number of pair characters es is = " + countforcharacterse19 );
            System.out.println("\nThe number of pair characters et is = " + countforcharacterse20 );
            System.out.println("\nThe number of pair characters eu is = " + countforcharacterse21 );
            System.out.println("\nThe number of pair characters ev is = " + countforcharacterse22 );
            System.out.println("\nThe number of pair characters ew is = " + countforcharacterse23 );
            System.out.println("\nThe number of pair characters ex is = " + countforcharacterse24 );
            System.out.println("\nThe number of pair characters ey is = " + countforcharacterse25 );
            System.out.println("\nThe number of pair characters ez is = " + countforcharacterse26 );
            System.out.println("\nThe number of pair characters e. is = " + countforcharacterse27 );
            System.out.println("\nThe number of pair characters e, is = " + countforcharacterse28 );
            System.out.println("\nThe number of pair characters evacuum is = " + countforcharacterse29 );
            System.out.println("\nThe number of pair characters fa is = " + countforcharactersf1 );
            System.out.println("\nThe number of pair characters fb is = " + countforcharactersf2 );
            System.out.println("\nThe number of pair characters fc is = " + countforcharactersf3 );
            System.out.println("\nThe number of pair characters fd is = " + countforcharactersf4 );
            System.out.println("\nThe number of pair characters fe is = " + countforcharactersf5 );
            System.out.println("\nThe number of pair characters ff is = " + countforcharactersf6 );
            System.out.println("\nThe number of pair characters fg is = " + countforcharactersf7 );
            System.out.println("\nThe number of pair characters fh is = " + countforcharactersf8 );
            System.out.println("\nThe number of pair characters fi is = " + countforcharactersf9 );
            System.out.println("\nThe number of pair characters fj is = " + countforcharactersf10 );
            System.out.println("\nThe number of pair characters fk is = " + countforcharactersf11 );
            System.out.println("\nThe number of pair characters fl is = " + countforcharactersf12 );
            System.out.println("\nThe number of pair characters fm is = " + countforcharactersf13 );
            System.out.println("\nThe number of pair characters fn is = " + countforcharactersf14 );
            System.out.println("\nThe number of pair characters fo is = " + countforcharactersf15 );
            System.out.println("\nThe number of pair characters fp is = " + countforcharactersf16 );
            System.out.println("\nThe number of pair characters fq is = " + countforcharactersf17 );
            System.out.println("\nThe number of pair characters fr is = " + countforcharactersf18 );
            System.out.println("\nThe number of pair characters fs is = " + countforcharactersf19 );
            System.out.println("\nThe number of pair characters ft is = " + countforcharactersf20 );
            System.out.println("\nThe number of pair characters fu is = " + countforcharactersf21 );
            System.out.println("\nThe number of pair characters fv is = " + countforcharactersf22 );
            System.out.println("\nThe number of pair characters fw is = " + countforcharactersf23 );
            System.out.println("\nThe number of pair characters fx is = " + countforcharactersf24 );
            System.out.println("\nThe number of pair characters fy is = " + countforcharactersf25 );
            System.out.println("\nThe number of pair characters fz is = " + countforcharactersf26 );
            System.out.println("\nThe number of pair characters f. is = " + countforcharactersf27 );
            System.out.println("\nThe number of pair characters f, is = " + countforcharactersf28 );
            System.out.println("\nThe number of pair characters fvacuum is = " + countforcharactersf29 );
            System.out.println("\nThe number of pair characters ga is = " + countforcharactersg1 );
            System.out.println("\nThe number of pair characters gb is = " + countforcharactersg2 );
            System.out.println("\nThe number of pair characters gc is = " + countforcharactersg3 );
            System.out.println("\nThe number of pair characters gd is = " + countforcharactersg4 );
            System.out.println("\nThe number of pair characters ge is = " + countforcharactersg5 );
            System.out.println("\nThe number of pair characters gf is = " + countforcharactersg6 );
            System.out.println("\nThe number of pair characters gg is = " + countforcharactersg7 );
            System.out.println("\nThe number of pair characters gh is = " + countforcharactersg8 );
            System.out.println("\nThe number of pair characters gi is = " + countforcharactersg9 );
            System.out.println("\nThe number of pair characters gj is = " + countforcharactersg10 );
            System.out.println("\nThe number of pair characters gk is = " + countforcharactersg11 );
            System.out.println("\nThe number of pair characters gl is = " + countforcharactersg12 );
            System.out.println("\nThe number of pair characters gm is = " + countforcharactersg13 );
            System.out.println("\nThe number of pair characters gn is = " + countforcharactersg14 );
            System.out.println("\nThe number of pair characters go is = " + countforcharactersg15 );
            System.out.println("\nThe number of pair characters gp is = " + countforcharactersg16 );
            System.out.println("\nThe number of pair characters gq is = " + countforcharactersg17 );
            System.out.println("\nThe number of pair characters gr is = " + countforcharactersg18 );
            System.out.println("\nThe number of pair characters gs is = " + countforcharactersg19 );
            System.out.println("\nThe number of pair characters gt is = " + countforcharactersg20 );
            System.out.println("\nThe number of pair characters gu is = " + countforcharactersg21 );
            System.out.println("\nThe number of pair characters gv is = " + countforcharactersg22 );
            System.out.println("\nThe number of pair characters gw is = " + countforcharactersg23 );
            System.out.println("\nThe number of pair characters gx is = " + countforcharactersg24 );
            System.out.println("\nThe number of pair characters gy is = " + countforcharactersg25 );
            System.out.println("\nThe number of pair characters gz is = " + countforcharactersg26 );
            System.out.println("\nThe number of pair characters g. is = " + countforcharactersg27 );
            System.out.println("\nThe number of pair characters g, is = " + countforcharactersg28 );
            System.out.println("\nThe number of pair characters gvacuum is = " + countforcharactersg29 );
            System.out.println("\nThe number of pair characters ha is = " + countforcharactersh1 );
            System.out.println("\nThe number of pair characters hb is = " + countforcharactersh2 );
            System.out.println("\nThe number of pair characters hc is = " + countforcharactersh3 );
            System.out.println("\nThe number of pair characters hd is = " + countforcharactersh4 );
            System.out.println("\nThe number of pair characters he is = " + countforcharactersh5 );
            System.out.println("\nThe number of pair characters hf is = " + countforcharactersh6 );
            System.out.println("\nThe number of pair characters hg is = " + countforcharactersh7 );
            System.out.println("\nThe number of pair characters hh is = " + countforcharactersh8 );
            System.out.println("\nThe number of pair characters hi is = " + countforcharactersh9 );
            System.out.println("\nThe number of pair characters hj is = " + countforcharactersh10 );
            System.out.println("\nThe number of pair characters hk is = " + countforcharactersh11 );
            System.out.println("\nThe number of pair characters hl is = " + countforcharactersh12 );
            System.out.println("\nThe number of pair characters hm is = " + countforcharactersh13 );
            System.out.println("\nThe number of pair characters hn is = " + countforcharactersh14 );
            System.out.println("\nThe number of pair characters ho is = " + countforcharactersh15 );
            System.out.println("\nThe number of pair characters hp is = " + countforcharactersh16 );
            System.out.println("\nThe number of pair characters hq is = " + countforcharactersh17 );
            System.out.println("\nThe number of pair characters hr is = " + countforcharactersh18 );
            System.out.println("\nThe number of pair characters hs is = " + countforcharactersh19 );
            System.out.println("\nThe number of pair characters ht is = " + countforcharactersh20 );
            System.out.println("\nThe number of pair characters hu is = " + countforcharactersh21 );
            System.out.println("\nThe number of pair characters hv is = " + countforcharactersh22 );
            System.out.println("\nThe number of pair characters hw is = " + countforcharactersh23 );
            System.out.println("\nThe number of pair characters hx is = " + countforcharactersh24 );
            System.out.println("\nThe number of pair characters hy is = " + countforcharactersh25 );
            System.out.println("\nThe number of pair characters hz is = " + countforcharactersh26 );
            System.out.println("\nThe number of pair characters h. is = " + countforcharactersh27 );
            System.out.println("\nThe number of pair characters h, is = " + countforcharactersh28 );
            System.out.println("\nThe number of pair characters hvacuum is = " + countforcharactersh29 );
            System.out.println("\nThe number of pair characters ia is = " + countforcharactersi1 );
            System.out.println("\nThe number of pair characters ib is = " + countforcharactersi2 );
            System.out.println("\nThe number of pair characters ic is = " + countforcharactersi3 );
            System.out.println("\nThe number of pair characters id is = " + countforcharactersi4 );
            System.out.println("\nThe number of pair characters ie is = " + countforcharactersi5 );
            System.out.println("\nThe number of pair characters if is = " + countforcharactersi6 );
            System.out.println("\nThe number of pair characters ig is = " + countforcharactersi7 );
            System.out.println("\nThe number of pair characters ih is = " + countforcharactersi8 );
            System.out.println("\nThe number of pair characters ii is = " + countforcharactersi9 );
            System.out.println("\nThe number of pair characters ij is = " + countforcharactersi10 );
            System.out.println("\nThe number of pair characters ik is = " + countforcharactersi11 );
            System.out.println("\nThe number of pair characters il is = " + countforcharactersi12 );
            System.out.println("\nThe number of pair characters im is = " + countforcharactersi13 );
            System.out.println("\nThe number of pair characters in is = " + countforcharactersi14 );
            System.out.println("\nThe number of pair characters io is = " + countforcharactersi15 );
            System.out.println("\nThe number of pair characters ip is = " + countforcharactersi16 );
            System.out.println("\nThe number of pair characters iq is = " + countforcharactersi17 );
            System.out.println("\nThe number of pair characters ir is = " + countforcharactersi18 );
            System.out.println("\nThe number of pair characters is is = " + countforcharactersi19 );
            System.out.println("\nThe number of pair characters it is = " + countforcharactersi20 );
            System.out.println("\nThe number of pair characters iu is = " + countforcharactersi21 );
            System.out.println("\nThe number of pair characters iv is = " + countforcharactersi22 );
            System.out.println("\nThe number of pair characters iw is = " + countforcharactersi23 );
            System.out.println("\nThe number of pair characters ix is = " + countforcharactersi24 );
            System.out.println("\nThe number of pair characters iy is = " + countforcharactersi25 );
            System.out.println("\nThe number of pair characters iz is = " + countforcharactersi26 );
            System.out.println("\nThe number of pair characters i. is = " + countforcharactersi27 );
            System.out.println("\nThe number of pair characters i, is = " + countforcharactersi28 );
            System.out.println("\nThe number of pair characters ivacuum is = " + countforcharactersi29 );
            System.out.println("\nThe number of pair characters ja is = " + countforcharactersj1 );
            System.out.println("\nThe number of pair characters jb is = " + countforcharactersj2 );
            System.out.println("\nThe number of pair characters jc is = " + countforcharactersj3 );
            System.out.println("\nThe number of pair characters jd is = " + countforcharactersj4 );
            System.out.println("\nThe number of pair characters je is = " + countforcharactersj5 );
            System.out.println("\nThe number of pair characters jf is = " + countforcharactersj6 );
            System.out.println("\nThe number of pair characters jg is = " + countforcharactersj7 );
            System.out.println("\nThe number of pair characters jh is = " + countforcharactersj8 );
            System.out.println("\nThe number of pair characters ji is = " + countforcharactersj9 );
            System.out.println("\nThe number of pair characters jj is = " + countforcharactersj10 );
            System.out.println("\nThe number of pair characters jk is = " + countforcharactersj11 );
            System.out.println("\nThe number of pair characters jl is = " + countforcharactersj12 );
            System.out.println("\nThe number of pair characters jm is = " + countforcharactersj13 );
            System.out.println("\nThe number of pair characters jn is = " + countforcharactersj14 );
            System.out.println("\nThe number of pair characters jo is = " + countforcharactersj15 );
            System.out.println("\nThe number of pair characters jp is = " + countforcharactersj16 );
            System.out.println("\nThe number of pair characters jq is = " + countforcharactersj17 );
            System.out.println("\nThe number of pair characters jr is = " + countforcharactersj18 );
            System.out.println("\nThe number of pair characters js is = " + countforcharactersj19 );
            System.out.println("\nThe number of pair characters jt is = " + countforcharactersj20 );
            System.out.println("\nThe number of pair characters ju is = " + countforcharactersj21 );
            System.out.println("\nThe number of pair characters jv is = " + countforcharactersj22 );
            System.out.println("\nThe number of pair characters jw is = " + countforcharactersj23 );
            System.out.println("\nThe number of pair characters jx is = " + countforcharactersj24 );
            System.out.println("\nThe number of pair characters jy is = " + countforcharactersj25 );
            System.out.println("\nThe number of pair characters jz is = " + countforcharactersj26 );
            System.out.println("\nThe number of pair characters j. is = " + countforcharactersj27 );
            System.out.println("\nThe number of pair characters j, is = " + countforcharactersj28 );
            System.out.println("\nThe number of pair characters jvacuum is = " + countforcharactersj29 );
            System.out.println("\nThe number of pair characters ka is = " + countforcharactersk1 );
            System.out.println("\nThe number of pair characters kb is = " + countforcharactersk2 );
            System.out.println("\nThe number of pair characters kc is = " + countforcharactersk3 );
            System.out.println("\nThe number of pair characters kd is = " + countforcharactersk4 );
            System.out.println("\nThe number of pair characters ke is = " + countforcharactersk5 );
            System.out.println("\nThe number of pair characters kf is = " + countforcharactersk6 );
            System.out.println("\nThe number of pair characters kg is = " + countforcharactersk7 );
            System.out.println("\nThe number of pair characters kh is = " + countforcharactersk8 );
            System.out.println("\nThe number of pair characters ki is = " + countforcharactersk9 );
            System.out.println("\nThe number of pair characters kj is = " + countforcharactersk10 );
            System.out.println("\nThe number of pair characters kk is = " + countforcharactersk11 );
            System.out.println("\nThe number of pair characters kl is = " + countforcharactersk12 );
            System.out.println("\nThe number of pair characters km is = " + countforcharactersk13 );
            System.out.println("\nThe number of pair characters kn is = " + countforcharactersk14 );
            System.out.println("\nThe number of pair characters ko is = " + countforcharactersk15 );
            System.out.println("\nThe number of pair characters kp is = " + countforcharactersk16 );
            System.out.println("\nThe number of pair characters kq is = " + countforcharactersk17 );
            System.out.println("\nThe number of pair characters kr is = " + countforcharactersk18 );
            System.out.println("\nThe number of pair characters ks is = " + countforcharactersk19 );
            System.out.println("\nThe number of pair characters kt is = " + countforcharactersk20 );
            System.out.println("\nThe number of pair characters ku is = " + countforcharactersk21 );
            System.out.println("\nThe number of pair characters kv is = " + countforcharactersk22 );
            System.out.println("\nThe number of pair characters kw is = " + countforcharactersk23 );
            System.out.println("\nThe number of pair characters kx is = " + countforcharactersk24 );
            System.out.println("\nThe number of pair characters ky is = " + countforcharactersk25 );
            System.out.println("\nThe number of pair characters kz is = " + countforcharactersk26 );
            System.out.println("\nThe number of pair characters k. is = " + countforcharactersk27 );
            System.out.println("\nThe number of pair characters k, is = " + countforcharactersk28 );
            System.out.println("\nThe number of pair characters kvacuum is = " + countforcharactersk29 );
            System.out.println("\nThe number of pair characters la is = " + countforcharactersl1 );
            System.out.println("\nThe number of pair characters lb is = " + countforcharactersl2 );
            System.out.println("\nThe number of pair characters lc is = " + countforcharactersl3 );
            System.out.println("\nThe number of pair characters ld is = " + countforcharactersl4 );
            System.out.println("\nThe number of pair characters le is = " + countforcharactersl5 );
            System.out.println("\nThe number of pair characters lf is = " + countforcharactersl6 );
            System.out.println("\nThe number of pair characters lg is = " + countforcharactersl7 );
            System.out.println("\nThe number of pair characters lh is = " + countforcharactersl8 );
            System.out.println("\nThe number of pair characters li is = " + countforcharactersl9 );
            System.out.println("\nThe number of pair characters lj is = " + countforcharactersl10 );
            System.out.println("\nThe number of pair characters lk is = " + countforcharactersl11 );
            System.out.println("\nThe number of pair characters ll is = " + countforcharactersl12 );
            System.out.println("\nThe number of pair characters lm is = " + countforcharactersl13 );
            System.out.println("\nThe number of pair characters ln is = " + countforcharactersl14 );
            System.out.println("\nThe number of pair characters lo is = " + countforcharactersl15 );
            System.out.println("\nThe number of pair characters lp is = " + countforcharactersl16 );
            System.out.println("\nThe number of pair characters lq is = " + countforcharactersl17 );
            System.out.println("\nThe number of pair characters lr is = " + countforcharactersl18 );
            System.out.println("\nThe number of pair characters ls is = " + countforcharactersl19 );
            System.out.println("\nThe number of pair characters lt is = " + countforcharactersl20 );
            System.out.println("\nThe number of pair characters lu is = " + countforcharactersl21 );
            System.out.println("\nThe number of pair characters lv is = " + countforcharactersl22 );
            System.out.println("\nThe number of pair characters lw is = " + countforcharactersl23 );
            System.out.println("\nThe number of pair characters lx is = " + countforcharactersl24 );
            System.out.println("\nThe number of pair characters ly is = " + countforcharactersl25 );
            System.out.println("\nThe number of pair characters lz is = " + countforcharactersl26 );
            System.out.println("\nThe number of pair characters l. is = " + countforcharactersl27 );
            System.out.println("\nThe number of pair characters l, is = " + countforcharactersl28 );
            System.out.println("\nThe number of pair characters lvacuum is = " + countforcharactersl29 );
            System.out.println("\nThe number of pair characters ma is = " + countforcharactersm1 );
            System.out.println("\nThe number of pair characters mb is = " + countforcharactersm2 );
            System.out.println("\nThe number of pair characters mc is = " + countforcharactersm3 );
            System.out.println("\nThe number of pair characters md is = " + countforcharactersm4 );
            System.out.println("\nThe number of pair characters me is = " + countforcharactersm5 );
            System.out.println("\nThe number of pair characters mf is = " + countforcharactersm6 );
            System.out.println("\nThe number of pair characters mg is = " + countforcharactersm7 );
            System.out.println("\nThe number of pair characters mh is = " + countforcharactersm8 );
            System.out.println("\nThe number of pair characters mi is = " + countforcharactersm9 );
            System.out.println("\nThe number of pair characters mj is = " + countforcharactersm10 );
            System.out.println("\nThe number of pair characters mk is = " + countforcharactersm11 );
            System.out.println("\nThe number of pair characters ml is = " + countforcharactersm12 );
            System.out.println("\nThe number of pair characters mm is = " + countforcharactersm13 );
            System.out.println("\nThe number of pair characters mn is = " + countforcharactersm14 );
            System.out.println("\nThe number of pair characters mo is = " + countforcharactersm15 );
            System.out.println("\nThe number of pair characters mp is = " + countforcharactersm16 );
            System.out.println("\nThe number of pair characters mq is = " + countforcharactersm17 );
            System.out.println("\nThe number of pair characters mr is = " + countforcharactersm18 );
            System.out.println("\nThe number of pair characters ms is = " + countforcharactersm19 );
            System.out.println("\nThe number of pair characters mt is = " + countforcharactersm20 );
            System.out.println("\nThe number of pair characters mu is = " + countforcharactersm21 );
            System.out.println("\nThe number of pair characters mv is = " + countforcharactersm22 );
            System.out.println("\nThe number of pair characters mw is = " + countforcharactersm23 );
            System.out.println("\nThe number of pair characters mx is = " + countforcharactersm24 );
            System.out.println("\nThe number of pair characters my is = " + countforcharactersm25 );
            System.out.println("\nThe number of pair characters mz is = " + countforcharactersm26 );
            System.out.println("\nThe number of pair characters m. is = " + countforcharactersm27 );
            System.out.println("\nThe number of pair characters m, is = " + countforcharactersm28 );
            System.out.println("\nThe number of pair characters mvacuum is = " + countforcharactersm29 );
            System.out.println("\nThe number of pair characters na is = " + countforcharactersn1 );
            System.out.println("\nThe number of pair characters nb is = " + countforcharactersn2 );
            System.out.println("\nThe number of pair characters nc is = " + countforcharactersn3 );
            System.out.println("\nThe number of pair characters nd is = " + countforcharactersn4 );
            System.out.println("\nThe number of pair characters ne is = " + countforcharactersn5 );
            System.out.println("\nThe number of pair characters nf is = " + countforcharactersn6 );
            System.out.println("\nThe number of pair characters ng is = " + countforcharactersn7 );
            System.out.println("\nThe number of pair characters nh is = " + countforcharactersn8 );
            System.out.println("\nThe number of pair characters ni is = " + countforcharactersn9 );
            System.out.println("\nThe number of pair characters nj is = " + countforcharactersn10 );
            System.out.println("\nThe number of pair characters nk is = " + countforcharactersn11 );
            System.out.println("\nThe number of pair characters nl is = " + countforcharactersn12 );
            System.out.println("\nThe number of pair characters nm is = " + countforcharactersn13 );
            System.out.println("\nThe number of pair characters nn is = " + countforcharactersn14 );
            System.out.println("\nThe number of pair characters no is = " + countforcharactersn15 );
            System.out.println("\nThe number of pair characters np is = " + countforcharactersn16 );
            System.out.println("\nThe number of pair characters nq is = " + countforcharactersn17 );
            System.out.println("\nThe number of pair characters nr is = " + countforcharactersn18 );
            System.out.println("\nThe number of pair characters ns is = " + countforcharactersn19 );
            System.out.println("\nThe number of pair characters nt is = " + countforcharactersn20 );
            System.out.println("\nThe number of pair characters nu is = " + countforcharactersn21 );
            System.out.println("\nThe number of pair characters nv is = " + countforcharactersn22 );
            System.out.println("\nThe number of pair characters nw is = " + countforcharactersn23 );
            System.out.println("\nThe number of pair characters nx is = " + countforcharactersn24 );
            System.out.println("\nThe number of pair characters ny is = " + countforcharactersn25 );
            System.out.println("\nThe number of pair characters nz is = " + countforcharactersn26 );
            System.out.println("\nThe number of pair characters n. is = " + countforcharactersn27 );
            System.out.println("\nThe number of pair characters n, is = " + countforcharactersn28 );
            System.out.println("\nThe number of pair characters nvacuum is = " + countforcharactersn29 );
            System.out.println("\nThe number of pair characters oa is = " + countforcharacterso1 );
            System.out.println("\nThe number of pair characters ob is = " + countforcharacterso2 );
            System.out.println("\nThe number of pair characters oc is = " + countforcharacterso3 );
            System.out.println("\nThe number of pair characters od is = " + countforcharacterso4 );
            System.out.println("\nThe number of pair characters oe is = " + countforcharacterso5 );
            System.out.println("\nThe number of pair characters of is = " + countforcharacterso6 );
            System.out.println("\nThe number of pair characters og is = " + countforcharacterso7 );
            System.out.println("\nThe number of pair characters oh is = " + countforcharacterso8 );
            System.out.println("\nThe number of pair characters oi is = " + countforcharacterso9 );
            System.out.println("\nThe number of pair characters oj is = " + countforcharacterso10 );
            System.out.println("\nThe number of pair characters ok is = " + countforcharacterso11 );
            System.out.println("\nThe number of pair characters ol is = " + countforcharacterso12 );
            System.out.println("\nThe number of pair characters om is = " + countforcharacterso13 );
            System.out.println("\nThe number of pair characters on is = " + countforcharacterso14 );
            System.out.println("\nThe number of pair characters oo is = " + countforcharacterso15 );
            System.out.println("\nThe number of pair characters op is = " + countforcharacterso16 );
            System.out.println("\nThe number of pair characters oq is = " + countforcharacterso17 );
            System.out.println("\nThe number of pair characters or is = " + countforcharacterso18 );
            System.out.println("\nThe number of pair characters os is = " + countforcharacterso19 );
            System.out.println("\nThe number of pair characters ot is = " + countforcharacterso20 );
            System.out.println("\nThe number of pair characters ou is = " + countforcharacterso21 );
            System.out.println("\nThe number of pair characters ov is = " + countforcharacterso22 );
            System.out.println("\nThe number of pair characters ow is = " + countforcharacterso23 );
            System.out.println("\nThe number of pair characters ox is = " + countforcharacterso24 );
            System.out.println("\nThe number of pair characters oy is = " + countforcharacterso25 );
            System.out.println("\nThe number of pair characters oz is = " + countforcharacterso26 );
            System.out.println("\nThe number of pair characters o. is = " + countforcharacterso27 );
            System.out.println("\nThe number of pair characters o, is = " + countforcharacterso28 );
            System.out.println("\nThe number of pair characters ovacuum is = " + countforcharacterso29 );
            System.out.println("\nThe number of pair characters pa is = " + countforcharactersp1 );
            System.out.println("\nThe number of pair characters pb is = " + countforcharactersp2 );
            System.out.println("\nThe number of pair characters pc is = " + countforcharactersp3 );
            System.out.println("\nThe number of pair characters pd is = " + countforcharactersp4 );
            System.out.println("\nThe number of pair characters pe is = " + countforcharactersp5 );
            System.out.println("\nThe number of pair characters pf is = " + countforcharactersp6 );
            System.out.println("\nThe number of pair characters pg is = " + countforcharactersp7 );
            System.out.println("\nThe number of pair characters ph is = " + countforcharactersp8 );
            System.out.println("\nThe number of pair characters pi is = " + countforcharactersp9 );
            System.out.println("\nThe number of pair characters pj is = " + countforcharactersp10 );
            System.out.println("\nThe number of pair characters pk is = " + countforcharactersp11 );
            System.out.println("\nThe number of pair characters pl is = " + countforcharactersp12 );
            System.out.println("\nThe number of pair characters pm is = " + countforcharactersp13 );
            System.out.println("\nThe number of pair characters pn is = " + countforcharactersp14 );
            System.out.println("\nThe number of pair characters po is = " + countforcharactersp15 );
            System.out.println("\nThe number of pair characters pp is = " + countforcharactersp16 );
            System.out.println("\nThe number of pair characters pq is = " + countforcharactersp17 );
            System.out.println("\nThe number of pair characters pr is = " + countforcharactersp18 );
            System.out.println("\nThe number of pair characters ps is = " + countforcharactersp19 );
            System.out.println("\nThe number of pair characters pt is = " + countforcharactersp20 );
            System.out.println("\nThe number of pair characters pu is = " + countforcharactersp21 );
            System.out.println("\nThe number of pair characters pv is = " + countforcharactersp22 );
            System.out.println("\nThe number of pair characters pw is = " + countforcharactersp23 );
            System.out.println("\nThe number of pair characters px is = " + countforcharactersp24 );
            System.out.println("\nThe number of pair characters py is = " + countforcharactersp25 );
            System.out.println("\nThe number of pair characters pz is = " + countforcharactersp26 );
            System.out.println("\nThe number of pair characters p. is = " + countforcharactersp27 );
            System.out.println("\nThe number of pair characters p, is = " + countforcharactersp28 );
            System.out.println("\nThe number of pair characters pvacuum is = " + countforcharactersp29 );
            System.out.println("\nThe number of pair characters qa is = " + countforcharactersq1 );
            System.out.println("\nThe number of pair characters qb is = " + countforcharactersq2 );
            System.out.println("\nThe number of pair characters qc is = " + countforcharactersq3 );
            System.out.println("\nThe number of pair characters qd is = " + countforcharactersq4 );
            System.out.println("\nThe number of pair characters qe is = " + countforcharactersq5 );
            System.out.println("\nThe number of pair characters qf is = " + countforcharactersq6 );
            System.out.println("\nThe number of pair characters qg is = " + countforcharactersq7 );
            System.out.println("\nThe number of pair characters qh is = " + countforcharactersq8 );
            System.out.println("\nThe number of pair characters qi is = " + countforcharactersq9 );
            System.out.println("\nThe number of pair characters qj is = " + countforcharactersq10 );
            System.out.println("\nThe number of pair characters qk is = " + countforcharactersq11 );
            System.out.println("\nThe number of pair characters ql is = " + countforcharactersq12 );
            System.out.println("\nThe number of pair characters qm is = " + countforcharactersq13 );
            System.out.println("\nThe number of pair characters qn is = " + countforcharactersq14 );
            System.out.println("\nThe number of pair characters qo is = " + countforcharactersq15 );
            System.out.println("\nThe number of pair characters qp is = " + countforcharactersq16 );
            System.out.println("\nThe number of pair characters qq is = " + countforcharactersq17 );
            System.out.println("\nThe number of pair characters qr is = " + countforcharactersq18 );
            System.out.println("\nThe number of pair characters qs is = " + countforcharactersq19 );
            System.out.println("\nThe number of pair characters qt is = " + countforcharactersq20 );
            System.out.println("\nThe number of pair characters qu is = " + countforcharactersq21 );
            System.out.println("\nThe number of pair characters qv is = " + countforcharactersq22 );
            System.out.println("\nThe number of pair characters qw is = " + countforcharactersq23 );
            System.out.println("\nThe number of pair characters qx is = " + countforcharactersq24 );
            System.out.println("\nThe number of pair characters qy is = " + countforcharactersq25 );
            System.out.println("\nThe number of pair characters qz is = " + countforcharactersq26 );
            System.out.println("\nThe number of pair characters q. is = " + countforcharactersq27 );
            System.out.println("\nThe number of pair characters q, is = " + countforcharactersq28 );
            System.out.println("\nThe number of pair characters qvacuum is = " + countforcharactersq29 );
            System.out.println("\nThe number of pair characters ra is = " + countforcharactersr1 );
            System.out.println("\nThe number of pair characters rb is = " + countforcharactersr2 );
            System.out.println("\nThe number of pair characters rc is = " + countforcharactersr3 );
            System.out.println("\nThe number of pair characters rd is = " + countforcharactersr4 );
            System.out.println("\nThe number of pair characters re is = " + countforcharactersr5 );
            System.out.println("\nThe number of pair characters rf is = " + countforcharactersr6 );
            System.out.println("\nThe number of pair characters rg is = " + countforcharactersr7 );
            System.out.println("\nThe number of pair characters rh is = " + countforcharactersr8 );
            System.out.println("\nThe number of pair characters ri is = " + countforcharactersr9 );
            System.out.println("\nThe number of pair characters rj is = " + countforcharactersr10 );
            System.out.println("\nThe number of pair characters rk is = " + countforcharactersr11 );
            System.out.println("\nThe number of pair characters rl is = " + countforcharactersr12 );
            System.out.println("\nThe number of pair characters rm is = " + countforcharactersr13 );
            System.out.println("\nThe number of pair characters rn is = " + countforcharactersr14 );
            System.out.println("\nThe number of pair characters ro is = " + countforcharactersr15 );
            System.out.println("\nThe number of pair characters rp is = " + countforcharactersr16 );
            System.out.println("\nThe number of pair characters rq is = " + countforcharactersr17 );
            System.out.println("\nThe number of pair characters rr is = " + countforcharactersr18 );
            System.out.println("\nThe number of pair characters rs is = " + countforcharactersr19 );
            System.out.println("\nThe number of pair characters rt is = " + countforcharactersr20 );
            System.out.println("\nThe number of pair characters ru is = " + countforcharactersr21 );
            System.out.println("\nThe number of pair characters rv is = " + countforcharactersr22 );
            System.out.println("\nThe number of pair characters rw is = " + countforcharactersr23 );
            System.out.println("\nThe number of pair characters rx is = " + countforcharactersr24 );
            System.out.println("\nThe number of pair characters ry is = " + countforcharactersr25 );
            System.out.println("\nThe number of pair characters rz is = " + countforcharactersr26 );
            System.out.println("\nThe number of pair characters r. is = " + countforcharactersr27 );
            System.out.println("\nThe number of pair characters r, is = " + countforcharactersr28 );
            System.out.println("\nThe number of pair characters rvacuum is = " + countforcharactersr29 );
            System.out.println("\nThe number of pair characters sa is = " + countforcharacterss1 );
            System.out.println("\nThe number of pair characters sb is = " + countforcharacterss2 );
            System.out.println("\nThe number of pair characters sc is = " + countforcharacterss3 );
            System.out.println("\nThe number of pair characters sd is = " + countforcharacterss4 );
            System.out.println("\nThe number of pair characters se is = " + countforcharacterss5 );
            System.out.println("\nThe number of pair characters sf is = " + countforcharacterss6 );
            System.out.println("\nThe number of pair characters sg is = " + countforcharacterss7 );
            System.out.println("\nThe number of pair characters sh is = " + countforcharacterss8 );
            System.out.println("\nThe number of pair characters si is = " + countforcharacterss9 );
            System.out.println("\nThe number of pair characters sj is = " + countforcharacterss10 );
            System.out.println("\nThe number of pair characters sk is = " + countforcharacterss11 );
            System.out.println("\nThe number of pair characters sl is = " + countforcharacterss12 );
            System.out.println("\nThe number of pair characters sm is = " + countforcharacterss13 );
            System.out.println("\nThe number of pair characters sn is = " + countforcharacterss14 );
            System.out.println("\nThe number of pair characters so is = " + countforcharacterss15 );
            System.out.println("\nThe number of pair characters sp is = " + countforcharacterss16 );
            System.out.println("\nThe number of pair characters sq is = " + countforcharacterss17 );
            System.out.println("\nThe number of pair characters sr is = " + countforcharacterss18 );
            System.out.println("\nThe number of pair characters ss is = " + countforcharacterss19 );
            System.out.println("\nThe number of pair characters st is = " + countforcharacterss20 );
            System.out.println("\nThe number of pair characters su is = " + countforcharacterss21 );
            System.out.println("\nThe number of pair characters sv is = " + countforcharacterss22 );
            System.out.println("\nThe number of pair characters sw is = " + countforcharacterss23 );
            System.out.println("\nThe number of pair characters sx is = " + countforcharacterss24 );
            System.out.println("\nThe number of pair characters sy is = " + countforcharacterss25 );
            System.out.println("\nThe number of pair characters sz is = " + countforcharacterss26 );
            System.out.println("\nThe number of pair characters s. is = " + countforcharacterss27 );
            System.out.println("\nThe number of pair characters s, is = " + countforcharacterss28 );
            System.out.println("\nThe number of pair characters svacuum is = " + countforcharacterss29 );
            System.out.println("\nThe number of pair characters ta is = " + countforcharacterst1 );
            System.out.println("\nThe number of pair characters tb is = " + countforcharacterst2 );
            System.out.println("\nThe number of pair characters tc is = " + countforcharacterst3 );
            System.out.println("\nThe number of pair characters td is = " + countforcharacterst4 );
            System.out.println("\nThe number of pair characters te is = " + countforcharacterst5 );
            System.out.println("\nThe number of pair characters tf is = " + countforcharacterst6 );
            System.out.println("\nThe number of pair characters tg is = " + countforcharacterst7 );
            System.out.println("\nThe number of pair characters th is = " + countforcharacterst8 );
            System.out.println("\nThe number of pair characters ti is = " + countforcharacterst9 );
            System.out.println("\nThe number of pair characters tj is = " + countforcharacterst10 );
            System.out.println("\nThe number of pair characters tk is = " + countforcharacterst11 );
            System.out.println("\nThe number of pair characters tl is = " + countforcharacterst12 );
            System.out.println("\nThe number of pair characters tm is = " + countforcharacterst13 );
            System.out.println("\nThe number of pair characters tn is = " + countforcharacterst14 );
            System.out.println("\nThe number of pair characters to is = " + countforcharacterst15 );
            System.out.println("\nThe number of pair characters tp is = " + countforcharacterst16 );
            System.out.println("\nThe number of pair characters tq is = " + countforcharacterst17 );
            System.out.println("\nThe number of pair characters tr is = " + countforcharacterst18 );
            System.out.println("\nThe number of pair characters ts is = " + countforcharacterst19 );
            System.out.println("\nThe number of pair characters tt is = " + countforcharacterst20 );
            System.out.println("\nThe number of pair characters tu is = " + countforcharacterst21 );
            System.out.println("\nThe number of pair characters tv is = " + countforcharacterst22 );
            System.out.println("\nThe number of pair characters tw is = " + countforcharacterst23 );
            System.out.println("\nThe number of pair characters tx is = " + countforcharacterst24 );
            System.out.println("\nThe number of pair characters ty is = " + countforcharacterst25 );
            System.out.println("\nThe number of pair characters tz is = " + countforcharacterst26 );
            System.out.println("\nThe number of pair characters t. is = " + countforcharacterst27 );
            System.out.println("\nThe number of pair characters t, is = " + countforcharacterst28 );
            System.out.println("\nThe number of pair characters tvacuum is = " + countforcharacterst29 );
            System.out.println("\nThe number of pair characters ua is = " + countforcharactersu1 );
            System.out.println("\nThe number of pair characters ub is = " + countforcharactersu2 );
            System.out.println("\nThe number of pair characters uc is = " + countforcharactersu3 );
            System.out.println("\nThe number of pair characters ud is = " + countforcharactersu4 );
            System.out.println("\nThe number of pair characters ue is = " + countforcharactersu5 );
            System.out.println("\nThe number of pair characters uf is = " + countforcharactersu6 );
            System.out.println("\nThe number of pair characters ug is = " + countforcharactersu7 );
            System.out.println("\nThe number of pair characters uh is = " + countforcharactersu8 );
            System.out.println("\nThe number of pair characters ui is = " + countforcharactersu9 );
            System.out.println("\nThe number of pair characters uj is = " + countforcharactersu10 );
            System.out.println("\nThe number of pair characters uk is = " + countforcharactersu11 );
            System.out.println("\nThe number of pair characters ul is = " + countforcharactersu12 );
            System.out.println("\nThe number of pair characters um is = " + countforcharactersu13 );
            System.out.println("\nThe number of pair characters un is = " + countforcharactersu14 );
            System.out.println("\nThe number of pair characters uo is = " + countforcharactersu15 );
            System.out.println("\nThe number of pair characters up is = " + countforcharactersu16 );
            System.out.println("\nThe number of pair characters uq is = " + countforcharactersu17 );
            System.out.println("\nThe number of pair characters ur is = " + countforcharactersu18 );
            System.out.println("\nThe number of pair characters us is = " + countforcharactersu19 );
            System.out.println("\nThe number of pair characters ut is = " + countforcharactersu20 );
            System.out.println("\nThe number of pair characters uu is = " + countforcharactersu21 );
            System.out.println("\nThe number of pair characters uv is = " + countforcharactersu22 );
            System.out.println("\nThe number of pair characters uw is = " + countforcharactersu23 );
            System.out.println("\nThe number of pair characters ux is = " + countforcharactersu24 );
            System.out.println("\nThe number of pair characters uy is = " + countforcharactersu25 );
            System.out.println("\nThe number of pair characters uz is = " + countforcharactersu26 );
            System.out.println("\nThe number of pair characters u. is = " + countforcharactersu27 );
            System.out.println("\nThe number of pair characters u, is = " + countforcharactersu28 );
            System.out.println("\nThe number of pair characters uvacuum is = " + countforcharactersu29 );
            System.out.println("\nThe number of pair characters va is = " + countforcharactersv1 );
            System.out.println("\nThe number of pair characters vb is = " + countforcharactersv2 );
            System.out.println("\nThe number of pair characters vc is = " + countforcharactersv3 );
            System.out.println("\nThe number of pair characters vd is = " + countforcharactersv4 );
            System.out.println("\nThe number of pair characters ve is = " + countforcharactersv5 );
            System.out.println("\nThe number of pair characters vf is = " + countforcharactersv6 );
            System.out.println("\nThe number of pair characters vg is = " + countforcharactersv7 );
            System.out.println("\nThe number of pair characters vh is = " + countforcharactersv8 );
            System.out.println("\nThe number of pair characters vi is = " + countforcharactersv9 );
            System.out.println("\nThe number of pair characters vj is = " + countforcharactersv10 );
            System.out.println("\nThe number of pair characters vk is = " + countforcharactersv11 );
            System.out.println("\nThe number of pair characters vl is = " + countforcharactersv12 );
            System.out.println("\nThe number of pair characters vm is = " + countforcharactersv13 );
            System.out.println("\nThe number of pair characters vn is = " + countforcharactersv14 );
            System.out.println("\nThe number of pair characters vo is = " + countforcharactersv15 );
            System.out.println("\nThe number of pair characters vp is = " + countforcharactersv16 );
            System.out.println("\nThe number of pair characters vq is = " + countforcharactersv17 );
            System.out.println("\nThe number of pair characters vr is = " + countforcharactersv18 );
            System.out.println("\nThe number of pair characters vs is = " + countforcharactersv19 );
            System.out.println("\nThe number of pair characters vt is = " + countforcharactersv20 );
            System.out.println("\nThe number of pair characters vu is = " + countforcharactersv21 );
            System.out.println("\nThe number of pair characters vv is = " + countforcharactersv22 );
            System.out.println("\nThe number of pair characters vw is = " + countforcharactersv23 );
            System.out.println("\nThe number of pair characters vx is = " + countforcharactersv24 );
            System.out.println("\nThe number of pair characters vy is = " + countforcharactersv25 );
            System.out.println("\nThe number of pair characters vz is = " + countforcharactersv26 );
            System.out.println("\nThe number of pair characters v. is = " + countforcharactersv27 );
            System.out.println("\nThe number of pair characters v, is = " + countforcharactersv28 );
            System.out.println("\nThe number of pair characters vvacuum is = " + countforcharactersv29 );
            System.out.println("\nThe number of pair characters wa is = " + countforcharactersw1 );
            System.out.println("\nThe number of pair characters wb is = " + countforcharactersw2 );
            System.out.println("\nThe number of pair characters wc is = " + countforcharactersw3 );
            System.out.println("\nThe number of pair characters wd is = " + countforcharactersw4 );
            System.out.println("\nThe number of pair characters we is = " + countforcharactersw5 );
            System.out.println("\nThe number of pair characters wf is = " + countforcharactersw6 );
            System.out.println("\nThe number of pair characters wg is = " + countforcharactersw7 );
            System.out.println("\nThe number of pair characters wh is = " + countforcharactersw8 );
            System.out.println("\nThe number of pair characters wi is = " + countforcharactersw9 );
            System.out.println("\nThe number of pair characters wj is = " + countforcharactersw10 );
            System.out.println("\nThe number of pair characters wk is = " + countforcharactersw11 );
            System.out.println("\nThe number of pair characters wl is = " + countforcharactersw12 );
            System.out.println("\nThe number of pair characters wm is = " + countforcharactersw13 );
            System.out.println("\nThe number of pair characters wn is = " + countforcharactersw14 );
            System.out.println("\nThe number of pair characters wo is = " + countforcharactersw15 );
            System.out.println("\nThe number of pair characters wp is = " + countforcharactersw16 );
            System.out.println("\nThe number of pair characters wq is = " + countforcharactersw17 );
            System.out.println("\nThe number of pair characters wr is = " + countforcharactersw18 );
            System.out.println("\nThe number of pair characters ws is = " + countforcharactersw19 );
            System.out.println("\nThe number of pair characters wt is = " + countforcharactersw20 );
            System.out.println("\nThe number of pair characters wu is = " + countforcharactersw21 );
            System.out.println("\nThe number of pair characters wv is = " + countforcharactersw22 );
            System.out.println("\nThe number of pair characters ww is = " + countforcharactersw23 );
            System.out.println("\nThe number of pair characters wx is = " + countforcharactersw24 );
            System.out.println("\nThe number of pair characters wy is = " + countforcharactersw25 );
            System.out.println("\nThe number of pair characters wz is = " + countforcharactersw26 );
            System.out.println("\nThe number of pair characters w. is = " + countforcharactersw27 );
            System.out.println("\nThe number of pair characters w, is = " + countforcharactersw28 );
            System.out.println("\nThe number of pair characters wvacuum is = " + countforcharactersw29 );
            System.out.println("\nThe number of pair characters xa is = " + countforcharactersx1 );
            System.out.println("\nThe number of pair characters xb is = " + countforcharactersx2 );
            System.out.println("\nThe number of pair characters xc is = " + countforcharactersx3 );
            System.out.println("\nThe number of pair characters xd is = " + countforcharactersx4 );
            System.out.println("\nThe number of pair characters xe is = " + countforcharactersx5 );
            System.out.println("\nThe number of pair characters xf is = " + countforcharactersx6 );
            System.out.println("\nThe number of pair characters xg is = " + countforcharactersx7 );
            System.out.println("\nThe number of pair characters xh is = " + countforcharactersx8 );
            System.out.println("\nThe number of pair characters xi is = " + countforcharactersx9 );
            System.out.println("\nThe number of pair characters xj is = " + countforcharactersx10 );
            System.out.println("\nThe number of pair characters xk is = " + countforcharactersx11 );
            System.out.println("\nThe number of pair characters xl is = " + countforcharactersx12 );
            System.out.println("\nThe number of pair characters xm is = " + countforcharactersx13 );
            System.out.println("\nThe number of pair characters xn is = " + countforcharactersx14 );
            System.out.println("\nThe number of pair characters xo is = " + countforcharactersx15 );
            System.out.println("\nThe number of pair characters xp is = " + countforcharactersx16 );
            System.out.println("\nThe number of pair characters xq is = " + countforcharactersx17 );
            System.out.println("\nThe number of pair characters xr is = " + countforcharactersx18 );
            System.out.println("\nThe number of pair characters xs is = " + countforcharactersx19 );
            System.out.println("\nThe number of pair characters xt is = " + countforcharactersx20 );
            System.out.println("\nThe number of pair characters xu is = " + countforcharactersx21 );
            System.out.println("\nThe number of pair characters xv is = " + countforcharactersx22 );
            System.out.println("\nThe number of pair characters xw is = " + countforcharactersx23 );
            System.out.println("\nThe number of pair characters xx is = " + countforcharactersx24 );
            System.out.println("\nThe number of pair characters xy is = " + countforcharactersx25 );
            System.out.println("\nThe number of pair characters xz is = " + countforcharactersx26 );
            System.out.println("\nThe number of pair characters x. is = " + countforcharactersx27 );
            System.out.println("\nThe number of pair characters x, is = " + countforcharactersx28 );
            System.out.println("\nThe number of pair characters xvacuum is = " + countforcharactersx29 );
            System.out.println("\nThe number of pair characters ya is = " + countforcharactersy1 );
            System.out.println("\nThe number of pair characters yb is = " + countforcharactersy2 );
            System.out.println("\nThe number of pair characters yc is = " + countforcharactersy3 );
            System.out.println("\nThe number of pair characters yd is = " + countforcharactersy4 );
            System.out.println("\nThe number of pair characters ye is = " + countforcharactersy5 );
            System.out.println("\nThe number of pair characters yf is = " + countforcharactersy6 );
            System.out.println("\nThe number of pair characters yg is = " + countforcharactersy7 );
            System.out.println("\nThe number of pair characters yh is = " + countforcharactersy8 );
            System.out.println("\nThe number of pair characters yi is = " + countforcharactersy9 );
            System.out.println("\nThe number of pair characters yj is = " + countforcharactersy10 );
            System.out.println("\nThe number of pair characters yk is = " + countforcharactersy11 );
            System.out.println("\nThe number of pair characters yl is = " + countforcharactersy12 );
            System.out.println("\nThe number of pair characters ym is = " + countforcharactersy13 );
            System.out.println("\nThe number of pair characters yn is = " + countforcharactersy14 );
            System.out.println("\nThe number of pair characters yo is = " + countforcharactersy15 );
            System.out.println("\nThe number of pair characters yp is = " + countforcharactersy16 );
            System.out.println("\nThe number of pair characters yq is = " + countforcharactersy17 );
            System.out.println("\nThe number of pair characters yr is = " + countforcharactersy18 );
            System.out.println("\nThe number of pair characters ys is = " + countforcharactersy19 );
            System.out.println("\nThe number of pair characters yt is = " + countforcharactersy20 );
            System.out.println("\nThe number of pair characters yu is = " + countforcharactersy21 );
            System.out.println("\nThe number of pair characters yv is = " + countforcharactersy22 );
            System.out.println("\nThe number of pair characters yw is = " + countforcharactersy23 );
            System.out.println("\nThe number of pair characters yx is = " + countforcharactersy24 );
            System.out.println("\nThe number of pair characters yy is = " + countforcharactersy25 );
            System.out.println("\nThe number of pair characters yz is = " + countforcharactersy26 );
            System.out.println("\nThe number of pair characters y. is = " + countforcharactersy27 );
            System.out.println("\nThe number of pair characters y, is = " + countforcharactersy28 );
            System.out.println("\nThe number of pair characters yvacuum is = " + countforcharactersy29 );
            System.out.println("\nThe number of pair characters za is = " + countforcharactersz1 );
            System.out.println("\nThe number of pair characters zb is = " + countforcharactersz2 );
            System.out.println("\nThe number of pair characters zc is = " + countforcharactersz3 );
            System.out.println("\nThe number of pair characters zd is = " + countforcharactersz4 );
            System.out.println("\nThe number of pair characters ze is = " + countforcharactersz5 );
            System.out.println("\nThe number of pair characters zf is = " + countforcharactersz6 );
            System.out.println("\nThe number of pair characters zg is = " + countforcharactersz7 );
            System.out.println("\nThe number of pair characters zh is = " + countforcharactersz8 );
            System.out.println("\nThe number of pair characters zi is = " + countforcharactersz9 );
            System.out.println("\nThe number of pair characters zj is = " + countforcharactersz10 );
            System.out.println("\nThe number of pair characters zk is = " + countforcharactersz11 );
            System.out.println("\nThe number of pair characters zl is = " + countforcharactersz12 );
            System.out.println("\nThe number of pair characters zm is = " + countforcharactersz13 );
            System.out.println("\nThe number of pair characters zn is = " + countforcharactersz14 );
            System.out.println("\nThe number of pair characters zo is = " + countforcharactersz15 );
            System.out.println("\nThe number of pair characters zp is = " + countforcharactersz16 );
            System.out.println("\nThe number of pair characters zq is = " + countforcharactersz17 );
            System.out.println("\nThe number of pair characters zr is = " + countforcharactersz18 );
            System.out.println("\nThe number of pair characters zs is = " + countforcharactersz19 );
            System.out.println("\nThe number of pair characters zt is = " + countforcharactersz20 );
            System.out.println("\nThe number of pair characters zu is = " + countforcharactersz21 );
            System.out.println("\nThe number of pair characters zv is = " + countforcharactersz22 );
            System.out.println("\nThe number of pair characters zw is = " + countforcharactersz23 );
            System.out.println("\nThe number of pair characters zx is = " + countforcharactersz24 );
            System.out.println("\nThe number of pair characters zy is = " + countforcharactersz25 );
            System.out.println("\nThe number of pair characters zz is = " + countforcharactersz26 );
            System.out.println("\nThe number of pair characters z. is = " + countforcharactersz27 );
            System.out.println("\nThe number of pair characters z, is = " + countforcharactersz28 );
            System.out.println("\nThe number of pair characters zvacuum is = " + countforcharactersz29 );
            System.out.println("\nThe number of pair characters .a is = " + countforcharactersdot1 );
            System.out.println("\nThe number of pair characters .b is = " + countforcharactersdot2 );
            System.out.println("\nThe number of pair characters .c is = " + countforcharactersdot3 );
            System.out.println("\nThe number of pair characters .d is = " + countforcharactersdot4 );
            System.out.println("\nThe number of pair characters .e is = " + countforcharactersdot5 );
            System.out.println("\nThe number of pair characters .f is = " + countforcharactersdot6 );
            System.out.println("\nThe number of pair characters .g is = " + countforcharactersdot7 );
            System.out.println("\nThe number of pair characters .h is = " + countforcharactersdot8 );
            System.out.println("\nThe number of pair characters .i is = " + countforcharactersdot9 );
            System.out.println("\nThe number of pair characters .j is = " + countforcharactersdot10 );
            System.out.println("\nThe number of pair characters .k is = " + countforcharactersdot11 );
            System.out.println("\nThe number of pair characters .l is = " + countforcharactersdot12 );
            System.out.println("\nThe number of pair characters .m is = " + countforcharactersdot13 );
            System.out.println("\nThe number of pair characters .n is = " + countforcharactersdot14 );
            System.out.println("\nThe number of pair characters .o is = " + countforcharactersdot15 );
            System.out.println("\nThe number of pair characters .p is = " + countforcharactersdot16 );
            System.out.println("\nThe number of pair characters .q is = " + countforcharactersdot17 );
            System.out.println("\nThe number of pair characters .r is = " + countforcharactersdot18 );
            System.out.println("\nThe number of pair characters .s is = " + countforcharactersdot19 );
            System.out.println("\nThe number of pair characters .t is = " + countforcharactersdot20 );
            System.out.println("\nThe number of pair characters .u is = " + countforcharactersdot21 );
            System.out.println("\nThe number of pair characters .v is = " + countforcharactersdot22 );
            System.out.println("\nThe number of pair characters .w is = " + countforcharactersdot23 );
            System.out.println("\nThe number of pair characters .x is = " + countforcharactersdot24 );
            System.out.println("\nThe number of pair characters .y is = " + countforcharactersdot25 );
            System.out.println("\nThe number of pair characters .z is = " + countforcharactersdot26 );
            System.out.println("\nThe number of pair characters .. is = " + countforcharactersdot27 );
            System.out.println("\nThe number of pair characters ., is = " + countforcharactersdot28 );
            System.out.println("\nThe number of pair characters .vacuum is = " + countforcharactersz29 );
            System.out.println("\nThe number of pair characters ,a is = " + countforcharacterscomma1 );
            System.out.println("\nThe number of pair characters ,b is = " + countforcharacterscomma2 );
            System.out.println("\nThe number of pair characters ,c is = " + countforcharacterscomma3 );
            System.out.println("\nThe number of pair characters ,d is = " + countforcharacterscomma4 );
            System.out.println("\nThe number of pair characters ,e is = " + countforcharacterscomma5 );
            System.out.println("\nThe number of pair characters ,f is = " + countforcharacterscomma6 );
            System.out.println("\nThe number of pair characters ,g is = " + countforcharacterscomma7 );
            System.out.println("\nThe number of pair characters ,h is = " + countforcharacterscomma8 );
            System.out.println("\nThe number of pair characters ,i is = " + countforcharacterscomma9 );
            System.out.println("\nThe number of pair characters ,j is = " + countforcharacterscomma10 );
            System.out.println("\nThe number of pair characters ,k is = " + countforcharacterscomma11 );
            System.out.println("\nThe number of pair characters ,l is = " + countforcharacterscomma12 );
            System.out.println("\nThe number of pair characters ,m is = " + countforcharacterscomma13 );
            System.out.println("\nThe number of pair characters ,n is = " + countforcharacterscomma14 );
            System.out.println("\nThe number of pair characters ,o is = " + countforcharacterscomma15 );
            System.out.println("\nThe number of pair characters ,p is = " + countforcharacterscomma16 );
            System.out.println("\nThe number of pair characters ,q is = " + countforcharacterscomma17 );
            System.out.println("\nThe number of pair characters ,r is = " + countforcharacterscomma18 );
            System.out.println("\nThe number of pair characters ,s is = " + countforcharacterscomma19 );
            System.out.println("\nThe number of pair characters ,t is = " + countforcharacterscomma20 );
            System.out.println("\nThe number of pair characters ,u is = " + countforcharacterscomma21 );
            System.out.println("\nThe number of pair characters ,v is = " + countforcharacterscomma22 );
            System.out.println("\nThe number of pair characters ,w is = " + countforcharacterscomma23 );
            System.out.println("\nThe number of pair characters ,x is = " + countforcharacterscomma24 );
            System.out.println("\nThe number of pair characters ,y is = " + countforcharacterscomma25 );
            System.out.println("\nThe number of pair characters ,z is = " + countforcharacterscomma26 );
            System.out.println("\nThe number of pair characters ,. is = " + countforcharacterscomma27 );
            System.out.println("\nThe number of pair characters ,, is = " + countforcharacterscomma28 );
            System.out.println("\nThe number of pair characters ,vacuum is = " + countforcharacterscomma29 );
            System.out.println("\nThe number of pair characters vacuuma is = " + countforcharactersvacuum1 );
            System.out.println("\nThe number of pair characters vacuumb is = " + countforcharactersvacuum2 );
            System.out.println("\nThe number of pair characters vacuumc is = " + countforcharactersvacuum3 );
            System.out.println("\nThe number of pair characters vacuumd is = " + countforcharactersvacuum4 );
            System.out.println("\nThe number of pair characters vacuume is = " + countforcharactersvacuum5 );
            System.out.println("\nThe number of pair characters vacuumf is = " + countforcharactersvacuum6 );
            System.out.println("\nThe number of pair characters vacuumg is = " + countforcharactersvacuum7 );
            System.out.println("\nThe number of pair characters vacuumh is = " + countforcharactersvacuum8 );
            System.out.println("\nThe number of pair characters vacuumi is = " + countforcharactersvacuum9 );
            System.out.println("\nThe number of pair characters vacuumj is = " + countforcharactersvacuum10 );
            System.out.println("\nThe number of pair characters vacuumk is = " + countforcharactersvacuum11 );
            System.out.println("\nThe number of pair characters vacuuml is = " + countforcharactersvacuum12 );
            System.out.println("\nThe number of pair characters vacuumm is = " + countforcharactersvacuum13 );
            System.out.println("\nThe number of pair characters vacuumn is = " + countforcharactersvacuum14 );
            System.out.println("\nThe number of pair characters vacuumo is = " + countforcharactersvacuum15 );
            System.out.println("\nThe number of pair characters vacuump is = " + countforcharactersvacuum16 );
            System.out.println("\nThe number of pair characters vacuumq is = " + countforcharactersvacuum17 );
            System.out.println("\nThe number of pair characters vacuumr is = " + countforcharactersvacuum18 );
            System.out.println("\nThe number of pair characters vacuums is = " + countforcharactersvacuum19 );
            System.out.println("\nThe number of pair characters vacuumt is = " + countforcharactersvacuum20 );
            System.out.println("\nThe number of pair characters vacuumu is = " + countforcharactersvacuum21 );
            System.out.println("\nThe number of pair characters vacuumv is = " + countforcharactersvacuum22 );
            System.out.println("\nThe number of pair characters vacuumw is = " + countforcharactersvacuum23 );
            System.out.println("\nThe number of pair characters vacuumx is = " + countforcharactersvacuum24 );
            System.out.println("\nThe number of pair characters vacuumy is = " + countforcharactersvacuum25 );
            System.out.println("\nThe number of pair characters vacuumz is = " + countforcharactersvacuum26 );
            System.out.println("\nThe number of pair characters vacuum. is = " + countforcharactersvacuum27 );
            System.out.println("\nThe number of pair characters vacuum, is = " + countforcharactersvacuum28 );
            System.out.println("\nThe number of pair characters vacuumvacuum is = " + countforcharactersvacuum29 );
            System.out.println("\nThe sum of all the pair characters is = " + (countforcharactersa1+countforcharactersa2+countforcharactersa3+countforcharactersa4+countforcharactersa5+countforcharactersa6+countforcharactersa7 
                                                                        + countforcharactersa8+countforcharactersa9+countforcharactersa10+countforcharactersa11+countforcharactersa12+countforcharactersa13+countforcharactersa14
                                                                        + countforcharactersa15+countforcharactersa16+countforcharactersa17+countforcharactersa18+countforcharactersa19+countforcharactersa20+countforcharactersa21
                                                                        + countforcharactersa22+countforcharactersa23+countforcharactersa24+countforcharactersa25+countforcharactersa26+countforcharactersa27+countforcharactersa28
                                                                        + countforcharactersa29
                                                                        + countforcharactersb1+countforcharactersb2+countforcharactersb3+countforcharactersb4+countforcharactersb5+countforcharactersb6+countforcharactersb7 
                                                                        + countforcharactersb8+countforcharactersb9+countforcharactersb10+countforcharactersb11+countforcharactersb12+countforcharactersb13+countforcharactersb14
                                                                        + countforcharactersb15+countforcharactersb16+countforcharactersb17+countforcharactersb18+countforcharactersb19+countforcharactersb20+countforcharactersb21
                                                                        + countforcharactersb22+countforcharactersb23+countforcharactersb24+countforcharactersb25+countforcharactersb26+countforcharactersb27+countforcharactersb28
                                                                        + countforcharactersb29
                                                                        + countforcharactersc1+countforcharactersc2+countforcharactersc3+countforcharactersc4+countforcharactersc5+countforcharactersc6+countforcharactersc7 
                                                                        + countforcharactersc8+countforcharactersc9+countforcharactersc10+countforcharactersc11+countforcharactersc12+countforcharactersc13+countforcharactersc14
                                                                        + countforcharactersc15+countforcharactersc16+countforcharactersc17+countforcharactersc18+countforcharactersc19+countforcharactersc20+countforcharactersc21
                                                                        + countforcharactersc22+countforcharactersc23+countforcharactersc24+countforcharactersc25+countforcharactersc26+countforcharactersc27+countforcharactersc28
                                                                        + countforcharactersc29
                                                                        + countforcharactersd1+countforcharactersd2+countforcharactersd3+countforcharactersd4+countforcharactersd5+countforcharactersd6+countforcharactersd7 
                                                                        + countforcharactersd8+countforcharactersd9+countforcharactersd10+countforcharactersd11+countforcharactersd12+countforcharactersd13+countforcharactersd14
                                                                        + countforcharactersd15+countforcharactersd16+countforcharactersd17+countforcharactersd18+countforcharactersd19+countforcharactersd20+countforcharactersd21
                                                                        + countforcharactersd22+countforcharactersd23+countforcharactersd24+countforcharactersd25+countforcharactersd26+countforcharactersd27+countforcharactersd28
                                                                        + countforcharactersd29
                                                                        + countforcharacterse1+countforcharacterse2+countforcharacterse3+countforcharacterse4+countforcharacterse5+countforcharacterse6+countforcharacterse7 
                                                                        + countforcharacterse8+countforcharacterse9+countforcharacterse10+countforcharacterse11+countforcharacterse12+countforcharacterse13+countforcharacterse14
                                                                        + countforcharacterse15+countforcharacterse16+countforcharacterse17+countforcharacterse18+countforcharacterse19+countforcharacterse20+countforcharacterse21
                                                                        + countforcharacterse22+countforcharacterse23+countforcharacterse24+countforcharacterse25+countforcharacterse26+countforcharacterse27+countforcharacterse28
                                                                        + countforcharacterse29
                                                                        + countforcharactersf1+countforcharactersf2+countforcharactersf3+countforcharactersf4+countforcharactersf5+countforcharactersf6+countforcharactersf7 
                                                                        + countforcharactersf8+countforcharactersf9+countforcharactersf10+countforcharactersf11+countforcharactersf12+countforcharactersf13+countforcharactersf14
                                                                        + countforcharactersf15+countforcharactersf16+countforcharactersf17+countforcharactersf18+countforcharactersf19+countforcharactersf20+countforcharactersf21
                                                                        + countforcharactersf22+countforcharactersf23+countforcharactersf24+countforcharactersf25+countforcharactersf26+countforcharactersf27+countforcharactersf28
                                                                        + countforcharactersf29
                                                                        + countforcharactersg1+countforcharactersg2+countforcharactersg3+countforcharactersg4+countforcharactersg5+countforcharactersg6+countforcharactersg7 
                                                                        + countforcharactersg8+countforcharactersg9+countforcharactersg10+countforcharactersg11+countforcharactersg12+countforcharactersg13+countforcharactersg14
                                                                        + countforcharactersg15+countforcharactersg16+countforcharactersg17+countforcharactersg18+countforcharactersg19+countforcharactersg20+countforcharactersg21
                                                                        + countforcharactersg22+countforcharactersg23+countforcharactersg24+countforcharactersg25+countforcharactersg26+countforcharactersg27+countforcharactersg28
                                                                        + countforcharactersg29
                                                                        + countforcharactersh1+countforcharactersh2+countforcharactersh3+countforcharactersh4+countforcharactersh5+countforcharactersh6+countforcharactersh7 
                                                                        + countforcharactersh8+countforcharactersh9+countforcharactersh10+countforcharactersh11+countforcharactersh12+countforcharactersh13+countforcharactersh14
                                                                        + countforcharactersh15+countforcharactersh16+countforcharactersh17+countforcharactersh18+countforcharactersh19+countforcharactersh20+countforcharactersh21
                                                                        + countforcharactersh22+countforcharactersh23+countforcharactersh24+countforcharactersh25+countforcharactersh26+countforcharactersh27+countforcharactersh28
                                                                        + countforcharactersh29
                                                                        + countforcharactersi1+countforcharactersi2+countforcharactersi3+countforcharactersi4+countforcharactersi5+countforcharactersi6+countforcharactersi7 
                                                                        + countforcharactersi8+countforcharactersi9+countforcharactersi10+countforcharactersi11+countforcharactersi12+countforcharactersi13+countforcharactersi14
                                                                        + countforcharactersi15+countforcharactersi16+countforcharactersi17+countforcharactersi18+countforcharactersi19+countforcharactersi20+countforcharactersi21
                                                                        + countforcharactersi22+countforcharactersi23+countforcharactersi24+countforcharactersi25+countforcharactersi26+countforcharactersi27+countforcharactersi28
                                                                        + countforcharactersi29
                                                                        + countforcharactersj1+countforcharactersj2+countforcharactersj3+countforcharactersj4+countforcharactersj5+countforcharactersj6+countforcharactersj7 
                                                                        + countforcharactersj8+countforcharactersj9+countforcharactersj10+countforcharactersj11+countforcharactersj12+countforcharactersj13+countforcharactersj14
                                                                        + countforcharactersj15+countforcharactersj16+countforcharactersj17+countforcharactersj18+countforcharactersj19+countforcharactersj20+countforcharactersj21
                                                                        + countforcharactersj22+countforcharactersj23+countforcharactersj24+countforcharactersj25+countforcharactersj26+countforcharactersj27+countforcharactersj28
                                                                        + countforcharactersj29
                                                                        + countforcharactersk1+countforcharactersk2+countforcharactersk3+countforcharactersk4+countforcharactersk5+countforcharactersk6+countforcharactersk7 
                                                                        + countforcharactersk8+countforcharactersk9+countforcharactersk10+countforcharactersk11+countforcharactersk12+countforcharactersk13+countforcharactersk14
                                                                        + countforcharactersk15+countforcharactersk16+countforcharactersk17+countforcharactersk18+countforcharactersk19+countforcharactersk20+countforcharactersk21
                                                                        + countforcharactersk22+countforcharactersk23+countforcharactersk24+countforcharactersk25+countforcharactersk26+countforcharactersk27+countforcharactersk28
                                                                        + countforcharactersk29
                                                                        + countforcharactersl1+countforcharactersl2+countforcharactersl3+countforcharactersl4+countforcharactersl5+countforcharactersl6+countforcharactersl7 
                                                                        + countforcharactersl8+countforcharactersl9+countforcharactersl10+countforcharactersl11+countforcharactersl12+countforcharactersl13+countforcharactersl14
                                                                        + countforcharactersl15+countforcharactersl16+countforcharactersl17+countforcharactersl18+countforcharactersl19+countforcharactersl20+countforcharactersl21
                                                                        + countforcharactersl22+countforcharactersl23+countforcharactersl24+countforcharactersl25+countforcharactersl26+countforcharactersl27+countforcharactersl28
                                                                        + countforcharactersl29
                                                                        + countforcharactersm1+countforcharactersm2+countforcharactersm3+countforcharactersm4+countforcharactersm5+countforcharactersm6+countforcharactersm7 
                                                                        + countforcharactersm8+countforcharactersm9+countforcharactersm10+countforcharactersm11+countforcharactersm12+countforcharactersm13+countforcharactersm14
                                                                        + countforcharactersm15+countforcharactersm16+countforcharactersm17+countforcharactersm18+countforcharactersm19+countforcharactersm20+countforcharactersm21
                                                                        + countforcharactersm22+countforcharactersm23+countforcharactersm24+countforcharactersm25+countforcharactersm26+countforcharactersm27+countforcharactersm28
                                                                        + countforcharactersm29
                                                                        + countforcharactersn1+countforcharactersn2+countforcharactersn3+countforcharactersn4+countforcharactersn5+countforcharactersn6+countforcharactersn7 
                                                                        + countforcharactersn8+countforcharactersn9+countforcharactersn10+countforcharactersn11+countforcharactersn12+countforcharactersn13+countforcharactersn14
                                                                        + countforcharactersn15+countforcharactersn16+countforcharactersn17+countforcharactersn18+countforcharactersn19+countforcharactersn20+countforcharactersn21
                                                                        + countforcharactersn22+countforcharactersn23+countforcharactersn24+countforcharactersn25+countforcharactersn26+countforcharactersn27+countforcharactersn28
                                                                        + countforcharactersn29
                                                                        + countforcharacterso1+countforcharacterso2+countforcharacterso3+countforcharacterso4+countforcharacterso5+countforcharacterso6+countforcharacterso7 
                                                                        + countforcharacterso8+countforcharacterso9+countforcharacterso10+countforcharacterso11+countforcharacterso12+countforcharacterso13+countforcharacterso14
                                                                        + countforcharacterso15+countforcharacterso16+countforcharacterso17+countforcharacterso18+countforcharacterso19+countforcharacterso20+countforcharacterso21
                                                                        + countforcharacterso22+countforcharacterso23+countforcharacterso24+countforcharacterso25+countforcharacterso26+countforcharacterso27+countforcharacterso28
                                                                        + countforcharacterso29
                                                                        + countforcharactersp1+countforcharactersp2+countforcharactersp3+countforcharactersp4+countforcharactersp5+countforcharactersp6+countforcharactersp7 
                                                                        + countforcharactersp8+countforcharactersp9+countforcharactersp10+countforcharactersp11+countforcharactersp12+countforcharactersp13+countforcharactersp14
                                                                        + countforcharactersp15+countforcharactersp16+countforcharactersp17+countforcharactersp18+countforcharactersp19+countforcharactersp20+countforcharactersp21
                                                                        + countforcharactersp22+countforcharactersp23+countforcharactersp24+countforcharactersp25+countforcharactersp26+countforcharactersp27+countforcharactersp28
                                                                        + countforcharactersp29
                                                                        + countforcharactersq1+countforcharactersq2+countforcharactersq3+countforcharactersq4+countforcharactersq5+countforcharactersq6+countforcharactersq7 
                                                                        + countforcharactersq8+countforcharactersq9+countforcharactersq10+countforcharactersq11+countforcharactersq12+countforcharactersq13+countforcharactersq14
                                                                        + countforcharactersq15+countforcharactersq16+countforcharactersq17+countforcharactersq18+countforcharactersq19+countforcharactersq20+countforcharactersq21
                                                                        + countforcharactersq22+countforcharactersq23+countforcharactersq24+countforcharactersq25+countforcharactersq26+countforcharactersq27+countforcharactersq28
                                                                        + countforcharactersq29
                                                                        + countforcharactersr1+countforcharactersr2+countforcharactersr3+countforcharactersr4+countforcharactersr5+countforcharactersr6+countforcharactersr7 
                                                                        + countforcharactersr8+countforcharactersr9+countforcharactersr10+countforcharactersr11+countforcharactersr12+countforcharactersr13+countforcharactersr14
                                                                        + countforcharactersr15+countforcharactersr16+countforcharactersr17+countforcharactersr18+countforcharactersr19+countforcharactersr20+countforcharactersr21
                                                                        + countforcharactersr22+countforcharactersr23+countforcharactersr24+countforcharactersr25+countforcharactersr26+countforcharactersr27+countforcharactersr28
                                                                        + countforcharactersr29
                                                                        + countforcharacterss1+countforcharacterss2+countforcharacterss3+countforcharacterss4+countforcharacterss5+countforcharacterss6+countforcharacterss7 
                                                                        + countforcharacterss8+countforcharacterss9+countforcharacterss10+countforcharacterss11+countforcharacterss12+countforcharacterss13+countforcharacterss14
                                                                        + countforcharacterss15+countforcharacterss16+countforcharacterss17+countforcharacterss18+countforcharacterss19+countforcharacterss20+countforcharacterss21
                                                                        + countforcharacterss22+countforcharacterss23+countforcharacterss24+countforcharacterss25+countforcharacterss26+countforcharacterss27+countforcharacterss28
                                                                        + countforcharacterss29
                                                                        + countforcharacterst1+countforcharacterst2+countforcharacterst3+countforcharacterst4+countforcharacterst5+countforcharacterst6+countforcharacterst7 
                                                                        + countforcharacterst8+countforcharacterst9+countforcharacterst10+countforcharacterst11+countforcharacterst12+countforcharacterst13+countforcharacterst14
                                                                        + countforcharacterst15+countforcharacterst16+countforcharacterst17+countforcharacterst18+countforcharacterst19+countforcharacterst20+countforcharacterst21
                                                                        + countforcharacterst22+countforcharacterst23+countforcharacterst24+countforcharacterst25+countforcharacterst26+countforcharacterst27+countforcharacterst28
                                                                        + countforcharacterst29
                                                                        + countforcharactersu1+countforcharactersu2+countforcharactersu3+countforcharactersu4+countforcharactersu5+countforcharactersu6+countforcharactersu7 
                                                                        + countforcharactersu8+countforcharactersu9+countforcharactersu10+countforcharactersu11+countforcharactersu12+countforcharactersu13+countforcharactersu14
                                                                        + countforcharactersu15+countforcharactersu16+countforcharactersu17+countforcharactersu18+countforcharactersu19+countforcharactersu20+countforcharactersu21
                                                                        + countforcharactersu22+countforcharactersu23+countforcharactersu24+countforcharactersu25+countforcharactersu26+countforcharactersu27+countforcharactersu28
                                                                        + countforcharactersu29
                                                                        + countforcharactersv1+countforcharactersv2+countforcharactersv3+countforcharactersv4+countforcharactersv5+countforcharactersv6+countforcharactersv7 
                                                                        + countforcharactersv8+countforcharactersv9+countforcharactersv10+countforcharactersv11+countforcharactersv12+countforcharactersv13+countforcharactersv14
                                                                        + countforcharactersv15+countforcharactersv16+countforcharactersv17+countforcharactersv18+countforcharactersv19+countforcharactersv20+countforcharactersv21
                                                                        + countforcharactersv22+countforcharactersv23+countforcharactersv24+countforcharactersv25+countforcharactersv26+countforcharactersv27+countforcharactersv28
                                                                        + countforcharactersv29
                                                                        + countforcharactersw1+countforcharactersw2+countforcharactersw3+countforcharactersw4+countforcharactersw5+countforcharactersw6+countforcharactersw7 
                                                                        + countforcharactersw8+countforcharactersw9+countforcharactersw10+countforcharactersw11+countforcharactersw12+countforcharactersw13+countforcharactersw14
                                                                        + countforcharactersw15+countforcharactersw16+countforcharactersw17+countforcharactersw18+countforcharactersw19+countforcharactersw20+countforcharactersw21
                                                                        + countforcharactersw22+countforcharactersw23+countforcharactersw24+countforcharactersw25+countforcharactersw26+countforcharactersw27+countforcharactersw28
                                                                        + countforcharactersw29
                                                                        + countforcharactersx1+countforcharactersx2+countforcharactersx3+countforcharactersx4+countforcharactersx5+countforcharactersx6+countforcharactersx7 
                                                                        + countforcharactersx8+countforcharactersx9+countforcharactersx10+countforcharactersx11+countforcharactersx12+countforcharactersx13+countforcharactersx14
                                                                        + countforcharactersx15+countforcharactersx16+countforcharactersx17+countforcharactersx18+countforcharactersx19+countforcharactersx20+countforcharactersx21
                                                                        + countforcharactersx22+countforcharactersx23+countforcharactersx24+countforcharactersx25+countforcharactersx26+countforcharactersx27+countforcharactersx28
                                                                        + countforcharactersx29
                                                                        + countforcharactersy1+countforcharactersy2+countforcharactersy3+countforcharactersy4+countforcharactersy5+countforcharactersy6+countforcharactersy7 
                                                                        + countforcharactersy8+countforcharactersy9+countforcharactersy10+countforcharactersy11+countforcharactersy12+countforcharactersy13+countforcharactersy14
                                                                        + countforcharactersy15+countforcharactersy16+countforcharactersy17+countforcharactersy18+countforcharactersy19+countforcharactersy20+countforcharactersy21
                                                                        + countforcharactersy22+countforcharactersy23+countforcharactersy24+countforcharactersy25+countforcharactersy26+countforcharactersy27+countforcharactersy28
                                                                        + countforcharactersy29
                                                                        + countforcharactersz1+countforcharactersz2+countforcharactersz3+countforcharactersz4+countforcharactersz5+countforcharactersz6+countforcharactersz7 
                                                                        + countforcharactersz8+countforcharactersz9+countforcharactersz10+countforcharactersz11+countforcharactersz12+countforcharactersz13+countforcharactersz14
                                                                        + countforcharactersz15+countforcharactersz16+countforcharactersz17+countforcharactersz18+countforcharactersz19+countforcharactersz20+countforcharactersz21
                                                                        + countforcharactersz22+countforcharactersz23+countforcharactersz24+countforcharactersz25+countforcharactersz26+countforcharactersz27+countforcharactersz28
                                                                        + countforcharactersz29
                                                                        + countforcharactersdot1+countforcharactersdot2+countforcharactersdot3+countforcharactersdot4+countforcharactersdot5+countforcharactersdot6+countforcharactersdot7 
                                                                        + countforcharactersdot8+countforcharactersdot9+countforcharactersdot10+countforcharactersdot11+countforcharactersdot12+countforcharactersdot13+countforcharactersdot14
                                                                        + countforcharactersdot15+countforcharactersdot16+countforcharactersdot17+countforcharactersdot18+countforcharactersdot19+countforcharactersdot20+countforcharactersdot21
                                                                        + countforcharactersdot22+countforcharactersdot23+countforcharactersdot24+countforcharactersdot25+countforcharactersdot26+countforcharactersdot27+countforcharactersdot28
                                                                        + countforcharactersdot29 
                                                                        + countforcharacterscomma1+countforcharacterscomma2+countforcharacterscomma3+countforcharacterscomma4+countforcharacterscomma5+countforcharacterscomma6+countforcharacterscomma7 
                                                                        + countforcharacterscomma8+countforcharacterscomma9+countforcharacterscomma10+countforcharacterscomma11+countforcharacterscomma12+countforcharacterscomma13+countforcharacterscomma14
                                                                        + countforcharacterscomma15+countforcharacterscomma16+countforcharacterscomma17+countforcharacterscomma18+countforcharacterscomma19+countforcharacterscomma20+countforcharacterscomma21
                                                                        + countforcharacterscomma22+countforcharacterscomma23+countforcharacterscomma24+countforcharacterscomma25+countforcharacterscomma26+countforcharacterscomma27+countforcharacterscomma28
                                                                        + countforcharacterscomma29
                                                                        + countforcharactersvacuum1+countforcharactersvacuum2+countforcharactersvacuum3+countforcharactersvacuum4+countforcharactersvacuum5+countforcharactersvacuum6+countforcharactersvacuum7 
                                                                        + countforcharactersvacuum8+countforcharactersvacuum9+countforcharactersvacuum10+countforcharactersvacuum11+countforcharactersvacuum12+countforcharactersvacuum13+countforcharactersvacuum14
                                                                        + countforcharactersvacuum15+countforcharactersvacuum16+countforcharactersvacuum17+countforcharactersvacuum18+countforcharactersvacuum19+countforcharactersvacuum20+countforcharactersvacuum21
                                                                        + countforcharactersvacuum22+countforcharactersvacuum23+countforcharactersvacuum24+countforcharactersvacuum25+countforcharactersvacuum26+countforcharactersvacuum27+countforcharactersvacuum28
                                                                        + countforcharactersvacuum29 ));
  
            }

            private static void calculatethedistributioninpairsofneighboringcharacters() 
    
            {
                
            double paa = 19.0/350144.0;
            double pab = 137.0/350144.0;
            double pac = 26.0/350144.0;
            double pad = 1088.0/350144.0;
            double pae = 805.0/350144.0;
            double paf = 285.0/350144.0;
            double pag = 830.0/350144.0;
            double pah = 27.0/350144.0;
            double pai = 55.0/350144.0;
            double paj = 9.0/350144.0;
            double pak = 1403.0/350144.0;
            double pal = 1574.0/350144.0;
            double pam = 1042.0/350144.0;
            double pan = 2880.0/350144.0;
            double pao = 6.0/350144.0;
            double pap = 746.0/350144.0;
            double par = 3292.0/350144.0;
            double pas = 1156.0/350144.0;
            double pat = 2142.0/350144.0;
            double pau = 205.0/350144.0;
            double pav = 1207.0/350144.0;
            double paw = 1.0/350144.0;
            double pax = 6.0/350144.0;
            double pay = 14.0/350144.0;
            double paz = 18.0/350144.0;
            double padot = 577.0/350144.0;
            double pacomma = 376.0/350144.0;
            double pavacuum = 3677.0/350144.0;   
            double pba = 1302.0/350144.0;
            double pbb = 175.0/350144.0;
            double pbd = 5.0/350144.0;
            double pbe = 1158.0/350144.0;
            double pbh = 2.0/350144.0;
            double pbi = 454.0/350144.0;
            double pbj = 77.0/350144.0;
            double pbl = 863.0/350144.0;
            double pbm = 2.0/350144.0;
            double pbn = 5.0/350144.0;
            double pbo = 570.0/350144.0;
            double pbr = 616.0/350144.0;
            double pbs = 24.0/350144.0;
            double pbu = 216.0/350144.0;
            double pby = 136.0/350144.0;
            double pbdot = 9.0/350144.0;
            double pbcomma = 7.0/350144.0;
            double pbvacuum = 29.0/350144.0;
            double pca = 59.0/350144.0;
            double pcc = 3.0/350144.0;
            double pcd = 7.0/350144.0;
            double pce = 43.0/350144.0;
            double pch = 64.0/350144.0;
            double pci = 13.0/350144.0;
            double pck = 139.0/350144.0;
            double pcl = 10.0/350144.0;
            double pco = 50.0/350144.0;
            double pcr = 5.0/350144.0;
            double pcs = 3.0/350144.0;
            double pct = 15.0/350144.0;
            double pcu = 26.0/350144.0;
            double pcv = 1.0/350144.0;
            double pccomma = 2.0/350144.0;
            double pcvacuum = 11.0/350144.0;
            double pda = 1057.0/350144.0;
            double pdb = 28.0/350144.0;
            double pdc = 4.0/350144.0;
            double pdd = 1141.0/350144.0;
            double pde = 3466.0/350144.0;
            double pdf = 28.0/350144.0;
            double pdg = 19.0/350144.0;
            double pdh = 15.0/350144.0;
            double pdi = 685.0/350144.0;
            double pdj = 55.0/350144.0;
            double pdk = 31.0/350144.0;
            double pdl = 133.0/350144.0;
            double pdm = 19.0/350144.0;
            double pdn = 66.0/350144.0;
            double pdo = 545.0/350144.0;
            double pdp = 21.0/350144.0;
            double pdr = 888.0/350144.0;
            double pds = 248.0/350144.0;
            double pdt = 568.0/350144.0;
            double pdu = 1065.0/350144.0;
            double pdv = 77.0/350144.0;
            double pdw = 2.0/350144.0;
            double pdy = 119.0/350144.0;
            double pddot = 283.0/350144.0;
            double pdcomma = 162.0/350144.0;
            double pdvacuum = 1622.0/350144.0;
            double pea = 120.0/350144.0;
            double peb = 270.0/350144.0;
            double pec = 130.0/350144.0;
            double ped = 1650.0/350144.0;
            double pee = 84.0/350144.0;
            double pef = 412.0/350144.0;
            double peg = 2233.0/350144.0;
            double peh = 134.0/350144.0;
            double pei = 880.0/350144.0;
            double pej = 13.0/350144.0;
            double pek = 838.0/350144.0;
            double pel = 2065.0/350144.0;
            double pem = 964.0/350144.0;
            double pen = 3823.0/350144.0;
            double peo = 51.0/350144.0;
            double pep = 339.0/350144.0;
            double per = 3473.0/350144.0;
            double pes = 1625.0/350144.0;
            double pet = 3570.0/350144.0;
            double peu = 15.0/350144.0;
            double pev = 535.0/350144.0;
            double pex = 18.0/350144.0;
            double pey = 4.0/350144.0;
            double pedot = 1451.0/350144.0;
            double pecomma = 897.0/350144.0;
            double pevacuum = 3863.0/350144.0;
            double pfa = 867.0/350144.0;
            double pfb = 5.0/350144.0;
            double pfe = 565.0/350144.0;
            double pff = 225.0/350144.0;
            double pfi = 574.0/350144.0;
            double pfj = 83.0/350144.0;
            double pfl = 289.0/350144.0;
            double pfm = 1.0/350144.0;
            double pfn = 6.0/350144.0;
            double pfo = 2022.0/350144.0;
            double pfr = 848.0/350144.0;
            double pfs = 17.0/350144.0;
            double pft = 414.0/350144.0;
            double pfu = 191.0/350144.0;
            double pfy = 101.0/350144.0;
            double pfdot = 30.0/350144.0;
            double pfcomma = 7.0/350144.0;
            double pfvacuum = 105.0/350144.0;
            double pga = 933.0/350144.0;
            double pgb = 27.0/350144.0;
            double pgd = 82.0/350144.0;
            double pge = 1904.0/350144.0;
            double pgf = 15.0/350144.0;
            double pgg = 424.0/350144.0;
            double pgh = 197.0/350144.0;
            double pgi = 489.0/350144.0;
            double pgj = 812.0/350144.0;
            double pgk = 13.0/350144.0;
            double pgl = 330.0/350144.0;
            double pgm = 11.0/350144.0;
            double pgn = 282.0/350144.0;
            double pgo = 156.0/350144.0;
            double pgp = 6.0/350144.0;
            double pgr = 562.0/350144.0;
            double pgs = 421.0/350144.0;
            double pgt = 460.0/350144.0;
            double pgu = 256.0/350144.0;
            double pgv = 79.0/350144.0;
            double pgy = 152.0/350144.0;
            double pgdot = 566.0/350144.0;
            double pgcomma = 360.0/350144.0;
            double pgvacuum = 3014.0/350144.0; 
            double pha = 3197.0/350144.0;
            double phb = 3.0/350144.0;
            double phc = 1.0/350144.0;
            double phd = 1.0/350144.0;
            double phe = 1303.0/350144.0;
            double phi = 349.0/350144.0;
            double phj = 229.0/350144.0;
            double phl = 2.0/350144.0;
            double phn = 19.0/350144.0;
            double pho = 1188.0/350144.0;
            double phr = 19.0/350144.0;
            double pht = 19.0/350144.0;
            double phu = 1085.0/350144.0;
            double phv = 1193.0/350144.0;
            double phy = 70.0/350144.0;
            double phdot = 8.0/350144.0;
            double phcomma = 3.0/350144.0;
            double phvacuum = 19.0/350144.0;
            double pia = 377.0/350144.0;
            double pib = 75.0/350144.0;
            double pic = 30.0/350144.0;
            double pid = 922.0/350144.0;
            double pie = 525.0/350144.0;
            double pif = 161.0/350144.0;
            double pig = 1392.0/350144.0;
            double pih = 49.0/350144.0;
            double pii = 3.0/350144.0;
            double pik = 2179.0/350144.0;
            double pil = 2080.0/350144.0;
            double pim = 365.0/350144.0;
            double pin = 2275.0/350144.0;
            double pio = 122.0/350144.0;
            double pip = 243.0/350144.0;
            double piq = 1.0/350144.0;
            double pir = 509.0/350144.0;
            double pis = 1307.0/350144.0;
            double pit = 1182.0/350144.0;
            double piu = 44.0/350144.0;
            double piv = 344.0/350144.0;
            double piz = 1.0/350144.0;
            double pidot = 98.0/350144.0;
            double picomma = 147.0/350144.0;
            double pivacuum = 2079.0/350144.0;         
            double pja = 407.0/350144.0;
            double pje = 2164.0/350144.0;
            double pji = 17.0/350144.0;
            double pjo = 1170.0/350144.0;
            double pjr = 1.0/350144.0;
            double pju = 146.0/350144.0;
            double pjy = 2.0/350144.0;
            double pjdot = 5.0/350144.0;
            double pjcomma = 1.0/350144.0;
            double pjvacuum = 12.0/350144.0;
            double pka = 1532.0/350144.0;
            double pkb = 8.0/350144.0;
            double pkd = 61.0/350144.0;
            double pke = 2713.0/350144.0;
            double pkf = 8.0/350144.0;
            double pkg = 21.0/350144.0;
            double pkh = 36.0/350144.0;
            double pki = 346.0/350144.0;
            double pkj = 1027.0/350144.0;
            double pkk = 2418.0/350144.0;
            double pkl = 552.0/350144.0;
            double pkm = 4.0/350144.0;
            double pkn = 313.0/350144.0;
            double pko = 1112.0/350144.0;
            double pkp = 2.0/350144.0;
            double pkr = 600.0/350144.0;
            double pks = 449.0/350144.0;
            double pkt = 1082.0/350144.0;
            double pku = 841.0/350144.0;
            double pkv = 334.0/350144.0;
            double pky = 157.0/350144.0;
            double pkdot = 225.0/350144.0;
            double pkcomma = 167.0/350144.0;
            double pkvacuum = 1354.0/350144.0;       
            double pla = 1382.0/350144.0;
            double plb = 212.0/350144.0;
            double plc = 3.0/350144.0;
            double pld = 796.0/350144.0;
            double ple = 2466.0/350144.0;
            double plf = 117.0/350144.0;
            double plg = 249.0/350144.0;
            double plh = 51.0/350144.0;
            double pli = 1901.0/350144.0;
            double plj = 60.0/350144.0;
            double plk = 217.0/350144.0;
            double pll = 1534.0/350144.0;
            double plm = 208.0/350144.0;
            double pln = 16.0/350144.0;
            double plo = 1001.0/350144.0;
            double plp = 67.0/350144.0;
            double plr = 36.0/350144.0;
            double pls = 560.0/350144.0;
            double plt = 982.0/350144.0;
            double plu = 470.0/350144.0;
            double plv = 571.0/350144.0;
            double plw = 4.0/350144.0;
            double ply = 484.0/350144.0;
            double plz = 1.0/350144.0;
            double pldot = 269.0/350144.0;
            double plcomma = 158.0/350144.0;
            double plvacuum = 1703.0/350144.0;  
            double pma = 1320.0/350144.0;
            double pmb = 60.0/350144.0;
            double pmd = 35.0/350144.0;
            double pme = 2444.0/350144.0;
            double pmf = 48.0/350144.0;
            double pmg = 15.0/350144.0;
            double pmh = 15.0/350144.0;
            double pmi = 697.0/350144.0;
            double pmk = 8.0/350144.0;
            double pml = 120.0/350144.0;
            double pmm = 1143.0/350144.0;
            double pmn = 15.0/350144.0;
            double pmo = 879.0/350144.0;
            double pmp = 183.0/350144.0;
            double pmr = 62.0/350144.0;
            double pms = 111.0/350144.0;
            double pmt = 322.0/350144.0;
            double pmu = 317.0/350144.0;
            double pmv = 23.0/350144.0;
            double pmw = 2.0/350144.0;
            double pmy = 134.0/350144.0;
            double pmdot = 421.0/350144.0;
            double pmcomma = 155.0/350144.0;
            double pmvacuum = 2081.0/350144.0;   
            double pna = 1186.0/350144.0;
            double pnb = 61.0/350144.0;
            double pnc = 8.0/350144.0;
            double pnd = 1496.0/350144.0;
            double pne = 2836.0/350144.0;
            double pnf = 159.0/350144.0;
            double png = 1703.0/350144.0;
            double pnh = 82.0/350144.0;
            double pni = 724.0/350144.0;
            double pnj = 17.0/350144.0;
            double pnk = 669.0/350144.0;
            double pnl = 199.0/350144.0;
            double pnm = 26.0/350144.0;
            double pnn = 2138.0/350144.0;
            double pno = 1168.0/350144.0;
            double pnp = 14.0/350144.0;
            double pnr = 37.0/350144.0;
            double pns = 1260.0/350144.0;
            double pnt = 1529.0/350144.0;
            double pnu = 247.0/350144.0;
            double pnv = 66.0/350144.0;
            double pnx = 1.0/350144.0;
            double pny = 199.0/350144.0;
            double pnz = 2.0/350144.0;
            double pndot = 1555.0/350144.0;
            double pncomma = 731.0/350144.0;
            double pnvacuum = 3574.0/350144.0;   
            double poa = 26.0/350144.0;
            double pob = 271.0/350144.0;
            double poc = 25.0/350144.0;
            double pod = 791.0/350144.0;
            double poe = 714.0/350144.0;
            double pof = 302.0/350144.0;
            double pog = 2222.0/350144.0;
            double poh = 55.0/350144.0;
            double poi = 14.0/350144.0;
            double poj = 7.0/350144.0;
            double pok = 821.0/350144.0;
            double pol = 1322.0/350144.0;
            double pom = 2199.0/350144.0;
            double pon = 1085.0/350144.0;
            double poo = 27.0/350144.0;
            double pop = 1156.0/350144.0;
            double por = 2844.0/350144.0;
            double pos = 616.0/350144.0;
            double pot = 856.0/350144.0;
            double pou = 41.0/350144.0;
            double pov = 879.0/350144.0;
            double pow = 24.0/350144.0;
            double pox = 8.0/350144.0;
            double poy = 546.0/350144.0;
            double podot = 148.0/350144.0;
            double pocomma = 69.0/350144.0;
            double povacuum = 828.0/350144.0;
            double ppa = 2005.0/350144.0;
            double ppb = 10.0/350144.0;
            double ppc = 10.0/350144.0;
            double ppd = 53.0/350144.0;
            double ppe = 1137.0/350144.0;
            double ppf = 20.0/350144.0;
            double ppg = 15.0/350144.0;
            double pph = 24.0/350144.0;
            double ppi = 331.0/350144.0;
            double ppj = 1.0/350144.0;
            double ppk = 26.0/350144.0;
            double ppl = 369.0/350144.0;
            double ppm = 25.0/350144.0;
            double ppn = 135.0/350144.0;
            double ppo = 574.0/350144.0;
            double ppp = 1126.0/350144.0;
            double ppr = 540.0/350144.0;
            double pps = 270.0/350144.0;
            double ppt = 201.0/350144.0;
            double ppu = 391.0/350144.0;
            double ppv = 15.0/350144.0;
            double ppy = 22.0/350144.0;
            double ppdot = 165.0/350144.0;
            double ppcomma = 80.0/350144.0;
            double ppvacuum = 679.0/350144.0;
            double pqu = 4.0/350144.0;
            double pqvacuum = 6.0/350144.0;
            double pra = 1804.0/350144.0;
            double prb = 178.0/350144.0;
            double prc = 5.0/350144.0;
            double prd = 850.0/350144.0;
            double pre = 2744.0/350144.0;
            double prf = 349.0/350144.0;
            double prg = 305.0/350144.0;
            double prh = 115.0/350144.0;
            double pri = 1377.0/350144.0;
            double prj = 3.0/350144.0;
            double prk = 595.0/350144.0;
            double prl = 284.0/350144.0;
            double prm = 360.0/350144.0;
            double prn = 500.0/350144.0;
            double pro = 1261.0/350144.0;
            double prp = 61.0/350144.0;
            double prr = 1818.0/350144.0;
            double prs = 1006.0/350144.0;
            double prt = 1738.0/350144.0;
            double pru = 664.0/350144.0;
            double prv = 246.0/350144.0;
            double prw = 2.0/350144.0;
            double pry = 1682.0/350144.0;
            double prdot = 818.0/350144.0;
            double prcomma = 520.0/350144.0;
            double prvacuum = 3533.0/350144.0;
            double psa = 2529.0/350144.0;
            double psb = 74.0/350144.0;
            double psc = 43.0/350144.0;
            double psd = 53.0/350144.0;
            double pse = 2235.0/350144.0;
            double psf = 76.0/350144.0;
            double psg = 51.0/350144.0;
            double psh = 111.0/350144.0;
            double psi = 1303.0/350144.0;
            double psj = 577.0/350144.0;
            double psk = 1958.0/350144.0;
            double psl = 690.0/350144.0;
            double psm = 464.0/350144.0;
            double psn = 603.0/350144.0;
            double pso = 1588.0/350144.0;
            double psp = 851.0/350144.0;
            double psr = 46.0/350144.0;
            double pss = 945.0/350144.0;
            double pst = 2379.0/350144.0;
            double psu = 190.0/350144.0;
            double psv = 614.0/350144.0;
            double psw = 3.0/350144.0;
            double psy = 373.0/350144.0;
            double psdot = 408.0/350144.0;
            double pscomma = 167.0/350144.0;
            double psvacuum = 1589.0/350144.0;
            double pta = 1288.0/350144.0;
            double ptb = 64.0/350144.0;
            double ptc = 15.0/350144.0;
            double ptd = 14.0/350144.0;
            double pte = 3326.0/350144.0;
            double ptf = 50.0/350144.0;
            double ptg = 42.0/350144.0;
            double pth = 258.0/350144.0;
            double pti = 1998.0/350144.0;
            double ptj = 191.0/350144.0;
            double ptk = 58.0/350144.0;
            double ptl = 256.0/350144.0;
            double ptm = 41.0/350144.0;
            double ptn = 124.0/350144.0;
            double pto = 1360.0/350144.0;
            double ptp = 26.0/350144.0;
            double ptr = 1433.0/350144.0;
            double pts = 570.0/350144.0;
            double ptt = 2131.0/350144.0;
            double ptu = 379.0/350144.0;
            double ptv = 208.0/350144.0;
            double ptw = 3.0/350144.0;
            double pty = 261.0/350144.0;
            double ptz = 1.0/350144.0;
            double ptdot = 1498.0/350144.0;
            double ptcomma = 787.0/350144.0;
            double ptvacuum = 3693.0/350144.0;   
            double pua = 102.0/350144.0;
            double pub = 77.0/350144.0;
            double puc = 5.0/350144.0;
            double pud = 285.0/350144.0;
            double pue = 218.0/350144.0;
            double puf = 121.0/350144.0;
            double pug = 109.0/350144.0;
            double puh = 13.0/350144.0;
            double pui = 15.0/350144.0;
            double puj = 2.0/350144.0;
            double puk = 451.0/350144.0;
            double pul = 781.0/350144.0;
            double pum = 284.0/350144.0;
            double pun = 1657.0/350144.0;
            double puo = 8.0/350144.0;
            double pup = 108.0/350144.0;
            double pur = 678.0/350144.0;
            double pus = 672.0/350144.0;
            double put = 1123.0/350144.0;
            double puu = 9.0/350144.0;
            double puv = 20.0/350144.0;
            double puz = 1.0/350144.0;
            double pudot = 18.0/350144.0;
            double pucomma = 19.0/350144.0;
            double puvacuum = 907.0/350144.0;   
            double pva = 2033.0/350144.0;
            double pvb = 33.0/350144.0;
            double pvd = 153.0/350144.0;
            double pve = 2059.0/350144.0;
            double pvf = 69.0/350144.0;
            double pvg = 21.0/350144.0;
            double pvh = 23.0/350144.0;
            double pvi = 1727.0/350144.0;
            double pvj = 5.0/350144.0;
            double pvk = 12.0/350144.0;
            double pvl = 107.0/350144.0;
            double pvm = 9.0/350144.0;
            double pvn = 198.0/350144.0;
            double pvo = 623.0/350144.0;
            double pvp = 5.0/350144.0;
            double pvr = 56.0/350144.0;
            double pvs = 108.0/350144.0;
            double pvt = 137.0/350144.0;
            double pvu = 51.0/350144.0;
            double pvv = 23.0/350144.0;
            double pvdot = 102.0/350144.0;
            double pvcomma = 44.0/350144.0;
            double pvvacuum = 1071.0/350144.0;   
            double pwa = 12.0/350144.0;
            double pwb = 1.0/350144.0;
            double pwd = 1.0/350144.0;
            double pwe = 16.0/350144.0;
            double pwh = 9.0/350144.0;
            double pwi = 18.0/350144.0;
            double pwl = 2.0/350144.0;
            double pwn = 4.0/350144.0;
            double pwo = 11.0/350144.0;
            double pww = 1.0/350144.0;
            double pwdot = 5.0/350144.0;
            double pwvacuum = 4.0/350144.0;
            double pxa = 1.0/350144.0;
            double pxe = 2.0/350144.0;
            double pxi = 14.0/350144.0;
            double pxl = 16.0/350144.0;
            double pxy = 2.0/350144.0;
            double pxdot = 2.0/350144.0;
            double pxcomma = 1.0/350144.0;
            double pxvacuum = 12.0/350144.0;
            double pya = 31.0/350144.0;
            double pyb = 10.0/350144.0;
            double pyc = 1.0/350144.0;
            double pyd = 264.0/350144.0;
            double pye = 326.0/350144.0;
            double pyf = 9.0/350144.0;
            double pyg = 206.0/350144.0;
            double pyh = 25.0/350144.0;
            double pyj = 2.0/350144.0;
            double pyk = 418.0/350144.0;
            double pyl = 215.0/350144.0;
            double pym = 47.0/350144.0;
            double pyn = 515.0/350144.0;
            double pyo = 13.0/350144.0;
            double pyp = 93.0/350144.0;
            double pyr = 205.0/350144.0;
            double pys = 414.0/350144.0;
            double pyt = 352.0/350144.0;
            double pyu = 1.0/350144.0;
            double pyv = 27.0/350144.0;
            double pydot = 391.0/350144.0;
            double pycomma = 74.0/350144.0;
            double pyvacuum = 1106.0/350144.0;
            double pza = 7.0/350144.0;
            double pze = 8.0/350144.0;
            double pzh = 2.0/350144.0;
            double pzi = 3.0/350144.0;
            double pzo = 8.0/350144.0;
            double pzy = 1.0/350144.0;
            double pzz = 3.0/350144.0;
            double pzvacuum = 2.0/350144.0;
            double pdota = 1.0/350144.0;
            double pdotj = 1.0/350144.0;
            double pdotn = 1.0/350144.0;
            double pdotcomma = 1.0/350144.0;
            double pdotvacuum = 2.0/350144.0;
            double pcommavacuum = 2867.0/350144.0;
            double pvacuuma = 2740.0/350144.0;
            double pvacuumb = 2318.0/350144.0;
            double pvacuumc = 133.0/350144.0;
            double pvacuumd = 3440.0/350144.0;
            double pvacuume = 2631.0/350144.0;
            double pvacuumf = 2566.0/350144.0;
            double pvacuumg = 1809.0/350144.0;
            double pvacuumh = 3869.0/350144.0;
            double pvacuumi = 2640.0/350144.0;
            double pvacuumj = 1423.0/350144.0;
            double pvacuumk = 2268.0/350144.0;
            double pvacuuml = 1916.0/350144.0;
            double pvacuumm = 2648.0/350144.0;
            double pvacuumn = 1840.0/350144.0;
            double pvacuumo = 2788.0/350144.0;
            double pvacuump = 2334.0/350144.0;
            double pvacuumq = 9.0/350144.0;
            double pvacuumr = 1507.0/350144.0;
            double pvacuums = 4014.0/350144.0;
            double pvacuumt = 2465.0/350144.0;
            double pvacuumu = 1190.0/350144.0;
            double pvacuumv = 2493.0/350144.0;
            double pvacuumw = 41.0/350144.0;
            double pvacuumx = 1.0/350144.0;
            double pvacuumy = 52.0/350144.0;
            double pvacuumz = 7.0/350144.0;
            double pvacuumdot = 88.0/350144.0;
            double pvacuumcomma = 51.0/350144.0;  
            double pvacuumvacuum = 2982.0/350144.0;   

            double sumprobability = paa+pab+pac+pad+pae+paf+pag+pah+pai+paj+pak+pal+pam+pan+pao+pap+par+pas+pat+pau+pav+paw+pax+pay+paz+padot+pacomma+pavacuum
                                   +pba+pbb+pbd+pbe+pbh+pbi+pbj+pbl+pbm+pbn+pbo+pbr+pbs+pbu+pby+pbdot+pbcomma+pbvacuum
                                   +pca+pcc+pcd+pce+pch+pci+pck+pcl+pco+pcr+pcs+pct+pcu+pcv+pccomma+pcvacuum
                                   +pda+pdb+pdc+pdd+pde+pdf+pdg+pdh+pdi+pdj+pdk+pdl+pdm+pdn+pdo+pdp+pdr+pds+pdt+pdu+pdv+pdw+pdy+pddot+pdcomma+pdvacuum
                                   +pea+peb+pec+ped+pee+pef+peg+peh+pei+pej+pek+pel+pem+pen+peo+pep+per+pes+pet+peu+pev+pex+pey+pedot+pecomma+pevacuum
                                   +pfa+pfb+pfe+pff+pfi+pfj+pfl+pfm+pfn+pfo+pfr+pfs+pft+pfu+pfy+pfdot+pfcomma+pfvacuum
                                   +pga+pgb+pgd+pge+pgf+pgg+pgh+pgi+pgj+pgk+pgl+pgm+pgn+pgo+pgp+pgr+pgs+pgt+pgu+pgv+pgy+pgdot+pgcomma+pgvacuum
                                   +pha+phb+phc+phd+phe+phi+phj+phl+phn+pho+phr+pht+phu+phv+phy+phdot+phcomma+phvacuum
                                   +pia+pib+pic+pid+pie+pif+pig+pih+pii+pik+pil+pim+pin+pio+pip+piq+pir+pis+pit+piu+piv+piz+pidot+picomma+pivacuum
                                   +pja+pje+pji+pjo+pjr+pju+pjy+pjdot+pjcomma+pjvacuum
                                   +pka+pkb+pkd+pke+pkf+pkg+pkh+pki+pkj+pkk+pkl+pkm+pkn+pko+pkp+pkr+pks+pkt+pku+pkv+pky+pkdot+pkcomma+pkvacuum
                                   +pla+plb+plc+pld+ple+plf+plg+plh+pli+plj+plk+pll+plm+pln+plo+plp+plr+pls+plt+plu+plv+plw+ply+plz+pldot+plcomma+plvacuum
                                   +pma+pmb+pmd+pme+pmf+pmg+pmh+pmi+pmk+pml+pmm+pmn+pmo+pmp+pmr+pms+pmt+pmu+pmv+pmw+pmy+pmdot+pmcomma+pmvacuum
                                   +pna+pnb+pnc+pnd+pne+pnf+png+pnh+pni+pnj+pnk+pnl+pnm+pnn+pno+pnp+pnr+pns+pnt+pnu+pnv+pnx+pny+pnz+pndot+pncomma+pnvacuum
                                   +poa+pob+poc+pod+poe+pof+pog+poh+poi+poj+pok+pol+pom+pon+poo+pop+por+pos+pot+pou+pov+pow+pox+poy+podot+pocomma+povacuum
                                   +ppa+ppb+ppc+ppd+ppe+ppf+ppg+pph+ppi+ppj+ppk+ppl+ppm+ppn+ppo+ppp+ppr+pps+ppt+ppu+ppv+ppy+ppdot+ppcomma+ppvacuum
                                   +pqu+pqvacuum
                                   +pra+prb+prc+prd+pre+prf+prg+prh+pri+prj+prk+prl+prm+prn+pro+prp+prr+prs+prt+pru+prv+prw+pry+prdot+prcomma+prvacuum
                                   +psa+psb+psc+psd+pse+psf+psg+psh+psi+psj+psk+psl+psm+psn+pso+psp+psr+pss+pst+psu+psv+psw+psy+psdot+pscomma+psvacuum
                                   +pta+ptb+ptc+ptd+pte+ptf+ptg+pth+pti+ptj+ptk+ptl+ptm+ptn+pto+ptp+ptr+pts+ptt+ptu+ptv+ptw+pty+ptz+ptdot+ptcomma+ptvacuum
                                   +pua+pub+puc+pud+pue+puf+pug+puh+pui+puj+puk+pul+pum+pun+puo+pup+pur+pus+put+puu+puv+puz+pudot+pucomma+puvacuum
                                   +pva+pvb+pvd+pve+pvf+pvg+pvh+pvi+pvj+pvk+pvl+pvm+pvn+pvo+pvp+pvr+pvs+pvt+pvu+pvv+pvdot+pvcomma+pvvacuum
                                   +pwa+pwb+pwd+pwe+pwh+pwi+pwl+pwn+pwo+pww+pwdot+pwvacuum
                                   +pxa+pxe+pxi+pxl+pxy+pxdot+pxcomma+pxvacuum
                                   +pya+pyb+pyc+pyd+pye+pyf+pyg+pyh+pyj+pyk+pyl+pym+pyn+pyo+pyp+pyr+pys+pyt+pyu+pyv+pydot+pycomma+pyvacuum
                                   +pza+pze+pzh+pzi+pzo+pzy+pzz+pzvacuum
                                   +pdota+pdotj+pdotn+pdotcomma+pdotvacuum
                                   +pcommavacuum
                                   +pvacuuma+pvacuumb+pvacuumc+pvacuumd+pvacuume+pvacuumf+pvacuumg+pvacuumh+pvacuumi+pvacuumj+pvacuumk+pvacuuml+pvacuumm+pvacuumn+pvacuumo+pvacuump+pvacuumq+pvacuumr+pvacuums+pvacuumt+pvacuumu+pvacuumv+pvacuumw+pvacuumx+pvacuumy+pvacuumz+pvacuumdot+pvacuumcomma+pvacuumvacuum;
            
            System.out.println("\nP(aa) = 19.0/350144.0 = " + paa );
            System.out.println("\nP(ab) = 137.0/350144.0 = " + pab );
            System.out.println("\nP(ac) = 26.0/350144.0 = " + pac );
            System.out.println("\nP(ad) = 1088.0/350144.0 = " + pad );
            System.out.println("\nP(ae) = 805.0/350144.0 = " + pae );
            System.out.println("\nP(af) = 285.0/350144.0 = " + paf );
            System.out.println("\nP(ag) = 830.0/350144.0 = " + pag );
            System.out.println("\nP(ah) = 27.0/350144.0 = " + pah );
            System.out.println("\nP(ai) = 55.0/350144.0 = " + pai );
            System.out.println("\nP(aj) = 9.0/350144.0 = " + paj );
            System.out.println("\nP(ak) = 1403.0/350144.0 = " + pak );
            System.out.println("\nP(al) = 1574.0/350144.0 = " + pal );
            System.out.println("\nP(am) = 1042.0/350144.0 = " + pam );
            System.out.println("\nP(an) = 2880.0/350144.0 = " + pan );
            System.out.println("\nP(ao) = 6.0/350144.0 = " + pao );
            System.out.println("\nP(ap) = 746.0/350144.0 = " + pap );
            System.out.println("\nP(ar) = 3292.0/350144.0 = " + par );
            System.out.println("\nP(as) = 1156.0/350144.0 = " + pas );
            System.out.println("\nP(at) = 2142.0/350144.0 = " + pat );
            System.out.println("\nP(au) = 205.0/350144.0 = " + pau );
            System.out.println("\nP(av) = 1207.0/350144.0 = " + pav );
            System.out.println("\nP(aw) = 1.0/350144.0 = " + paw );
            System.out.println("\nP(ax) = 6.0/350144.0 = " + pax );
            System.out.println("\nP(ay) = 14.0/350144.0 = " + pay );
            System.out.println("\nP(az) = 18.0/350144.0 = " + paz );
            System.out.println("\nP(a.) = 577.0/350144.0 = " + padot );
            System.out.println("\nP(a,) = 376.0/350144.0 = " + pacomma );
            System.out.println("\nP(avacuum) = 3677.0/350144.0 = " + pavacuum );
            System.out.println("\nP(ba) = 1302.0/350144.0 = " + pba );
            System.out.println("\nP(bb) = 175.0/350144.0 = " + pbb );
            System.out.println("\nP(bd) = 5.0/350144.0 = " + pbd );
            System.out.println("\nP(be) = 1158.0/350144.0 = " + pbe );
            System.out.println("\nP(bh) = 2.0/350144.0 = " + pbh );
            System.out.println("\nP(bi) = 454.0/350144.0 = " + pbi );
            System.out.println("\nP(bj) = 77.0/350144.0 = " + pbj );
            System.out.println("\nP(bl) = 863.0/350144.0 = " + pbl );
            System.out.println("\nP(bm) = 2.0/350144.0 = " + pbm );
            System.out.println("\nP(bn) = 5.0/350144.0 = " + pbn );
            System.out.println("\nP(bo) = 570.0/350144.0 = " + pbo );
            System.out.println("\nP(br) = 616.0/350144.0 = " + pbr );
            System.out.println("\nP(bs) = 24.0/350144.0 = " + pbs );
            System.out.println("\nP(bu) = 216.0/350144.0 = " + pbu );
            System.out.println("\nP(by) = 136.0/350144.0 = " + pby );
            System.out.println("\nP(b.) = 9.0/350144.0 = " + pbdot );
            System.out.println("\nP(b,) = 7.0/350144.0 = " + pbcomma );
            System.out.println("\nP(bvacuum) = 29.0/350144.0 = " + pbvacuum );
            System.out.println("\nP(ca) = 59.0/350144.0 = " + pca );
            System.out.println("\nP(cc) = 3.0/350144.0 = " + pcc );
            System.out.println("\nP(cd) = 7.0/350144.0 = " + pcd );
            System.out.println("\nP(ce) = 43.0/350144.0 = " + pce );
            System.out.println("\nP(ch) = 64.0/350144.0 = " + pch );
            System.out.println("\nP(ci) = 13.0/350144.0 = " + pci );
            System.out.println("\nP(ck) = 139.0/350144.0 = " + pck );
            System.out.println("\nP(cl) = 10.0/350144.0 = " + pcl );
            System.out.println("\nP(co) = 50.0/350144.0 = " + pco );
            System.out.println("\nP(cr) = 5.0/350144.0 = " + pcr );
            System.out.println("\nP(cs) = 3.0/350144.0 = " + pcs );
            System.out.println("\nP(ct) = 15.0/350144.0 = " + pct );
            System.out.println("\nP(cu) = 26.0/350144.0 = " + pcu );
            System.out.println("\nP(cv) = 1.0/350144.0 = " + pcv );
            System.out.println("\nP(c,) = 2.0/350144.0 = " + pccomma );
            System.out.println("\nP(cvacuum) = 11.0/350144.0 = " + pcvacuum );
            System.out.println("\nP(da) = 1057.0/350144.0 = " + pda );
            System.out.println("\nP(db) = 28.0/350144.0 = " + pdb );
            System.out.println("\nP(dc) = 4.0/350144.0 = " + pdc );
            System.out.println("\nP(dd) = 1141.0/350144.0 = " + pdd );
            System.out.println("\nP(de) = 3466.0/350144.0 = " + pde );
            System.out.println("\nP(df) = 28.0/350144.0 = " + pdf );
            System.out.println("\nP(dg) = 19.0/350144.0 = " + pdg );
            System.out.println("\nP(dh) = 15.0/350144.0 = " + pdh );
            System.out.println("\nP(di) = 685.0/350144.0 = " + pdi );
            System.out.println("\nP(dj) = 55.0/350144.0 = " + pdj );
            System.out.println("\nP(dk) = 31.0/350144.0 = " + pdk);
            System.out.println("\nP(dl) = 133.0/350144.0 = " + pdl );
            System.out.println("\nP(dm) = 19.0/350144.0 = " + pdm );
            System.out.println("\nP(dn) = 66.0/350144.0 = " + pdn );
            System.out.println("\nP(do) = 545.0/350144.0 = " + pdo );
            System.out.println("\nP(dp) = 21.0/350144.0 = " + pdp );
            System.out.println("\nP(dr) = 888.0/350144.0 = " + pdr );
            System.out.println("\nP(ds) = 248.0/350144.0 = " + pds );
            System.out.println("\nP(dt) = 568.0/350144.0 = " + pdt );
            System.out.println("\nP(du) = 1065.0/350144.0 = " + pdu );
            System.out.println("\nP(dv) = 77.0/350144.0 = " + pdv );
            System.out.println("\nP(dw) = 2.0/350144.0 = " + pdw );
            System.out.println("\nP(dy) = 119.0/350144.0 = " + pdy );
            System.out.println("\nP(d.) = 283.0/350144.0 = " + pddot );
            System.out.println("\nP(d,) = 162.0/350144.0 = " + pdcomma );
            System.out.println("\nP(dvacuum) = 1622.0/350144.0 = " + pdvacuum );
            System.out.println("\nP(ea) = 120.0/350144.0 = " + pea );
            System.out.println("\nP(eb) = 270.0/350144.0 = " + peb );
            System.out.println("\nP(ec) = 130.0/350144.0 = " + pec );
            System.out.println("\nP(ed) = 1650.0/350144.0 = " + ped );
            System.out.println("\nP(ee) = 84.0/350144.0 = " + pee );
            System.out.println("\nP(ef) = 412.0/350144.0 = " + pef );
            System.out.println("\nP(eg) = 2233.0/350144.0 = " + peg );
            System.out.println("\nP(eh) = 134.0/350144.0 = " + peh );
            System.out.println("\nP(ei) = 880.0/350144.0 = " + pei );
            System.out.println("\nP(ej) = 13.0/350144.0 = " + pej );
            System.out.println("\nP(ek) = 838.0/350144.0 = " + pek );
            System.out.println("\nP(el) = 2065.0/350144.0 = " + pel );
            System.out.println("\nP(em) = 964.0/350144.0 = " + pem );
            System.out.println("\nP(en) = 3823.0/350144.0 = " + pen );
            System.out.println("\nP(eo) = 51.0/350144.0 = " + peo );
            System.out.println("\nP(ep) = 339.0/350144.0 = " + pep );
            System.out.println("\nP(er) = 3473.0/350144.0 = " + per );
            System.out.println("\nP(es) = 1625.0/350144.0 = " + pes );
            System.out.println("\nP(et) = 3570.0/350144.0 = " + pet );
            System.out.println("\nP(eu) = 15.0/350144.0 = " + peu );
            System.out.println("\nP(ev) = 535.0/350144.0 = " + pev );
            System.out.println("\nP(ex) = 18.0/350144.0 = " + pex );
            System.out.println("\nP(ey) = 4.0/350144.0 = " + pey );
            System.out.println("\nP(e.) = 1451.0/350144.0 = " + pedot );
            System.out.println("\nP(e,) = 897.0/350144.0 = " + pecomma );
            System.out.println("\nP(evacuum) = 3863.0/350144.0 = " + pevacuum );
            System.out.println("\nP(fa) = 867.0/350144.0 = " + pfa );
            System.out.println("\nP(fb) = 5.0/350144.0 = " + pfb );
            System.out.println("\nP(fe) = 565.0/350144.0 = " + pfe );
            System.out.println("\nP(ff) = 225.0/350144.0 = " + pff );
            System.out.println("\nP(fi) = 574.0/350144.0 = " + pfi );
            System.out.println("\nP(fj) = 83.0/350144.0 = " + pfj );
            System.out.println("\nP(fl) = 289.0/350144.0 = " + pfl );
            System.out.println("\nP(fm) = 1.0/350144.0 = " + pfm );
            System.out.println("\nP(fn) = 6.0/350144.0 = " + pfn );
            System.out.println("\nP(fo) = 2022.0/350144.0 = " + pfo );
            System.out.println("\nP(fr) = 848.0/350144.0 = " + pfr );
            System.out.println("\nP(fs) = 17.0/350144.0 = " + pfs );
            System.out.println("\nP(ft) = 414.0/350144.0 = " + pft );
            System.out.println("\nP(fu) = 191.0/350144.0 = " + pfu );
            System.out.println("\nP(fy) = 101.0/350144.0 = " + pfy );
            System.out.println("\nP(f.) = 30.0/350144.0 = " + pfdot );
            System.out.println("\nP(f,) = 7.0/350144.0 = " + pfcomma );
            System.out.println("\nP(fvacuum) = 105.0/350144.0 = " + pfvacuum );
            System.out.println("\nP(ga) = 933.0/350144.0 = " + pga );
            System.out.println("\nP(gb) = 27.0/350144.0 = " + pgb );
            System.out.println("\nP(gd) = 82.0/350144.0 = " + pgd );
            System.out.println("\nP(ge) = 1904.0/350144.0 = " + pge );
            System.out.println("\nP(gf) = 15.0/350144.0 = " + pgf );
            System.out.println("\nP(gg) = 424.0/350144.0 = " + pgg );
            System.out.println("\nP(gh) = 197.0/350144.0 = " + pgh );
            System.out.println("\nP(gi) = 489.0/350144.0 = " + pgi );
            System.out.println("\nP(gj) = 812.0/350144.0 = " + pgj );
            System.out.println("\nP(gk) = 13.0/350144.0 = " + pgk );
            System.out.println("\nP(gl) = 330.0/350144.0 = " + pgl );
            System.out.println("\nP(gm) = 11.0/350144.0 = " + pgm );
            System.out.println("\nP(gn) = 282.0/350144.0 = " + pgn );
            System.out.println("\nP(go) = 156.0/350144.0 = " + pgo );
            System.out.println("\nP(gp) = 6.0/350144.0 = " + pgp );
            System.out.println("\nP(gr) = 562.0/350144.0 = " + pgr );
            System.out.println("\nP(gs) = 421.0/350144.0 = " + pgs );
            System.out.println("\nP(gt) = 460.0/350144.0 = " + pgt );
            System.out.println("\nP(gu) = 256.0/350144.0 = " + pgu );
            System.out.println("\nP(gv) = 79.0/350144.0 = " + pgv );
            System.out.println("\nP(gy) = 152.0/350144.0 = " + pgy );
            System.out.println("\nP(g.) = 566.0/350144.0 = " + pgdot );
            System.out.println("\nP(g,) = 360.0/350144.0 = " + pgcomma );
            System.out.println("\nP(gvacuum) = 3014.0/350144.0 = " + pgvacuum );
            System.out.println("\nP(ha) = 3197.0/350144.0 = " + pha );
            System.out.println("\nP(hb) = 3.0/350144.0 = " + phb );
            System.out.println("\nP(hc) = 1.0/350144.0 = " + phc );
            System.out.println("\nP(hd) = 1.0/350144.0 = " + phd );
            System.out.println("\nP(he) = 1303.0/350144.0 = " + phe );
            System.out.println("\nP(hi) = 349.0/350144.0 = " + phi );
            System.out.println("\nP(hj) = 229.0/350144.0 = " + phj );
            System.out.println("\nP(hl) = 2.0/350144.0 = " + phl );
            System.out.println("\nP(hn) = 19.0/350144.0 = " + phn );
            System.out.println("\nP(ho) = 1188.0/350144.0 = " + pho );
            System.out.println("\nP(hr) = 19.0/350144.0 = " + phr );
            System.out.println("\nP(ht) = 19.0/350144.0 = " + pht );
            System.out.println("\nP(hu) = 1085.0/350144.0 = " + phu );
            System.out.println("\nP(hv) = 1193.0/350144.0 = " + phv );
            System.out.println("\nP(hy) = 70.0/350144.0 = " + phy );
            System.out.println("\nP(h.) = 8.0/350144.0 = " + phdot );
            System.out.println("\nP(h,) = 3.0/350144.0 = " + phcomma );
            System.out.println("\nP(hvacuum) = 19.0/350144.0 = " + phvacuum );
            System.out.println("\nP(ia) = 377.0/350144.0 = " + pia );
            System.out.println("\nP(ib) = 75.0/350144.0 = " + pib );
            System.out.println("\nP(ic) = 30.0/350144.0 = " + pic );
            System.out.println("\nP(id) = 922.0/350144.0 = " + pid );
            System.out.println("\nP(ie) = 525.0/350144.0 = " + pie );
            System.out.println("\nP(if) = 161.0/350144.0 = " + pif );
            System.out.println("\nP(ig) = 1392.0/350144.0 = " + pig );
            System.out.println("\nP(ih) = 49.0/350144.0 = " + pih );
            System.out.println("\nP(ii) = 3.0/350144.0 = " + pii );
            System.out.println("\nP(ik) = 2179.0/350144.0 = " + pik );
            System.out.println("\nP(il) = 2080.0/350144.0 = " + pil );
            System.out.println("\nP(im) = 365.0/350144.0 = " + pim );
            System.out.println("\nP(in) = 2275.0/350144.0 = " + pin );
            System.out.println("\nP(io) = 122.0/350144.0 = " + pio );
            System.out.println("\nP(ip) = 243.0/350144.0 = " + pip );
            System.out.println("\nP(iq) = 1.0/350144.0 = " + piq );
            System.out.println("\nP(ir) = 509.0/350144.0 = " + pir );
            System.out.println("\nP(is) = 1307.0/350144.0 = " + pis );
            System.out.println("\nP(it) = 1182.0/350144.0 = " + pit );
            System.out.println("\nP(iu) = 44.0/350144.0 = " + piu );
            System.out.println("\nP(iv) = 344.0/350144.0 = " + piv );
            System.out.println("\nP(iz) = 1.0/350144.0 = " + piz );
            System.out.println("\nP(i.) = 98.0/350144.0 = " + pidot );
            System.out.println("\nP(i,) = 147.0/350144.0 = " + picomma );
            System.out.println("\nP(ivacuum) = 2079.0/350144.0 = " + pivacuum );
            System.out.println("\nP(ja) = 407.0/350144.0 = " + pja );
            System.out.println("\nP(je) = 2164.0/350144.0 = " + pje );
            System.out.println("\nP(ji) = 17.0/350144.0 = " + pji );
            System.out.println("\nP(jo) = 1170.0/350144.0 = " + pjo );
            System.out.println("\nP(jr) = 1.0/350144.0 = " + pjr );
            System.out.println("\nP(ju) = 146.0/350144.0 = " + pju );
            System.out.println("\nP(jy) = 2.0/350144.0 = " + pjy );
            System.out.println("\nP(j.) = 5.0/350144.0 = " + pjdot );
            System.out.println("\nP(j,) = 1.0/350144.0 = " + pjcomma );
            System.out.println("\nP(jvacuum) = 12.0/350144.0 = " + pjvacuum );
            System.out.println("\nP(ka) = 1532.0/350144.0 = " + pka );
            System.out.println("\nP(kb) = 8.0/350144.0 = " + pkb );
            System.out.println("\nP(kd) = 61.0/350144.0 = " + pkd );
            System.out.println("\nP(ke) = 2713.0/350144.0 = " + pke );
            System.out.println("\nP(kf) = 8.0/350144.0 = " + pkf );
            System.out.println("\nP(kg) = 21.0/350144.0 = " + pkg );
            System.out.println("\nP(kh) = 36.0/350144.0 = " + pkh );
            System.out.println("\nP(ki) = 346.0/350144.0 = " + pki );
            System.out.println("\nP(kj) = 1027.0/350144.0 = " + pkj );
            System.out.println("\nP(kk) = 2418.0/350144.0 = " + pkk );
            System.out.println("\nP(kl) = 552.0/350144.0 = " + pkl );
            System.out.println("\nP(km) = 4.0/350144.0 = " + pkm );
            System.out.println("\nP(kn) = 313.0/350144.0 = " + pkn );
            System.out.println("\nP(ko) = 1112.0/350144.0 = " + pko );
            System.out.println("\nP(kp) = 2.0/350144.0 = " + pkp );
            System.out.println("\nP(kr) = 600.0/350144.0 = " + pkr );
            System.out.println("\nP(ks) = 449.0/350144.0 = " + pks );
            System.out.println("\nP(kt) = 1082.0/350144.0 = " + pkt );
            System.out.println("\nP(ku) = 841.0/350144.0 = " + pku );
            System.out.println("\nP(kv) = 334.0/350144.0 = " + pkv );
            System.out.println("\nP(ky) = 157.0/350144.0 = " + pky );
            System.out.println("\nP(k.) = 225.0/350144.0 = " + pkdot );
            System.out.println("\nP(k,) = 167.0/350144.0 = " + pkcomma );
            System.out.println("\nP(kvacuum) = 1354.0/350144.0 = " + pkvacuum );
            System.out.println("\nP(la) = 1382.0/350144.0 = " + pla );
            System.out.println("\nP(lb) = 212.0/350144.0 = " + plb );
            System.out.println("\nP(lc) = 3.0/350144.0 = " + plc );
            System.out.println("\nP(ld) = 796.0/350144.0 = " + pld );
            System.out.println("\nP(le) = 2466.0/350144.0 = " + ple );
            System.out.println("\nP(lf) = 117.0/350144.0 = " + plf );
            System.out.println("\nP(lg) = 249.0/350144.0 = " + plg );
            System.out.println("\nP(lh) = 51.0/350144.0 = " + plh );
            System.out.println("\nP(li) = 1901.0/350144.0 = " + pli );
            System.out.println("\nP(lj) = 60.0/350144.0 = " + plj );
            System.out.println("\nP(lk) = 217.0/350144.0 = " + plk );
            System.out.println("\nP(ll) = 1534.0/350144.0 = " + pll );
            System.out.println("\nP(lm) = 208.0/350144.0 = " + plm );
            System.out.println("\nP(ln) = 16.0/350144.0 = " + pln );
            System.out.println("\nP(lo) = 1001.0/350144.0 = " + plo );
            System.out.println("\nP(lp) = 67.0/350144.0 = " + plp );
            System.out.println("\nP(lr) = 36.0/350144.0 = " + plr );
            System.out.println("\nP(ls) = 560.0/350144.0 = " + pls );
            System.out.println("\nP(lt) = 982.0/350144.0 = " + plt );
            System.out.println("\nP(lu) = 470.0/350144.0 = " + plu );
            System.out.println("\nP(lv) = 571.0/350144.0 = " + plv );
            System.out.println("\nP(lw) = 4.0/350144.0 = " + plw );
            System.out.println("\nP(ly) = 484.0/350144.0 = " + ply );
            System.out.println("\nP(lz) = 1.0/350144.0 = " + plz );
            System.out.println("\nP(l.) = 269.0/350144.0 = " + pldot );
            System.out.println("\nP(l,) = 158.0/350144.0 = " + plcomma );
            System.out.println("\nP(lvacuum) = 1703.0/350144.0 = " + plvacuum );
            System.out.println("\nP(ma) = 1320.0/350144.0 = " + pma );
            System.out.println("\nP(mb) = 60.0/350144.0 = " + pmb );
            System.out.println("\nP(md) = 35.0/350144.0 = " + pmd );
            System.out.println("\nP(me) = 2444.0/350144.0 = " + pme );
            System.out.println("\nP(mf) = 48.0/350144.0 = " + pmf );
            System.out.println("\nP(mg) = 15.0/350144.0 = " + pmg );
            System.out.println("\nP(mh) = 15.0/350144.0 = " + pmh );
            System.out.println("\nP(mi) = 697.0/350144.0 = " + pmi );
            System.out.println("\nP(mk) = 8.0/350144.0 = " + pmk );
            System.out.println("\nP(ml) = 120.0/350144.0 = " + pml );
            System.out.println("\nP(mm) = 1143.0/350144.0 = " + pmm );
            System.out.println("\nP(mn) = 15.0/350144.0 = " + pmn );
            System.out.println("\nP(mo) = 879.0/350144.0 = " + pmo );
            System.out.println("\nP(mp) = 183.0/350144.0 = " + pmp );
            System.out.println("\nP(mr) = 62.0/350144.0 = " + pmr );
            System.out.println("\nP(ms) = 111.0/350144.0 = " + pms );
            System.out.println("\nP(mt) = 322.0/350144.0 = " + pmt );
            System.out.println("\nP(mu) = 317.0/350144.0 = " + pmu );
            System.out.println("\nP(mv) = 23.0/350144.0 = " + pmv );
            System.out.println("\nP(mw) = 2.0/350144.0 = " + pmw );
            System.out.println("\nP(my) = 134.0/350144.0 = " + pmy );
            System.out.println("\nP(m.) = 421.0/350144.0 = " + pmdot );
            System.out.println("\nP(m,) = 155.0/350144.0 = " + pmcomma );
            System.out.println("\nP(mvacuum) = 2081.0/350144.0 = " + pmvacuum );
            System.out.println("\nP(na) = 1186.0/350144.0 = " + pna );
            System.out.println("\nP(nb) = 61.0/350144.0 = " + pnb );
            System.out.println("\nP(nc) = 8.0/350144.0 = " + pnc );
            System.out.println("\nP(nd) = 1496.0/350144.0 = " + pnd );
            System.out.println("\nP(ne) = 2836.0/350144.0 = " + pne );
            System.out.println("\nP(nf) = 159.0/350144.0 = " + pnf );
            System.out.println("\nP(ng) = 1703.0/350144.0 = " + png );
            System.out.println("\nP(nh) = 82.0/350144.0 = " + pnh );
            System.out.println("\nP(ni) = 724.0/350144.0 = " + pni );
            System.out.println("\nP(nj) = 17.0/350144.0 = " + pnj );
            System.out.println("\nP(nk) = 669.0/350144.0 = " + pnk );
            System.out.println("\nP(nl) = 199.0/350144.0 = " + pnl );
            System.out.println("\nP(nm) = 26.0/350144.0 = " + pnm );
            System.out.println("\nP(nn) = 2138.0/350144.0 = " + pnn );
            System.out.println("\nP(no) = 1168.0/350144.0 = " + pno );
            System.out.println("\nP(np) = 14.0/350144.0 = " + pnp );
            System.out.println("\nP(nr) = 37.0/350144.0 = " + pnr );
            System.out.println("\nP(ns) = 1260.0/350144.0 = " + pns );
            System.out.println("\nP(nt) = 1529.0/350144.0 = " + pnt );
            System.out.println("\nP(nu) = 247.0/350144.0 = " + pnu );
            System.out.println("\nP(nv) = 66.0/350144.0 = " + pnv );
            System.out.println("\nP(nx) = 1.0/350144.0 = " + pnx );
            System.out.println("\nP(ny) = 199.0/350144.0 = " + pny );
            System.out.println("\nP(nz) = 2.0/350144.0 = " + pnz );
            System.out.println("\nP(n.) = 1555.0/350144.0 = " + pndot );
            System.out.println("\nP(n,) = 731.0/350144.0 = " + pnz );
            System.out.println("\nP(nvacuum) = 3574.0/350144.0 = " + pnvacuum );
            System.out.println("\nP(oa) = 26.0/350144.0 = " + poa );
            System.out.println("\nP(ob) = 271.0/350144.0 = " + pob );
            System.out.println("\nP(oc) = 25.0/350144.0 = " + poc );
            System.out.println("\nP(od) = 791.0/350144.0 = " + pod );
            System.out.println("\nP(oe) = 714.0/350144.0 = " + poe );
            System.out.println("\nP(of) = 302.0/350144.0 = " + pof );
            System.out.println("\nP(og) = 2222.0/350144.0 = " + pog );
            System.out.println("\nP(oh) = 55.0/350144.0 = " + poh );
            System.out.println("\nP(oi) = 14.0/350144.0 = " + poi );
            System.out.println("\nP(oj) = 7.0/350144.0 = " + poj );
            System.out.println("\nP(ok) = 821.0/350144.0 = " + pok );
            System.out.println("\nP(ol) = 1322.0/350144.0 = " + pol );
            System.out.println("\nP(om) = 2199.0/350144.0 = " + pom );
            System.out.println("\nP(on) = 1085.0/350144.0 = " + pon );
            System.out.println("\nP(oo) = 27.0/350144.0 = " + poo );
            System.out.println("\nP(op) = 1156.0/350144.0 = " + pop );
            System.out.println("\nP(or) = 2844.0/350144.0 = " + por );
            System.out.println("\nP(os) = 616.0/350144.0 = " + pos );
            System.out.println("\nP(ot) = 856.0/350144.0 = " + pot );
            System.out.println("\nP(ou) = 41.0/350144.0 = " + pou );
            System.out.println("\nP(ov) = 879.0/350144.0 = " + pov );
            System.out.println("\nP(ow) = 24.0/350144.0 = " + pow );
            System.out.println("\nP(ox) = 8.0/350144.0 = " + pox );
            System.out.println("\nP(oy) = 546.0/350144.0 = " + poy );
            System.out.println("\nP(o.) = 148.0/350144.0 = " + podot );
            System.out.println("\nP(o,) = 69.0/350144.0 = " + pocomma );
            System.out.println("\nP(ovacuum) = 828.0/350144.0 = " + povacuum );
            System.out.println("\nP(pa) = 2005.0/350144.0 = " + ppa );
            System.out.println("\nP(pb) = 10.0/350144.0 = " + ppb );
            System.out.println("\nP(pc) = 10.0/350144.0 = " + ppc );
            System.out.println("\nP(pd) = 53.0/350144.0 = " + ppd );
            System.out.println("\nP(pe) = 1137.0/350144.0 = " + ppe );
            System.out.println("\nP(pf) = 20.0/350144.0 = " + ppf );
            System.out.println("\nP(pg) = 15.0/350144.0 = " + ppg );
            System.out.println("\nP(ph) = 24.0/350144.0 = " + pph );
            System.out.println("\nP(pi) = 331.0/350144.0 = " + ppi );
            System.out.println("\nP(pj) = 1.0/350144.0 = " + ppj );
            System.out.println("\nP(pk) = 26.0/350144.0 = " + ppk );
            System.out.println("\nP(pl) = 369.0/350144.0 = " + ppl );
            System.out.println("\nP(pm) = 25.0/350144.0 = " + ppm );
            System.out.println("\nP(pn) = 135.0/350144.0 = " + ppn );
            System.out.println("\nP(po) = 574.0/350144.0 = " + ppo );
            System.out.println("\nP(pp) = 1126.0/350144.0 = " + ppp );
            System.out.println("\nP(pr) = 540.0/350144.0 = " + ppr );
            System.out.println("\nP(ps) = 270.0/350144.0 = " + pps );
            System.out.println("\nP(pt) = 201.0/350144.0 = " + ppt );
            System.out.println("\nP(pu) = 391.0/350144.0 = " + ppu );
            System.out.println("\nP(pv) = 15.0/350144.0 = " + ppv );
            System.out.println("\nP(py) = 22.0/350144.0 = " + ppy );
            System.out.println("\nP(p.) = 165.0/350144.0 = " + ppdot );
            System.out.println("\nP(p,) = 80.0/350144.0 = " + ppcomma );
            System.out.println("\nP(pvacuum) = 679.0/350144.0 = " + ppvacuum );
            System.out.println("\nP(qu) = 4.0/350144.0 = " + pqu );
            System.out.println("\nP(qvacuum) = 6.0/350144.0 = " + pqvacuum );
            System.out.println("\nP(ra) = 1804.0/350144.0 = " + pra );
            System.out.println("\nP(rb) = 178.0/350144.0 = " + prb );
            System.out.println("\nP(rc) = 5.0/350144.0 = " + prc );
            System.out.println("\nP(rd) = 850.0/350144.0 = " + prd );
            System.out.println("\nP(re) = 2744.0/350144.0 = " + pre );
            System.out.println("\nP(rf) = 349.0/350144.0 = " + prf );
            System.out.println("\nP(rg) = 305.0/350144.0 = " + prg );
            System.out.println("\nP(rh) = 115.0/350144.0 = " + prh );
            System.out.println("\nP(ri) = 1377.0/350144.0 = " + pri );
            System.out.println("\nP(rj) = 3.0/350144.0 = " + prj );
            System.out.println("\nP(rk) = 595.0/350144.0 = " + prk );
            System.out.println("\nP(rl) = 284.0/350144.0 = " + prl );
            System.out.println("\nP(rm) = 360.0/350144.0 = " + prm );
            System.out.println("\nP(rn) = 500.0/350144.0 = " + prn );
            System.out.println("\nP(ro) = 1261.0/350144.0 = " + pro );
            System.out.println("\nP(rp) = 61.0/350144.0 = " + prp );
            System.out.println("\nP(rr) = 1818.0/350144.0 = " + prr );
            System.out.println("\nP(rs) = 1006.0/350144.0 = " + prs );
            System.out.println("\nP(rt) = 1738.0/350144.0 = " + prt );
            System.out.println("\nP(ru) = 664.0/350144.0 = " + pru );
            System.out.println("\nP(rv) = 246.0/350144.0 = " + prv );
            System.out.println("\nP(rw) = 2.0/350144.0 = " + prw );
            System.out.println("\nP(ry) = 1682.0/350144.0 = " + pry );
            System.out.println("\nP(r.) = 818.0/350144.0 = " + prdot );
            System.out.println("\nP(r,) = 520.0/350144.0 = " + prcomma );
            System.out.println("\nP(rvacuum) = 3533.0/350144.0 = " + prvacuum );
            System.out.println("\nP(sa) = 2529.0/350144.0 = " + psa );
            System.out.println("\nP(sb) = 74.0/350144.0 = " + psb );
            System.out.println("\nP(sc) = 43.0/350144.0 = " + psc );
            System.out.println("\nP(sd) = 53.0/350144.0 = " + psd );
            System.out.println("\nP(se) = 2235.0/350144.0 = " + pse );
            System.out.println("\nP(sf) = 76.0/350144.0 = " + psf );
            System.out.println("\nP(sg) = 51.0/350144.0 = " + psg );
            System.out.println("\nP(sh) = 111.0/350144.0 = " + psh );
            System.out.println("\nP(si) = 1303.0/350144.0 = " + psi );
            System.out.println("\nP(sj) = 577.0/350144.0 = " + psj );
            System.out.println("\nP(sk) = 1958.0/350144.0 = " + psk );
            System.out.println("\nP(sl) = 690.0/350144.0 = " + psl );
            System.out.println("\nP(sm) = 464.0/350144.0 = " + psm );
            System.out.println("\nP(sn) = 603.0/350144.0 = " + psn );
            System.out.println("\nP(so) = 1588.0/350144.0 = " + pso );
            System.out.println("\nP(sp) = 851.0/350144.0 = " + psp );
            System.out.println("\nP(sr) = 46.0/350144.0 = " + psr );
            System.out.println("\nP(ss) = 945.0/350144.0 = " + pss );
            System.out.println("\nP(st) = 2379.0/350144.0 = " + pst );
            System.out.println("\nP(su) = 190.0/350144.0 = " + psu );
            System.out.println("\nP(sv) = 614.0/350144.0 = " + psv );
            System.out.println("\nP(sw) = 3.0/350144.0 = " + psw );
            System.out.println("\nP(sy) = 373.0/350144.0 = " + psy );
            System.out.println("\nP(s.) = 408.0/350144.0 = " + psdot );
            System.out.println("\nP(s,) = 167.0/350144.0 = " + pscomma );
            System.out.println("\nP(svacuum) = 1589.0/350144.0 = " + psvacuum );
            System.out.println("\nP(ta) = 1288.0/350144.0 = " + pta );
            System.out.println("\nP(tb) = 64.0/350144.0 = " + ptb );
            System.out.println("\nP(tc) = 15.0/350144.0 = " + ptc );
            System.out.println("\nP(td) = 14.0/350144.0 = " + ptd );
            System.out.println("\nP(te) = 3326.0/350144.0 = " + pte );
            System.out.println("\nP(tf) = 50.0/350144.0 = " + ptf );
            System.out.println("\nP(tg) = 42.0/350144.0 = " + ptg );
            System.out.println("\nP(th) = 258.0/350144.0 = " + pth );
            System.out.println("\nP(ti) = 1998.0/350144.0 = " + pti );
            System.out.println("\nP(tj) = 191.0/350144.0 = " + ptj );
            System.out.println("\nP(tk) = 58.0/350144.0 = " + ptk );
            System.out.println("\nP(tl) = 256.0/350144.0 = " + ptl );
            System.out.println("\nP(tm) = 41.0/350144.0 = " + ptm );
            System.out.println("\nP(tn) = 124.0/350144.0 = " + ptn );
            System.out.println("\nP(to) = 1360.0/350144.0 = " + pto );
            System.out.println("\nP(tp) = 26.0/350144.0 = " + ptp );
            System.out.println("\nP(tr) = 1433.0/350144.0 = " + ptr );
            System.out.println("\nP(ts) = 570.0/350144.0 = " + pts );
            System.out.println("\nP(tt) = 2131.0/350144.0 = " + ptt );
            System.out.println("\nP(tu) = 379.0/350144.0 = " + ptu );
            System.out.println("\nP(tv) = 208.0/350144.0 = " + ptv );
            System.out.println("\nP(tw) = 3.0/350144.0 = " + ptw );
            System.out.println("\nP(ty) = 261.0/350144.0 = " + pty );
            System.out.println("\nP(tz) = 1.0/350144.0 = " + ptz );
            System.out.println("\nP(t.) = 1498.0/350144.0 = " + ptdot );
            System.out.println("\nP(t,) = 787.0/350144.0 = " + ptcomma );
            System.out.println("\nP(tvacuum) = 3693.0/350144.0 = " + ptvacuum );
            System.out.println("\nP(ua) = 102.0/350144.0 = " + pua );
            System.out.println("\nP(ub) = 77.0/350144.0 = " + pub );
            System.out.println("\nP(uc) = 5.0/350144.0 = " + puc );
            System.out.println("\nP(ud) = 285.0/350144.0 = " + pud );
            System.out.println("\nP(ue) = 218.0/350144.0 = " + pue );
            System.out.println("\nP(uf) = 121.0/350144.0 = " + puf );
            System.out.println("\nP(ug) = 109.0/350144.0 = " + pug );
            System.out.println("\nP(uh) = 13.0/350144.0 = " + puh );
            System.out.println("\nP(ui) = 15.0/350144.0 = " + pui );
            System.out.println("\nP(uj) = 2.0/350144.0 = " + puj );
            System.out.println("\nP(uk) = 451.0/350144.0 = " + puk );
            System.out.println("\nP(ul) = 781.0/350144.0 = " + pul );
            System.out.println("\nP(um) = 284.0/350144.0 = " + pum );
            System.out.println("\nP(un) = 1657.0/350144.0 = " + pun );
            System.out.println("\nP(uo) = 8.0/350144.0 = " + puo );
            System.out.println("\nP(up) = 108.0/350144.0 = " + pup );
            System.out.println("\nP(ur) = 678.0/350144.0 = " + pur );
            System.out.println("\nP(us) = 672.0/350144.0 = " + pus );
            System.out.println("\nP(ut) = 1123.0/350144.0 = " + put );
            System.out.println("\nP(uu) = 9.0/350144.0 = " + puu );
            System.out.println("\nP(uv) = 20.0/350144.0 = " + puv );
            System.out.println("\nP(uz) = 1.0/350144.0 = " + puz );
            System.out.println("\nP(u.) = 18.0/350144.0 = " + pudot );
            System.out.println("\nP(u,) = 19.0/350144.0 = " + pucomma );
            System.out.println("\nP(uvacuum) = 907.0/350144.0 = " + puvacuum );
            System.out.println("\nP(va) = 2033.0/350144.0 = " + pva );
            System.out.println("\nP(vb) = 33.0/350144.0 = " + pvb );
            System.out.println("\nP(vd) = 153.0/350144.0 = " + pvd );
            System.out.println("\nP(ve) = 2059.0/350144.0 = " + pve );
            System.out.println("\nP(vf) = 69.0/350144.0 = " + pvf );
            System.out.println("\nP(vg) = 21.0/350144.0 = " + pvg );
            System.out.println("\nP(vh) = 23.0/350144.0 = " + pvh );
            System.out.println("\nP(vi) = 1727.0/350144.0 = " + pvi );
            System.out.println("\nP(vj) = 5.0/350144.0 = " + pvj );
            System.out.println("\nP(vk) = 12.0/350144.0 = " + pvk );
            System.out.println("\nP(vl) = 107.0/350144.0 = " + pvl );
            System.out.println("\nP(vm) = 9.0/350144.0 = " + pvm );
            System.out.println("\nP(vn) = 198.0/350144.0 = " + pvn );
            System.out.println("\nP(vo) = 623.0/350144.0 = " + pvo );
            System.out.println("\nP(vp) = 5.0/350144.0 = " + pvp );
            System.out.println("\nP(vr) = 56.0/350144.0 = " + pvr );
            System.out.println("\nP(vs) = 108.0/350144.0 = " + pvs );
            System.out.println("\nP(vt) = 137.0/350144.0 = " + pvt );
            System.out.println("\nP(vu) = 51.0/350144.0 = " + pvu );
            System.out.println("\nP(vv) = 23.0/350144.0 = " + pvv );
            System.out.println("\nP(v.) = 102.0/350144.0 = " + pvdot );
            System.out.println("\nP(v,) = 44.0/350144.0 = " + pvcomma );
            System.out.println("\nP(vvacuum) = 1071.0/350144.0 = " + pvvacuum );
            System.out.println("\nP(wa) = 12.0/350144.0 = " + pwa );
            System.out.println("\nP(wb) = 1.0/350144.0 = " + pwb );
            System.out.println("\nP(wd) = 1.0/350144.0 = " + pwd );
            System.out.println("\nP(we) = 16.0/350144.0 = " + pwe );
            System.out.println("\nP(wh) = 9.0/350144.0 = " + pwh );
            System.out.println("\nP(wi) = 18.0/350144.0 = " + pwi );
            System.out.println("\nP(wl) = 2.0/350144.0 = " + pwl );
            System.out.println("\nP(wn) = 4.0/350144.0 = " + pwn );
            System.out.println("\nP(wo) = 11.0/350144.0 = " + pwo );
            System.out.println("\nP(ww) = 1.0/350144.0 = " + pww );
            System.out.println("\nP(w.) = 5.0/350144.0 = " + pwdot );
            System.out.println("\nP(wvacuum) = 4.0/350144.0 = " + pwvacuum );
            System.out.println("\nP(xa) = 1.0/350144.0 = " + pxa );
            System.out.println("\nP(xe) = 2.0/350144.0 = " + pxe );
            System.out.println("\nP(xi) = 14.0/350144.0 = " + pxi );
            System.out.println("\nP(xl) = 16.0/350144.0 = " + pxl );
            System.out.println("\nP(xy) = 2.0/350144.0 = " + pxy );
            System.out.println("\nP(x.) = 2.0/350144.0 = " + pxdot );
            System.out.println("\nP(x,) = 1.0/350144.0 = " + pxcomma );
            System.out.println("\nP(xvacuum) = 12.0/350144.0 = " + pxvacuum );
            System.out.println("\nP(ya) = 31.0/350144.0 = " + pya );
            System.out.println("\nP(yb) = 10.0/350144.0 = " + pyb );
            System.out.println("\nP(yc) = 1.0/350144.0 = " + pyc );
            System.out.println("\nP(yd) = 264.0/350144.0 = " + pyd );
            System.out.println("\nP(ye) = 326.0/350144.0 = " + pye );
            System.out.println("\nP(yf) = 9.0/350144.0 = " + pyf );
            System.out.println("\nP(yg) = 206.0/350144.0 = " + pyg );
            System.out.println("\nP(yh) = 25.0/350144.0 = " + pyh );
            System.out.println("\nP(yj) = 2.0/350144.0 = " + pyj );
            System.out.println("\nP(yk) = 418.0/350144.0 = " + pyk );
            System.out.println("\nP(yl) = 215.0/350144.0 = " + pyl );
            System.out.println("\nP(ym) = 47.0/350144.0 = " + pym );
            System.out.println("\nP(yn) = 515.0/350144.0 = " + pyn );
            System.out.println("\nP(yo) = 13.0/350144.0 = " + pyo );
            System.out.println("\nP(yp) = 93.0/350144.0 = " + pyp );
            System.out.println("\nP(yr) = 205.0/350144.0 = " + pyr );
            System.out.println("\nP(ys) = 414.0/350144.0 = " + pys );
            System.out.println("\nP(yt) = 352.0/350144.0 = " + pyt );
            System.out.println("\nP(yu) = 1.0/350144.0 = " + pyu );
            System.out.println("\nP(yv) = 27.0/350144.0 = " + pyv );
            System.out.println("\nP(y.) = 391.0/350144.0 = " + pydot );
            System.out.println("\nP(y,) = 74.0/350144.0 = " + pycomma );
            System.out.println("\nP(yvacuum) = 1106.0/350144.0 = " + pyvacuum );
            System.out.println("\nP(za) = 7.0/350144.0 = " + pza );
            System.out.println("\nP(ze) = 8.0/350144.0 = " + pze );
            System.out.println("\nP(zh) = 2.0/350144.0 = " + pzh );
            System.out.println("\nP(zi) = 3.0/350144.0 = " + pzi );
            System.out.println("\nP(zo) = 8.0/350144.0 = " + pzo );
            System.out.println("\nP(zy) = 1.0/350144.0 = " + pzy );
            System.out.println("\nP(zz) = 3.0/350144.0 = " + pzz );
            System.out.println("\nP(zvacuum) = 2.0/350144.0 = " + pzvacuum );
            System.out.println("\nP(.a) = 1.0/350144.0 = " + pdota );
            System.out.println("\nP(.j) = 1.0/350144.0 = " + pdotj );
            System.out.println("\nP(.n) = 1.0/350144.0 = " + pdotn );
            System.out.println("\nP(.,) = 1.0/350144.0 = " + pdotcomma );
            System.out.println("\nP(.vacuum) = 2.0/350144.0 = " + pdotvacuum );
            System.out.println("\nP(,vacuum) = 2867.0/350144.0 = " + pcommavacuum );
            System.out.println("\nP(vacuuma) = 2740.0/350144.0 = " + pvacuuma );
            System.out.println("\nP(vacuumb) = 2318.0/350144.0 = " + pvacuumb );
            System.out.println("\nP(vacuumc) = 133.0/350144.0 = " + pvacuumc );
            System.out.println("\nP(vacuumd) = 3440.0/350144.0 = " + pvacuumd );
            System.out.println("\nP(vacuume) = 2631.0/350144.0 = " + pvacuume );
            System.out.println("\nP(vacuumf) = 2566.0/350144.0 = " + pvacuumf );
            System.out.println("\nP(vacuumg) = 1809.0/350144.0 = " + pvacuumg );
            System.out.println("\nP(vacuumh) = 3869.0/350144.0 = " + pvacuumh );
            System.out.println("\nP(vacuumi) = 2640.0/350144.0 = " + pvacuumi );
            System.out.println("\nP(vacuumj) = 1423.0/350144.0 = " + pvacuumj );
            System.out.println("\nP(vacuumk) = 2268.0/350144.0 = " + pvacuumk );
            System.out.println("\nP(vacuuml) = 1916.0/350144.0 = " + pvacuuml );
            System.out.println("\nP(vacuumm) = 2648.0/350144.0 = " + pvacuumm );
            System.out.println("\nP(vacuumn) = 1840.0/350144.0 = " + pvacuumn );
            System.out.println("\nP(vacuumo) = 2788.0/350144.0 = " + pvacuumo );
            System.out.println("\nP(vacuump) = 2334.0/350144.0 = " + pvacuump );
            System.out.println("\nP(vacuumq) = 9.0/350144.0 = " + pvacuumq );
            System.out.println("\nP(vacuumr) = 1507.0/350144.0 = " + pvacuumr );
            System.out.println("\nP(vacuums) = 4014.0/350144.0 = " + pvacuums );
            System.out.println("\nP(vacuumt) = 2465.0/350144.0 = " + pvacuumt );
            System.out.println("\nP(vacuumu) = 1190.0/350144.0 = " + pvacuumu );
            System.out.println("\nP(vacuumv) = 2493.0/350144.0 = " + pvacuumv );
            System.out.println("\nP(vacuumw) = 41.0/350144.0 = " + pvacuumw );
            System.out.println("\nP(vacuumx) = 1.0/350144.0 = " + pvacuumx );
            System.out.println("\nP(vacuumy) = 52.0/350144.0 = " + pvacuumy );
            System.out.println("\nP(vacuumz) = 7.0/350144.0 = " + pvacuumz );
            System.out.println("\nP(vacuum.) = 88.0/350144.0 = " + pvacuumdot );
            System.out.println("\nP(vacuum,) = 51.0/350144.0 = " + pvacuumcomma );
            System.out.println("\nP(vacuumvacuum) = 2982.0/350144.0 = " + pvacuumvacuum );
            System.out.println("\nThe sum of the probability is = " + sumprobability ); 
            System.out.println("\nThe number of pair characters that are not included is cause the probability of them is 0.");
                  
            }

            private static void calculatethejointentropy() 
    
            {
            
            double paa = 19.0/350144.0;
            double pab = 137.0/350144.0;
            double pac = 26.0/350144.0;
            double pad = 1088.0/350144.0;
            double pae = 805.0/350144.0;
            double paf = 285.0/350144.0;
            double pag = 830.0/350144.0;
            double pah = 27.0/350144.0;
            double pai = 55.0/350144.0;
            double paj = 9.0/350144.0;
            double pak = 1403.0/350144.0;
            double pal = 1574.0/350144.0;
            double pam = 1042.0/350144.0;
            double pan = 2880.0/350144.0;
            double pao = 6.0/350144.0;
            double pap = 746.0/350144.0;
            double par = 3292.0/350144.0;
            double pas = 1156.0/350144.0;
            double pat = 2142.0/350144.0;
            double pau = 205.0/350144.0;
            double pav = 1207.0/350144.0;
            double paw = 1.0/350144.0;
            double pax = 6.0/350144.0;
            double pay = 14.0/350144.0;
            double paz = 18.0/350144.0;
            double padot = 577.0/350144.0;
            double pacomma = 376.0/350144.0;
            double pavacuum = 3677.0/350144.0;   
            double pba = 1302.0/350144.0;
            double pbb = 175.0/350144.0;
            double pbd = 5.0/350144.0;
            double pbe = 1158.0/350144.0;
            double pbh = 2.0/350144.0;
            double pbi = 454.0/350144.0;
            double pbj = 77.0/350144.0;
            double pbl = 863.0/350144.0;
            double pbm = 2.0/350144.0;
            double pbn = 5.0/350144.0;
            double pbo = 570.0/350144.0;
            double pbr = 616.0/350144.0;
            double pbs = 24.0/350144.0;
            double pbu = 216.0/350144.0;
            double pby = 136.0/350144.0;
            double pbdot = 9.0/350144.0;
            double pbcomma = 7.0/350144.0;
            double pbvacuum = 29.0/350144.0;
            double pca = 59.0/350144.0;
            double pcc = 3.0/350144.0;
            double pcd = 7.0/350144.0;
            double pce = 43.0/350144.0;
            double pch = 64.0/350144.0;
            double pci = 13.0/350144.0;
            double pck = 139.0/350144.0;
            double pcl = 10.0/350144.0;
            double pco = 50.0/350144.0;
            double pcr = 5.0/350144.0;
            double pcs = 3.0/350144.0;
            double pct = 15.0/350144.0;
            double pcu = 26.0/350144.0;
            double pcv = 1.0/350144.0;
            double pccomma = 2.0/350144.0;
            double pcvacuum = 11.0/350144.0;
            double pda = 1057.0/350144.0;
            double pdb = 28.0/350144.0;
            double pdc = 4.0/350144.0;
            double pdd = 1141.0/350144.0;
            double pde = 3466.0/350144.0;
            double pdf = 28.0/350144.0;
            double pdg = 19.0/350144.0;
            double pdh = 15.0/350144.0;
            double pdi = 685.0/350144.0;
            double pdj = 55.0/350144.0;
            double pdk = 31.0/350144.0;
            double pdl = 133.0/350144.0;
            double pdm = 19.0/350144.0;
            double pdn = 66.0/350144.0;
            double pdo = 545.0/350144.0;
            double pdp = 21.0/350144.0;
            double pdr = 888.0/350144.0;
            double pds = 248.0/350144.0;
            double pdt = 568.0/350144.0;
            double pdu = 1065.0/350144.0;
            double pdv = 77.0/350144.0;
            double pdw = 2.0/350144.0;
            double pdy = 119.0/350144.0;
            double pddot = 283.0/350144.0;
            double pdcomma = 162.0/350144.0;
            double pdvacuum = 1622.0/350144.0;
            double pea = 120.0/350144.0;
            double peb = 270.0/350144.0;
            double pec = 130.0/350144.0;
            double ped = 1650.0/350144.0;
            double pee = 84.0/350144.0;
            double pef = 412.0/350144.0;
            double peg = 2233.0/350144.0;
            double peh = 134.0/350144.0;
            double pei = 880.0/350144.0;
            double pej = 13.0/350144.0;
            double pek = 838.0/350144.0;
            double pel = 2065.0/350144.0;
            double pem = 964.0/350144.0;
            double pen = 3823.0/350144.0;
            double peo = 51.0/350144.0;
            double pep = 339.0/350144.0;
            double per = 3473.0/350144.0;
            double pes = 1625.0/350144.0;
            double pet = 3570.0/350144.0;
            double peu = 15.0/350144.0;
            double pev = 535.0/350144.0;
            double pex = 18.0/350144.0;
            double pey = 4.0/350144.0;
            double pedot = 1451.0/350144.0;
            double pecomma = 897.0/350144.0;
            double pevacuum = 3863.0/350144.0;
            double pfa = 867.0/350144.0;
            double pfb = 5.0/350144.0;
            double pfe = 565.0/350144.0;
            double pff = 225.0/350144.0;
            double pfi = 574.0/350144.0;
            double pfj = 83.0/350144.0;
            double pfl = 289.0/350144.0;
            double pfm = 1.0/350144.0;
            double pfn = 6.0/350144.0;
            double pfo = 2022.0/350144.0;
            double pfr = 848.0/350144.0;
            double pfs = 17.0/350144.0;
            double pft = 414.0/350144.0;
            double pfu = 191.0/350144.0;
            double pfy = 101.0/350144.0;
            double pfdot = 30.0/350144.0;
            double pfcomma = 7.0/350144.0;
            double pfvacuum = 105.0/350144.0;
            double pga = 933.0/350144.0;
            double pgb = 27.0/350144.0;
            double pgd = 82.0/350144.0;
            double pge = 1904.0/350144.0;
            double pgf = 15.0/350144.0;
            double pgg = 424.0/350144.0;
            double pgh = 197.0/350144.0;
            double pgi = 489.0/350144.0;
            double pgj = 812.0/350144.0;
            double pgk = 13.0/350144.0;
            double pgl = 330.0/350144.0;
            double pgm = 11.0/350144.0;
            double pgn = 282.0/350144.0;
            double pgo = 156.0/350144.0;
            double pgp = 6.0/350144.0;
            double pgr = 562.0/350144.0;
            double pgs = 421.0/350144.0;
            double pgt = 460.0/350144.0;
            double pgu = 256.0/350144.0;
            double pgv = 79.0/350144.0;
            double pgy = 152.0/350144.0;
            double pgdot = 566.0/350144.0;
            double pgcomma = 360.0/350144.0;
            double pgvacuum = 3014.0/350144.0; 
            double pha = 3197.0/350144.0;
            double phb = 3.0/350144.0;
            double phc = 1.0/350144.0;
            double phd = 1.0/350144.0;
            double phe = 1303.0/350144.0;
            double phi = 349.0/350144.0;
            double phj = 229.0/350144.0;
            double phl = 2.0/350144.0;
            double phn = 19.0/350144.0;
            double pho = 1188.0/350144.0;
            double phr = 19.0/350144.0;
            double pht = 19.0/350144.0;
            double phu = 1085.0/350144.0;
            double phv = 1193.0/350144.0;
            double phy = 70.0/350144.0;
            double phdot = 8.0/350144.0;
            double phcomma = 3.0/350144.0;
            double phvacuum = 19.0/350144.0;
            double pia = 377.0/350144.0;
            double pib = 75.0/350144.0;
            double pic = 30.0/350144.0;
            double pid = 922.0/350144.0;
            double pie = 525.0/350144.0;
            double pif = 161.0/350144.0;
            double pig = 1392.0/350144.0;
            double pih = 49.0/350144.0;
            double pii = 3.0/350144.0;
            double pik = 2179.0/350144.0;
            double pil = 2080.0/350144.0;
            double pim = 365.0/350144.0;
            double pin = 2275.0/350144.0;
            double pio = 122.0/350144.0;
            double pip = 243.0/350144.0;
            double piq = 1.0/350144.0;
            double pir = 509.0/350144.0;
            double pis = 1307.0/350144.0;
            double pit = 1182.0/350144.0;
            double piu = 44.0/350144.0;
            double piv = 344.0/350144.0;
            double piz = 1.0/350144.0;
            double pidot = 98.0/350144.0;
            double picomma = 147.0/350144.0;
            double pivacuum = 2079.0/350144.0;   
            double pja = 407.0/350144.0;
            double pje = 2164.0/350144.0;
            double pji = 17.0/350144.0;
            double pjo = 1170.0/350144.0;
            double pjr = 1.0/350144.0;
            double pju = 146.0/350144.0;
            double pjy = 2.0/350144.0;
            double pjdot = 5.0/350144.0;
            double pjcomma = 1.0/350144.0;
            double pjvacuum = 12.0/350144.0;
            double pka = 1532.0/350144.0;
            double pkb = 8.0/350144.0;
            double pkd = 61.0/350144.0;
            double pke = 2713.0/350144.0;
            double pkf = 8.0/350144.0;
            double pkg = 21.0/350144.0;
            double pkh = 36.0/350144.0;
            double pki = 346.0/350144.0;
            double pkj = 1027.0/350144.0;
            double pkk = 2418.0/350144.0;
            double pkl = 552.0/350144.0;
            double pkm = 4.0/350144.0;
            double pkn = 313.0/350144.0;
            double pko = 1112.0/350144.0;
            double pkp = 2.0/350144.0;
            double pkr = 600.0/350144.0;
            double pks = 449.0/350144.0;
            double pkt = 1082.0/350144.0;
            double pku = 841.0/350144.0;
            double pkv = 334.0/350144.0;
            double pky = 157.0/350144.0;
            double pkdot = 225.0/350144.0;
            double pkcomma = 167.0/350144.0;
            double pkvacuum = 1354.0/350144.0;   
            double pla = 1382.0/350144.0;
            double plb = 212.0/350144.0;
            double plc = 3.0/350144.0;
            double pld = 796.0/350144.0;
            double ple = 2466.0/350144.0;
            double plf = 117.0/350144.0;
            double plg = 249.0/350144.0;
            double plh = 51.0/350144.0;
            double pli = 1901.0/350144.0;
            double plj = 60.0/350144.0;
            double plk = 217.0/350144.0;
            double pll = 1534.0/350144.0;
            double plm = 208.0/350144.0;
            double pln = 16.0/350144.0;
            double plo = 1001.0/350144.0;
            double plp = 67.0/350144.0;
            double plr = 36.0/350144.0;
            double pls = 560.0/350144.0;
            double plt = 982.0/350144.0;
            double plu = 470.0/350144.0;
            double plv = 571.0/350144.0;
            double plw = 4.0/350144.0;
            double ply = 484.0/350144.0;
            double plz = 1.0/350144.0;
            double pldot = 269.0/350144.0;
            double plcomma = 158.0/350144.0;
            double plvacuum = 1703.0/350144.0;  
            double pma = 1320.0/350144.0;
            double pmb = 60.0/350144.0;
            double pmd = 35.0/350144.0;
            double pme = 2444.0/350144.0;
            double pmf = 48.0/350144.0;
            double pmg = 15.0/350144.0;
            double pmh = 15.0/350144.0;
            double pmi = 697.0/350144.0;
            double pmk = 8.0/350144.0;
            double pml = 120.0/350144.0;
            double pmm = 1143.0/350144.0;
            double pmn = 15.0/350144.0;
            double pmo = 879.0/350144.0;
            double pmp = 183.0/350144.0;
            double pmr = 62.0/350144.0;
            double pms = 111.0/350144.0;
            double pmt = 322.0/350144.0;
            double pmu = 317.0/350144.0;
            double pmv = 23.0/350144.0;
            double pmw = 2.0/350144.0;
            double pmy = 134.0/350144.0;
            double pmdot = 421.0/350144.0;
            double pmcomma = 155.0/350144.0;
            double pmvacuum = 2081.0/350144.0;   
            double pna = 1186.0/350144.0;
            double pnb = 61.0/350144.0;
            double pnc = 8.0/350144.0;
            double pnd = 1496.0/350144.0;
            double pne = 2836.0/350144.0;
            double pnf = 159.0/350144.0;
            double png = 1703.0/350144.0;
            double pnh = 82.0/350144.0;
            double pni = 724.0/350144.0;
            double pnj = 17.0/350144.0;
            double pnk = 669.0/350144.0;
            double pnl = 199.0/350144.0;
            double pnm = 26.0/350144.0;
            double pnn = 2138.0/350144.0;
            double pno = 1168.0/350144.0;
            double pnp = 14.0/350144.0;
            double pnr = 37.0/350144.0;
            double pns = 1260.0/350144.0;
            double pnt = 1529.0/350144.0;
            double pnu = 247.0/350144.0;
            double pnv = 66.0/350144.0;
            double pnx = 1.0/350144.0;
            double pny = 199.0/350144.0;
            double pnz = 2.0/350144.0;
            double pndot = 1555.0/350144.0;
            double pncomma = 731.0/350144.0;
            double pnvacuum = 3574.0/350144.0;   
            double poa = 26.0/350144.0;
            double pob = 271.0/350144.0;
            double poc = 25.0/350144.0;
            double pod = 791.0/350144.0;
            double poe = 714.0/350144.0;
            double pof = 302.0/350144.0;
            double pog = 2222.0/350144.0;
            double poh = 55.0/350144.0;
            double poi = 14.0/350144.0;
            double poj = 7.0/350144.0;
            double pok = 821.0/350144.0;
            double pol = 1322.0/350144.0;
            double pom = 2199.0/350144.0;
            double pon = 1085.0/350144.0;
            double poo = 27.0/350144.0;
            double pop = 1156.0/350144.0;
            double por = 2844.0/350144.0;
            double pos = 616.0/350144.0;
            double pot = 856.0/350144.0;
            double pou = 41.0/350144.0;
            double pov = 879.0/350144.0;
            double pow = 24.0/350144.0;
            double pox = 8.0/350144.0;
            double poy = 546.0/350144.0;
            double podot = 148.0/350144.0;
            double pocomma = 69.0/350144.0;
            double povacuum = 828.0/350144.0;
            double ppa = 2005.0/350144.0;
            double ppb = 10.0/350144.0;
            double ppc = 10.0/350144.0;
            double ppd = 53.0/350144.0;
            double ppe = 1137.0/350144.0;
            double ppf = 20.0/350144.0;
            double ppg = 15.0/350144.0;
            double pph = 24.0/350144.0;
            double ppi = 331.0/350144.0;
            double ppj = 1.0/350144.0;
            double ppk = 26.0/350144.0;
            double ppl = 369.0/350144.0;
            double ppm = 25.0/350144.0;
            double ppn = 135.0/350144.0;
            double ppo = 574.0/350144.0;
            double ppp = 1126.0/350144.0;
            double ppr = 540.0/350144.0;
            double pps = 270.0/350144.0;
            double ppt = 201.0/350144.0;
            double ppu = 391.0/350144.0;
            double ppv = 15.0/350144.0;
            double ppy = 22.0/350144.0;
            double ppdot = 165.0/350144.0;
            double ppcomma = 80.0/350144.0;
            double ppvacuum = 679.0/350144.0;
            double pqu = 4.0/350144.0;
            double pqvacuum = 6.0/350144.0;
            double pra = 1804.0/350144.0;
            double prb = 178.0/350144.0;
            double prc = 5.0/350144.0;
            double prd = 850.0/350144.0;
            double pre = 2744.0/350144.0;
            double prf = 349.0/350144.0;
            double prg = 305.0/350144.0;
            double prh = 115.0/350144.0;
            double pri = 1377.0/350144.0;
            double prj = 3.0/350144.0;
            double prk = 595.0/350144.0;
            double prl = 284.0/350144.0;
            double prm = 360.0/350144.0;
            double prn = 500.0/350144.0;
            double pro = 1261.0/350144.0;
            double prp = 61.0/350144.0;
            double prr = 1818.0/350144.0;
            double prs = 1006.0/350144.0;
            double prt = 1738.0/350144.0;
            double pru = 664.0/350144.0;
            double prv = 246.0/350144.0;
            double prw = 2.0/350144.0;
            double pry = 1682.0/350144.0;
            double prdot = 818.0/350144.0;
            double prcomma = 520.0/350144.0;
            double prvacuum = 3533.0/350144.0;
            double psa = 2529.0/350144.0;
            double psb = 74.0/350144.0;
            double psc = 43.0/350144.0;
            double psd = 53.0/350144.0;
            double pse = 2235.0/350144.0;
            double psf = 76.0/350144.0;
            double psg = 51.0/350144.0;
            double psh = 111.0/350144.0;
            double psi = 1303.0/350144.0;
            double psj = 577.0/350144.0;
            double psk = 1958.0/350144.0;
            double psl = 690.0/350144.0;
            double psm = 464.0/350144.0;
            double psn = 603.0/350144.0;
            double pso = 1588.0/350144.0;
            double psp = 851.0/350144.0;
            double psr = 46.0/350144.0;
            double pss = 945.0/350144.0;
            double pst = 2379.0/350144.0;
            double psu = 190.0/350144.0;
            double psv = 614.0/350144.0;
            double psw = 3.0/350144.0;
            double psy = 373.0/350144.0;
            double psdot = 408.0/350144.0;
            double pscomma = 167.0/350144.0;
            double psvacuum = 1589.0/350144.0;
            double pta = 1288.0/350144.0;
            double ptb = 64.0/350144.0;
            double ptc = 15.0/350144.0;
            double ptd = 14.0/350144.0;
            double pte = 3326.0/350144.0;
            double ptf = 50.0/350144.0;
            double ptg = 42.0/350144.0;
            double pth = 258.0/350144.0;
            double pti = 1998.0/350144.0;
            double ptj = 191.0/350144.0;
            double ptk = 58.0/350144.0;
            double ptl = 256.0/350144.0;
            double ptm = 41.0/350144.0;
            double ptn = 124.0/350144.0;
            double pto = 1360.0/350144.0;
            double ptp = 26.0/350144.0;
            double ptr = 1433.0/350144.0;
            double pts = 570.0/350144.0;
            double ptt = 2131.0/350144.0;
            double ptu = 379.0/350144.0;
            double ptv = 208.0/350144.0;
            double ptw = 3.0/350144.0;
            double pty = 261.0/350144.0;
            double ptz = 1.0/350144.0;
            double ptdot = 1498.0/350144.0;
            double ptcomma = 787.0/350144.0;
            double ptvacuum = 3693.0/350144.0;   
            double pua = 102.0/350144.0;
            double pub = 77.0/350144.0;
            double puc = 5.0/350144.0;
            double pud = 285.0/350144.0;
            double pue = 218.0/350144.0;
            double puf = 121.0/350144.0;
            double pug = 109.0/350144.0;
            double puh = 13.0/350144.0;
            double pui = 15.0/350144.0;
            double puj = 2.0/350144.0;
            double puk = 451.0/350144.0;
            double pul = 781.0/350144.0;
            double pum = 284.0/350144.0;
            double pun = 1657.0/350144.0;
            double puo = 8.0/350144.0;
            double pup = 108.0/350144.0;
            double pur = 678.0/350144.0;
            double pus = 672.0/350144.0;
            double put = 1123.0/350144.0;
            double puu = 9.0/350144.0;
            double puv = 20.0/350144.0;
            double puz = 1.0/350144.0;
            double pudot = 18.0/350144.0;
            double pucomma = 19.0/350144.0;
            double puvacuum = 907.0/350144.0;   
            double pva = 2033.0/350144.0;
            double pvb = 33.0/350144.0;
            double pvd = 153.0/350144.0;
            double pve = 2059.0/350144.0;
            double pvf = 69.0/350144.0;
            double pvg = 21.0/350144.0;
            double pvh = 23.0/350144.0;
            double pvi = 1727.0/350144.0;
            double pvj = 5.0/350144.0;
            double pvk = 12.0/350144.0;
            double pvl = 107.0/350144.0;
            double pvm = 9.0/350144.0;
            double pvn = 198.0/350144.0;
            double pvo = 623.0/350144.0;
            double pvp = 5.0/350144.0;
            double pvr = 56.0/350144.0;
            double pvs = 108.0/350144.0;
            double pvt = 137.0/350144.0;
            double pvu = 51.0/350144.0;
            double pvv = 23.0/350144.0;
            double pvdot = 102.0/350144.0;
            double pvcomma = 44.0/350144.0;
            double pvvacuum = 1071.0/350144.0;   
            double pwa = 12.0/350144.0;
            double pwb = 1.0/350144.0;
            double pwd = 1.0/350144.0;
            double pwe = 16.0/350144.0;
            double pwh = 9.0/350144.0;
            double pwi = 18.0/350144.0;
            double pwl = 2.0/350144.0;
            double pwn = 4.0/350144.0;
            double pwo = 11.0/350144.0;
            double pww = 1.0/350144.0;
            double pwdot = 5.0/350144.0;
            double pwvacuum = 4.0/350144.0;
            double pxa = 1.0/350144.0;
            double pxe = 2.0/350144.0;
            double pxi = 14.0/350144.0;
            double pxl = 16.0/350144.0;
            double pxy = 2.0/350144.0;
            double pxdot = 2.0/350144.0;
            double pxcomma = 1.0/350144.0;
            double pxvacuum = 12.0/350144.0;
            double pya = 31.0/350144.0;
            double pyb = 10.0/350144.0;
            double pyc = 1.0/350144.0;
            double pyd = 264.0/350144.0;
            double pye = 326.0/350144.0;
            double pyf = 9.0/350144.0;
            double pyg = 206.0/350144.0;
            double pyh = 25.0/350144.0;
            double pyj = 2.0/350144.0;
            double pyk = 418.0/350144.0;
            double pyl = 215.0/350144.0;
            double pym = 47.0/350144.0;
            double pyn = 515.0/350144.0;
            double pyo = 13.0/350144.0;
            double pyp = 93.0/350144.0;
            double pyr = 205.0/350144.0;
            double pys = 414.0/350144.0;
            double pyt = 352.0/350144.0;
            double pyu = 1.0/350144.0;
            double pyv = 27.0/350144.0;
            double pydot = 391.0/350144.0;
            double pycomma = 74.0/350144.0;
            double pyvacuum = 1106.0/350144.0;
            double pza = 7.0/350144.0;
            double pze = 8.0/350144.0;
            double pzh = 2.0/350144.0;
            double pzi = 3.0/350144.0;
            double pzo = 8.0/350144.0;
            double pzy = 1.0/350144.0;
            double pzz = 3.0/350144.0;
            double pzvacuum = 2.0/350144.0;
            double pdota = 1.0/350144.0;
            double pdotj = 1.0/350144.0;
            double pdotn = 1.0/350144.0;
            double pdotcomma = 1.0/350144.0;
            double pdotvacuum = 2.0/350144.0;
            double pcommavacuum = 2867.0/350144.0;
            double pvacuuma = 2740.0/350144.0;
            double pvacuumb = 2318.0/350144.0;
            double pvacuumc = 133.0/350144.0;
            double pvacuumd = 3440.0/350144.0;
            double pvacuume = 2631.0/350144.0;
            double pvacuumf = 2566.0/350144.0;
            double pvacuumg = 1809.0/350144.0;
            double pvacuumh = 3869.0/350144.0;
            double pvacuumi = 2640.0/350144.0;
            double pvacuumj = 1423.0/350144.0;
            double pvacuumk = 2268.0/350144.0;
            double pvacuuml = 1916.0/350144.0;
            double pvacuumm = 2648.0/350144.0;
            double pvacuumn = 1840.0/350144.0;
            double pvacuumo = 2788.0/350144.0;
            double pvacuump = 2334.0/350144.0;
            double pvacuumq = 9.0/350144.0;
            double pvacuumr = 1507.0/350144.0;
            double pvacuums = 4014.0/350144.0;
            double pvacuumt = 2465.0/350144.0;
            double pvacuumu = 1190.0/350144.0;
            double pvacuumv = 2493.0/350144.0;
            double pvacuumw = 41.0/350144.0;
            double pvacuumx = 1.0/350144.0;
            double pvacuumy = 52.0/350144.0;
            double pvacuumz = 7.0/350144.0;
            double pvacuumdot = 88.0/350144.0;
            double pvacuumcomma = 51.0/350144.0;  
            double pvacuumvacuum = 2982.0/350144.0;   
            
            double entropypaa = paa*(Math.log(1/paa));
            double entropypab = pab*(Math.log(1/pab));
            double entropypac = pac*(Math.log(1/pac));
            double entropypad = pad*(Math.log(1/pad));
            double entropypae = pae*(Math.log(1/pae));
            double entropypaf = paf*(Math.log(1/paf));
            double entropypag = pag*(Math.log(1/pag));
            double entropypah = pah*(Math.log(1/pah));
            double entropypai = pai*(Math.log(1/pai));
            double entropypaj = paj*(Math.log(1/paj));
            double entropypak = pak*(Math.log(1/pak));
            double entropypal = pal*(Math.log(1/pal));
            double entropypam = pam*(Math.log(1/pam));
            double entropypan = pan*(Math.log(1/pan));
            double entropypao = pao*(Math.log(1/pao));
            double entropypap = pap*(Math.log(1/pap));
            double entropypar = par*(Math.log(1/par));
            double entropypas = pas*(Math.log(1/pas));
            double entropypat = pat*(Math.log(1/pat));
            double entropypau = pau*(Math.log(1/pau));
            double entropypav = pav*(Math.log(1/pav));
            double entropypaw = paw*(Math.log(1/paw));
            double entropypax = pax*(Math.log(1/pax));
            double entropypay = pay*(Math.log(1/pay));
            double entropypaz = paz*(Math.log(1/paz));
            double entropypadot = padot*(Math.log(1/padot));
            double entropypacomma = pacomma*(Math.log(1/pacomma));
            double entropypavacuum = pavacuum*(Math.log(1/pavacuum));
            double entropypba = pba*(Math.log(1/pba));
            double entropypbb = pbb*(Math.log(1/pbb));
            double entropypbd = pbd*(Math.log(1/pbd));
            double entropypbe = pbe*(Math.log(1/pbe));
            double entropypbh = pbh*(Math.log(1/pbh));
            double entropypbi = pbi*(Math.log(1/pbi));
            double entropypbj = pbj*(Math.log(1/pbj));
            double entropypbl = pbl*(Math.log(1/pbl));
            double entropypbm = pbm*(Math.log(1/pbm));
            double entropypbn = pbn*(Math.log(1/pbn));
            double entropypbo = pbo*(Math.log(1/pbo));
            double entropypbr = pbr*(Math.log(1/pbr));
            double entropypbs = pbs*(Math.log(1/pbs));
            double entropypbu = pbu*(Math.log(1/pbu));
            double entropypby = pby*(Math.log(1/pby));
            double entropypbdot = pbdot*(Math.log(1/pbdot));
            double entropypbcomma = pbcomma*(Math.log(1/pbcomma));
            double entropypbvacuum = pbvacuum*(Math.log(1/pbvacuum));
            double entropypca = pca*(Math.log(1/pca));
            double entropypcc = pcc*(Math.log(1/pcc));
            double entropypcd = pcd*(Math.log(1/pcd));
            double entropypce = pce*(Math.log(1/pce));
            double entropypch = pch*(Math.log(1/pch));
            double entropypci = pci*(Math.log(1/pci));
            double entropypck = pck*(Math.log(1/pck));
            double entropypcl = pcl*(Math.log(1/pcl));
            double entropypco = pco*(Math.log(1/pco));
            double entropypcr = pcr*(Math.log(1/pcr));
            double entropypcs = pcs*(Math.log(1/pcs));
            double entropypct = pct*(Math.log(1/pct));
            double entropypcu = pcu*(Math.log(1/pcu));
            double entropypcv = pcv*(Math.log(1/pcv));
            double entropypccomma = pccomma*(Math.log(1/pccomma));
            double entropypcvacuum = pcvacuum*(Math.log(1/pcvacuum));
            double entropypda = pda*(Math.log(1/pda));
            double entropypdb = pdb*(Math.log(1/pdb));
            double entropypdc = pdc*(Math.log(1/pdc));
            double entropypdd = pdd*(Math.log(1/pdd));
            double entropypde = pde*(Math.log(1/pde));
            double entropypdf = pdf*(Math.log(1/pdf));
            double entropypdg = pdg*(Math.log(1/pdg));
            double entropypdh = pdh*(Math.log(1/pdh));
            double entropypdi = pdi*(Math.log(1/pdi));
            double entropypdj = pdj*(Math.log(1/pdj));
            double entropypdk = pdk*(Math.log(1/pdk));
            double entropypdl = pdl*(Math.log(1/pdl));
            double entropypdm = pdm*(Math.log(1/pdm));
            double entropypdn = pdn*(Math.log(1/pdn));
            double entropypdo = pdo*(Math.log(1/pdo));
            double entropypdp = pdp*(Math.log(1/pdp));
            double entropypdr = pdr*(Math.log(1/pdr));
            double entropypds = pds*(Math.log(1/pds));
            double entropypdt = pdt*(Math.log(1/pdt));
            double entropypdu = pdu*(Math.log(1/pdu));
            double entropypdv = pdv*(Math.log(1/pdv));
            double entropypdw = pdw*(Math.log(1/pdw));
            double entropypdy = pdy*(Math.log(1/pdy));
            double entropypddot = pddot*(Math.log(1/pddot));
            double entropypdcomma = pdcomma*(Math.log(1/pdcomma));
            double entropypdvacuum = pdvacuum*(Math.log(1/pdvacuum));
            double entropypea = pea*(Math.log(1/pea));
            double entropypeb = peb*(Math.log(1/peb));
            double entropypec = pec*(Math.log(1/pec));
            double entropyped = ped*(Math.log(1/ped));
            double entropypee = pee*(Math.log(1/pee));
            double entropypef = pef*(Math.log(1/pef));
            double entropypeg = peg*(Math.log(1/peg));
            double entropypeh = peh*(Math.log(1/peh));
            double entropypei = pei*(Math.log(1/pei));
            double entropypej = pej*(Math.log(1/pej));
            double entropypek = pek*(Math.log(1/pek));
            double entropypel = pel*(Math.log(1/pel));
            double entropypem = pem*(Math.log(1/pem));
            double entropypen = pen*(Math.log(1/pen));
            double entropypeo = peo*(Math.log(1/peo));
            double entropypep = pep*(Math.log(1/pep));
            double entropyper = per*(Math.log(1/per));
            double entropypes = pes*(Math.log(1/pes));
            double entropypet = pet*(Math.log(1/pet));
            double entropypeu = peu*(Math.log(1/peu));
            double entropypev = pev*(Math.log(1/pev));
            double entropypex = pex*(Math.log(1/pex));
            double entropypey = pey*(Math.log(1/pey));
            double entropypedot = pedot*(Math.log(1/pedot));
            double entropypecomma = pecomma*(Math.log(1/pecomma));
            double entropypevacuum = pevacuum*(Math.log(1/pevacuum));
            double entropypfa = pfa*(Math.log(1/pfa));
            double entropypfb = pfb*(Math.log(1/pfb));
            double entropypfe = pfe*(Math.log(1/pfe));
            double entropypff = pff*(Math.log(1/pff));
            double entropypfi = pfi*(Math.log(1/pfi));
            double entropypfj = pfj*(Math.log(1/pfj));
            double entropypfl = pfl*(Math.log(1/pfl));
            double entropypfm = pfm*(Math.log(1/pfm));
            double entropypfn = pfn*(Math.log(1/pfn));
            double entropypfo = pfo*(Math.log(1/pfo));
            double entropypfr = pfr*(Math.log(1/pfr));
            double entropypfs = pfs*(Math.log(1/pfs));
            double entropypft = pft*(Math.log(1/pft));
            double entropypfu = pfu*(Math.log(1/pfu));
            double entropypfy = pfy*(Math.log(1/pfy));
            double entropypfdot = pfdot*(Math.log(1/pfdot));
            double entropypfcomma = pfcomma*(Math.log(1/pfcomma));
            double entropypfvacuum = pfvacuum*(Math.log(1/pfvacuum)); 
            double entropypga = pga*(Math.log(1/pga));
            double entropypgb = pgb*(Math.log(1/pgb));
            double entropypgd = pgd*(Math.log(1/pgd));
            double entropypge = pge*(Math.log(1/pge));
            double entropypgf = pgf*(Math.log(1/pgf));
            double entropypgg = pgg*(Math.log(1/pgg));
            double entropypgh = pgh*(Math.log(1/pgh));
            double entropypgi = pgi*(Math.log(1/pgi));
            double entropypgj = pgj*(Math.log(1/pgj));
            double entropypgk = pgk*(Math.log(1/pgk));
            double entropypgl = pgl*(Math.log(1/pgl));
            double entropypgm = pgm*(Math.log(1/pgm));
            double entropypgn = pgn*(Math.log(1/pgn));
            double entropypgo = pgo*(Math.log(1/pgo));
            double entropypgp = pgp*(Math.log(1/pgp));
            double entropypgr = pgr*(Math.log(1/pgr));
            double entropypgs = pgs*(Math.log(1/pgs));
            double entropypgt = pgt*(Math.log(1/pgt));
            double entropypgu = pgu*(Math.log(1/pgu));
            double entropypgv = pgv*(Math.log(1/pgv));
            double entropypgy = pgy*(Math.log(1/pgy));
            double entropypgdot = pgdot*(Math.log(1/pgdot));
            double entropypgcomma = pgcomma*(Math.log(1/pgcomma));
            double entropypgvacuum = pgvacuum*(Math.log(1/pgvacuum));
            double entropypha = pha*(Math.log(1/pha));
            double entropyphb = phb*(Math.log(1/phb));
            double entropyphc = phc*(Math.log(1/phc));
            double entropyphd = phd*(Math.log(1/phd));
            double entropyphe = phe*(Math.log(1/phe));
            double entropyphi = phi*(Math.log(1/phi));
            double entropyphj = phj*(Math.log(1/phj));
            double entropyphl = phl*(Math.log(1/phl));
            double entropyphn = phn*(Math.log(1/phn));
            double entropypho = pho*(Math.log(1/pho));
            double entropyphr = phr*(Math.log(1/phr));
            double entropypht = pht*(Math.log(1/pht));
            double entropyphu = phu*(Math.log(1/phu));
            double entropyphv = phv*(Math.log(1/phv));
            double entropyphy = phy*(Math.log(1/phy));
            double entropyphdot = phdot*(Math.log(1/phdot));
            double entropyphcomma = phcomma*(Math.log(1/phcomma));
            double entropyphvacuum = phvacuum*(Math.log(1/phvacuum));
            double entropypia = pia*(Math.log(1/pia));
            double entropypib = pib*(Math.log(1/pib));
            double entropypic = pic*(Math.log(1/pic));
            double entropypid = pid*(Math.log(1/pid));
            double entropypie = pie*(Math.log(1/pie));
            double entropypif = pif*(Math.log(1/pif));
            double entropypig = pig*(Math.log(1/pig));
            double entropypih = pih*(Math.log(1/pih));
            double entropypii = pii*(Math.log(1/pii));
            double entropypik = pik*(Math.log(1/pik));
            double entropypil = pil*(Math.log(1/pil));
            double entropypim = pim*(Math.log(1/pim));
            double entropypin = pin*(Math.log(1/pin));
            double entropypio = pio*(Math.log(1/pio));
            double entropypip = pip*(Math.log(1/pip));
            double entropypiq = piq*(Math.log(1/piq));
            double entropypir = pir*(Math.log(1/pir));
            double entropypis = pis*(Math.log(1/pis));
            double entropypit = pit*(Math.log(1/pit));
            double entropypiu = piu*(Math.log(1/piu));
            double entropypiv = piv*(Math.log(1/piv));
            double entropypiz = piz*(Math.log(1/piz));
            double entropypidot = pidot*(Math.log(1/pidot));
            double entropypicomma = picomma*(Math.log(1/picomma));
            double entropypivacuum = pivacuum*(Math.log(1/pivacuum));
            double entropypja = pja*(Math.log(1/pja));
            double entropypje = pje*(Math.log(1/pje));
            double entropypji = pji*(Math.log(1/pji));
            double entropypjo = pjo*(Math.log(1/pjo));
            double entropypjr = pjr*(Math.log(1/pjr));
            double entropypju = pju*(Math.log(1/pju));
            double entropypjy = pjy*(Math.log(1/pjy));
            double entropypjdot = pjdot*(Math.log(1/pjdot));
            double entropypjcomma = pjcomma*(Math.log(1/pjcomma));
            double entropypjvacuum = pjvacuum*(Math.log(1/pjvacuum));
            double entropypka = pka*(Math.log(1/pka));
            double entropypkb = pkb*(Math.log(1/pkb));
            double entropypkd = pkd*(Math.log(1/pkd));
            double entropypke = pke*(Math.log(1/pke));
            double entropypkf = pkf*(Math.log(1/pkf));
            double entropypkg = pkg*(Math.log(1/pkg));
            double entropypkh = pkh*(Math.log(1/pkh));
            double entropypki = pki*(Math.log(1/pki));
            double entropypkj = pkj*(Math.log(1/pkj));
            double entropypkk = pkk*(Math.log(1/pkk));
            double entropypkl = pkl*(Math.log(1/pkl));
            double entropypkm = pkm*(Math.log(1/pkm));
            double entropypkn = pkn*(Math.log(1/pkn));
            double entropypko = pko*(Math.log(1/pko));
            double entropypkp = pkp*(Math.log(1/pkp));
            double entropypkr = pkr*(Math.log(1/pkr));
            double entropypks = pks*(Math.log(1/pks));
            double entropypkt = pkt*(Math.log(1/pkt));
            double entropypku = pku*(Math.log(1/pku));
            double entropypkv = pkv*(Math.log(1/pkv));
            double entropypky = pky*(Math.log(1/pky));
            double entropypkdot = pkdot*(Math.log(1/pkdot));
            double entropypkcomma = pkcomma*(Math.log(1/pkcomma));
            double entropypkvacuum = pkvacuum*(Math.log(1/pkvacuum));
            double entropypla = pla*(Math.log(1/pla));
            double entropyplb = plb*(Math.log(1/plb));
            double entropyplc = plc*(Math.log(1/plc));
            double entropypld = pld*(Math.log(1/pld));
            double entropyple = ple*(Math.log(1/ple));
            double entropyplf = plf*(Math.log(1/plf));
            double entropyplg = plg*(Math.log(1/plg));
            double entropyplh = plh*(Math.log(1/plh));
            double entropypli = pli*(Math.log(1/pli));
            double entropyplj = plj*(Math.log(1/plj));
            double entropyplk = plk*(Math.log(1/plk));
            double entropypll = pll*(Math.log(1/pll));
            double entropyplm = plm*(Math.log(1/plm));
            double entropypln = pln*(Math.log(1/pln));
            double entropyplo = plo*(Math.log(1/plo));
            double entropyplp = plp*(Math.log(1/plp));
            double entropyplr = plr*(Math.log(1/plr));
            double entropypls = pls*(Math.log(1/pls));
            double entropyplt = plt*(Math.log(1/plt));
            double entropyplu = plu*(Math.log(1/plu));
            double entropyplv = plv*(Math.log(1/plv));
            double entropyplw = plw*(Math.log(1/plw));
            double entropyply = ply*(Math.log(1/ply));
            double entropyplz = plz*(Math.log(1/plz));
            double entropypldot = pldot*(Math.log(1/pldot));
            double entropyplcomma = plcomma*(Math.log(1/plcomma));
            double entropyplvacuum = plvacuum*(Math.log(1/plvacuum));
            double entropypma = pma*(Math.log(1/pma));
            double entropypmb = pmb*(Math.log(1/pmb));
            double entropypmd = pmd*(Math.log(1/pmd));
            double entropypme = pme*(Math.log(1/pme));
            double entropypmf = pmf*(Math.log(1/pmf));
            double entropypmg = pmg*(Math.log(1/pmg));
            double entropypmh = pmh*(Math.log(1/pmh));
            double entropypmi = pmi*(Math.log(1/pmi));
            double entropypmk = pmk*(Math.log(1/pmk));
            double entropypml = pml*(Math.log(1/pml));
            double entropypmm = pmm*(Math.log(1/pmm));
            double entropypmn = pmn*(Math.log(1/pmn));
            double entropypmo = pmo*(Math.log(1/pmo));
            double entropypmp = pmp*(Math.log(1/pmp));
            double entropypmr = pmr*(Math.log(1/pmr));
            double entropypms = pms*(Math.log(1/pms));
            double entropypmt = pmt*(Math.log(1/pmt));
            double entropypmu = pmu*(Math.log(1/pmu));
            double entropypmv = pmv*(Math.log(1/pmv));
            double entropypmw = pmw*(Math.log(1/pmw));
            double entropypmy = pmy*(Math.log(1/pmy));
            double entropypmdot = pmdot*(Math.log(1/pmdot));
            double entropypmcomma = pmcomma*(Math.log(1/pmcomma));
            double entropypmvacuum = pmvacuum*(Math.log(1/pmvacuum));
            double entropypna = pna*(Math.log(1/pna));
            double entropypnb = pnb*(Math.log(1/pnb));
            double entropypnc = pnc*(Math.log(1/pnc));
            double entropypnd = pnd*(Math.log(1/pnd));
            double entropypne = pne*(Math.log(1/pne));
            double entropypnf = pnf*(Math.log(1/pnf));
            double entropypng = png*(Math.log(1/png));
            double entropypnh = pnh*(Math.log(1/pnh));
            double entropypni = pni*(Math.log(1/pni));
            double entropypnj = pnj*(Math.log(1/pnj));
            double entropypnk = pnk*(Math.log(1/pnk));
            double entropypnl = pnl*(Math.log(1/pnl));
            double entropypnm = pnm*(Math.log(1/pnm));
            double entropypnn = pnn*(Math.log(1/pnn));
            double entropypno = pno*(Math.log(1/pno));
            double entropypnp = pnp*(Math.log(1/pnp));
            double entropypnr = pnr*(Math.log(1/pnr));
            double entropypns = pns*(Math.log(1/pns));
            double entropypnt = pnt*(Math.log(1/pnt));
            double entropypnu = pnu*(Math.log(1/pnu));
            double entropypnv = pnv*(Math.log(1/pnv));
            double entropypnx = pnx*(Math.log(1/pnx));
            double entropypny = pny*(Math.log(1/pny));
            double entropypnz = pnz*(Math.log(1/pnz));
            double entropypndot = pndot*(Math.log(1/pndot));
            double entropypncomma = pncomma*(Math.log(1/pncomma));
            double entropypnvacuum = pnvacuum*(Math.log(1/pnvacuum));
            double entropypoa = poa*(Math.log(1/poa));
            double entropypob = pob*(Math.log(1/pob));
            double entropypoc = poc*(Math.log(1/poc));
            double entropypod = pod*(Math.log(1/pod));
            double entropypoe = poe*(Math.log(1/poe));
            double entropypof = pof*(Math.log(1/pof));
            double entropypog = pog*(Math.log(1/pog));
            double entropypoh = poh*(Math.log(1/poh));
            double entropypoi = poi*(Math.log(1/poi));
            double entropypoj = poj*(Math.log(1/poj));
            double entropypok = pok*(Math.log(1/pok));
            double entropypol = pol*(Math.log(1/pol));
            double entropypom = pom*(Math.log(1/pom));
            double entropypon = pon*(Math.log(1/pon));
            double entropypoo = poo*(Math.log(1/poo));
            double entropypop = pop*(Math.log(1/pop));
            double entropypor = por*(Math.log(1/por));
            double entropypos = pos*(Math.log(1/pos));
            double entropypot = pot*(Math.log(1/pot));
            double entropypou = pou*(Math.log(1/pou));
            double entropypov = pov*(Math.log(1/pov));
            double entropypow = pow*(Math.log(1/pow));
            double entropypox = pox*(Math.log(1/pox));
            double entropypoy = poy*(Math.log(1/poy));
            double entropypodot = podot*(Math.log(1/podot));
            double entropypocomma = pocomma*(Math.log(1/pocomma));
            double entropypovacuum = povacuum*(Math.log(1/povacuum));
            double entropyppa = ppa*(Math.log(1/ppa));
            double entropyppb = ppb*(Math.log(1/ppb));
            double entropyppc = ppc*(Math.log(1/ppc));
            double entropyppd = ppd*(Math.log(1/ppd));
            double entropyppe = ppe*(Math.log(1/ppe));
            double entropyppf = ppf*(Math.log(1/ppf));
            double entropyppg = ppg*(Math.log(1/ppg));
            double entropypph = pph*(Math.log(1/pph));
            double entropyppi = ppi*(Math.log(1/ppi));
            double entropyppj = ppj*(Math.log(1/ppj));
            double entropyppk = ppk*(Math.log(1/ppk));
            double entropyppl = ppl*(Math.log(1/ppl));
            double entropyppm = ppm*(Math.log(1/ppm));
            double entropyppn = ppn*(Math.log(1/ppn));
            double entropyppo = ppo*(Math.log(1/ppo));
            double entropyppp = ppp*(Math.log(1/ppp));
            double entropyppr = ppr*(Math.log(1/ppr));
            double entropypps = pps*(Math.log(1/pps));
            double entropyppt = ppt*(Math.log(1/ppt));
            double entropyppu = ppu*(Math.log(1/ppu));
            double entropyppv = ppv*(Math.log(1/ppv));
            double entropyppy = ppy*(Math.log(1/ppy));
            double entropyppdot = ppdot*(Math.log(1/ppdot));
            double entropyppcomma = ppcomma*(Math.log(1/ppcomma));
            double entropyppvacuum = ppvacuum*(Math.log(1/ppvacuum));
            double entropypqu = pqu*(Math.log(1/pqu));
            double entropypqvacuum = pqvacuum*(Math.log(1/pqvacuum));
            double entropypra = pra*(Math.log(1/pra));
            double entropyprb = prb*(Math.log(1/prb));
            double entropyprc = prc*(Math.log(1/prc));
            double entropyprd = prd*(Math.log(1/prd));
            double entropypre = pre*(Math.log(1/pre));
            double entropyprf = prf*(Math.log(1/prf));
            double entropyprg = prg*(Math.log(1/prg));
            double entropyprh = prh*(Math.log(1/prh));
            double entropypri = pri*(Math.log(1/pri));
            double entropyprj = prj*(Math.log(1/prj));
            double entropyprk = prk*(Math.log(1/prk));
            double entropyprl = prl*(Math.log(1/prl));
            double entropyprm = prm*(Math.log(1/prm));
            double entropyprn = prn*(Math.log(1/prn));
            double entropypro = pro*(Math.log(1/pro));
            double entropyprp = prp*(Math.log(1/prp));
            double entropyprr = prr*(Math.log(1/prr));
            double entropyprs = prs*(Math.log(1/prs));
            double entropyprt = prt*(Math.log(1/prt));
            double entropypru = pru*(Math.log(1/pru));
            double entropyprv = prv*(Math.log(1/prv));
            double entropyprw = prw*(Math.log(1/prw));
            double entropypry = pry*(Math.log(1/pry));
            double entropyprdot = prdot*(Math.log(1/prdot));
            double entropyprcomma = prcomma*(Math.log(1/prcomma));
            double entropyprvacuum = prvacuum*(Math.log(1/prvacuum));
            double entropypsa = psa*(Math.log(1/psa));
            double entropypsb = psb*(Math.log(1/psb));
            double entropypsc = psc*(Math.log(1/psc));
            double entropypsd = psd*(Math.log(1/psd));
            double entropypse = pse*(Math.log(1/pse));
            double entropypsf = psf*(Math.log(1/psf));
            double entropypsg = psg*(Math.log(1/psg));
            double entropypsh = psh*(Math.log(1/psh));
            double entropypsi = psi*(Math.log(1/psi));
            double entropypsj = psj*(Math.log(1/psj));
            double entropypsk = psk*(Math.log(1/psk));
            double entropypsl = psl*(Math.log(1/psl));
            double entropypsm = psm*(Math.log(1/psm));
            double entropypsn = psn*(Math.log(1/psn));
            double entropypso = pso*(Math.log(1/pso));
            double entropypsp = psp*(Math.log(1/psp));
            double entropypsr = psr*(Math.log(1/psr));
            double entropypss = pss*(Math.log(1/pss));
            double entropypst = pst*(Math.log(1/pst));
            double entropypsu = psu*(Math.log(1/psu));
            double entropypsv = psv*(Math.log(1/psv));
            double entropypsw = psw*(Math.log(1/psw));
            double entropypsy = psy*(Math.log(1/psy));
            double entropypsdot = psdot*(Math.log(1/psdot));
            double entropypscomma = pscomma*(Math.log(1/pscomma));
            double entropypsvacuum = psvacuum*(Math.log(1/psvacuum));
            double entropypta = pta*(Math.log(1/pta));
            double entropyptb = ptb*(Math.log(1/ptb));
            double entropyptc = ptc*(Math.log(1/ptc));
            double entropyptd = ptd*(Math.log(1/ptd));
            double entropypte = pte*(Math.log(1/pte));
            double entropyptf = ptf*(Math.log(1/ptf));
            double entropyptg = ptg*(Math.log(1/ptg));
            double entropypth = pth*(Math.log(1/pth));
            double entropypti = pti*(Math.log(1/pti));
            double entropyptj = ptj*(Math.log(1/ptj));
            double entropyptk = ptk*(Math.log(1/ptk));
            double entropyptl = ptl*(Math.log(1/ptl));
            double entropyptm = ptm*(Math.log(1/ptm));
            double entropyptn = ptn*(Math.log(1/ptn));
            double entropypto = pto*(Math.log(1/pto));
            double entropyptp = ptp*(Math.log(1/ptp));
            double entropyptr = ptr*(Math.log(1/ptr));
            double entropypts = pts*(Math.log(1/pts));
            double entropyptt = ptt*(Math.log(1/ptt));
            double entropyptu = ptu*(Math.log(1/ptu));
            double entropyptv = ptv*(Math.log(1/ptv));
            double entropyptw = ptw*(Math.log(1/ptw));
            double entropypty = pty*(Math.log(1/pty));
            double entropyptz = ptz*(Math.log(1/ptz));
            double entropyptdot = ptdot*(Math.log(1/ptdot));
            double entropyptcomma = ptcomma*(Math.log(1/ptcomma));
            double entropyptvacuum = ptvacuum*(Math.log(1/ptvacuum));
            double entropypua = pua*(Math.log(1/pua));
            double entropypub = pub*(Math.log(1/pub));
            double entropypuc = puc*(Math.log(1/puc));
            double entropypud = pud*(Math.log(1/pud));
            double entropypue = pue*(Math.log(1/pue));
            double entropypuf = puf*(Math.log(1/puf));
            double entropypug = pug*(Math.log(1/pug));
            double entropypuh = puh*(Math.log(1/puh));
            double entropypui = pai*(Math.log(1/pui));
            double entropypuj = puj*(Math.log(1/puj));
            double entropypuk = puk*(Math.log(1/puk));
            double entropypul = pul*(Math.log(1/pul));
            double entropypum = pum*(Math.log(1/pum));
            double entropypun = pun*(Math.log(1/pun));
            double entropypuo = puo*(Math.log(1/puo));
            double entropypup = pup*(Math.log(1/pup));
            double entropypur = pur*(Math.log(1/pur));
            double entropypus = pus*(Math.log(1/pus));
            double entropyput = put*(Math.log(1/put));
            double entropypuu = puu*(Math.log(1/puu));
            double entropypuv = puv*(Math.log(1/puv));
            double entropypuz = puz*(Math.log(1/puz));
            double entropypudot = pudot*(Math.log(1/pudot));
            double entropypucomma = pucomma*(Math.log(1/pucomma));
            double entropypuvacuum = puvacuum*(Math.log(1/puvacuum));
            double entropypva = pva*(Math.log(1/pva));
            double entropypvb = pvb*(Math.log(1/pvb));
            double entropypvd = pvd*(Math.log(1/pvd));
            double entropypve = pve*(Math.log(1/pve));
            double entropypvf = pvf*(Math.log(1/pvf));
            double entropypvg = pvg*(Math.log(1/pvg));
            double entropypvh = pvh*(Math.log(1/pvh));
            double entropypvi = pvi*(Math.log(1/pvi));
            double entropypvj = pvj*(Math.log(1/pvj));
            double entropypvk = pvk*(Math.log(1/pvk));
            double entropypvl = pvl*(Math.log(1/pvl));
            double entropypvm = pvm*(Math.log(1/pvm));
            double entropypvn = pvn*(Math.log(1/pvn));
            double entropypvo = pvo*(Math.log(1/pvo));
            double entropypvp = pvp*(Math.log(1/pvp));
            double entropypvr = pvr*(Math.log(1/pvr));
            double entropypvs = pvs*(Math.log(1/pvs));
            double entropypvt = pvt*(Math.log(1/pvt));
            double entropypvu = pvu*(Math.log(1/pvu));
            double entropypvv = pvv*(Math.log(1/pvv));
            double entropypvdot = pvdot*(Math.log(1/pvdot));
            double entropypvcomma = pvcomma*(Math.log(1/pvcomma));
            double entropypvvacuum = pvvacuum*(Math.log(1/pvvacuum));
            double entropypwa = pwa*(Math.log(1/pwa));
            double entropypwb = pwb*(Math.log(1/pwb));
            double entropypwd = pwd*(Math.log(1/pwd));
            double entropypwe = pwe*(Math.log(1/pwe));
            double entropypwh = pwh*(Math.log(1/pwh));
            double entropypwi = pwi*(Math.log(1/pwi));
            double entropypwl = pwl*(Math.log(1/pwl));
            double entropypwn = pwn*(Math.log(1/pwn));
            double entropypwo = pwo*(Math.log(1/pwo));
            double entropypww = pww*(Math.log(1/pww));
            double entropypwdot = pwdot*(Math.log(1/pwdot));
            double entropypwvacuum = pwvacuum*(Math.log(1/pwvacuum));
            double entropypxa = pxa*(Math.log(1/pxa));
            double entropypxe = pxe*(Math.log(1/pxe));
            double entropypxi = pxi*(Math.log(1/pxi));
            double entropypxl = pxl*(Math.log(1/pxl));
            double entropypxy = pxy*(Math.log(1/pxy));
            double entropypxdot = pxdot*(Math.log(1/pxdot));
            double entropypxcomma = pxcomma*(Math.log(1/pxcomma));
            double entropypxvacuum = pxvacuum*(Math.log(1/pxvacuum));
            double entropypya = pya*(Math.log(1/pya));
            double entropypyb = pyb*(Math.log(1/pyb));
            double entropypyc = pyc*(Math.log(1/pyc));
            double entropypyd = pyd*(Math.log(1/pyd));
            double entropypye = pye*(Math.log(1/pye));
            double entropypyf = pyf*(Math.log(1/pyf));
            double entropypyg = pyg*(Math.log(1/pyg));
            double entropypyh = pyh*(Math.log(1/pyh));
            double entropypyj = pyj*(Math.log(1/pyj));
            double entropypyk = pyk*(Math.log(1/pyk));
            double entropypyl = pyl*(Math.log(1/pyl));
            double entropypym = pym*(Math.log(1/pym));
            double entropypyn = pyn*(Math.log(1/pyn));
            double entropypyo = pyo*(Math.log(1/pyo));
            double entropypyp = pyp*(Math.log(1/pyp));
            double entropypyr = pyr*(Math.log(1/pyr));
            double entropypys = pys*(Math.log(1/pys));
            double entropypyt = pyt*(Math.log(1/pyt));
            double entropypyu = pyu*(Math.log(1/pyu));
            double entropypyv = pyv*(Math.log(1/pyv));
            double entropypydot = pydot*(Math.log(1/pydot));
            double entropypycomma = pycomma*(Math.log(1/pycomma));
            double entropypyvacuum = pyvacuum*(Math.log(1/pyvacuum));
            double entropypza = pza*(Math.log(1/pza));
            double entropypze = pze*(Math.log(1/pze));
            double entropypzh = pzh*(Math.log(1/pzh));
            double entropypzi = pzi*(Math.log(1/pzi));
            double entropypzo = pzo*(Math.log(1/pzo));
            double entropypzy = pzy*(Math.log(1/pzy));
            double entropypzz = pzz*(Math.log(1/pzz));
            double entropypzvacuum = pzvacuum*(Math.log(1/pzvacuum));
            double entropypdota = pdota*(Math.log(1/pdota));
            double entropypdotj = pdotj*(Math.log(1/pdotj));
            double entropypdotn = pdotn*(Math.log(1/pdotn));
            double entropypdotcomma = pdotcomma*(Math.log(1/pdotcomma));
            double entropypdotvacuum = pdotvacuum*(Math.log(1/pdotvacuum));
            double entropypcommavacuum = pcommavacuum*(Math.log(1/pcommavacuum));
            double entropypvacuuma = pvacuuma*(Math.log(1/pvacuuma));
            double entropypvacuumb = pvacuumb*(Math.log(1/pvacuumb));
            double entropypvacuumc = pvacuumc*(Math.log(1/pvacuumc));
            double entropypvacuumd = pvacuumd*(Math.log(1/pvacuumd));
            double entropypvacuume = pvacuume*(Math.log(1/pvacuume));
            double entropypvacuumf = pvacuumf*(Math.log(1/pvacuumf));
            double entropypvacuumg = pvacuumg*(Math.log(1/pvacuumg));
            double entropypvacuumh = pvacuumh*(Math.log(1/pvacuumh));
            double entropypvacuumi = pvacuumi*(Math.log(1/pvacuumi));
            double entropypvacuumj = pvacuumj*(Math.log(1/pvacuumj));
            double entropypvacuumk = pvacuumk*(Math.log(1/pvacuumk));
            double entropypvacuuml = pvacuuml*(Math.log(1/pvacuuml));
            double entropypvacuumm = pvacuumm*(Math.log(1/pvacuumm));
            double entropypvacuumn = pvacuumn*(Math.log(1/pvacuumn));
            double entropypvacuumo = pvacuumo*(Math.log(1/pvacuumo));
            double entropypvacuump = pvacuump*(Math.log(1/pvacuump));
            double entropypvacuumq = pvacuumq*(Math.log(1/pvacuumq));
            double entropypvacuumr = pvacuumr*(Math.log(1/pvacuumr));
            double entropypvacuums = pvacuums*(Math.log(1/pvacuums));
            double entropypvacuumt = pvacuumt*(Math.log(1/pvacuumt));
            double entropypvacuumu = pvacuumu*(Math.log(1/pvacuumu));
            double entropypvacuumv = pvacuumv*(Math.log(1/pvacuumv));
            double entropypvacuumw = pvacuumw*(Math.log(1/pvacuumw));
            double entropypvacuumx = pvacuumx*(Math.log(1/pvacuumx));
            double entropypvacuumy = pvacuumy*(Math.log(1/pvacuumy));
            double entropypvacuumz = pvacuumz*(Math.log(1/pvacuumz));
            double entropypvacuumdot = pvacuumdot*(Math.log(1/pvacuumdot));
            double entropypvacuumcomma = pvacuumcomma*(Math.log(1/pvacuumcomma));
            double entropypvacuumvacuum = pvacuumvacuum*(Math.log(1/pvacuumvacuum));
            
            double sumentropy = entropypaa+entropypab+entropypac+entropypad+entropypae+entropypaf+entropypag+entropypah+entropypai+entropypaj+entropypak+entropypal+entropypam+entropypan+entropypao+entropypap+entropypar+entropypas+entropypat+entropypau+entropypav+entropypaw+entropypax+entropypay+entropypaz+entropypadot+entropypacomma+entropypavacuum
                               +entropypba+entropypbb+entropypbd+entropypbe+entropypbh+entropypbi+entropypbj+entropypbl+entropypbm+entropypbn+entropypbo+entropypbr+entropypbs+entropypbu+entropypby+entropypbdot+entropypbcomma+entropypbvacuum
                               +entropypca+entropypcc+entropypcd+entropypce+entropypch+entropypci+entropypck+entropypcl+entropypco+entropypcr+entropypcs+entropypct+entropypcu+entropypcv+entropypccomma+entropypcvacuum
                               +entropypda+entropypdb+entropypdc+entropypdd+entropypde+entropypdf+entropypdg+entropypdh+entropypdi+entropypdj+entropypdk+entropypdl+entropypdm+entropypdn+entropypdo+entropypdp+entropypdr+entropypds+entropypdt+entropypdu+entropypdv+entropypdw+entropypdy+entropypddot+entropypdcomma+entropypdvacuum
                               +entropypea+entropypeb+entropypec+entropyped+entropypee+entropypef+entropypeg+entropypeh+entropypei+entropypej+entropypek+entropypel+entropypem+entropypen+entropypeo+entropypep+entropyper+entropypes+entropypet+entropypeu+entropypev+entropypex+entropypey+entropypedot+entropypecomma+entropypevacuum
                               +entropypfa+entropypfb+entropypfe+entropypff+entropypfi+entropypfj+entropypfl+entropypfm+entropypfn+entropypfo+entropypfr+entropypfs+entropypft+entropypfu+entropypfy+entropypfdot+entropypfcomma+entropypfvacuum
                               +entropypga+entropypgb+entropypgd+entropypge+entropypgf+entropypgg+entropypgh+entropypgi+entropypgj+entropypgk+entropypgl+entropypgm+entropypgn+entropypgo+entropypgp+entropypgr+entropypgs+entropypgt+entropypgu+entropypgv+entropypgy+entropypgdot+entropypgcomma+entropypgvacuum
                               +entropypha+entropyphb+entropyphc+entropyphd+entropyphe+entropyphi+entropyphj+entropyphl+entropyphn+entropypho+entropyphr+entropypht+entropyphu+entropyphv+entropyphy+entropyphdot+entropyphcomma+entropyphvacuum
                               +entropypia+entropypib+entropypic+entropypid+entropypie+entropypif+entropypig+entropypih+entropypii+entropypik+entropypil+entropypim+entropypin+entropypio+entropypip+entropypiq+entropypir+entropypis+entropypit+entropypiu+entropypiv+entropypiz+entropypidot+entropypicomma+entropypivacuum
                               +entropypja+entropypje+entropypji+entropypjo+entropypjr+entropypju+entropypjy+entropypjdot+entropypjcomma+entropypjvacuum
                               +entropypka+entropypkb+entropypkd+entropypke+entropypkf+entropypkg+entropypkh+entropypki+entropypkj+entropypkk+entropypkl+entropypkm+entropypkn+entropypko+entropypkp+entropypkr+entropypks+entropypkt+entropypku+entropypkv+entropypky+entropypkdot+entropypkcomma+entropypkvacuum
                               +entropypla+entropyplb+entropyplc+entropypld+entropyple+entropyplf+entropyplg+entropyplh+entropypli+entropyplj+entropyplk+entropypll+entropyplm+entropypln+entropyplo+entropyplp+entropyplr+entropypls+entropyplt+entropyplu+entropyplv+entropyplw+entropyply+entropyplz+entropypldot+entropyplcomma+entropyplvacuum
                               +entropypma+entropypmb+entropypmd+entropypme+entropypmf+entropypmg+entropypmh+entropypmi+entropypmk+entropypml+entropypmm+entropypmn+entropypmo+entropypmp+entropypmr+entropypms+entropypmt+entropypmu+entropypmv+entropypmw+entropypmy+entropypmdot+entropypmcomma+entropypmvacuum
                               +entropypna+entropypnb+entropypnc+entropypnd+entropypne+entropypnf+entropypng+entropypnh+entropypni+entropypnj+entropypnk+entropypnl+entropypnm+entropypnn+entropypno+entropypnp+entropypnr+entropypns+entropypnt+entropypnu+entropypnv+entropypnx+entropypny+entropypnz+entropypndot+entropypncomma+entropypnvacuum
                               +entropypoa+entropypob+entropypoc+entropypod+entropypoe+entropypof+entropypog+entropypoh+entropypoi+entropypoj+entropypok+entropypol+entropypom+entropypon+entropypoo+entropypop+entropypor+entropypos+entropypot+entropypou+entropypov+entropypow+entropypox+entropypoy+entropypodot+entropypocomma+entropypovacuum
                               +entropyppa+entropyppb+entropyppc+entropyppd+entropyppe+entropyppf+entropyppg+entropypph+entropyppi+entropyppj+entropyppk+entropyppl+entropyppm+entropyppn+entropyppo+entropyppp+entropyppr+entropypps+entropyppt+entropyppu+entropyppv+entropyppy+entropyppdot+entropyppcomma+entropyppvacuum
                               +entropypqu+entropypqvacuum
                               +entropypra+entropyprb+entropyprc+entropyprd+entropypre+entropyprf+entropyprg+entropyprh+entropypri+entropyprj+entropyprk+entropyprl+entropyprm+entropyprn+entropypro+entropyprp+entropyprr+entropyprs+entropyprt+entropypru+entropyprv+entropyprw+entropypry+entropyprdot+entropyprcomma+entropyprvacuum
                               +entropypsa+entropypsb+entropypsc+entropypsd+entropypse+entropypsf+entropypsg+entropypsh+entropypsi+entropypsj+entropypsk+entropypsl+entropypsm+entropypsn+entropypso+entropypsp+entropypsr+entropypss+entropypst+entropypsu+entropypsv+entropypsw+entropypsy+entropypsdot+entropypscomma+entropypsvacuum
                               +entropypta+entropyptb+entropyptc+entropyptd+entropypte+entropyptf+entropyptg+entropypth+entropypti+entropyptj+entropyptk+entropyptl+entropyptm+entropyptn+entropypto+entropyptp+entropyptr+entropypts+entropyptt+entropyptu+entropyptv+entropyptw+entropypty+entropyptz+entropyptdot+entropyptcomma+entropyptvacuum
                               +entropypua+entropypub+entropypuc+entropypud+entropypue+entropypuf+entropypug+entropypuh+entropypui+entropypuj+entropypuk+entropypul+entropypum+entropypun+entropypuo+entropypup+entropypur+entropypus+entropyput+entropypuu+entropypuv+entropypuz+entropypudot+entropypucomma+entropypuvacuum
                               +entropypva+entropypvb+entropypvd+entropypve+entropypvf+entropypvg+entropypvh+entropypvi+entropypvj+entropypvk+entropypvl+entropypvm+entropypvn+entropypvo+entropypvp+entropypvr+entropypvs+entropypvt+entropypvu+entropypvv+entropypvdot+entropypvcomma+entropypvvacuum
                               +entropypwa+entropypwb+entropypwd+entropypwe+entropypwh+entropypwi+entropypwl+entropypwn+entropypwo+entropypww+entropypwdot+entropypwvacuum
                               +entropypxa+entropypxe+entropypxi+entropypxl+entropypxy+entropypxdot+entropypxcomma+entropypxvacuum
                               +entropypya+entropypyb+entropypyc+entropypyd+entropypye+entropypyf+entropypyg+entropypyh+entropypyj+entropypyk+entropypyl+entropypym+entropypyn+entropypyo+entropypyp+entropypyr+entropypys+entropypyt+entropypyu+entropypyv+entropypydot+entropypycomma+entropypyvacuum
                               +entropypza+entropypze+entropypzh+entropypzi+entropypzo+entropypzy+entropypzz+entropypzvacuum
                               +entropypdota+entropypdotj+entropypdotn+entropypdotcomma+entropypdotvacuum+entropypcommavacuum
                               +entropypvacuuma+entropypvacuumb+entropypvacuumc+entropypvacuumd+entropypvacuume+entropypvacuumf+entropypvacuumg+entropypvacuumh+entropypvacuumi+entropypvacuumj+entropypvacuumk+entropypvacuuml+entropypvacuumm+entropypvacuumn+entropypvacuumo+entropypvacuump+entropypvacuumq+entropypvacuumr+entropypvacuums+entropypvacuumt+entropypvacuumu+entropypvacuumv+entropypvacuumw+entropypvacuumx+entropypvacuumy+entropypvacuumz+entropypvacuumdot+entropypvacuumcomma+entropypvacuumvacuum;                   
            
            System.out.println("\nP(aa)*log(1/P(aa)) = " + entropypaa );
            System.out.println("\nP(ab)*log(1/P(ab)) = " + entropypab );
            System.out.println("\nP(ac)*log(1/P(ac)) = " + entropypac );
            System.out.println("\nP(ad)*log(1/P(ad)) = " + entropypad );
            System.out.println("\nP(ae)*log(1/P(ae)) = " + entropypae );
            System.out.println("\nP(af)*log(1/P(af)) = " + entropypaf );
            System.out.println("\nP(ag)*log(1/P(ag)) = " + entropypag );
            System.out.println("\nP(ah)*log(1/P(ah)) = " + entropypah );
            System.out.println("\nP(ai)*log(1/P(ai)) = " + entropypai );
            System.out.println("\nP(aj)*log(1/P(aj)) = " + entropypaj );
            System.out.println("\nP(ak)*log(1/P(ak)) = " + entropypak );
            System.out.println("\nP(al)*log(1/P(al)) = " + entropypal );
            System.out.println("\nP(am)*log(1/P(am)) = " + entropypam );
            System.out.println("\nP(an)*log(1/P(an)) = " + entropypan );
            System.out.println("\nP(ao)*log(1/P(ao)) = " + entropypao );
            System.out.println("\nP(ap)*log(1/P(ap)) = " + entropypap );
            System.out.println("\nP(ar)*log(1/P(ar)) = " + entropypar );
            System.out.println("\nP(as)*log(1/P(as)) = " + entropypas );
            System.out.println("\nP(at)*log(1/P(at)) = " + entropypat );
            System.out.println("\nP(au)*log(1/P(au)) = " + entropypau );
            System.out.println("\nP(av)*log(1/P(av)) = " + entropypav );
            System.out.println("\nP(aw)*log(1/P(aw)) = " + entropypaw );
            System.out.println("\nP(ax)*log(1/P(ax)) = " + entropypax );
            System.out.println("\nP(ay)*log(1/P(ay)) = " + entropypay );
            System.out.println("\nP(az)*log(1/P(az)) = " + entropypaz );
            System.out.println("\nP(a.)*log(1/P(a.)) = " + entropypadot );
            System.out.println("\nP(a,)*log(1/P(a,)) = " + entropypacomma );
            System.out.println("\nP(avacuum)*log(1/P(avacuum)) = " + entropypavacuum );
            System.out.println("\nP(ba)*log(1/P(ba)) = " + entropypba );
            System.out.println("\nP(bb)*log(1/P(bb)) = " + entropypbb );
            System.out.println("\nP(bd)*log(1/P(bd)) = " + entropypbd );
            System.out.println("\nP(be)*log(1/P(be)) = " + entropypbe );
            System.out.println("\nP(bh)*log(1/P(bh)) = " + entropypbh );
            System.out.println("\nP(bi)*log(1/P(bi)) = " + entropypbi );
            System.out.println("\nP(bj)*log(1/P(bj)) = " + entropypbj );
            System.out.println("\nP(bl)*log(1/P(bl)) = " + entropypbl );
            System.out.println("\nP(bm)*log(1/P(bm)) = " + entropypbm );
            System.out.println("\nP(bn)*log(1/P(bn)) = " + entropypbn );
            System.out.println("\nP(bo)*log(1/P(bo)) = " + entropypbo );
            System.out.println("\nP(br)*log(1/P(br)) = " + entropypbr );
            System.out.println("\nP(bs)*log(1/P(bs)) = " + entropypbs );
            System.out.println("\nP(bu)*log(1/P(bu)) = " + entropypbu );
            System.out.println("\nP(by)*log(1/P(by)) = " + entropypby );
            System.out.println("\nP(b.)*log(1/P(b.)) = " + entropypbdot );
            System.out.println("\nP(b,)*log(1/P(b,)) = " + entropypbcomma );
            System.out.println("\nP(bvacuum)*log(1/P(bvacuum)) = " + entropypbvacuum );
            System.out.println("\nP(ca)*log(1/P(ca)) = " + entropypca );
            System.out.println("\nP(cc)*log(1/P(cc)) = " + entropypcc );
            System.out.println("\nP(cd)*log(1/P(cd)) = " + entropypcd );
            System.out.println("\nP(ce)*log(1/P(ce)) = " + entropypce );
            System.out.println("\nP(ch)*log(1/P(ch)) = " + entropypch );
            System.out.println("\nP(ci)*log(1/P(ci)) = " + entropypci );
            System.out.println("\nP(ck)*log(1/P(ck)) = " + entropypck );
            System.out.println("\nP(cl)*log(1/P(cl)) = " + entropypcl );
            System.out.println("\nP(co)*log(1/P(co)) = " + entropypco );
            System.out.println("\nP(cr)*log(1/P(cr)) = " + entropypcr );
            System.out.println("\nP(cs)*log(1/P(cs)) = " + entropypcs );
            System.out.println("\nP(ct)*log(1/P(ct)) = " + entropypct );
            System.out.println("\nP(cu)*log(1/P(cu)) = " + entropypcu );
            System.out.println("\nP(cv)*log(1/P(cv)) = " + entropypcv );
            System.out.println("\nP(c,)*log(1/P(c,)) = " + entropypccomma );
            System.out.println("\nP(cvacuum)*log(1/P(cvacuum)) = " + entropypcvacuum );
            System.out.println("\nP(da)*log(1/P(da)) = " + entropypda );
            System.out.println("\nP(db)*log(1/P(db)) = " + entropypdb );
            System.out.println("\nP(dc)*log(1/P(dc)) = " + entropypdc );
            System.out.println("\nP(dd)*log(1/P(dd)) = " + entropypdd );
            System.out.println("\nP(de)*log(1/P(de)) = " + entropypde );
            System.out.println("\nP(df)*log(1/P(df)) = " + entropypdf );
            System.out.println("\nP(dg)*log(1/P(dg)) = " + entropypdg );
            System.out.println("\nP(dh)*log(1/P(dh)) = " + entropypdh );
            System.out.println("\nP(di)*log(1/P(di)) = " + entropypdi );
            System.out.println("\nP(dj)*log(1/P(dj)) = " + entropypdj );
            System.out.println("\nP(dk)*log(1/P(dk)) = " + entropypdk );
            System.out.println("\nP(dl)*log(1/P(dl)) = " + entropypdl );
            System.out.println("\nP(dm)*log(1/P(dm)) = " + entropypdm );
            System.out.println("\nP(dn)*log(1/P(dn)) = " + entropypdn );
            System.out.println("\nP(do)*log(1/P(do)) = " + entropypdo );
            System.out.println("\nP(dp)*log(1/P(dp)) = " + entropypdp );
            System.out.println("\nP(dr)*log(1/P(dr)) = " + entropypdr );
            System.out.println("\nP(ds)*log(1/P(ds)) = " + entropypds );
            System.out.println("\nP(dt)*log(1/P(dt)) = " + entropypdt );
            System.out.println("\nP(du)*log(1/P(du)) = " + entropypdu );
            System.out.println("\nP(dv)*log(1/P(dv)) = " + entropypdv );
            System.out.println("\nP(dw)*log(1/P(dw)) = " + entropypdw );
            System.out.println("\nP(dy)*log(1/P(dy)) = " + entropypdy );
            System.out.println("\nP(d.)*log(1/P(d.)) = " + entropypddot );
            System.out.println("\nP(d,)*log(1/P(d,)) = " + entropypdcomma );
            System.out.println("\nP(dvacuum)*log(1/P(dvacuum)) = " + entropypdvacuum ); 
            System.out.println("\nP(ea)*log(1/P(ea)) = " + entropypea );
            System.out.println("\nP(eb)*log(1/P(eb)) = " + entropypeb );
            System.out.println("\nP(ec)*log(1/P(ec)) = " + entropypec );
            System.out.println("\nP(ed)*log(1/P(ed)) = " + entropyped );
            System.out.println("\nP(ee)*log(1/P(ee)) = " + entropypee );
            System.out.println("\nP(ef)*log(1/P(ef)) = " + entropypef );
            System.out.println("\nP(eg)*log(1/P(eg)) = " + entropypeg );
            System.out.println("\nP(eh)*log(1/P(eh)) = " + entropypeh );
            System.out.println("\nP(ei)*log(1/P(ei)) = " + entropypei );
            System.out.println("\nP(ej)*log(1/P(ej)) = " + entropypej );
            System.out.println("\nP(ek)*log(1/P(ek)) = " + entropypek );
            System.out.println("\nP(el)*log(1/P(el)) = " + entropypel );
            System.out.println("\nP(em)*log(1/P(em)) = " + entropypem );
            System.out.println("\nP(en)*log(1/P(en)) = " + entropypen );
            System.out.println("\nP(eo)*log(1/P(eo)) = " + entropypeo );
            System.out.println("\nP(ep)*log(1/P(ep)) = " + entropypep );
            System.out.println("\nP(er)*log(1/P(er)) = " + entropyper );
            System.out.println("\nP(es)*log(1/P(es)) = " + entropypes );
            System.out.println("\nP(et)*log(1/P(et)) = " + entropypet );
            System.out.println("\nP(eu)*log(1/P(eu)) = " + entropypeu );
            System.out.println("\nP(ev)*log(1/P(ev)) = " + entropypev );
            System.out.println("\nP(ex)*log(1/P(ex)) = " + entropypex );
            System.out.println("\nP(ey)*log(1/P(ey)) = " + entropypey );
            System.out.println("\nP(e.)*log(1/P(e.)) = " + entropypedot );
            System.out.println("\nP(e,)*log(1/P(e,)) = " + entropypecomma );
            System.out.println("\nP(evacuum)*log(1/P(evacuum)) = " + entropypevacuum );
            System.out.println("\nP(fa)*log(1/P(fa)) = " + entropypfa );
            System.out.println("\nP(fb)*log(1/P(fb)) = " + entropypfb );
            System.out.println("\nP(fe)*log(1/P(fe)) = " + entropypfe );
            System.out.println("\nP(ff)*log(1/P(ff)) = " + entropypff );
            System.out.println("\nP(fi)*log(1/P(fi)) = " + entropypfi );
            System.out.println("\nP(fj)*log(1/P(fj)) = " + entropypfj );
            System.out.println("\nP(fl)*log(1/P(fl)) = " + entropypfl );
            System.out.println("\nP(fm)*log(1/P(fm)) = " + entropypfm );
            System.out.println("\nP(fn)*log(1/P(fn)) = " + entropypfn );
            System.out.println("\nP(fo)*log(1/P(fo)) = " + entropypfo );
            System.out.println("\nP(fr)*log(1/P(fr)) = " + entropypfr );
            System.out.println("\nP(fs)*log(1/P(fs)) = " + entropypfs );
            System.out.println("\nP(ft)*log(1/P(ft)) = " + entropypft );
            System.out.println("\nP(fu)*log(1/P(fu)) = " + entropypfu );
            System.out.println("\nP(fy)*log(1/P(fy)) = " + entropypfy );
            System.out.println("\nP(f.)*log(1/P(f.)) = " + entropypfdot );
            System.out.println("\nP(f,)*log(1/P(f,)) = " + entropypfcomma );
            System.out.println("\nP(fvacuum)*log(1/P(fvacuum)) = " + entropypfvacuum );
            System.out.println("\nP(ga)*log(1/P(ga)) = " + entropypga );
            System.out.println("\nP(gb)*log(1/P(gb)) = " + entropypgb );
            System.out.println("\nP(gd)*log(1/P(gd)) = " + entropypgd );
            System.out.println("\nP(ge)*log(1/P(ge)) = " + entropypge );
            System.out.println("\nP(gf)*log(1/P(gf)) = " + entropypgf );
            System.out.println("\nP(gg)*log(1/P(gg)) = " + entropypgg );
            System.out.println("\nP(gh)*log(1/P(gh)) = " + entropypgh );
            System.out.println("\nP(gi)*log(1/P(gi)) = " + entropypgi );
            System.out.println("\nP(gj)*log(1/P(gj)) = " + entropypgj );
            System.out.println("\nP(gk)*log(1/P(gk)) = " + entropypgk );
            System.out.println("\nP(gl)*log(1/P(gl)) = " + entropypgl );
            System.out.println("\nP(gm)*log(1/P(gm)) = " + entropypgm );
            System.out.println("\nP(gn)*log(1/P(gn)) = " + entropypgn );
            System.out.println("\nP(go)*log(1/P(go)) = " + entropypgo );
            System.out.println("\nP(gp)*log(1/P(gp)) = " + entropypgp );
            System.out.println("\nP(gr)*log(1/P(gr)) = " + entropypgr );
            System.out.println("\nP(gs)*log(1/P(gs)) = " + entropypgs );
            System.out.println("\nP(gt)*log(1/P(gt)) = " + entropypgt );
            System.out.println("\nP(gu)*log(1/P(gu)) = " + entropypgu );
            System.out.println("\nP(gv)*log(1/P(gv)) = " + entropypgv );
            System.out.println("\nP(gy)*log(1/P(gy)) = " + entropypgy );
            System.out.println("\nP(g.)*log(1/P(g.)) = " + entropypgdot );
            System.out.println("\nP(g,)*log(1/P(g,)) = " + entropypgcomma );
            System.out.println("\nP(gvacuum)*log(1/P(gvacuum)) = " + entropypgvacuum );
            System.out.println("\nP(ha)*log(1/P(ha)) = " + entropypha );
            System.out.println("\nP(hb)*log(1/P(hb)) = " + entropyphb );
            System.out.println("\nP(hc)*log(1/P(hc)) = " + entropyphc );
            System.out.println("\nP(hd)*log(1/P(hd)) = " + entropyphd );
            System.out.println("\nP(he)*log(1/P(he)) = " + entropyphe );
            System.out.println("\nP(hi)*log(1/P(hi)) = " + entropyphi );
            System.out.println("\nP(hj)*log(1/P(hj)) = " + entropyphj );
            System.out.println("\nP(hl)*log(1/P(hl)) = " + entropyphl );
            System.out.println("\nP(hn)*log(1/P(hn)) = " + entropyphn );
            System.out.println("\nP(ho)*log(1/P(ho)) = " + entropypho );
            System.out.println("\nP(hr)*log(1/P(hr)) = " + entropyphr );
            System.out.println("\nP(ht)*log(1/P(ht)) = " + entropypht );
            System.out.println("\nP(hu)*log(1/P(hu)) = " + entropyphu );
            System.out.println("\nP(hv)*log(1/P(hv)) = " + entropyphv );
            System.out.println("\nP(hy)*log(1/P(hy)) = " + entropyphy );
            System.out.println("\nP(h.)*log(1/P(h.)) = " + entropyphdot );
            System.out.println("\nP(h,)*log(1/P(h,)) = " + entropyphcomma );
            System.out.println("\nP(hvacuum)*log(1/P(hvacuum)) = " + entropyphvacuum );
            System.out.println("\nP(ia)*log(1/P(ia)) = " + entropypia );
            System.out.println("\nP(ib)*log(1/P(ib)) = " + entropypib );
            System.out.println("\nP(ic)*log(1/P(ic)) = " + entropypic );
            System.out.println("\nP(id)*log(1/P(id)) = " + entropypid );
            System.out.println("\nP(ie)*log(1/P(ie)) = " + entropypie );
            System.out.println("\nP(if)*log(1/P(if)) = " + entropypif );
            System.out.println("\nP(ig)*log(1/P(ig)) = " + entropypig );
            System.out.println("\nP(ih)*log(1/P(ih)) = " + entropypih );
            System.out.println("\nP(ii)*log(1/P(ii)) = " + entropypii );
            System.out.println("\nP(ik)*log(1/P(ik)) = " + entropypik );
            System.out.println("\nP(il)*log(1/P(il)) = " + entropypil );
            System.out.println("\nP(im)*log(1/P(im)) = " + entropypim );
            System.out.println("\nP(in)*log(1/P(in)) = " + entropypin );
            System.out.println("\nP(io)*log(1/P(io)) = " + entropypio );
            System.out.println("\nP(ip)*log(1/P(ip)) = " + entropypip );
            System.out.println("\nP(iq)*log(1/P(iq)) = " + entropypiq );
            System.out.println("\nP(ir)*log(1/P(ir)) = " + entropypir );
            System.out.println("\nP(is)*log(1/P(is)) = " + entropypis );
            System.out.println("\nP(it)*log(1/P(it)) = " + entropypit );
            System.out.println("\nP(iu)*log(1/P(iu)) = " + entropypiu );
            System.out.println("\nP(iv)*log(1/P(iv)) = " + entropypiv );
            System.out.println("\nP(iz)*log(1/P(iz)) = " + entropypiz );
            System.out.println("\nP(i.)*log(1/P(i.)) = " + entropypidot );
            System.out.println("\nP(i,)*log(1/P(i,)) = " + entropypicomma );
            System.out.println("\nP(ivacuum)*log(1/P(ivacuum)) = " + entropypivacuum );
            System.out.println("\nP(ja)*log(1/P(ja)) = " + entropypja );
            System.out.println("\nP(je)*log(1/P(je)) = " + entropypje );
            System.out.println("\nP(ji)*log(1/P(ji)) = " + entropypji );
            System.out.println("\nP(jo)*log(1/P(jo)) = " + entropypjo );
            System.out.println("\nP(jr)*log(1/P(jr)) = " + entropypjr );
            System.out.println("\nP(ju)*log(1/P(ju)) = " + entropypju );
            System.out.println("\nP(jy)*log(1/P(jy)) = " + entropypjy );
            System.out.println("\nP(j.)*log(1/P(j.)) = " + entropypjdot );
            System.out.println("\nP(j,)*log(1/P(j,)) = " + entropypjcomma );
            System.out.println("\nP(jvacuum)*log(1/P(jvacuum)) = " + entropypjvacuum );
            System.out.println("\nP(ka)*log(1/P(ka)) = " + entropypka );
            System.out.println("\nP(kb)*log(1/P(kb)) = " + entropypkb );
            System.out.println("\nP(kd)*log(1/P(kd)) = " + entropypkd );
            System.out.println("\nP(ke)*log(1/P(ke)) = " + entropypke );
            System.out.println("\nP(kf)*log(1/P(kf)) = " + entropypkf );
            System.out.println("\nP(kg)*log(1/P(kg)) = " + entropypkg );
            System.out.println("\nP(kh)*log(1/P(kh)) = " + entropypkh );
            System.out.println("\nP(ki)*log(1/P(ki)) = " + entropypki );
            System.out.println("\nP(kj)*log(1/P(kj)) = " + entropypkj );
            System.out.println("\nP(kk)*log(1/P(kk)) = " + entropypkk );
            System.out.println("\nP(kl)*log(1/P(kl)) = " + entropypkl );
            System.out.println("\nP(km)*log(1/P(km)) = " + entropypkm );
            System.out.println("\nP(kn)*log(1/P(kn)) = " + entropypkn );
            System.out.println("\nP(ko)*log(1/P(ko)) = " + entropypko );
            System.out.println("\nP(kp)*log(1/P(kp)) = " + entropypkp );
            System.out.println("\nP(kr)*log(1/P(kr)) = " + entropypkr );
            System.out.println("\nP(ks)*log(1/P(ks)) = " + entropypks );
            System.out.println("\nP(kt)*log(1/P(kt)) = " + entropypkt );
            System.out.println("\nP(ku)*log(1/P(ku)) = " + entropypku );
            System.out.println("\nP(kv)*log(1/P(kv)) = " + entropypkv );
            System.out.println("\nP(ky)*log(1/P(ky)) = " + entropypky );
            System.out.println("\nP(k.)*log(1/P(k.)) = " + entropypkdot );
            System.out.println("\nP(k,)*log(1/P(k,)) = " + entropypkcomma );
            System.out.println("\nP(avacuum)*log(1/P(kvacuum)) = " + entropypkvacuum );
            System.out.println("\nP(la)*log(1/P(la)) = " + entropypla );
            System.out.println("\nP(lb)*log(1/P(lb)) = " + entropyplb );
            System.out.println("\nP(lc)*log(1/P(lc)) = " + entropyplc );
            System.out.println("\nP(ld)*log(1/P(ld)) = " + entropypld );
            System.out.println("\nP(le)*log(1/P(le)) = " + entropyple );
            System.out.println("\nP(lf)*log(1/P(lf)) = " + entropyplf );
            System.out.println("\nP(lg)*log(1/P(lg)) = " + entropyplg );
            System.out.println("\nP(lh)*log(1/P(lh)) = " + entropyplh );
            System.out.println("\nP(li)*log(1/P(li)) = " + entropypli );
            System.out.println("\nP(lj)*log(1/P(lj)) = " + entropyplj );
            System.out.println("\nP(lk)*log(1/P(lk)) = " + entropyplk );
            System.out.println("\nP(ll)*log(1/P(ll)) = " + entropypll );
            System.out.println("\nP(lm)*log(1/P(lm)) = " + entropyplm );
            System.out.println("\nP(ln)*log(1/P(ln)) = " + entropypln );
            System.out.println("\nP(lo)*log(1/P(lo)) = " + entropyplo );
            System.out.println("\nP(lp)*log(1/P(lp)) = " + entropyplp );
            System.out.println("\nP(lr)*log(1/P(lr)) = " + entropyplr );
            System.out.println("\nP(ls)*log(1/P(ls)) = " + entropypls );
            System.out.println("\nP(lt)*log(1/P(lt)) = " + entropyplt );
            System.out.println("\nP(lu)*log(1/P(lu)) = " + entropyplu );
            System.out.println("\nP(lv)*log(1/P(lv)) = " + entropyplv );
            System.out.println("\nP(lw)*log(1/P(lw)) = " + entropyplw );
            System.out.println("\nP(ly)*log(1/P(ly)) = " + entropyply );
            System.out.println("\nP(lz)*log(1/P(lz)) = " + entropyplz );
            System.out.println("\nP(l.)*log(1/P(l.)) = " + entropypldot );
            System.out.println("\nP(l,)*log(1/P(l,)) = " + entropyplcomma );
            System.out.println("\nP(lvacuum)*log(1/P(lvacuum)) = " + entropyplvacuum );
            System.out.println("\nP(ma)*log(1/P(ma)) = " + entropypma );
            System.out.println("\nP(mb)*log(1/P(mb)) = " + entropypmb );
            System.out.println("\nP(md)*log(1/P(md)) = " + entropypmd );
            System.out.println("\nP(me)*log(1/P(me)) = " + entropypme );
            System.out.println("\nP(mf)*log(1/P(mf)) = " + entropypmf );
            System.out.println("\nP(mg)*log(1/P(mg)) = " + entropypmg );
            System.out.println("\nP(mh)*log(1/P(mh)) = " + entropypmh );
            System.out.println("\nP(mi)*log(1/P(mi)) = " + entropypmi );
            System.out.println("\nP(mk)*log(1/P(mk)) = " + entropypmk );
            System.out.println("\nP(ml)*log(1/P(ml)) = " + entropypml );
            System.out.println("\nP(mm)*log(1/P(mm)) = " + entropypmm );
            System.out.println("\nP(mn)*log(1/P(mn)) = " + entropypmn );
            System.out.println("\nP(mo)*log(1/P(mo)) = " + entropypmo );
            System.out.println("\nP(mp)*log(1/P(mp)) = " + entropypmp );
            System.out.println("\nP(mr)*log(1/P(mr)) = " + entropypmr );
            System.out.println("\nP(ms)*log(1/P(ms)) = " + entropypms );
            System.out.println("\nP(mt)*log(1/P(mt)) = " + entropypmt );
            System.out.println("\nP(mu)*log(1/P(mu)) = " + entropypmu );
            System.out.println("\nP(mv)*log(1/P(mv)) = " + entropypmv );
            System.out.println("\nP(mw)*log(1/P(mw)) = " + entropypmw );
            System.out.println("\nP(my)*log(1/P(my)) = " + entropypmy );
            System.out.println("\nP(m.)*log(1/P(m.)) = " + entropypmdot );
            System.out.println("\nP(m,)*log(1/P(m,)) = " + entropypmcomma );
            System.out.println("\nP(mvacuum)*log(1/P(mvacuum)) = " + entropypmvacuum );
            System.out.println("\nP(na)*log(1/P(na)) = " + entropypna );
            System.out.println("\nP(nb)*log(1/P(nb)) = " + entropypnb );
            System.out.println("\nP(nc)*log(1/P(nc)) = " + entropypnc );
            System.out.println("\nP(nd)*log(1/P(nd)) = " + entropypnd );
            System.out.println("\nP(ne)*log(1/P(ne)) = " + entropypne );
            System.out.println("\nP(nf)*log(1/P(nf)) = " + entropypnf );
            System.out.println("\nP(ng)*log(1/P(ng)) = " + entropypng );
            System.out.println("\nP(nh)*log(1/P(nh)) = " + entropypnh );
            System.out.println("\nP(ni)*log(1/P(ni)) = " + entropypni );
            System.out.println("\nP(nj)*log(1/P(nj)) = " + entropypnj );
            System.out.println("\nP(nk)*log(1/P(nk)) = " + entropypnk );
            System.out.println("\nP(nl)*log(1/P(nl)) = " + entropypnl );
            System.out.println("\nP(nm)*log(1/P(nm)) = " + entropypnm );
            System.out.println("\nP(nn)*log(1/P(nn)) = " + entropypnn );
            System.out.println("\nP(no)*log(1/P(no)) = " + entropypno );
            System.out.println("\nP(np)*log(1/P(np)) = " + entropypnp );
            System.out.println("\nP(nr)*log(1/P(nr)) = " + entropypnr );
            System.out.println("\nP(ns)*log(1/P(ns)) = " + entropypns );
            System.out.println("\nP(nt)*log(1/P(nt)) = " + entropypnt );
            System.out.println("\nP(nu)*log(1/P(nu)) = " + entropypnu );
            System.out.println("\nP(nv)*log(1/P(nv)) = " + entropypnv );
            System.out.println("\nP(nx)*log(1/P(nx)) = " + entropypnx );
            System.out.println("\nP(ny)*log(1/P(ny)) = " + entropypny );
            System.out.println("\nP(nz)*log(1/P(nz)) = " + entropypnz );
            System.out.println("\nP(n.)*log(1/P(n.)) = " + entropypndot );
            System.out.println("\nP(n,)*log(1/P(n,)) = " + entropypncomma );
            System.out.println("\nP(nvacuum)*log(1/P(nvacuum)) = " + entropypnvacuum );
            System.out.println("\nP(oa)*log(1/P(oa)) = " + entropypoa );
            System.out.println("\nP(ob)*log(1/P(ob)) = " + entropypob );
            System.out.println("\nP(oc)*log(1/P(oc)) = " + entropypoc );
            System.out.println("\nP(od)*log(1/P(od)) = " + entropypod );
            System.out.println("\nP(oe)*log(1/P(oe)) = " + entropypoe );
            System.out.println("\nP(of)*log(1/P(of)) = " + entropypof );
            System.out.println("\nP(og)*log(1/P(og)) = " + entropypog );
            System.out.println("\nP(oh)*log(1/P(oh)) = " + entropypoh );
            System.out.println("\nP(oi)*log(1/P(oi)) = " + entropypoi );
            System.out.println("\nP(oj)*log(1/P(oj)) = " + entropypoj );
            System.out.println("\nP(ok)*log(1/P(ok)) = " + entropypok );
            System.out.println("\nP(ol)*log(1/P(ol)) = " + entropypol );
            System.out.println("\nP(om)*log(1/P(om)) = " + entropypom );
            System.out.println("\nP(on)*log(1/P(on)) = " + entropypon );
            System.out.println("\nP(oo)*log(1/P(oo)) = " + entropypoo );
            System.out.println("\nP(op)*log(1/P(op)) = " + entropypop );
            System.out.println("\nP(or)*log(1/P(or)) = " + entropypor );
            System.out.println("\nP(os)*log(1/P(os)) = " + entropypos );
            System.out.println("\nP(ot)*log(1/P(ot)) = " + entropypot );
            System.out.println("\nP(ou)*log(1/P(ou)) = " + entropypou );
            System.out.println("\nP(ov)*log(1/P(ov)) = " + entropypov );
            System.out.println("\nP(ow)*log(1/P(ow)) = " + entropypow );
            System.out.println("\nP(ox)*log(1/P(ox)) = " + entropypox );
            System.out.println("\nP(oy)*log(1/P(oy)) = " + entropypoy );
            System.out.println("\nP(o.)*log(1/P(o.)) = " + entropypodot );
            System.out.println("\nP(o,)*log(1/P(o,)) = " + entropypocomma );
            System.out.println("\nP(ovacuum)*log(1/P(ovacuum)) = " + entropypovacuum );
            System.out.println("\nP(pa)*log(1/P(pa)) = " + entropyppa );
            System.out.println("\nP(pb)*log(1/P(pb)) = " + entropyppb );
            System.out.println("\nP(pc)*log(1/P(pc)) = " + entropyppc );
            System.out.println("\nP(pd)*log(1/P(pd)) = " + entropyppd );
            System.out.println("\nP(pe)*log(1/P(pe)) = " + entropyppe );
            System.out.println("\nP(pf)*log(1/P(pf)) = " + entropyppf );
            System.out.println("\nP(pg)*log(1/P(pg)) = " + entropyppg );
            System.out.println("\nP(ph)*log(1/P(ph)) = " + entropypph );
            System.out.println("\nP(pi)*log(1/P(pi)) = " + entropyppi );
            System.out.println("\nP(pj)*log(1/P(pj)) = " + entropyppj );
            System.out.println("\nP(pk)*log(1/P(pk)) = " + entropyppk );
            System.out.println("\nP(pl)*log(1/P(pl)) = " + entropyppl );
            System.out.println("\nP(pm)*log(1/P(pm)) = " + entropyppm );
            System.out.println("\nP(pn)*log(1/P(pn)) = " + entropyppn );
            System.out.println("\nP(po)*log(1/P(po)) = " + entropyppo );
            System.out.println("\nP(pp)*log(1/P(pp)) = " + entropyppp );
            System.out.println("\nP(pr)*log(1/P(pr)) = " + entropyppr );
            System.out.println("\nP(ps)*log(1/P(ps)) = " + entropypps );
            System.out.println("\nP(pt)*log(1/P(pt)) = " + entropyppt );
            System.out.println("\nP(pu)*log(1/P(pu)) = " + entropyppu );
            System.out.println("\nP(pv)*log(1/P(pv)) = " + entropyppv );
            System.out.println("\nP(py)*log(1/P(py)) = " + entropyppy );
            System.out.println("\nP(p.)*log(1/P(p.)) = " + entropyppdot );
            System.out.println("\nP(p,)*log(1/P(p,)) = " + entropyppcomma );
            System.out.println("\nP(pvacuum)*log(1/P(pvacuum)) = " + entropyppvacuum );
            System.out.println("\nP(qu)*log(1/P(qu)) = " + entropypqu );
            System.out.println("\nP(qvacuum)*log(1/P(qvacuum)) = " + entropypqvacuum );
            System.out.println("\nP(ra)*log(1/P(ra)) = " + entropypra );
            System.out.println("\nP(rb)*log(1/P(rb)) = " + entropyprb );
            System.out.println("\nP(rc)*log(1/P(rc)) = " + entropyprc );
            System.out.println("\nP(rd)*log(1/P(rd)) = " + entropyprd );
            System.out.println("\nP(re)*log(1/P(re)) = " + entropypre );
            System.out.println("\nP(rf)*log(1/P(rf)) = " + entropyprf );
            System.out.println("\nP(rg)*log(1/P(rg)) = " + entropyprg );
            System.out.println("\nP(rh)*log(1/P(rh)) = " + entropyprh );
            System.out.println("\nP(ri)*log(1/P(ri)) = " + entropypri );
            System.out.println("\nP(rj)*log(1/P(rj)) = " + entropyprj );
            System.out.println("\nP(rk)*log(1/P(rk)) = " + entropyprk );
            System.out.println("\nP(rl)*log(1/P(rl)) = " + entropyprl );
            System.out.println("\nP(rm)*log(1/P(rm)) = " + entropyprm );
            System.out.println("\nP(rn)*log(1/P(rn)) = " + entropyprn );
            System.out.println("\nP(ro)*log(1/P(ro)) = " + entropypro );
            System.out.println("\nP(rp)*log(1/P(rp)) = " + entropyprp );
            System.out.println("\nP(rr)*log(1/P(rr)) = " + entropyprr );
            System.out.println("\nP(rs)*log(1/P(rs)) = " + entropyprs );
            System.out.println("\nP(rt)*log(1/P(rt)) = " + entropyprt );
            System.out.println("\nP(ru)*log(1/P(ru)) = " + entropypru );
            System.out.println("\nP(rv)*log(1/P(rv)) = " + entropyprv );
            System.out.println("\nP(rw)*log(1/P(rw)) = " + entropyprw );
            System.out.println("\nP(ry)*log(1/P(ry)) = " + entropypry );
            System.out.println("\nP(r.)*log(1/P(r.)) = " + entropyprdot );
            System.out.println("\nP(r,)*log(1/P(r,)) = " + entropyprcomma );
            System.out.println("\nP(rvacuum)*log(1/P(rvacuum)) = " + entropyprvacuum );
            System.out.println("\nP(sa)*log(1/P(sa)) = " + entropypsa );
            System.out.println("\nP(sb)*log(1/P(sb)) = " + entropypsb );
            System.out.println("\nP(sc)*log(1/P(sc)) = " + entropypsc );
            System.out.println("\nP(sd)*log(1/P(sd)) = " + entropypsd );
            System.out.println("\nP(se)*log(1/P(se)) = " + entropypse );
            System.out.println("\nP(sf)*log(1/P(sf)) = " + entropypsf );
            System.out.println("\nP(sg)*log(1/P(sg)) = " + entropypsg );
            System.out.println("\nP(sh)*log(1/P(sh)) = " + entropypsh );
            System.out.println("\nP(si)*log(1/P(si)) = " + entropypsi );
            System.out.println("\nP(sj)*log(1/P(sj)) = " + entropypsj );
            System.out.println("\nP(sk)*log(1/P(sk)) = " + entropypsk );
            System.out.println("\nP(sl)*log(1/P(sl)) = " + entropypsl );
            System.out.println("\nP(sm)*log(1/P(sm)) = " + entropypsm );
            System.out.println("\nP(sn)*log(1/P(sn)) = " + entropypsn );
            System.out.println("\nP(so)*log(1/P(so)) = " + entropypso );
            System.out.println("\nP(sp)*log(1/P(sp)) = " + entropypsp );
            System.out.println("\nP(sr)*log(1/P(sr)) = " + entropypsr );
            System.out.println("\nP(ss)*log(1/P(ss)) = " + entropypss );
            System.out.println("\nP(st)*log(1/P(st)) = " + entropypst );
            System.out.println("\nP(su)*log(1/P(su)) = " + entropypsu );
            System.out.println("\nP(sv)*log(1/P(sv)) = " + entropypsv );
            System.out.println("\nP(sw)*log(1/P(sw)) = " + entropypsw );
            System.out.println("\nP(sy)*log(1/P(sy)) = " + entropypsy );
            System.out.println("\nP(s.)*log(1/P(s.)) = " + entropypsdot );
            System.out.println("\nP(s,)*log(1/P(s,)) = " + entropypscomma );
            System.out.println("\nP(svacuum)*log(1/P(svacuum)) = " + entropypsvacuum );
            System.out.println("\nP(ta)*log(1/P(ta)) = " + entropypta );
            System.out.println("\nP(tb)*log(1/P(tb)) = " + entropyptb );
            System.out.println("\nP(tc)*log(1/P(tc)) = " + entropyptc );
            System.out.println("\nP(td)*log(1/P(td)) = " + entropyptd );
            System.out.println("\nP(te)*log(1/P(te)) = " + entropypte );
            System.out.println("\nP(tf)*log(1/P(tf)) = " + entropyptf );
            System.out.println("\nP(tg)*log(1/P(tg)) = " + entropyptg );
            System.out.println("\nP(th)*log(1/P(th)) = " + entropypth );
            System.out.println("\nP(ti)*log(1/P(ti)) = " + entropypti );
            System.out.println("\nP(tj)*log(1/P(tj)) = " + entropyptj );
            System.out.println("\nP(tk)*log(1/P(tk)) = " + entropyptk );
            System.out.println("\nP(tl)*log(1/P(tl)) = " + entropyptl );
            System.out.println("\nP(tm)*log(1/P(tm)) = " + entropyptm );
            System.out.println("\nP(tn)*log(1/P(tn)) = " + entropyptn );
            System.out.println("\nP(to)*log(1/P(to)) = " + entropypto );
            System.out.println("\nP(tp)*log(1/P(tp)) = " + entropyptp );
            System.out.println("\nP(tr)*log(1/P(tr)) = " + entropyptr );
            System.out.println("\nP(ts)*log(1/P(ts)) = " + entropypts );
            System.out.println("\nP(tt)*log(1/P(tt)) = " + entropyptt );
            System.out.println("\nP(tu)*log(1/P(tu)) = " + entropyptu );
            System.out.println("\nP(tv)*log(1/P(tv)) = " + entropyptv );
            System.out.println("\nP(tw)*log(1/P(tw)) = " + entropyptw );
            System.out.println("\nP(ty)*log(1/P(ty)) = " + entropypty );
            System.out.println("\nP(tz)*log(1/P(tz)) = " + entropyptz );
            System.out.println("\nP(t.)*log(1/P(t.)) = " + entropyptdot );
            System.out.println("\nP(t,)*log(1/P(t,)) = " + entropyptcomma );
            System.out.println("\nP(tvacuum)*log(1/P(tvacuum)) = " + entropyptvacuum );
            System.out.println("\nP(ua)*log(1/P(ua)) = " + entropypua );
            System.out.println("\nP(ub)*log(1/P(ub)) = " + entropypub );
            System.out.println("\nP(uc)*log(1/P(uc)) = " + entropypuc );
            System.out.println("\nP(ud)*log(1/P(ud)) = " + entropypud );
            System.out.println("\nP(ue)*log(1/P(ue)) = " + entropypue );
            System.out.println("\nP(uf)*log(1/P(uf)) = " + entropypuf );
            System.out.println("\nP(ug)*log(1/P(ug)) = " + entropypug );
            System.out.println("\nP(uh)*log(1/P(uh)) = " + entropypuh );
            System.out.println("\nP(ui)*log(1/P(ui)) = " + entropypui );
            System.out.println("\nP(uj)*log(1/P(uj)) = " + entropypuj );
            System.out.println("\nP(uk)*log(1/P(uk)) = " + entropypuk );
            System.out.println("\nP(ul)*log(1/P(ul)) = " + entropypul );
            System.out.println("\nP(um)*log(1/P(um)) = " + entropypum );
            System.out.println("\nP(un)*log(1/P(un)) = " + entropypun );
            System.out.println("\nP(uo)*log(1/P(uo)) = " + entropypuo );
            System.out.println("\nP(up)*log(1/P(up)) = " + entropypup );
            System.out.println("\nP(ur)*log(1/P(ur)) = " + entropypur );
            System.out.println("\nP(us)*log(1/P(us)) = " + entropypus );
            System.out.println("\nP(ut)*log(1/P(ut)) = " + entropyput );
            System.out.println("\nP(uu)*log(1/P(uu)) = " + entropypuu );
            System.out.println("\nP(uv)*log(1/P(uv)) = " + entropypuv );
            System.out.println("\nP(uz)*log(1/P(uz)) = " + entropypuz );
            System.out.println("\nP(u.)*log(1/P(u.)) = " + entropypudot );
            System.out.println("\nP(u,)*log(1/P(u,)) = " + entropypucomma );
            System.out.println("\nP(uvacuum)*log(1/P(uvacuum)) = " + entropypuvacuum );
            System.out.println("\nP(va)*log(1/P(va)) = " + entropypva );
            System.out.println("\nP(vb)*log(1/P(vb)) = " + entropypvb );
            System.out.println("\nP(vd)*log(1/P(vd)) = " + entropypvd );
            System.out.println("\nP(ve)*log(1/P(ve)) = " + entropypve );
            System.out.println("\nP(vf)*log(1/P(vf)) = " + entropypvf );
            System.out.println("\nP(vg)*log(1/P(vg)) = " + entropypvg );
            System.out.println("\nP(vh)*log(1/P(vh)) = " + entropypvh );
            System.out.println("\nP(vi)*log(1/P(vi)) = " + entropypvi );
            System.out.println("\nP(vj)*log(1/P(vj)) = " + entropypvj );
            System.out.println("\nP(vk)*log(1/P(vk)) = " + entropypvk );
            System.out.println("\nP(vl)*log(1/P(vl)) = " + entropypvl );
            System.out.println("\nP(vm)*log(1/P(vm)) = " + entropypvm );
            System.out.println("\nP(vn)*log(1/P(vn)) = " + entropypvn );
            System.out.println("\nP(vo)*log(1/P(vo)) = " + entropypvo );
            System.out.println("\nP(vp)*log(1/P(vp)) = " + entropypvp );
            System.out.println("\nP(vr)*log(1/P(vr)) = " + entropypvr );
            System.out.println("\nP(vs)*log(1/P(vs)) = " + entropypvs );
            System.out.println("\nP(vt)*log(1/P(vt)) = " + entropypvt );
            System.out.println("\nP(vu)*log(1/P(vu)) = " + entropypvu );
            System.out.println("\nP(vv)*log(1/P(vv)) = " + entropypvv );
            System.out.println("\nP(v.)*log(1/P(v.)) = " + entropypvdot );
            System.out.println("\nP(v,)*log(1/P(v,)) = " + entropypvcomma );
            System.out.println("\nP(vvacuum)*log(1/P(vvacuum)) = " + entropypvvacuum );
            System.out.println("\nP(wa)*log(1/P(wa)) = " + entropypwa );
            System.out.println("\nP(wb)*log(1/P(wb)) = " + entropypwb );
            System.out.println("\nP(wd)*log(1/P(wd)) = " + entropypwd );
            System.out.println("\nP(we)*log(1/P(we)) = " + entropypwe );
            System.out.println("\nP(wh)*log(1/P(wh)) = " + entropypwh );
            System.out.println("\nP(wi)*log(1/P(wi)) = " + entropypwi );
            System.out.println("\nP(wl)*log(1/P(wl)) = " + entropypwl );
            System.out.println("\nP(wn)*log(1/P(wn)) = " + entropypwn );
            System.out.println("\nP(wo)*log(1/P(wo)) = " + entropypwo );
            System.out.println("\nP(ww)*log(1/P(ww)) = " + entropypww );
            System.out.println("\nP(w.)*log(1/P(w.)) = " + entropypwdot );
            System.out.println("\nP(wvacuum)*log(1/P(wvacuum)) = " + entropypwvacuum );
            System.out.println("\nP(xa)*log(1/P(xa)) = " + entropypxa );
            System.out.println("\nP(xe)*log(1/P(xe)) = " + entropypxe );
            System.out.println("\nP(xi)*log(1/P(xi)) = " + entropypxi );
            System.out.println("\nP(xl)*log(1/P(xl)) = " + entropypxl );
            System.out.println("\nP(xy)*log(1/P(xy)) = " + entropypxy );
            System.out.println("\nP(x.)*log(1/P(x.)) = " + entropypxdot );
            System.out.println("\nP(x,)*log(1/P(x,)) = " + entropypxcomma );
            System.out.println("\nP(xvacuum)*log(1/P(xvacuum)) = " + entropypxvacuum );
            System.out.println("\nP(ya)*log(1/P(ya)) = " + entropypya );
            System.out.println("\nP(yb)*log(1/P(yb)) = " + entropypyb );
            System.out.println("\nP(yc)*log(1/P(yc)) = " + entropypyc );
            System.out.println("\nP(yd)*log(1/P(yd)) = " + entropypyd );
            System.out.println("\nP(ye)*log(1/P(ye)) = " + entropypye );
            System.out.println("\nP(yf)*log(1/P(yf)) = " + entropypyf );
            System.out.println("\nP(yg)*log(1/P(yg)) = " + entropypyg );
            System.out.println("\nP(yh)*log(1/P(yh)) = " + entropypyh );
            System.out.println("\nP(yj)*log(1/P(yj)) = " + entropypyj );
            System.out.println("\nP(yk)*log(1/P(yk)) = " + entropypyk );
            System.out.println("\nP(yl)*log(1/P(yl)) = " + entropypyl );
            System.out.println("\nP(ym)*log(1/P(ym)) = " + entropypym );
            System.out.println("\nP(yn)*log(1/P(yn)) = " + entropypyn );
            System.out.println("\nP(yo)*log(1/P(yo)) = " + entropypyo );
            System.out.println("\nP(yp)*log(1/P(yp)) = " + entropypyp );
            System.out.println("\nP(yr)*log(1/P(yr)) = " + entropypyr );
            System.out.println("\nP(ys)*log(1/P(ys)) = " + entropypys );
            System.out.println("\nP(yt)*log(1/P(yt)) = " + entropypyt );
            System.out.println("\nP(yu)*log(1/P(yu)) = " + entropypyu );
            System.out.println("\nP(yv)*log(1/P(yv)) = " + entropypyv );
            System.out.println("\nP(y.)*log(1/P(y.)) = " + entropypydot );
            System.out.println("\nP(y,)*log(1/P(y,)) = " + entropypycomma );
            System.out.println("\nP(yvacuum)*log(1/P(yvacuum)) = " + entropypyvacuum );
            System.out.println("\nP(za)*log(1/P(za)) = " + entropypza );
            System.out.println("\nP(ze)*log(1/P(ze)) = " + entropypze );
            System.out.println("\nP(zh)*log(1/P(zh)) = " + entropypzh );
            System.out.println("\nP(zi)*log(1/P(zi)) = " + entropypzi );
            System.out.println("\nP(zo)*log(1/P(zo)) = " + entropypzo );
            System.out.println("\nP(zy)*log(1/P(zy)) = " + entropypzy );
            System.out.println("\nP(zz)*log(1/P(zz)) = " + entropypzz );
            System.out.println("\nP(zvacuum)*log(1/P(zvacuum)) = " + entropypzvacuum );
            System.out.println("\nP(.a)*log(1/P(.a)) = " + entropypdota );
            System.out.println("\nP(.j)*log(1/P(.j)) = " + entropypdotj );
            System.out.println("\nP(.n)*log(1/P(.n)) = " + entropypdotn );
            System.out.println("\nP(.,)*log(1/P(.,)) = " + entropypdotcomma );
            System.out.println("\nP(.vacuum)*log(1/P(.vacuum)) = " + entropypdotvacuum );
            System.out.println("\nP(,vacuum)*log(1/P(,vacuum)) = " + entropypcommavacuum );
            System.out.println("\nP(vacuuma)*log(1/P(vacuuma)) = " + entropypvacuuma );
            System.out.println("\nP(vacuumb)*log(1/P(vacuumb)) = " + entropypvacuumb  );
            System.out.println("\nP(vacuumc)*log(1/P(vacuumc)) = " + entropypvacuumc  );
            System.out.println("\nP(vacuumd)*log(1/P(vacuumd)) = " + entropypvacuumd  );
            System.out.println("\nP(vacuume)*log(1/P(vacuume)) = " + entropypvacuume  );
            System.out.println("\nP(vacuumf)*log(1/P(vacuumf)) = " + entropypvacuumf  );
            System.out.println("\nP(vacuumg)*log(1/P(vacuumg)) = " + entropypvacuumg  );
            System.out.println("\nP(vacuumh)*log(1/P(vacuumh)) = " + entropypvacuumh  );
            System.out.println("\nP(vacuumi)*log(1/P(vacuumi)) = " + entropypvacuumi  );
            System.out.println("\nP(vacuumj)*log(1/P(vacuumj)) = " + entropypvacuumj  );
            System.out.println("\nP(vacuumk)*log(1/P(vacuumk)) = " + entropypvacuumk  );
            System.out.println("\nP(vacuuml)*log(1/P(vacuuml)) = " + entropypvacuuml  );
            System.out.println("\nP(vacuumm)*log(1/P(vacuumm)) = " + entropypvacuumm  );
            System.out.println("\nP(vacuumn)*log(1/P(vacuumn)) = " + entropypvacuumn  );
            System.out.println("\nP(vacuumo)*log(1/P(vacuumo)) = " + entropypvacuumo  );
            System.out.println("\nP(vacuump)*log(1/P(vacuump)) = " + entropypvacuump  );
            System.out.println("\nP(vacuumq)*log(1/P(vacuumq)) = " + entropypvacuumq  );
            System.out.println("\nP(vacuumr)*log(1/P(vacuumr)) = " + entropypvacuumr  );
            System.out.println("\nP(vacuums)*log(1/P(vacuums)) = " + entropypvacuums  );
            System.out.println("\nP(vacuumt)*log(1/P(vacuumt)) = " + entropypvacuumt  );
            System.out.println("\nP(vacuumu)*log(1/P(vacuumu)) = " + entropypvacuumu  );
            System.out.println("\nP(vacuumv)*log(1/P(vacuumv)) = " + entropypvacuumv  );
            System.out.println("\nP(vacuumw)*log(1/P(vacuumw)) = " + entropypvacuumw  );
            System.out.println("\nP(vacuumx)*log(1/P(vacuumx)) = " + entropypvacuumx  );
            System.out.println("\nP(vacuumy)*log(1/P(vacuumy)) = " + entropypvacuumy  );
            System.out.println("\nP(vacuumz)*log(1/P(vacuumz)) = " + entropypvacuumz  );
            System.out.println("\nP(vacuum.)*log(1/P(vacuum.)) = " + entropypvacuumdot  );
            System.out.println("\nP(vacuum,)*log(1/P(vacuum,)) = " + entropypvacuumcomma  );
            System.out.println("\nP(vacuumvacuum)*log(1/P(vacuumvacuum)) = " + entropypvacuumvacuum  );
            System.out.println("\nThe sum of the H(s) is = " + sumentropy ); 
            System.out.println("\nThe entropy H(Xn)+H(Xn+1)<H(Xn,Xn+1) , 3.1830823644416144<5.469783195352267 ");  
            
            }

            private static void calculatetheconditionalentropy() 
    
            {
                
            double pa = 4782.0/94693.0;  
            double pb = 2689.0/94693.0;
            double pc = 374.0/94693.0;
            double pd = 4186.0/94693.0;
            double pe = 4850.0/94693.0;
            double pf = 2986.0/94693.0;
            double pg = 3934.0/94693.0;
            double ph = 4117.0/94693.0;
            double pi = 4279.0/94693.0;
            double pj = 2767.0/94693.0;  
            double pk = 4083.0/94693.0;
            double pl = 4076.0/94693.0;
            double pm = 3731.0/94693.0;
            double pn = 4495.0/94693.0;
            double po = 4288.0/94693.0;
            double pp = 3191.0/94693.0;
            double pq = 10.0/94693.0;  
            double pr = 4607.0/94693.0;
            double ps = 4419.0/94693.0;
            double pt = 4564.0/94693.0;
            double pu = 3412.0/94693.0;
            double pv = 3682.0/94693.0;
            double pw = 81.0/94693.0;
            double px = 36.0/94693.0;  
            double py = 2679.0/94693.0;
            double pz = 30.0/94693.0;
            double pdot = 4445.0/94693.0;
            double pcomma = 2867.0/94693.0;
            double pvacuum = 5033.0/94693.0;    
                
            double paa = 19.0/350144.0;
            double pab = 137.0/350144.0;
            double pac = 26.0/350144.0;
            double pad = 1088.0/350144.0;
            double pae = 805.0/350144.0;
            double paf = 285.0/350144.0;
            double pag = 830.0/350144.0;
            double pah = 27.0/350144.0;
            double pai = 55.0/350144.0;
            double paj = 9.0/350144.0;
            double pak = 1403.0/350144.0;
            double pal = 1574.0/350144.0;
            double pam = 1042.0/350144.0;
            double pan = 2880.0/350144.0;
            double pao = 6.0/350144.0;
            double pap = 746.0/350144.0;
            double par = 3292.0/350144.0;
            double pas = 1156.0/350144.0;
            double pat = 2142.0/350144.0;
            double pau = 205.0/350144.0;
            double pav = 1207.0/350144.0;
            double paw = 1.0/350144.0;
            double pax = 6.0/350144.0;
            double pay = 14.0/350144.0;
            double paz = 18.0/350144.0;
            double padot = 577.0/350144.0;
            double pacomma = 376.0/350144.0;
            double pavacuum = 3677.0/350144.0;   
            double pba = 1302.0/350144.0;
            double pbb = 175.0/350144.0;
            double pbd = 5.0/350144.0;
            double pbe = 1158.0/350144.0;
            double pbh = 2.0/350144.0;
            double pbi = 454.0/350144.0;
            double pbj = 77.0/350144.0;
            double pbl = 863.0/350144.0;
            double pbm = 2.0/350144.0;
            double pbn = 5.0/350144.0;
            double pbo = 570.0/350144.0;
            double pbr = 616.0/350144.0;
            double pbs = 24.0/350144.0;
            double pbu = 216.0/350144.0;
            double pby = 136.0/350144.0;
            double pbdot = 9.0/350144.0;
            double pbcomma = 7.0/350144.0;
            double pbvacuum = 29.0/350144.0;
            double pca = 59.0/350144.0;
            double pcc = 3.0/350144.0;
            double pcd = 7.0/350144.0;
            double pce = 43.0/350144.0;
            double pch = 64.0/350144.0;
            double pci = 13.0/350144.0;
            double pck = 139.0/350144.0;
            double pcl = 10.0/350144.0;
            double pco = 50.0/350144.0;
            double pcr = 5.0/350144.0;
            double pcs = 3.0/350144.0;
            double pct = 15.0/350144.0;
            double pcu = 26.0/350144.0;
            double pcv = 1.0/350144.0;
            double pccomma = 2.0/350144.0;
            double pcvacuum = 11.0/350144.0;
            double pda = 1057.0/350144.0;
            double pdb = 28.0/350144.0;
            double pdc = 4.0/350144.0;
            double pdd = 1141.0/350144.0;
            double pde = 3466.0/350144.0;
            double pdf = 28.0/350144.0;
            double pdg = 19.0/350144.0;
            double pdh = 15.0/350144.0;
            double pdi = 685.0/350144.0;
            double pdj = 55.0/350144.0;
            double pdk = 31.0/350144.0;
            double pdl = 133.0/350144.0;
            double pdm = 19.0/350144.0;
            double pdn = 66.0/350144.0;
            double pdo = 545.0/350144.0;
            double pdp = 21.0/350144.0;
            double pdr = 888.0/350144.0;
            double pds = 248.0/350144.0;
            double pdt = 568.0/350144.0;
            double pdu = 1065.0/350144.0;
            double pdv = 77.0/350144.0;
            double pdw = 2.0/350144.0;
            double pdy = 119.0/350144.0;
            double pddot = 283.0/350144.0;
            double pdcomma = 162.0/350144.0;
            double pdvacuum = 1622.0/350144.0;
            double pea = 120.0/350144.0;
            double peb = 270.0/350144.0;
            double pec = 130.0/350144.0;
            double ped = 1650.0/350144.0;
            double pee = 84.0/350144.0;
            double pef = 412.0/350144.0;
            double peg = 2233.0/350144.0;
            double peh = 134.0/350144.0;
            double pei = 880.0/350144.0;
            double pej = 13.0/350144.0;
            double pek = 838.0/350144.0;
            double pel = 2065.0/350144.0;
            double pem = 964.0/350144.0;
            double pen = 3823.0/350144.0;
            double peo = 51.0/350144.0;
            double pep = 339.0/350144.0;
            double per = 3473.0/350144.0;
            double pes = 1625.0/350144.0;
            double pet = 3570.0/350144.0;
            double peu = 15.0/350144.0;
            double pev = 535.0/350144.0;
            double pex = 18.0/350144.0;
            double pey = 4.0/350144.0;
            double pedot = 1451.0/350144.0;
            double pecomma = 897.0/350144.0;
            double pevacuum = 3863.0/350144.0;
            double pfa = 867.0/350144.0;
            double pfb = 5.0/350144.0;
            double pfe = 565.0/350144.0;
            double pff = 225.0/350144.0;
            double pfi = 574.0/350144.0;
            double pfj = 83.0/350144.0;
            double pfl = 289.0/350144.0;
            double pfm = 1.0/350144.0;
            double pfn = 6.0/350144.0;
            double pfo = 2022.0/350144.0;
            double pfr = 848.0/350144.0;
            double pfs = 17.0/350144.0;
            double pft = 414.0/350144.0;
            double pfu = 191.0/350144.0;
            double pfy = 101.0/350144.0;
            double pfdot = 30.0/350144.0;
            double pfcomma = 7.0/350144.0;
            double pfvacuum = 105.0/350144.0;
            double pga = 933.0/350144.0;
            double pgb = 27.0/350144.0;
            double pgd = 82.0/350144.0;
            double pge = 1904.0/350144.0;
            double pgf = 15.0/350144.0;
            double pgg = 424.0/350144.0;
            double pgh = 197.0/350144.0;
            double pgi = 489.0/350144.0;
            double pgj = 812.0/350144.0;
            double pgk = 13.0/350144.0;
            double pgl = 330.0/350144.0;
            double pgm = 11.0/350144.0;
            double pgn = 282.0/350144.0;
            double pgo = 156.0/350144.0;
            double pgp = 6.0/350144.0;
            double pgr = 562.0/350144.0;
            double pgs = 421.0/350144.0;
            double pgt = 460.0/350144.0;
            double pgu = 256.0/350144.0;
            double pgv = 79.0/350144.0;
            double pgy = 152.0/350144.0;
            double pgdot = 566.0/350144.0;
            double pgcomma = 360.0/350144.0;
            double pgvacuum = 3014.0/350144.0; 
            double pha = 3197.0/350144.0;
            double phb = 3.0/350144.0;
            double phc = 1.0/350144.0;
            double phd = 1.0/350144.0;
            double phe = 1303.0/350144.0;
            double phi = 349.0/350144.0;
            double phj = 229.0/350144.0;
            double phl = 2.0/350144.0;
            double phn = 19.0/350144.0;
            double pho = 1188.0/350144.0;
            double phr = 19.0/350144.0;
            double pht = 19.0/350144.0;
            double phu = 1085.0/350144.0;
            double phv = 1193.0/350144.0;
            double phy = 70.0/350144.0;
            double phdot = 8.0/350144.0;
            double phcomma = 3.0/350144.0;
            double phvacuum = 19.0/350144.0;
            double pia = 377.0/350144.0;
            double pib = 75.0/350144.0;
            double pic = 30.0/350144.0;
            double pid = 922.0/350144.0;
            double pie = 525.0/350144.0;
            double pif = 161.0/350144.0;
            double pig = 1392.0/350144.0;
            double pih = 49.0/350144.0;
            double pii = 3.0/350144.0;
            double pik = 2179.0/350144.0;
            double pil = 2080.0/350144.0;
            double pim = 365.0/350144.0;
            double pin = 2275.0/350144.0;
            double pio = 122.0/350144.0;
            double pip = 243.0/350144.0;
            double piq = 1.0/350144.0;
            double pir = 509.0/350144.0;
            double pis = 1307.0/350144.0;
            double pit = 1182.0/350144.0;
            double piu = 44.0/350144.0;
            double piv = 344.0/350144.0;
            double piz = 1.0/350144.0;
            double pidot = 98.0/350144.0;
            double picomma = 147.0/350144.0;
            double pivacuum = 2079.0/350144.0;   
            double pja = 407.0/350144.0;
            double pje = 2164.0/350144.0;
            double pji = 17.0/350144.0;
            double pjo = 1170.0/350144.0;
            double pjr = 1.0/350144.0;
            double pju = 146.0/350144.0;
            double pjy = 2.0/350144.0;
            double pjdot = 5.0/350144.0;
            double pjcomma = 1.0/350144.0;
            double pjvacuum = 12.0/350144.0;
            double pka = 1532.0/350144.0;
            double pkb = 8.0/350144.0;
            double pkd = 61.0/350144.0;
            double pke = 2713.0/350144.0;
            double pkf = 8.0/350144.0;
            double pkg = 21.0/350144.0;
            double pkh = 36.0/350144.0;
            double pki = 346.0/350144.0;
            double pkj = 1027.0/350144.0;
            double pkk = 2418.0/350144.0;
            double pkl = 552.0/350144.0;
            double pkm = 4.0/350144.0;
            double pkn = 313.0/350144.0;
            double pko = 1112.0/350144.0;
            double pkp = 2.0/350144.0;
            double pkr = 600.0/350144.0;
            double pks = 449.0/350144.0;
            double pkt = 1082.0/350144.0;
            double pku = 841.0/350144.0;
            double pkv = 334.0/350144.0;
            double pky = 157.0/350144.0;
            double pkdot = 225.0/350144.0;
            double pkcomma = 167.0/350144.0;
            double pkvacuum = 1354.0/350144.0;   
            double pla = 1382.0/350144.0;
            double plb = 212.0/350144.0;
            double plc = 3.0/350144.0;
            double pld = 796.0/350144.0;
            double ple = 2466.0/350144.0;
            double plf = 117.0/350144.0;
            double plg = 249.0/350144.0;
            double plh = 51.0/350144.0;
            double pli = 1901.0/350144.0;
            double plj = 60.0/350144.0;
            double plk = 217.0/350144.0;
            double pll = 1534.0/350144.0;
            double plm = 208.0/350144.0;
            double pln = 16.0/350144.0;
            double plo = 1001.0/350144.0;
            double plp = 67.0/350144.0;
            double plr = 36.0/350144.0;
            double pls = 560.0/350144.0;
            double plt = 982.0/350144.0;
            double plu = 470.0/350144.0;
            double plv = 571.0/350144.0;
            double plw = 4.0/350144.0;
            double ply = 484.0/350144.0;
            double plz = 1.0/350144.0;
            double pldot = 269.0/350144.0;
            double plcomma = 158.0/350144.0;
            double plvacuum = 1703.0/350144.0;  
            double pma = 1320.0/350144.0;
            double pmb = 60.0/350144.0;
            double pmd = 35.0/350144.0;
            double pme = 2444.0/350144.0;
            double pmf = 48.0/350144.0;
            double pmg = 15.0/350144.0;
            double pmh = 15.0/350144.0;
            double pmi = 697.0/350144.0;
            double pmk = 8.0/350144.0;
            double pml = 120.0/350144.0;
            double pmm = 1143.0/350144.0;
            double pmn = 15.0/350144.0;
            double pmo = 879.0/350144.0;
            double pmp = 183.0/350144.0;
            double pmr = 62.0/350144.0;
            double pms = 111.0/350144.0;
            double pmt = 322.0/350144.0;
            double pmu = 317.0/350144.0;
            double pmv = 23.0/350144.0;
            double pmw = 2.0/350144.0;
            double pmy = 134.0/350144.0;
            double pmdot = 421.0/350144.0;
            double pmcomma = 155.0/350144.0;
            double pmvacuum = 2081.0/350144.0;   
            double pna = 1186.0/350144.0;
            double pnb = 61.0/350144.0;
            double pnc = 8.0/350144.0;
            double pnd = 1496.0/350144.0;
            double pne = 2836.0/350144.0;
            double pnf = 159.0/350144.0;
            double png = 1703.0/350144.0;
            double pnh = 82.0/350144.0;
            double pni = 724.0/350144.0;
            double pnj = 17.0/350144.0;
            double pnk = 669.0/350144.0;
            double pnl = 199.0/350144.0;
            double pnm = 26.0/350144.0;
            double pnn = 2138.0/350144.0;
            double pno = 1168.0/350144.0;
            double pnp = 14.0/350144.0;
            double pnr = 37.0/350144.0;
            double pns = 1260.0/350144.0;
            double pnt = 1529.0/350144.0;
            double pnu = 247.0/350144.0;
            double pnv = 66.0/350144.0;
            double pnx = 1.0/350144.0;
            double pny = 199.0/350144.0;
            double pnz = 2.0/350144.0;
            double pndot = 1555.0/350144.0;
            double pncomma = 731.0/350144.0;
            double pnvacuum = 3574.0/350144.0;   
            double poa = 26.0/350144.0;
            double pob = 271.0/350144.0;
            double poc = 25.0/350144.0;
            double pod = 791.0/350144.0;
            double poe = 714.0/350144.0;
            double pof = 302.0/350144.0;
            double pog = 2222.0/350144.0;
            double poh = 55.0/350144.0;
            double poi = 14.0/350144.0;
            double poj = 7.0/350144.0;
            double pok = 821.0/350144.0;
            double pol = 1322.0/350144.0;
            double pom = 2199.0/350144.0;
            double pon = 1085.0/350144.0;
            double poo = 27.0/350144.0;
            double pop = 1156.0/350144.0;
            double por = 2844.0/350144.0;
            double pos = 616.0/350144.0;
            double pot = 856.0/350144.0;
            double pou = 41.0/350144.0;
            double pov = 879.0/350144.0;
            double pow = 24.0/350144.0;
            double pox = 8.0/350144.0;
            double poy = 546.0/350144.0;
            double podot = 148.0/350144.0;
            double pocomma = 69.0/350144.0;
            double povacuum = 828.0/350144.0;
            double ppa = 2005.0/350144.0;
            double ppb = 10.0/350144.0;
            double ppc = 10.0/350144.0;
            double ppd = 53.0/350144.0;
            double ppe = 1137.0/350144.0;
            double ppf = 20.0/350144.0;
            double ppg = 15.0/350144.0;
            double pph = 24.0/350144.0;
            double ppi = 331.0/350144.0;
            double ppj = 1.0/350144.0;
            double ppk = 26.0/350144.0;
            double ppl = 369.0/350144.0;
            double ppm = 25.0/350144.0;
            double ppn = 135.0/350144.0;
            double ppo = 574.0/350144.0;
            double ppp = 1126.0/350144.0;
            double ppr = 540.0/350144.0;
            double pps = 270.0/350144.0;
            double ppt = 201.0/350144.0;
            double ppu = 391.0/350144.0;
            double ppv = 15.0/350144.0;
            double ppy = 22.0/350144.0;
            double ppdot = 165.0/350144.0;
            double ppcomma = 80.0/350144.0;
            double ppvacuum = 679.0/350144.0;
            double pqu = 4.0/350144.0;
            double pqvacuum = 6.0/350144.0;
            double pra = 1804.0/350144.0;
            double prb = 178.0/350144.0;
            double prc = 5.0/350144.0;
            double prd = 850.0/350144.0;
            double pre = 2744.0/350144.0;
            double prf = 349.0/350144.0;
            double prg = 305.0/350144.0;
            double prh = 115.0/350144.0;
            double pri = 1377.0/350144.0;
            double prj = 3.0/350144.0;
            double prk = 595.0/350144.0;
            double prl = 284.0/350144.0;
            double prm = 360.0/350144.0;
            double prn = 500.0/350144.0;
            double pro = 1261.0/350144.0;
            double prp = 61.0/350144.0;
            double prr = 1818.0/350144.0;
            double prs = 1006.0/350144.0;
            double prt = 1738.0/350144.0;
            double pru = 664.0/350144.0;
            double prv = 246.0/350144.0;
            double prw = 2.0/350144.0;
            double pry = 1682.0/350144.0;
            double prdot = 818.0/350144.0;
            double prcomma = 520.0/350144.0;
            double prvacuum = 3533.0/350144.0;
            double psa = 2529.0/350144.0;
            double psb = 74.0/350144.0;
            double psc = 43.0/350144.0;
            double psd = 53.0/350144.0;
            double pse = 2235.0/350144.0;
            double psf = 76.0/350144.0;
            double psg = 51.0/350144.0;
            double psh = 111.0/350144.0;
            double psi = 1303.0/350144.0;
            double psj = 577.0/350144.0;
            double psk = 1958.0/350144.0;
            double psl = 690.0/350144.0;
            double psm = 464.0/350144.0;
            double psn = 603.0/350144.0;
            double pso = 1588.0/350144.0;
            double psp = 851.0/350144.0;
            double psr = 46.0/350144.0;
            double pss = 945.0/350144.0;
            double pst = 2379.0/350144.0;
            double psu = 190.0/350144.0;
            double psv = 614.0/350144.0;
            double psw = 3.0/350144.0;
            double psy = 373.0/350144.0;
            double psdot = 408.0/350144.0;
            double pscomma = 167.0/350144.0;
            double psvacuum = 1589.0/350144.0;
            double pta = 1288.0/350144.0;
            double ptb = 64.0/350144.0;
            double ptc = 15.0/350144.0;
            double ptd = 14.0/350144.0;
            double pte = 3326.0/350144.0;
            double ptf = 50.0/350144.0;
            double ptg = 42.0/350144.0;
            double pth = 258.0/350144.0;
            double pti = 1998.0/350144.0;
            double ptj = 191.0/350144.0;
            double ptk = 58.0/350144.0;
            double ptl = 256.0/350144.0;
            double ptm = 41.0/350144.0;
            double ptn = 124.0/350144.0;
            double pto = 1360.0/350144.0;
            double ptp = 26.0/350144.0;
            double ptr = 1433.0/350144.0;
            double pts = 570.0/350144.0;
            double ptt = 2131.0/350144.0;
            double ptu = 379.0/350144.0;
            double ptv = 208.0/350144.0;
            double ptw = 3.0/350144.0;
            double pty = 261.0/350144.0;
            double ptz = 1.0/350144.0;
            double ptdot = 1498.0/350144.0;
            double ptcomma = 787.0/350144.0;
            double ptvacuum = 3693.0/350144.0;   
            double pua = 102.0/350144.0;
            double pub = 77.0/350144.0;
            double puc = 5.0/350144.0;
            double pud = 285.0/350144.0;
            double pue = 218.0/350144.0;
            double puf = 121.0/350144.0;
            double pug = 109.0/350144.0;
            double puh = 13.0/350144.0;
            double pui = 15.0/350144.0;
            double puj = 2.0/350144.0;
            double puk = 451.0/350144.0;
            double pul = 781.0/350144.0;
            double pum = 284.0/350144.0;
            double pun = 1657.0/350144.0;
            double puo = 8.0/350144.0;
            double pup = 108.0/350144.0;
            double pur = 678.0/350144.0;
            double pus = 672.0/350144.0;
            double put = 1123.0/350144.0;
            double puu = 9.0/350144.0;
            double puv = 20.0/350144.0;
            double puz = 1.0/350144.0;
            double pudot = 18.0/350144.0;
            double pucomma = 19.0/350144.0;
            double puvacuum = 907.0/350144.0;   
            double pva = 2033.0/350144.0;
            double pvb = 33.0/350144.0;
            double pvd = 153.0/350144.0;
            double pve = 2059.0/350144.0;
            double pvf = 69.0/350144.0;
            double pvg = 21.0/350144.0;
            double pvh = 23.0/350144.0;
            double pvi = 1727.0/350144.0;
            double pvj = 5.0/350144.0;
            double pvk = 12.0/350144.0;
            double pvl = 107.0/350144.0;
            double pvm = 9.0/350144.0;
            double pvn = 198.0/350144.0;
            double pvo = 623.0/350144.0;
            double pvp = 5.0/350144.0;
            double pvr = 56.0/350144.0;
            double pvs = 108.0/350144.0;
            double pvt = 137.0/350144.0;
            double pvu = 51.0/350144.0;
            double pvv = 23.0/350144.0;
            double pvdot = 102.0/350144.0;
            double pvcomma = 44.0/350144.0;
            double pvvacuum = 1071.0/350144.0;   
            double pwa = 12.0/350144.0;
            double pwb = 1.0/350144.0;
            double pwd = 1.0/350144.0;
            double pwe = 16.0/350144.0;
            double pwh = 9.0/350144.0;
            double pwi = 18.0/350144.0;
            double pwl = 2.0/350144.0;
            double pwn = 4.0/350144.0;
            double pwo = 11.0/350144.0;
            double pww = 1.0/350144.0;
            double pwdot = 5.0/350144.0;
            double pwvacuum = 4.0/350144.0;
            double pxa = 1.0/350144.0;
            double pxe = 2.0/350144.0;
            double pxi = 14.0/350144.0;
            double pxl = 16.0/350144.0;
            double pxy = 2.0/350144.0;
            double pxdot = 2.0/350144.0;
            double pxcomma = 1.0/350144.0;
            double pxvacuum = 12.0/350144.0;
            double pya = 31.0/350144.0;
            double pyb = 10.0/350144.0;
            double pyc = 1.0/350144.0;
            double pyd = 264.0/350144.0;
            double pye = 326.0/350144.0;
            double pyf = 9.0/350144.0;
            double pyg = 206.0/350144.0;
            double pyh = 25.0/350144.0;
            double pyj = 2.0/350144.0;
            double pyk = 418.0/350144.0;
            double pyl = 215.0/350144.0;
            double pym = 47.0/350144.0;
            double pyn = 515.0/350144.0;
            double pyo = 13.0/350144.0;
            double pyp = 93.0/350144.0;
            double pyr = 205.0/350144.0;
            double pys = 414.0/350144.0;
            double pyt = 352.0/350144.0;
            double pyu = 1.0/350144.0;
            double pyv = 27.0/350144.0;
            double pydot = 391.0/350144.0;
            double pycomma = 74.0/350144.0;
            double pyvacuum = 1106.0/350144.0;
            double pza = 7.0/350144.0;
            double pze = 8.0/350144.0;
            double pzh = 2.0/350144.0;
            double pzi = 3.0/350144.0;
            double pzo = 8.0/350144.0;
            double pzy = 1.0/350144.0;
            double pzz = 3.0/350144.0;
            double pzvacuum = 2.0/350144.0;
            double pdota = 1.0/350144.0;
            double pdotj = 1.0/350144.0;
            double pdotn = 1.0/350144.0;
            double pdotcomma = 1.0/350144.0;
            double pdotvacuum = 2.0/350144.0;
            double pcommavacuum = 2867.0/350144.0;
            double pvacuuma = 2740.0/350144.0;
            double pvacuumb = 2318.0/350144.0;
            double pvacuumc = 133.0/350144.0;
            double pvacuumd = 3440.0/350144.0;
            double pvacuume = 2631.0/350144.0;
            double pvacuumf = 2566.0/350144.0;
            double pvacuumg = 1809.0/350144.0;
            double pvacuumh = 3869.0/350144.0;
            double pvacuumi = 2640.0/350144.0;
            double pvacuumj = 1423.0/350144.0;
            double pvacuumk = 2268.0/350144.0;
            double pvacuuml = 1916.0/350144.0;
            double pvacuumm = 2648.0/350144.0;
            double pvacuumn = 1840.0/350144.0;
            double pvacuumo = 2788.0/350144.0;
            double pvacuump = 2334.0/350144.0;
            double pvacuumq = 9.0/350144.0;
            double pvacuumr = 1507.0/350144.0;
            double pvacuums = 4014.0/350144.0;
            double pvacuumt = 2465.0/350144.0;
            double pvacuumu = 1190.0/350144.0;
            double pvacuumv = 2493.0/350144.0;
            double pvacuumw = 41.0/350144.0;
            double pvacuumx = 1.0/350144.0;
            double pvacuumy = 52.0/350144.0;
            double pvacuumz = 7.0/350144.0;
            double pvacuumdot = 88.0/350144.0;
            double pvacuumcomma = 51.0/350144.0;  
            double pvacuumvacuum = 2982.0/350144.0;   
            
            double conditionalentropypaa = paa*(Math.log(pa/paa));
            double conditionalentropypab = pab*(Math.log(pb/pab));
            double conditionalentropypac = pac*(Math.log(pc/pac));
            double conditionalentropypad = pad*(Math.log(pd/pad));
            double conditionalentropypae = pae*(Math.log(pe/pae));
            double conditionalentropypaf = paf*(Math.log(pf/paf));
            double conditionalentropypag = pag*(Math.log(pg/pag));
            double conditionalentropypah = pah*(Math.log(ph/pah));
            double conditionalentropypai = pai*(Math.log(pi/pai));
            double conditionalentropypaj = paj*(Math.log(pj/paj));
            double conditionalentropypak = pak*(Math.log(pk/pak));
            double conditionalentropypal = pal*(Math.log(pl/pal));
            double conditionalentropypam = pam*(Math.log(pm/pam));
            double conditionalentropypan = pan*(Math.log(pn/pan));
            double conditionalentropypao = pao*(Math.log(po/pao));
            double conditionalentropypap = pap*(Math.log(pp/pap));
            double conditionalentropypar = par*(Math.log(pr/par));
            double conditionalentropypas = pas*(Math.log(ps/pas));
            double conditionalentropypat = pat*(Math.log(pt/pat));
            double conditionalentropypau = pau*(Math.log(pu/pau));
            double conditionalentropypav = pav*(Math.log(pv/pav));
            double conditionalentropypaw = paw*(Math.log(pw/paw));
            double conditionalentropypax = pax*(Math.log(px/pax));
            double conditionalentropypay = pay*(Math.log(py/pay));
            double conditionalentropypaz = paz*(Math.log(pz/paz));
            double conditionalentropypadot = padot*(Math.log(pdot/padot));
            double conditionalentropypacomma = pacomma*(Math.log(pcomma/pacomma));
            double conditionalentropypavacuum = pavacuum*(Math.log(pvacuum/pavacuum));
            double conditionalentropypba = pba*(Math.log(pa/pba));
            double conditionalentropypbb = pbb*(Math.log(pb/pbb));
            double conditionalentropypbd = pbd*(Math.log(pd/pbd));
            double conditionalentropypbe = pbe*(Math.log(pe/pbe));
            double conditionalentropypbh = pbh*(Math.log(ph/pbh));
            double conditionalentropypbi = pbi*(Math.log(pi/pbi));
            double conditionalentropypbj = pbj*(Math.log(pj/pbj));
            double conditionalentropypbl = pbl*(Math.log(pl/pbl));
            double conditionalentropypbm = pbm*(Math.log(pm/pbm));
            double conditionalentropypbn = pbn*(Math.log(pn/pbn));
            double conditionalentropypbo = pbo*(Math.log(po/pbo));
            double conditionalentropypbr = pbr*(Math.log(pr/pbr));
            double conditionalentropypbs = pbs*(Math.log(ps/pbs));
            double conditionalentropypbu = pbu*(Math.log(pu/pbu));
            double conditionalentropypby = pby*(Math.log(py/pby));
            double conditionalentropypbdot = pbdot*(Math.log(pdot/pbdot));
            double conditionalentropypbcomma = pbcomma*(Math.log(pcomma/pbcomma));
            double conditionalentropypbvacuum = pbvacuum*(Math.log(pvacuum/pbvacuum));
            double conditionalentropypca = pca*(Math.log(pa/pca));
            double conditionalentropypcc = pcc*(Math.log(pc/pcc));
            double conditionalentropypcd = pcd*(Math.log(pd/pcd));
            double conditionalentropypce = pce*(Math.log(pe/pce));
            double conditionalentropypch = pch*(Math.log(ph/pch));
            double conditionalentropypci = pci*(Math.log(pi/pci));
            double conditionalentropypck = pck*(Math.log(pk/pck));
            double conditionalentropypcl = pcl*(Math.log(pl/pcl));
            double conditionalentropypco = pco*(Math.log(po/pco));
            double conditionalentropypcr = pcr*(Math.log(pr/pcr));
            double conditionalentropypcs = pcs*(Math.log(ps/pcs));
            double conditionalentropypct = pct*(Math.log(pt/pct));
            double conditionalentropypcu = pcu*(Math.log(pu/pcu));
            double conditionalentropypcv = pcv*(Math.log(pv/pcv));
            double conditionalentropypccomma = pccomma*(Math.log(pcomma/pccomma));
            double conditionalentropypcvacuum = pcvacuum*(Math.log(pvacuum/pcvacuum));
            double conditionalentropypda = pda*(Math.log(pa/pda));
            double conditionalentropypdb = pdb*(Math.log(pb/pdb));
            double conditionalentropypdc = pdc*(Math.log(pc/pdc));
            double conditionalentropypdd = pdd*(Math.log(pd/pdd));
            double conditionalentropypde = pde*(Math.log(pe/pde));
            double conditionalentropypdf = pdf*(Math.log(pf/pdf));
            double conditionalentropypdg = pdg*(Math.log(pg/pdg));
            double conditionalentropypdh = pdh*(Math.log(ph/pdh));
            double conditionalentropypdi = pdi*(Math.log(pi/pdi));
            double conditionalentropypdj = pdj*(Math.log(pj/pdj));
            double conditionalentropypdk = pdk*(Math.log(pk/pdk));
            double conditionalentropypdl = pdl*(Math.log(pl/pdl));
            double conditionalentropypdm = pdm*(Math.log(pm/pdm));
            double conditionalentropypdn = pdn*(Math.log(pn/pdn));
            double conditionalentropypdo = pdo*(Math.log(po/pdo));
            double conditionalentropypdp = pdp*(Math.log(pp/pdp));
            double conditionalentropypdr = pdr*(Math.log(pr/pdr));
            double conditionalentropypds = pds*(Math.log(ps/pds));
            double conditionalentropypdt = pdt*(Math.log(pt/pdt));
            double conditionalentropypdu = pdu*(Math.log(pu/pdu));
            double conditionalentropypdv = pdv*(Math.log(pv/pdv));
            double conditionalentropypdw = pdw*(Math.log(pw/pdw));
            double conditionalentropypdy = pdy*(Math.log(py/pdy));
            double conditionalentropypddot = pddot*(Math.log(pdot/pddot));
            double conditionalentropypdcomma = pdcomma*(Math.log(pcomma/pdcomma));
            double conditionalentropypdvacuum = pdvacuum*(Math.log(pvacuum/pdvacuum));
            double conditionalentropypea = pea*(Math.log(pa/pea));
            double conditionalentropypeb = peb*(Math.log(pb/peb));
            double conditionalentropypec = pec*(Math.log(pc/pec));
            double conditionalentropyped = ped*(Math.log(pd/ped));
            double conditionalentropypee = pee*(Math.log(pe/pee));
            double conditionalentropypef = pef*(Math.log(pf/pef));
            double conditionalentropypeg = peg*(Math.log(pg/peg));
            double conditionalentropypeh = peh*(Math.log(ph/peh));
            double conditionalentropypei = pei*(Math.log(pi/pei));
            double conditionalentropypej = pej*(Math.log(pj/pej));
            double conditionalentropypek = pek*(Math.log(pk/pek));
            double conditionalentropypel = pel*(Math.log(pl/pel));
            double conditionalentropypem = pem*(Math.log(pm/pem));
            double conditionalentropypen = pen*(Math.log(pn/pen));
            double conditionalentropypeo = peo*(Math.log(po/peo));
            double conditionalentropypep = pep*(Math.log(pp/pep));
            double conditionalentropyper = per*(Math.log(pr/per));
            double conditionalentropypes = pes*(Math.log(ps/pes));
            double conditionalentropypet = pet*(Math.log(pt/pet));
            double conditionalentropypeu = peu*(Math.log(pu/peu));
            double conditionalentropypev = pev*(Math.log(pv/pev));
            double conditionalentropypex = pex*(Math.log(px/pex));
            double conditionalentropypey = pey*(Math.log(py/pey));
            double conditionalentropypedot = pedot*(Math.log(pdot/pedot));
            double conditionalentropypecomma = pecomma*(Math.log(pcomma/pecomma));
            double conditionalentropypevacuum = pevacuum*(Math.log(pvacuum/pevacuum));
            double conditionalentropypfa = pfa*(Math.log(pa/pfa));
            double conditionalentropypfb = pfb*(Math.log(pb/pfb));
            double conditionalentropypfe = pfe*(Math.log(pe/pfe));
            double conditionalentropypff = pff*(Math.log(pf/pff));
            double conditionalentropypfi = pfi*(Math.log(pi/pfi));
            double conditionalentropypfj = pfj*(Math.log(pj/pfj));
            double conditionalentropypfl = pfl*(Math.log(pl/pfl));
            double conditionalentropypfm = pfm*(Math.log(pm/pfm));
            double conditionalentropypfn = pfn*(Math.log(pn/pfn));
            double conditionalentropypfo = pfo*(Math.log(po/pfo));
            double conditionalentropypfr = pfr*(Math.log(pr/pfr));
            double conditionalentropypfs = pfs*(Math.log(ps/pfs));
            double conditionalentropypft = pft*(Math.log(pt/pft));
            double conditionalentropypfu = pfu*(Math.log(pu/pfu));
            double conditionalentropypfy = pfy*(Math.log(py/pfy));
            double conditionalentropypfdot = pfdot*(Math.log(pdot/pfdot));
            double conditionalentropypfcomma = pfcomma*(Math.log(pcomma/pfcomma));
            double conditionalentropypfvacuum = pfvacuum*(Math.log(pvacuum/pfvacuum)); 
            double conditionalentropypga = pga*(Math.log(pa/pga));
            double conditionalentropypgb = pgb*(Math.log(pb/pgb));
            double conditionalentropypgd = pgd*(Math.log(pd/pgd));
            double conditionalentropypge = pge*(Math.log(pe/pge));
            double conditionalentropypgf = pgf*(Math.log(pf/pgf));
            double conditionalentropypgg = pgg*(Math.log(pg/pgg));
            double conditionalentropypgh = pgh*(Math.log(ph/pgh));
            double conditionalentropypgi = pgi*(Math.log(pi/pgi));
            double conditionalentropypgj = pgj*(Math.log(pj/pgj));
            double conditionalentropypgk = pgk*(Math.log(pk/pgk));
            double conditionalentropypgl = pgl*(Math.log(pl/pgl));
            double conditionalentropypgm = pgm*(Math.log(pm/pgm));
            double conditionalentropypgn = pgn*(Math.log(pn/pgn));
            double conditionalentropypgo = pgo*(Math.log(po/pgo));
            double conditionalentropypgp = pgp*(Math.log(pp/pgp));
            double conditionalentropypgr = pgr*(Math.log(pr/pgr));
            double conditionalentropypgs = pgs*(Math.log(ps/pgs));
            double conditionalentropypgt = pgt*(Math.log(pt/pgt));
            double conditionalentropypgu = pgu*(Math.log(pu/pgu));
            double conditionalentropypgv = pgv*(Math.log(pv/pgv));
            double conditionalentropypgy = pgy*(Math.log(py/pgy));
            double conditionalentropypgdot = pgdot*(Math.log(pdot/pgdot));
            double conditionalentropypgcomma = pgcomma*(Math.log(pcomma/pgcomma));
            double conditionalentropypgvacuum = pgvacuum*(Math.log(pvacuum/pgvacuum));
            double conditionalentropypha = pha*(Math.log(pa/pha));
            double conditionalentropyphb = phb*(Math.log(pb/phb));
            double conditionalentropyphc = phc*(Math.log(pc/phc));
            double conditionalentropyphd = phd*(Math.log(pd/phd));
            double conditionalentropyphe = phe*(Math.log(pe/phe));
            double conditionalentropyphi = phi*(Math.log(pi/phi));
            double conditionalentropyphj = phj*(Math.log(pj/phj));
            double conditionalentropyphl = phl*(Math.log(pl/phl));
            double conditionalentropyphn = phn*(Math.log(pn/phn));
            double conditionalentropypho = pho*(Math.log(po/pho));
            double conditionalentropyphr = phr*(Math.log(pr/phr));
            double conditionalentropypht = pht*(Math.log(pt/pht));
            double conditionalentropyphu = phu*(Math.log(pu/phu));
            double conditionalentropyphv = phv*(Math.log(pv/phv));
            double conditionalentropyphy = phy*(Math.log(py/phy));
            double conditionalentropyphdot = phdot*(Math.log(pdot/phdot));
            double conditionalentropyphcomma = phcomma*(Math.log(pcomma/phcomma));
            double conditionalentropyphvacuum = phvacuum*(Math.log(pvacuum/phvacuum));
            double conditionalentropypia = pia*(Math.log(pa/pia));
            double conditionalentropypib = pib*(Math.log(pb/pib));
            double conditionalentropypic = pic*(Math.log(pc/pic));
            double conditionalentropypid = pid*(Math.log(pd/pid));
            double conditionalentropypie = pie*(Math.log(pe/pie));
            double conditionalentropypif = pif*(Math.log(pf/pif));
            double conditionalentropypig = pig*(Math.log(pg/pig));
            double conditionalentropypih = pih*(Math.log(ph/pih));
            double conditionalentropypii = pii*(Math.log(pi/pii));
            double conditionalentropypik = pik*(Math.log(pk/pik));
            double conditionalentropypil = pil*(Math.log(pl/pil));
            double conditionalentropypim = pim*(Math.log(pm/pim));
            double conditionalentropypin = pin*(Math.log(pn/pin));
            double conditionalentropypio = pio*(Math.log(po/pio));
            double conditionalentropypip = pip*(Math.log(pp/pip));
            double conditionalentropypiq = piq*(Math.log(pq/piq));
            double conditionalentropypir = pir*(Math.log(pr/pir));
            double conditionalentropypis = pis*(Math.log(ps/pis));
            double conditionalentropypit = pit*(Math.log(pt/pit));
            double conditionalentropypiu = piu*(Math.log(pu/piu));
            double conditionalentropypiv = piv*(Math.log(pv/piv));
            double conditionalentropypiz = piz*(Math.log(pz/piz));
            double conditionalentropypidot = pidot*(Math.log(pdot/pidot));
            double conditionalentropypicomma = picomma*(Math.log(pcomma/picomma));
            double conditionalentropypivacuum = pivacuum*(Math.log(pvacuum/pivacuum));
            double conditionalentropypja = pja*(Math.log(pa/pja));
            double conditionalentropypje = pje*(Math.log(pe/pje));
            double conditionalentropypji = pji*(Math.log(pi/pji));
            double conditionalentropypjo = pjo*(Math.log(po/pjo));
            double conditionalentropypjr = pjr*(Math.log(pr/pjr));
            double conditionalentropypju = pju*(Math.log(pu/pju));
            double conditionalentropypjy = pjy*(Math.log(py/pjy));
            double conditionalentropypjdot = pjdot*(Math.log(pdot/pjdot));
            double conditionalentropypjcomma = pjcomma*(Math.log(pcomma/pjcomma));
            double conditionalentropypjvacuum = pjvacuum*(Math.log(pvacuum/pjvacuum));
            double conditionalentropypka = pka*(Math.log(pa/pka));
            double conditionalentropypkb = pkb*(Math.log(pb/pkb));
            double conditionalentropypkd = pkd*(Math.log(pd/pkd));
            double conditionalentropypke = pke*(Math.log(pe/pke));
            double conditionalentropypkf = pkf*(Math.log(pf/pkf));
            double conditionalentropypkg = pkg*(Math.log(pg/pkg));
            double conditionalentropypkh = pkh*(Math.log(ph/pkh));
            double conditionalentropypki = pki*(Math.log(pi/pki));
            double conditionalentropypkj = pkj*(Math.log(pj/pkj));
            double conditionalentropypkk = pkk*(Math.log(pk/pkk));
            double conditionalentropypkl = pkl*(Math.log(pl/pkl));
            double conditionalentropypkm = pkm*(Math.log(pm/pkm));
            double conditionalentropypkn = pkn*(Math.log(pn/pkn));
            double conditionalentropypko = pko*(Math.log(po/pko));
            double conditionalentropypkp = pkp*(Math.log(pp/pkp));
            double conditionalentropypkr = pkr*(Math.log(pr/pkr));
            double conditionalentropypks = pks*(Math.log(ps/pks));
            double conditionalentropypkt = pkt*(Math.log(pt/pkt));
            double conditionalentropypku = pku*(Math.log(pu/pku));
            double conditionalentropypkv = pkv*(Math.log(pv/pkv));
            double conditionalentropypky = pky*(Math.log(py/pky));
            double conditionalentropypkdot = pkdot*(Math.log(pdot/pkdot));
            double conditionalentropypkcomma = pkcomma*(Math.log(pcomma/pkcomma));
            double conditionalentropypkvacuum = pkvacuum*(Math.log(pvacuum/pkvacuum));
            double conditionalentropypla = pla*(Math.log(pa/pla));
            double conditionalentropyplb = plb*(Math.log(pb/plb));
            double conditionalentropyplc = plc*(Math.log(pc/plc));
            double conditionalentropypld = pld*(Math.log(pd/pld));
            double conditionalentropyple = ple*(Math.log(pe/ple));
            double conditionalentropyplf = plf*(Math.log(pf/plf));
            double conditionalentropyplg = plg*(Math.log(pg/plg));
            double conditionalentropyplh = plh*(Math.log(ph/plh));
            double conditionalentropypli = pli*(Math.log(pi/pli));
            double conditionalentropyplj = plj*(Math.log(pj/plj));
            double conditionalentropyplk = plk*(Math.log(pk/plk));
            double conditionalentropypll = pll*(Math.log(pl/pll));
            double conditionalentropyplm = plm*(Math.log(pm/plm));
            double conditionalentropypln = pln*(Math.log(pn/pln));
            double conditionalentropyplo = plo*(Math.log(po/plo));
            double conditionalentropyplp = plp*(Math.log(pp/plp));
            double conditionalentropyplr = plr*(Math.log(pr/plr));
            double conditionalentropypls = pls*(Math.log(ps/pls));
            double conditionalentropyplt = plt*(Math.log(pt/plt));
            double conditionalentropyplu = plu*(Math.log(pu/plu));
            double conditionalentropyplv = plv*(Math.log(pv/plv));
            double conditionalentropyplw = plw*(Math.log(pw/plw));
            double conditionalentropyply = ply*(Math.log(py/ply));
            double conditionalentropyplz = plz*(Math.log(pz/plz));
            double conditionalentropypldot = pldot*(Math.log(pdot/pldot));
            double conditionalentropyplcomma = plcomma*(Math.log(pcomma/plcomma));
            double conditionalentropyplvacuum = plvacuum*(Math.log(pvacuum/plvacuum));
            double conditionalentropypma = pma*(Math.log(pa/pma));
            double conditionalentropypmb = pmb*(Math.log(pb/pmb));
            double conditionalentropypmd = pmd*(Math.log(pd/pmd));
            double conditionalentropypme = pme*(Math.log(pe/pme));
            double conditionalentropypmf = pmf*(Math.log(pf/pmf));
            double conditionalentropypmg = pmg*(Math.log(pg/pmg));
            double conditionalentropypmh = pmh*(Math.log(ph/pmh));
            double conditionalentropypmi = pmi*(Math.log(pi/pmi));
            double conditionalentropypmk = pmk*(Math.log(pk/pmk));
            double conditionalentropypml = pml*(Math.log(pl/pml));
            double conditionalentropypmm = pmm*(Math.log(pm/pmm));
            double conditionalentropypmn = pmn*(Math.log(pn/pmn));
            double conditionalentropypmo = pmo*(Math.log(po/pmo));
            double conditionalentropypmp = pmp*(Math.log(pp/pmp));
            double conditionalentropypmr = pmr*(Math.log(pr/pmr));
            double conditionalentropypms = pms*(Math.log(ps/pms));
            double conditionalentropypmt = pmt*(Math.log(pt/pmt));
            double conditionalentropypmu = pmu*(Math.log(pu/pmu));
            double conditionalentropypmv = pmv*(Math.log(pv/pmv));
            double conditionalentropypmw = pmw*(Math.log(pw/pmw));
            double conditionalentropypmy = pmy*(Math.log(py/pmy));
            double conditionalentropypmdot = pmdot*(Math.log(pdot/pmdot));
            double conditionalentropypmcomma = pmcomma*(Math.log(pcomma/pmcomma));
            double conditionalentropypmvacuum = pmvacuum*(Math.log(pvacuum/pmvacuum));
            double conditionalentropypna = pna*(Math.log(pa/pna));
            double conditionalentropypnb = pnb*(Math.log(pb/pnb));
            double conditionalentropypnc = pnc*(Math.log(pc/pnc));
            double conditionalentropypnd = pnd*(Math.log(pd/pnd));
            double conditionalentropypne = pne*(Math.log(pe/pne));
            double conditionalentropypnf = pnf*(Math.log(pf/pnf));
            double conditionalentropypng = png*(Math.log(pg/png));
            double conditionalentropypnh = pnh*(Math.log(ph/pnh));
            double conditionalentropypni = pni*(Math.log(pi/pni));
            double conditionalentropypnj = pnj*(Math.log(pj/pnj));
            double conditionalentropypnk = pnk*(Math.log(pk/pnk));
            double conditionalentropypnl = pnl*(Math.log(pl/pnl));
            double conditionalentropypnm = pnm*(Math.log(pm/pnm));
            double conditionalentropypnn = pnn*(Math.log(pn/pnn));
            double conditionalentropypno = pno*(Math.log(po/pno));
            double conditionalentropypnp = pnp*(Math.log(pp/pnp));
            double conditionalentropypnr = pnr*(Math.log(pr/pnr));
            double conditionalentropypns = pns*(Math.log(ps/pns));
            double conditionalentropypnt = pnt*(Math.log(pt/pnt));
            double conditionalentropypnu = pnu*(Math.log(pu/pnu));
            double conditionalentropypnv = pnv*(Math.log(pv/pnv));
            double conditionalentropypnx = pnx*(Math.log(px/pnx));
            double conditionalentropypny = pny*(Math.log(py/pny));
            double conditionalentropypnz = pnz*(Math.log(pz/pnz));
            double conditionalentropypndot = pndot*(Math.log(pdot/pndot));
            double conditionalentropypncomma = pncomma*(Math.log(pcomma/pncomma));
            double conditionalentropypnvacuum = pnvacuum*(Math.log(pvacuum/pnvacuum));
            double conditionalentropypoa = poa*(Math.log(pa/poa));
            double conditionalentropypob = pob*(Math.log(pb/pob));
            double conditionalentropypoc = poc*(Math.log(pc/poc));
            double conditionalentropypod = pod*(Math.log(pd/pod));
            double conditionalentropypoe = poe*(Math.log(pe/poe));
            double conditionalentropypof = pof*(Math.log(pf/pof));
            double conditionalentropypog = pog*(Math.log(pg/pog));
            double conditionalentropypoh = poh*(Math.log(ph/poh));
            double conditionalentropypoi = poi*(Math.log(pi/poi));
            double conditionalentropypoj = poj*(Math.log(pj/poj));
            double conditionalentropypok = pok*(Math.log(pk/pok));
            double conditionalentropypol = pol*(Math.log(pl/pol));
            double conditionalentropypom = pom*(Math.log(pm/pom));
            double conditionalentropypon = pon*(Math.log(pn/pon));
            double conditionalentropypoo = poo*(Math.log(po/poo));
            double conditionalentropypop = pop*(Math.log(pp/pop));
            double conditionalentropypor = por*(Math.log(pr/por));
            double conditionalentropypos = pos*(Math.log(ps/pos));
            double conditionalentropypot = pot*(Math.log(pt/pot));
            double conditionalentropypou = pou*(Math.log(pu/pou));
            double conditionalentropypov = pov*(Math.log(pv/pov));
            double conditionalentropypow = pow*(Math.log(pw/pow));
            double conditionalentropypox = pox*(Math.log(px/pox));
            double conditionalentropypoy = poy*(Math.log(py/poy));
            double conditionalentropypodot = podot*(Math.log(pdot/podot));
            double conditionalentropypocomma = pocomma*(Math.log(pcomma/pocomma));
            double conditionalentropypovacuum = povacuum*(Math.log(pvacuum/povacuum));
            double conditionalentropyppa = ppa*(Math.log(pa/ppa));
            double conditionalentropyppb = ppb*(Math.log(pb/ppb));
            double conditionalentropyppc = ppc*(Math.log(pc/ppc));
            double conditionalentropyppd = ppd*(Math.log(pd/ppd));
            double conditionalentropyppe = ppe*(Math.log(pe/ppe));
            double conditionalentropyppf = ppf*(Math.log(pf/ppf));
            double conditionalentropyppg = ppg*(Math.log(pg/ppg));
            double conditionalentropypph = pph*(Math.log(ph/pph));
            double conditionalentropyppi = ppi*(Math.log(pi/ppi));
            double conditionalentropyppj = ppj*(Math.log(pj/ppj));
            double conditionalentropyppk = ppk*(Math.log(pk/ppk));
            double conditionalentropyppl = ppl*(Math.log(pl/ppl));
            double conditionalentropyppm = ppm*(Math.log(pm/ppm));
            double conditionalentropyppn = ppn*(Math.log(pn/ppn));
            double conditionalentropyppo = ppo*(Math.log(po/ppo));
            double conditionalentropyppp = ppp*(Math.log(pp/ppp));
            double conditionalentropyppr = ppr*(Math.log(pr/ppr));
            double conditionalentropypps = pps*(Math.log(ps/pps));
            double conditionalentropyppt = ppt*(Math.log(pt/ppt));
            double conditionalentropyppu = ppu*(Math.log(pu/ppu));
            double conditionalentropyppv = ppv*(Math.log(pv/ppv));
            double conditionalentropyppy = ppy*(Math.log(py/ppy));
            double conditionalentropyppdot = ppdot*(Math.log(pdot/ppdot));
            double conditionalentropyppcomma = ppcomma*(Math.log(pcomma/ppcomma));
            double conditionalentropyppvacuum = ppvacuum*(Math.log(pvacuum/ppvacuum));
            double conditionalentropypqu = pqu*(Math.log(pu/pqu));
            double conditionalentropypqvacuum = pqvacuum*(Math.log(pvacuum/pqvacuum));
            double conditionalentropypra = pra*(Math.log(pa/pra));
            double conditionalentropyprb = prb*(Math.log(pb/prb));
            double conditionalentropyprc = prc*(Math.log(pc/prc));
            double conditionalentropyprd = prd*(Math.log(pd/prd));
            double conditionalentropypre = pre*(Math.log(pe/pre));
            double conditionalentropyprf = prf*(Math.log(pf/prf));
            double conditionalentropyprg = prg*(Math.log(pg/prg));
            double conditionalentropyprh = prh*(Math.log(ph/prh));
            double conditionalentropypri = pri*(Math.log(pi/pri));
            double conditionalentropyprj = prj*(Math.log(pj/prj));
            double conditionalentropyprk = prk*(Math.log(pk/prk));
            double conditionalentropyprl = prl*(Math.log(pl/prl));
            double conditionalentropyprm = prm*(Math.log(pm/prm));
            double conditionalentropyprn = prn*(Math.log(pn/prn));
            double conditionalentropypro = pro*(Math.log(po/pro));
            double conditionalentropyprp = prp*(Math.log(pp/prp));
            double conditionalentropyprr = prr*(Math.log(pr/prr));
            double conditionalentropyprs = prs*(Math.log(ps/prs));
            double conditionalentropyprt = prt*(Math.log(pt/prt));
            double conditionalentropypru = pru*(Math.log(pu/pru));
            double conditionalentropyprv = prv*(Math.log(pv/prv));
            double conditionalentropyprw = prw*(Math.log(pw/prw));
            double conditionalentropypry = pry*(Math.log(py/pry));
            double conditionalentropyprdot = prdot*(Math.log(pdot/prdot));
            double conditionalentropyprcomma = prcomma*(Math.log(pcomma/prcomma));
            double conditionalentropyprvacuum = prvacuum*(Math.log(pvacuum/prvacuum));
            double conditionalentropypsa = psa*(Math.log(pa/psa));
            double conditionalentropypsb = psb*(Math.log(pb/psb));
            double conditionalentropypsc = psc*(Math.log(pc/psc));
            double conditionalentropypsd = psd*(Math.log(pd/psd));
            double conditionalentropypse = pse*(Math.log(pe/pse));
            double conditionalentropypsf = psf*(Math.log(pf/psf));
            double conditionalentropypsg = psg*(Math.log(pg/psg));
            double conditionalentropypsh = psh*(Math.log(ph/psh));
            double conditionalentropypsi = psi*(Math.log(pi/psi));
            double conditionalentropypsj = psj*(Math.log(pj/psj));
            double conditionalentropypsk = psk*(Math.log(pk/psk));
            double conditionalentropypsl = psl*(Math.log(pl/psl));
            double conditionalentropypsm = psm*(Math.log(pm/psm));
            double conditionalentropypsn = psn*(Math.log(pn/psn));
            double conditionalentropypso = pso*(Math.log(po/pso));
            double conditionalentropypsp = psp*(Math.log(pp/psp));
            double conditionalentropypsr = psr*(Math.log(pr/psr));
            double conditionalentropypss = pss*(Math.log(ps/pss));
            double conditionalentropypst = pst*(Math.log(pt/pst));
            double conditionalentropypsu = psu*(Math.log(pu/psu));
            double conditionalentropypsv = psv*(Math.log(pv/psv));
            double conditionalentropypsw = psw*(Math.log(pw/psw));
            double conditionalentropypsy = psy*(Math.log(py/psy));
            double conditionalentropypsdot = psdot*(Math.log(pdot/psdot));
            double conditionalentropypscomma = pscomma*(Math.log(pcomma/pscomma));
            double conditionalentropypsvacuum = psvacuum*(Math.log(pvacuum/psvacuum));
            double conditionalentropypta = pta*(Math.log(pa/pta));
            double conditionalentropyptb = ptb*(Math.log(pb/ptb));
            double conditionalentropyptc = ptc*(Math.log(pc/ptc));
            double conditionalentropyptd = ptd*(Math.log(pd/ptd));
            double conditionalentropypte = pte*(Math.log(pe/pte));
            double conditionalentropyptf = ptf*(Math.log(pf/ptf));
            double conditionalentropyptg = ptg*(Math.log(pg/ptg));
            double conditionalentropypth = pth*(Math.log(ph/pth));
            double conditionalentropypti = pti*(Math.log(pi/pti));
            double conditionalentropyptj = ptj*(Math.log(pj/ptj));
            double conditionalentropyptk = ptk*(Math.log(pk/ptk));
            double conditionalentropyptl = ptl*(Math.log(pl/ptl));
            double conditionalentropyptm = ptm*(Math.log(pm/ptm));
            double conditionalentropyptn = ptn*(Math.log(pn/ptn));
            double conditionalentropypto = pto*(Math.log(po/pto));
            double conditionalentropyptp = ptp*(Math.log(pp/ptp));
            double conditionalentropyptr = ptr*(Math.log(pr/ptr));
            double conditionalentropypts = pts*(Math.log(ps/pts));
            double conditionalentropyptt = ptt*(Math.log(pt/ptt));
            double conditionalentropyptu = ptu*(Math.log(pu/ptu));
            double conditionalentropyptv = ptv*(Math.log(pv/ptv));
            double conditionalentropyptw = ptw*(Math.log(pw/ptw));
            double conditionalentropypty = pty*(Math.log(py/pty));
            double conditionalentropyptz = ptz*(Math.log(pz/ptz));
            double conditionalentropyptdot = ptdot*(Math.log(pdot/ptdot));
            double conditionalentropyptcomma = ptcomma*(Math.log(pcomma/ptcomma));
            double conditionalentropyptvacuum = ptvacuum*(Math.log(pvacuum/ptvacuum));
            double conditionalentropypua = pua*(Math.log(pa/pua));
            double conditionalentropypub = pub*(Math.log(pb/pub));
            double conditionalentropypuc = puc*(Math.log(pc/puc));
            double conditionalentropypud = pud*(Math.log(pd/pud));
            double conditionalentropypue = pue*(Math.log(pe/pue));
            double conditionalentropypuf = puf*(Math.log(pf/puf));
            double conditionalentropypug = pug*(Math.log(pg/pug));
            double conditionalentropypuh = puh*(Math.log(ph/puh));
            double conditionalentropypui = pai*(Math.log(pi/pui));
            double conditionalentropypuj = puj*(Math.log(pj/puj));
            double conditionalentropypuk = puk*(Math.log(pk/puk));
            double conditionalentropypul = pul*(Math.log(pl/pul));
            double conditionalentropypum = pum*(Math.log(pm/pum));
            double conditionalentropypun = pun*(Math.log(pn/pun));
            double conditionalentropypuo = puo*(Math.log(po/puo));
            double conditionalentropypup = pup*(Math.log(pp/pup));
            double conditionalentropypur = pur*(Math.log(pr/pur));
            double conditionalentropypus = pus*(Math.log(ps/pus));
            double conditionalentropyput = put*(Math.log(pt/put));
            double conditionalentropypuu = puu*(Math.log(pu/puu));
            double conditionalentropypuv = puv*(Math.log(pv/puv));
            double conditionalentropypuz = puz*(Math.log(pz/puz));
            double conditionalentropypudot = pudot*(Math.log(pdot/pudot));
            double conditionalentropypucomma = pucomma*(Math.log(pcomma/pucomma));
            double conditionalentropypuvacuum = puvacuum*(Math.log(pvacuum/puvacuum));
            double conditionalentropypva = pva*(Math.log(pa/pva));
            double conditionalentropypvb = pvb*(Math.log(pb/pvb));
            double conditionalentropypvd = pvd*(Math.log(pd/pvd));
            double conditionalentropypve = pve*(Math.log(pe/pve));
            double conditionalentropypvf = pvf*(Math.log(pf/pvf));
            double conditionalentropypvg = pvg*(Math.log(pg/pvg));
            double conditionalentropypvh = pvh*(Math.log(ph/pvh));
            double conditionalentropypvi = pvi*(Math.log(pi/pvi));
            double conditionalentropypvj = pvj*(Math.log(pj/pvj));
            double conditionalentropypvk = pvk*(Math.log(pk/pvk));
            double conditionalentropypvl = pvl*(Math.log(pl/pvl));
            double conditionalentropypvm = pvm*(Math.log(pm/pvm));
            double conditionalentropypvn = pvn*(Math.log(pn/pvn));
            double conditionalentropypvo = pvo*(Math.log(po/pvo));
            double conditionalentropypvp = pvp*(Math.log(pp/pvp));
            double conditionalentropypvr = pvr*(Math.log(pr/pvr));
            double conditionalentropypvs = pvs*(Math.log(ps/pvs));
            double conditionalentropypvt = pvt*(Math.log(pt/pvt));
            double conditionalentropypvu = pvu*(Math.log(pu/pvu));
            double conditionalentropypvv = pvv*(Math.log(pv/pvv));
            double conditionalentropypvdot = pvdot*(Math.log(pdot/pvdot));
            double conditionalentropypvcomma = pvcomma*(Math.log(pcomma/pvcomma));
            double conditionalentropypvvacuum = pvvacuum*(Math.log(pvacuum/pvvacuum));
            double conditionalentropypwa = pwa*(Math.log(pa/pwa));
            double conditionalentropypwb = pwb*(Math.log(pb/pwb));
            double conditionalentropypwd = pwd*(Math.log(pd/pwd));
            double conditionalentropypwe = pwe*(Math.log(pe/pwe));
            double conditionalentropypwh = pwh*(Math.log(ph/pwh));
            double conditionalentropypwi = pwi*(Math.log(pi/pwi));
            double conditionalentropypwl = pwl*(Math.log(pl/pwl));
            double conditionalentropypwn = pwn*(Math.log(pn/pwn));
            double conditionalentropypwo = pwo*(Math.log(po/pwo));
            double conditionalentropypww = pww*(Math.log(pw/pww));
            double conditionalentropypwdot = pwdot*(Math.log(pdot/pwdot));
            double conditionalentropypwvacuum = pwvacuum*(Math.log(pvacuum/pwvacuum));
            double conditionalentropypxa = pxa*(Math.log(pa/pxa));
            double conditionalentropypxe = pxe*(Math.log(pe/pxe));
            double conditionalentropypxi = pxi*(Math.log(pi/pxi));
            double conditionalentropypxl = pxl*(Math.log(pl/pxl));
            double conditionalentropypxy = pxy*(Math.log(py/pxy));
            double conditionalentropypxdot = pxdot*(Math.log(pdot/pxdot));
            double conditionalentropypxcomma = pxcomma*(Math.log(pcomma/pxcomma));
            double conditionalentropypxvacuum = pxvacuum*(Math.log(pvacuum/pxvacuum));
            double conditionalentropypya = pya*(Math.log(pa/pya));
            double conditionalentropypyb = pyb*(Math.log(pb/pyb));
            double conditionalentropypyc = pyc*(Math.log(pc/pyc));
            double conditionalentropypyd = pyd*(Math.log(pd/pyd));
            double conditionalentropypye = pye*(Math.log(pe/pye));
            double conditionalentropypyf = pyf*(Math.log(pf/pyf));
            double conditionalentropypyg = pyg*(Math.log(pg/pyg));
            double conditionalentropypyh = pyh*(Math.log(ph/pyh));
            double conditionalentropypyj = pyj*(Math.log(pj/pyj));
            double conditionalentropypyk = pyk*(Math.log(pk/pyk));
            double conditionalentropypyl = pyl*(Math.log(pl/pyl));
            double conditionalentropypym = pym*(Math.log(pm/pym));
            double conditionalentropypyn = pyn*(Math.log(pn/pyn));
            double conditionalentropypyo = pyo*(Math.log(po/pyo));
            double conditionalentropypyp = pyp*(Math.log(pp/pyp));
            double conditionalentropypyr = pyr*(Math.log(pr/pyr));
            double conditionalentropypys = pys*(Math.log(ps/pys));
            double conditionalentropypyt = pyt*(Math.log(pt/pyt));
            double conditionalentropypyu = pyu*(Math.log(pu/pyu));
            double conditionalentropypyv = pyv*(Math.log(pv/pyv));
            double conditionalentropypydot = pydot*(Math.log(pdot/pydot));
            double conditionalentropypycomma = pycomma*(Math.log(pcomma/pycomma));
            double conditionalentropypyvacuum = pyvacuum*(Math.log(pvacuum/pyvacuum));
            double conditionalentropypza = pza*(Math.log(pa/pza));
            double conditionalentropypze = pze*(Math.log(pe/pze));
            double conditionalentropypzh = pzh*(Math.log(ph/pzh));
            double conditionalentropypzi = pzi*(Math.log(pi/pzi));
            double conditionalentropypzo = pzo*(Math.log(po/pzo));
            double conditionalentropypzy = pzy*(Math.log(py/pzy));
            double conditionalentropypzz = pzz*(Math.log(pz/pzz));
            double conditionalentropypzvacuum = pzvacuum*(Math.log(pvacuum/pzvacuum));
            double conditionalentropypdota = pdota*(Math.log(pa/pdota));
            double conditionalentropypdotj = pdotj*(Math.log(pj/pdotj));
            double conditionalentropypdotn = pdotn*(Math.log(pn/pdotn));
            double conditionalentropypdotcomma = pdotcomma*(Math.log(pcomma/pdotcomma));
            double conditionalentropypdotvacuum = pdotvacuum*(Math.log(pvacuum/pdotvacuum));
            double conditionalentropypcommavacuum = pcommavacuum*(Math.log(pvacuum/pcommavacuum));
            double conditionalentropypvacuuma = pvacuuma*(Math.log(pa/pvacuuma));
            double conditionalentropypvacuumb = pvacuumb*(Math.log(pb/pvacuumb));
            double conditionalentropypvacuumc = pvacuumc*(Math.log(pc/pvacuumc));
            double conditionalentropypvacuumd = pvacuumd*(Math.log(pd/pvacuumd));
            double conditionalentropypvacuume = pvacuume*(Math.log(pe/pvacuume));
            double conditionalentropypvacuumf = pvacuumf*(Math.log(pf/pvacuumf));
            double conditionalentropypvacuumg = pvacuumg*(Math.log(pg/pvacuumg));
            double conditionalentropypvacuumh = pvacuumh*(Math.log(ph/pvacuumh));
            double conditionalentropypvacuumi = pvacuumi*(Math.log(pi/pvacuumi));
            double conditionalentropypvacuumj = pvacuumj*(Math.log(pj/pvacuumj));
            double conditionalentropypvacuumk = pvacuumk*(Math.log(pk/pvacuumk));
            double conditionalentropypvacuuml = pvacuuml*(Math.log(pl/pvacuuml));
            double conditionalentropypvacuumm = pvacuumm*(Math.log(pm/pvacuumm));
            double conditionalentropypvacuumn = pvacuumn*(Math.log(pn/pvacuumn));
            double conditionalentropypvacuumo = pvacuumo*(Math.log(po/pvacuumo));
            double conditionalentropypvacuump = pvacuump*(Math.log(pp/pvacuump));
            double conditionalentropypvacuumq = pvacuumq*(Math.log(pq/pvacuumq));
            double conditionalentropypvacuumr = pvacuumr*(Math.log(pr/pvacuumr));
            double conditionalentropypvacuums = pvacuums*(Math.log(ps/pvacuums));
            double conditionalentropypvacuumt = pvacuumt*(Math.log(pt/pvacuumt));
            double conditionalentropypvacuumu = pvacuumu*(Math.log(pu/pvacuumu));
            double conditionalentropypvacuumv = pvacuumv*(Math.log(pv/pvacuumv));
            double conditionalentropypvacuumw = pvacuumw*(Math.log(pw/pvacuumw));
            double conditionalentropypvacuumx = pvacuumx*(Math.log(px/pvacuumx));
            double conditionalentropypvacuumy = pvacuumy*(Math.log(py/pvacuumy));
            double conditionalentropypvacuumz = pvacuumz*(Math.log(pz/pvacuumz));
            double conditionalentropypvacuumdot = pvacuumdot*(Math.log(pdot/pvacuumdot));
            double conditionalentropypvacuumcomma = pvacuumcomma*(Math.log(pcomma/pvacuumcomma));
            double conditionalentropypvacuumvacuum = pvacuumvacuum*(Math.log(pvacuum/pvacuumvacuum));
            
            double sumconditionalentropy = conditionalentropypaa+conditionalentropypab+conditionalentropypac+conditionalentropypad+conditionalentropypae+conditionalentropypaf+conditionalentropypag+conditionalentropypah+conditionalentropypai+conditionalentropypaj+conditionalentropypak+conditionalentropypal+conditionalentropypam+conditionalentropypan+conditionalentropypao+conditionalentropypap+conditionalentropypar+conditionalentropypas+conditionalentropypat+conditionalentropypau+conditionalentropypav+conditionalentropypaw+conditionalentropypax+conditionalentropypay+conditionalentropypaz+conditionalentropypadot+conditionalentropypacomma+conditionalentropypavacuum
                               +conditionalentropypba+conditionalentropypbb+conditionalentropypbd+conditionalentropypbe+conditionalentropypbh+conditionalentropypbi+conditionalentropypbj+conditionalentropypbl+conditionalentropypbm+conditionalentropypbn+conditionalentropypbo+conditionalentropypbr+conditionalentropypbs+conditionalentropypbu+conditionalentropypby+conditionalentropypbdot+conditionalentropypbcomma+conditionalentropypbvacuum
                               +conditionalentropypca+conditionalentropypcc+conditionalentropypcd+conditionalentropypce+conditionalentropypch+conditionalentropypci+conditionalentropypck+conditionalentropypcl+conditionalentropypco+conditionalentropypcr+conditionalentropypcs+conditionalentropypct+conditionalentropypcu+conditionalentropypcv+conditionalentropypccomma+conditionalentropypcvacuum
                               +conditionalentropypda+conditionalentropypdb+conditionalentropypdc+conditionalentropypdd+conditionalentropypde+conditionalentropypdf+conditionalentropypdg+conditionalentropypdh+conditionalentropypdi+conditionalentropypdj+conditionalentropypdk+conditionalentropypdl+conditionalentropypdm+conditionalentropypdn+conditionalentropypdo+conditionalentropypdp+conditionalentropypdr+conditionalentropypds+conditionalentropypdt+conditionalentropypdu+conditionalentropypdv+conditionalentropypdw+conditionalentropypdy+conditionalentropypddot+conditionalentropypdcomma+conditionalentropypdvacuum
                               +conditionalentropypea+conditionalentropypeb+conditionalentropypec+conditionalentropyped+conditionalentropypee+conditionalentropypef+conditionalentropypeg+conditionalentropypeh+conditionalentropypei+conditionalentropypej+conditionalentropypek+conditionalentropypel+conditionalentropypem+conditionalentropypen+conditionalentropypeo+conditionalentropypep+conditionalentropyper+conditionalentropypes+conditionalentropypet+conditionalentropypeu+conditionalentropypev+conditionalentropypex+conditionalentropypey+conditionalentropypedot+conditionalentropypecomma+conditionalentropypevacuum
                               +conditionalentropypfa+conditionalentropypfb+conditionalentropypfe+conditionalentropypff+conditionalentropypfi+conditionalentropypfj+conditionalentropypfl+conditionalentropypfm+conditionalentropypfn+conditionalentropypfo+conditionalentropypfr+conditionalentropypfs+conditionalentropypft+conditionalentropypfu+conditionalentropypfy+conditionalentropypfdot+conditionalentropypfcomma+conditionalentropypfvacuum
                               +conditionalentropypga+conditionalentropypgb+conditionalentropypgd+conditionalentropypge+conditionalentropypgf+conditionalentropypgg+conditionalentropypgh+conditionalentropypgi+conditionalentropypgj+conditionalentropypgk+conditionalentropypgl+conditionalentropypgm+conditionalentropypgn+conditionalentropypgo+conditionalentropypgp+conditionalentropypgr+conditionalentropypgs+conditionalentropypgt+conditionalentropypgu+conditionalentropypgv+conditionalentropypgy+conditionalentropypgdot+conditionalentropypgcomma+conditionalentropypgvacuum
                               +conditionalentropypha+conditionalentropyphb+conditionalentropyphc+conditionalentropyphd+conditionalentropyphe+conditionalentropyphi+conditionalentropyphj+conditionalentropyphl+conditionalentropyphn+conditionalentropypho+conditionalentropyphr+conditionalentropypht+conditionalentropyphu+conditionalentropyphv+conditionalentropyphy+conditionalentropyphdot+conditionalentropyphcomma+conditionalentropyphvacuum
                               +conditionalentropypia+conditionalentropypib+conditionalentropypic+conditionalentropypid+conditionalentropypie+conditionalentropypif+conditionalentropypig+conditionalentropypih+conditionalentropypii+conditionalentropypik+conditionalentropypil+conditionalentropypim+conditionalentropypin+conditionalentropypio+conditionalentropypip+conditionalentropypiq+conditionalentropypir+conditionalentropypis+conditionalentropypit+conditionalentropypiu+conditionalentropypiv+conditionalentropypiz+conditionalentropypidot+conditionalentropypicomma+conditionalentropypivacuum
                               +conditionalentropypja+conditionalentropypje+conditionalentropypji+conditionalentropypjo+conditionalentropypjr+conditionalentropypju+conditionalentropypjy+conditionalentropypjdot+conditionalentropypjcomma+conditionalentropypjvacuum
                               +conditionalentropypka+conditionalentropypkb+conditionalentropypkd+conditionalentropypke+conditionalentropypkf+conditionalentropypkg+conditionalentropypkh+conditionalentropypki+conditionalentropypkj+conditionalentropypkk+conditionalentropypkl+conditionalentropypkm+conditionalentropypkn+conditionalentropypko+conditionalentropypkp+conditionalentropypkr+conditionalentropypks+conditionalentropypkt+conditionalentropypku+conditionalentropypkv+conditionalentropypky+conditionalentropypkdot+conditionalentropypkcomma+conditionalentropypkvacuum
                               +conditionalentropypla+conditionalentropyplb+conditionalentropyplc+conditionalentropypld+conditionalentropyple+conditionalentropyplf+conditionalentropyplg+conditionalentropyplh+conditionalentropypli+conditionalentropyplj+conditionalentropyplk+conditionalentropypll+conditionalentropyplm+conditionalentropypln+conditionalentropyplo+conditionalentropyplp+conditionalentropyplr+conditionalentropypls+conditionalentropyplt+conditionalentropyplu+conditionalentropyplv+conditionalentropyplw+conditionalentropyply+conditionalentropyplz+conditionalentropypldot+conditionalentropyplcomma+conditionalentropyplvacuum
                               +conditionalentropypma+conditionalentropypmb+conditionalentropypmd+conditionalentropypme+conditionalentropypmf+conditionalentropypmg+conditionalentropypmh+conditionalentropypmi+conditionalentropypmk+conditionalentropypml+conditionalentropypmm+conditionalentropypmn+conditionalentropypmo+conditionalentropypmp+conditionalentropypmr+conditionalentropypms+conditionalentropypmt+conditionalentropypmu+conditionalentropypmv+conditionalentropypmw+conditionalentropypmy+conditionalentropypmdot+conditionalentropypmcomma+conditionalentropypmvacuum
                               +conditionalentropypna+conditionalentropypnb+conditionalentropypnc+conditionalentropypnd+conditionalentropypne+conditionalentropypnf+conditionalentropypng+conditionalentropypnh+conditionalentropypni+conditionalentropypnj+conditionalentropypnk+conditionalentropypnl+conditionalentropypnm+conditionalentropypnn+conditionalentropypno+conditionalentropypnp+conditionalentropypnr+conditionalentropypns+conditionalentropypnt+conditionalentropypnu+conditionalentropypnv+conditionalentropypnx+conditionalentropypny+conditionalentropypnz+conditionalentropypndot+conditionalentropypncomma+conditionalentropypnvacuum
                               +conditionalentropypoa+conditionalentropypob+conditionalentropypoc+conditionalentropypod+conditionalentropypoe+conditionalentropypof+conditionalentropypog+conditionalentropypoh+conditionalentropypoi+conditionalentropypoj+conditionalentropypok+conditionalentropypol+conditionalentropypom+conditionalentropypon+conditionalentropypoo+conditionalentropypop+conditionalentropypor+conditionalentropypos+conditionalentropypot+conditionalentropypou+conditionalentropypov+conditionalentropypow+conditionalentropypox+conditionalentropypoy+conditionalentropypodot+conditionalentropypocomma+conditionalentropypovacuum
                               +conditionalentropyppa+conditionalentropyppb+conditionalentropyppc+conditionalentropyppd+conditionalentropyppe+conditionalentropyppf+conditionalentropyppg+conditionalentropypph+conditionalentropyppi+conditionalentropyppj+conditionalentropyppk+conditionalentropyppl+conditionalentropyppm+conditionalentropyppn+conditionalentropyppo+conditionalentropyppp+conditionalentropyppr+conditionalentropypps+conditionalentropyppt+conditionalentropyppu+conditionalentropyppv+conditionalentropyppy+conditionalentropyppdot+conditionalentropyppcomma+conditionalentropyppvacuum
                               +conditionalentropypqu+conditionalentropypqvacuum
                               +conditionalentropypra+conditionalentropyprb+conditionalentropyprc+conditionalentropyprd+conditionalentropypre+conditionalentropyprf+conditionalentropyprg+conditionalentropyprh+conditionalentropypri+conditionalentropyprj+conditionalentropyprk+conditionalentropyprl+conditionalentropyprm+conditionalentropyprn+conditionalentropypro+conditionalentropyprp+conditionalentropyprr+conditionalentropyprs+conditionalentropyprt+conditionalentropypru+conditionalentropyprv+conditionalentropyprw+conditionalentropypry+conditionalentropyprdot+conditionalentropyprcomma+conditionalentropyprvacuum
                               +conditionalentropypsa+conditionalentropypsb+conditionalentropypsc+conditionalentropypsd+conditionalentropypse+conditionalentropypsf+conditionalentropypsg+conditionalentropypsh+conditionalentropypsi+conditionalentropypsj+conditionalentropypsk+conditionalentropypsl+conditionalentropypsm+conditionalentropypsn+conditionalentropypso+conditionalentropypsp+conditionalentropypsr+conditionalentropypss+conditionalentropypst+conditionalentropypsu+conditionalentropypsv+conditionalentropypsw+conditionalentropypsy+conditionalentropypsdot+conditionalentropypscomma+conditionalentropypsvacuum
                               +conditionalentropypta+conditionalentropyptb+conditionalentropyptc+conditionalentropyptd+conditionalentropypte+conditionalentropyptf+conditionalentropyptg+conditionalentropypth+conditionalentropypti+conditionalentropyptj+conditionalentropyptk+conditionalentropyptl+conditionalentropyptm+conditionalentropyptn+conditionalentropypto+conditionalentropyptp+conditionalentropyptr+conditionalentropypts+conditionalentropyptt+conditionalentropyptu+conditionalentropyptv+conditionalentropyptw+conditionalentropypty+conditionalentropyptz+conditionalentropyptdot+conditionalentropyptcomma+conditionalentropyptvacuum
                               +conditionalentropypua+conditionalentropypub+conditionalentropypuc+conditionalentropypud+conditionalentropypue+conditionalentropypuf+conditionalentropypug+conditionalentropypuh+conditionalentropypui+conditionalentropypuj+conditionalentropypuk+conditionalentropypul+conditionalentropypum+conditionalentropypun+conditionalentropypuo+conditionalentropypup+conditionalentropypur+conditionalentropypus+conditionalentropyput+conditionalentropypuu+conditionalentropypuv+conditionalentropypuz+conditionalentropypudot+conditionalentropypucomma+conditionalentropypuvacuum
                               +conditionalentropypva+conditionalentropypvb+conditionalentropypvd+conditionalentropypve+conditionalentropypvf+conditionalentropypvg+conditionalentropypvh+conditionalentropypvi+conditionalentropypvj+conditionalentropypvk+conditionalentropypvl+conditionalentropypvm+conditionalentropypvn+conditionalentropypvo+conditionalentropypvp+conditionalentropypvr+conditionalentropypvs+conditionalentropypvt+conditionalentropypvu+conditionalentropypvv+conditionalentropypvdot+conditionalentropypvcomma+conditionalentropypvvacuum
                               +conditionalentropypwa+conditionalentropypwb+conditionalentropypwd+conditionalentropypwe+conditionalentropypwh+conditionalentropypwi+conditionalentropypwl+conditionalentropypwn+conditionalentropypwo+conditionalentropypww+conditionalentropypwdot+conditionalentropypwvacuum
                               +conditionalentropypxa+conditionalentropypxe+conditionalentropypxi+conditionalentropypxl+conditionalentropypxy+conditionalentropypxdot+conditionalentropypxcomma+conditionalentropypxvacuum
                               +conditionalentropypya+conditionalentropypyb+conditionalentropypyc+conditionalentropypyd+conditionalentropypye+conditionalentropypyf+conditionalentropypyg+conditionalentropypyh+conditionalentropypyj+conditionalentropypyk+conditionalentropypyl+conditionalentropypym+conditionalentropypyn+conditionalentropypyo+conditionalentropypyp+conditionalentropypyr+conditionalentropypys+conditionalentropypyt+conditionalentropypyu+conditionalentropypyv+conditionalentropypydot+conditionalentropypycomma+conditionalentropypyvacuum
                               +conditionalentropypza+conditionalentropypze+conditionalentropypzh+conditionalentropypzi+conditionalentropypzo+conditionalentropypzy+conditionalentropypzz+conditionalentropypzvacuum
                               +conditionalentropypdota+conditionalentropypdotj+conditionalentropypdotn+conditionalentropypdotcomma+conditionalentropypdotvacuum+conditionalentropypcommavacuum
                               +conditionalentropypvacuuma+conditionalentropypvacuumb+conditionalentropypvacuumc+conditionalentropypvacuumd+conditionalentropypvacuume+conditionalentropypvacuumf+conditionalentropypvacuumg+conditionalentropypvacuumh+conditionalentropypvacuumi+conditionalentropypvacuumj+conditionalentropypvacuumk+conditionalentropypvacuuml+conditionalentropypvacuumm+conditionalentropypvacuumn+conditionalentropypvacuumo+conditionalentropypvacuump+conditionalentropypvacuumq+conditionalentropypvacuumr+conditionalentropypvacuums+conditionalentropypvacuumt+conditionalentropypvacuumu+conditionalentropypvacuumv+conditionalentropypvacuumw+conditionalentropypvacuumx+conditionalentropypvacuumy+conditionalentropypvacuumz+conditionalentropypvacuumdot+conditionalentropypvacuumcomma+conditionalentropypvacuumvacuum;                   
            
            System.out.println("\nP(aa)*log(P(a)/P(aa)) = " + conditionalentropypaa );
            System.out.println("\nP(ab)*log(P(b)/P(ab)) = " + conditionalentropypab );
            System.out.println("\nP(ac)*log(P(c)/P(ac)) = " + conditionalentropypac );
            System.out.println("\nP(ad)*log(P(d)/P(ad)) = " + conditionalentropypad );
            System.out.println("\nP(ae)*log(P(e)/P(ae)) = " + conditionalentropypae );
            System.out.println("\nP(af)*log(P(f)/P(af)) = " + conditionalentropypaf );
            System.out.println("\nP(ag)*log(P(g)/P(ag)) = " + conditionalentropypag );
            System.out.println("\nP(ah)*log(P(h)/P(ah)) = " + conditionalentropypah );
            System.out.println("\nP(ai)*log(P(i)/P(ai)) = " + conditionalentropypai );
            System.out.println("\nP(aj)*log(P(j)/P(aj)) = " + conditionalentropypaj );
            System.out.println("\nP(ak)*log(P(k)/P(ak)) = " + conditionalentropypak );
            System.out.println("\nP(al)*log(P(l)/P(al)) = " + conditionalentropypal );
            System.out.println("\nP(am)*log(P(m)/P(am)) = " + conditionalentropypam );
            System.out.println("\nP(an)*log(P(n)/P(an)) = " + conditionalentropypan );
            System.out.println("\nP(ao)*log(P(o)/P(ao)) = " + conditionalentropypao );
            System.out.println("\nP(ap)*log(P(p)/P(ap)) = " + conditionalentropypap );
            System.out.println("\nP(ar)*log(P(r)/P(ar)) = " + conditionalentropypar );
            System.out.println("\nP(as)*log(P(s)/P(as)) = " + conditionalentropypas );
            System.out.println("\nP(at)*log(P(t)/P(at)) = " + conditionalentropypat );
            System.out.println("\nP(au)*log(P(u)/P(au)) = " + conditionalentropypau );
            System.out.println("\nP(av)*log(P(v)/P(av)) = " + conditionalentropypav );
            System.out.println("\nP(aw)*log(P(w)/P(aw)) = " + conditionalentropypaw );
            System.out.println("\nP(ax)*log(P(x)/P(ax)) = " + conditionalentropypax );
            System.out.println("\nP(ay)*log(P(y)/P(ay)) = " + conditionalentropypay );
            System.out.println("\nP(az)*log(P(z)/P(az)) = " + conditionalentropypaz );
            System.out.println("\nP(a.)*log(P(.)/P(a.)) = " + conditionalentropypadot );
            System.out.println("\nP(a,)*log(P(,)/P(a,)) = " + conditionalentropypacomma );
            System.out.println("\nP(avacuum)*log(P(vacuum)/P(avacuum)) = " + conditionalentropypavacuum );
            System.out.println("\nP(ba)*log(P(a)/P(ba)) = " + conditionalentropypba );
            System.out.println("\nP(bb)*log(P(b)/P(bb)) = " + conditionalentropypbb );
            System.out.println("\nP(bd)*log(P(d)/P(bd)) = " + conditionalentropypbd );
            System.out.println("\nP(be)*log(P(e)/P(be)) = " + conditionalentropypbe );
            System.out.println("\nP(bh)*log(P(h)/P(bh)) = " + conditionalentropypbh );
            System.out.println("\nP(bi)*log(P(i)/P(bi)) = " + conditionalentropypbi );
            System.out.println("\nP(bj)*log(P(j)/P(bj)) = " + conditionalentropypbj );
            System.out.println("\nP(bl)*log(P(l)/P(bl)) = " + conditionalentropypbl );
            System.out.println("\nP(bm)*log(P(m)/P(bm)) = " + conditionalentropypbm );
            System.out.println("\nP(bn)*log(P(n)/P(bn)) = " + conditionalentropypbn );
            System.out.println("\nP(bo)*log(P(o)/P(bo)) = " + conditionalentropypbo );
            System.out.println("\nP(br)*log(P(r)/P(br)) = " + conditionalentropypbr );
            System.out.println("\nP(bs)*log(P(s)/P(bs)) = " + conditionalentropypbs );
            System.out.println("\nP(bu)*log(P(u)/P(bu)) = " + conditionalentropypbu );
            System.out.println("\nP(by)*log(P(y)/P(by)) = " + conditionalentropypby );
            System.out.println("\nP(b.)*log(P(.)/P(b.)) = " + conditionalentropypbdot );
            System.out.println("\nP(b,)*log(P(,)/P(b,)) = " + conditionalentropypbcomma );
            System.out.println("\nP(bvacuum)*log(P(vacuum)/P(bvacuum)) = " + conditionalentropypbvacuum );
            System.out.println("\nP(ca)*log(P(a)/P(ca)) = " + conditionalentropypca );
            System.out.println("\nP(cc)*log(P(c)/P(cc)) = " + conditionalentropypcc );
            System.out.println("\nP(cd)*log(P(d)/P(cd)) = " + conditionalentropypcd );
            System.out.println("\nP(ce)*log(P(e)/P(ce)) = " + conditionalentropypce );
            System.out.println("\nP(ch)*log(P(h)/P(ch)) = " + conditionalentropypch );
            System.out.println("\nP(ci)*log(P(i)/P(ci)) = " + conditionalentropypci );
            System.out.println("\nP(ck)*log(P(k)/P(ck)) = " + conditionalentropypck );
            System.out.println("\nP(cl)*log(P(l)/P(cl)) = " + conditionalentropypcl );
            System.out.println("\nP(co)*log(P(o)/P(co)) = " + conditionalentropypco );
            System.out.println("\nP(cr)*log(P(r)/P(cr)) = " + conditionalentropypcr );
            System.out.println("\nP(cs)*log(P(s)/P(cs)) = " + conditionalentropypcs );
            System.out.println("\nP(ct)*log(P(t)/P(ct)) = " + conditionalentropypct );
            System.out.println("\nP(cu)*log(P(u)/P(cu)) = " + conditionalentropypcu );
            System.out.println("\nP(cv)*log(P(v)/P(cv)) = " + conditionalentropypcv );
            System.out.println("\nP(c,)*log(P(,)/P(c,)) = " + conditionalentropypccomma );
            System.out.println("\nP(cvacuum)*log(P(vacuum)/P(cvacuum)) = " + conditionalentropypcvacuum );
            System.out.println("\nP(da)*log(P(a)/P(da)) = " + conditionalentropypda );
            System.out.println("\nP(db)*log(P(b)/P(db)) = " + conditionalentropypdb );
            System.out.println("\nP(dc)*log(P(c)/P(dc)) = " + conditionalentropypdc );
            System.out.println("\nP(dd)*log(P(d)/P(dd)) = " + conditionalentropypdd );
            System.out.println("\nP(de)*log(P(e)/P(de)) = " + conditionalentropypde );
            System.out.println("\nP(df)*log(P(f)/P(df)) = " + conditionalentropypdf );
            System.out.println("\nP(dg)*log(P(g)/P(dg)) = " + conditionalentropypdg );
            System.out.println("\nP(dh)*log(P(h)/P(dh)) = " + conditionalentropypdh );
            System.out.println("\nP(di)*log(P(i)/P(di)) = " + conditionalentropypdi );
            System.out.println("\nP(dj)*log(P(j)/P(dj)) = " + conditionalentropypdj );
            System.out.println("\nP(dk)*log(P(k)/P(dk)) = " + conditionalentropypdk );
            System.out.println("\nP(dl)*log(P(l)/P(dl)) = " + conditionalentropypdl );
            System.out.println("\nP(dm)*log(P(m)/P(dm)) = " + conditionalentropypdm );
            System.out.println("\nP(dn)*log(P(n)/P(dn)) = " + conditionalentropypdn );
            System.out.println("\nP(do)*log(P(o)/P(do)) = " + conditionalentropypdo );
            System.out.println("\nP(dp)*log(P(p)/P(dp)) = " + conditionalentropypdp );
            System.out.println("\nP(dr)*log(P(r)/P(dr)) = " + conditionalentropypdr );
            System.out.println("\nP(ds)*log(P(s)/P(ds)) = " + conditionalentropypds );
            System.out.println("\nP(dt)*log(P(t)/P(dt)) = " + conditionalentropypdt );
            System.out.println("\nP(du)*log(P(u)/P(du)) = " + conditionalentropypdu );
            System.out.println("\nP(dv)*log(P(v)/P(dv)) = " + conditionalentropypdv );
            System.out.println("\nP(dw)*log(P(w)/P(dw)) = " + conditionalentropypdw );
            System.out.println("\nP(dy)*log(P(y)/P(dy)) = " + conditionalentropypdy );
            System.out.println("\nP(d.)*log(P(.)/P(d.)) = " + conditionalentropypddot );
            System.out.println("\nP(d,)*log(P(,)/P(d,)) = " + conditionalentropypdcomma );
            System.out.println("\nP(dvacuum)*log(P(vacuum)/P(dvacuum)) = " + conditionalentropypdvacuum ); 
            System.out.println("\nP(ea)*log(P(a)/P(ea)) = " + conditionalentropypea );
            System.out.println("\nP(eb)*log(P(b)/P(eb)) = " + conditionalentropypeb );
            System.out.println("\nP(ec)*log(P(c)/P(ec)) = " + conditionalentropypec );
            System.out.println("\nP(ed)*log(P(d)/P(ed)) = " + conditionalentropyped );
            System.out.println("\nP(ee)*log(P(e)/P(ee)) = " + conditionalentropypee );
            System.out.println("\nP(ef)*log(P(f)/P(ef)) = " + conditionalentropypef );
            System.out.println("\nP(eg)*log(P(g)/P(eg)) = " + conditionalentropypeg );
            System.out.println("\nP(eh)*log(P(h)/P(eh)) = " + conditionalentropypeh );
            System.out.println("\nP(ei)*log(P(i)/P(ei)) = " + conditionalentropypei );
            System.out.println("\nP(ej)*log(P(j)/P(ej)) = " + conditionalentropypej );
            System.out.println("\nP(ek)*log(P(k)/P(ek)) = " + conditionalentropypek );
            System.out.println("\nP(el)*log(P(l)/P(el)) = " + conditionalentropypel );
            System.out.println("\nP(em)*log(P(m)/P(em)) = " + conditionalentropypem );
            System.out.println("\nP(en)*log(P(n)/P(en)) = " + conditionalentropypen );
            System.out.println("\nP(eo)*log(P(o)/P(eo)) = " + conditionalentropypeo );
            System.out.println("\nP(ep)*log(P(p)/P(ep)) = " + conditionalentropypep );
            System.out.println("\nP(er)*log(P(r)/P(er)) = " + conditionalentropyper );
            System.out.println("\nP(es)*log(P(s)/P(es)) = " + conditionalentropypes );
            System.out.println("\nP(et)*log(P(t)/P(et)) = " + conditionalentropypet );
            System.out.println("\nP(eu)*log(P(u)/P(eu)) = " + conditionalentropypeu );
            System.out.println("\nP(ev)*log(P(v)/P(ev)) = " + conditionalentropypev );
            System.out.println("\nP(ex)*log(P(x)/P(ex)) = " + conditionalentropypex );
            System.out.println("\nP(ey)*log(P(y)/P(ey)) = " + conditionalentropypey );
            System.out.println("\nP(e.)*log(P(.)/P(e.)) = " + conditionalentropypedot );
            System.out.println("\nP(e,)*log(P(,)/P(e,)) = " + conditionalentropypecomma );
            System.out.println("\nP(evacuum)*log(P(vacuum)/P(evacuum)) = " + conditionalentropypevacuum );
            System.out.println("\nP(fa)*log(P(a)/P(fa)) = " + conditionalentropypfa );
            System.out.println("\nP(fb)*log(P(b)/P(fb)) = " + conditionalentropypfb );
            System.out.println("\nP(fe)*log(P(e)/P(fe)) = " + conditionalentropypfe );
            System.out.println("\nP(ff)*log(P(f)/P(ff)) = " + conditionalentropypff );
            System.out.println("\nP(fi)*log(P(i)/P(fi)) = " + conditionalentropypfi );
            System.out.println("\nP(fj)*log(P(j)/P(fj)) = " + conditionalentropypfj );
            System.out.println("\nP(fl)*log(P(l)/P(fl)) = " + conditionalentropypfl );
            System.out.println("\nP(fm)*log(P(m)/P(fm)) = " + conditionalentropypfm );
            System.out.println("\nP(fn)*log(P(n)/P(fn)) = " + conditionalentropypfn );
            System.out.println("\nP(fo)*log(P(o)/P(fo)) = " + conditionalentropypfo );
            System.out.println("\nP(fr)*log(P(r)/P(fr)) = " + conditionalentropypfr );
            System.out.println("\nP(fs)*log(P(s)/P(fs)) = " + conditionalentropypfs );
            System.out.println("\nP(ft)*log(P(t)/P(ft)) = " + conditionalentropypft );
            System.out.println("\nP(fu)*log(P(u)/P(fu)) = " + conditionalentropypfu );
            System.out.println("\nP(fy)*log(P(y)/P(fy)) = " + conditionalentropypfy );
            System.out.println("\nP(f.)*log(P(.)/P(f.)) = " + conditionalentropypfdot );
            System.out.println("\nP(f,)*log(P(,)/P(f,)) = " + conditionalentropypfcomma );
            System.out.println("\nP(fvacuum)*log(P(vacuum)/P(fvacuum)) = " + conditionalentropypfvacuum );
            System.out.println("\nP(ga)*log(P(a)/P(ga)) = " + conditionalentropypga );
            System.out.println("\nP(gb)*log(P(b)/P(gb)) = " + conditionalentropypgb );
            System.out.println("\nP(gd)*log(P(d)/P(gd)) = " + conditionalentropypgd );
            System.out.println("\nP(ge)*log(P(e)/P(ge)) = " + conditionalentropypge );
            System.out.println("\nP(gf)*log(P(f)/P(gf)) = " + conditionalentropypgf );
            System.out.println("\nP(gg)*log(P(g)/P(gg)) = " + conditionalentropypgg );
            System.out.println("\nP(gh)*log(P(h)/P(gh)) = " + conditionalentropypgh );
            System.out.println("\nP(gi)*log(P(i)/P(gi)) = " + conditionalentropypgi );
            System.out.println("\nP(gj)*log(P(j)/P(gj)) = " + conditionalentropypgj );
            System.out.println("\nP(gk)*log(P(k)/P(gk)) = " + conditionalentropypgk );
            System.out.println("\nP(gl)*log(P(l)/P(gl)) = " + conditionalentropypgl );
            System.out.println("\nP(gm)*log(P(m)/P(gm)) = " + conditionalentropypgm );
            System.out.println("\nP(gn)*log(P(n)/P(gn)) = " + conditionalentropypgn );
            System.out.println("\nP(go)*log(P(o)/P(go)) = " + conditionalentropypgo );
            System.out.println("\nP(gp)*log(P(p)/P(gp)) = " + conditionalentropypgp );
            System.out.println("\nP(gr)*log(P(r)/P(gr)) = " + conditionalentropypgr );
            System.out.println("\nP(gs)*log(P(s)/P(gs)) = " + conditionalentropypgs );
            System.out.println("\nP(gt)*log(P(t)/P(gt)) = " + conditionalentropypgt );
            System.out.println("\nP(gu)*log(P(u)/P(gu)) = " + conditionalentropypgu );
            System.out.println("\nP(gv)*log(P(v)/P(gv)) = " + conditionalentropypgv );
            System.out.println("\nP(gy)*log(P(y)/P(gy)) = " + conditionalentropypgy );
            System.out.println("\nP(g.)*log(P(.)/P(g.)) = " + conditionalentropypgdot );
            System.out.println("\nP(g,)*log(P(,)/P(g,)) = " + conditionalentropypgcomma );
            System.out.println("\nP(gvacuum)*log(P(vacuum)/P(gvacuum)) = " + conditionalentropypgvacuum );
            System.out.println("\nP(ha)*log(P(a)/P(ha)) = " + conditionalentropypha );
            System.out.println("\nP(hb)*log(P(b)/P(hb)) = " + conditionalentropyphb );
            System.out.println("\nP(hc)*log(P(c)/P(hc)) = " + conditionalentropyphc );
            System.out.println("\nP(hd)*log(P(d)/P(hd)) = " + conditionalentropyphd );
            System.out.println("\nP(he)*log(P(e)/P(he)) = " + conditionalentropyphe );
            System.out.println("\nP(hi)*log(P(i)/P(hi)) = " + conditionalentropyphi );
            System.out.println("\nP(hj)*log(P(j)/P(hj)) = " + conditionalentropyphj );
            System.out.println("\nP(hl)*log(P(l)/P(hl)) = " + conditionalentropyphl );
            System.out.println("\nP(hn)*log(P(n)/P(hn)) = " + conditionalentropyphn );
            System.out.println("\nP(ho)*log(P(o)/P(ho)) = " + conditionalentropypho );
            System.out.println("\nP(hr)*log(P(r)/P(hr)) = " + conditionalentropyphr );
            System.out.println("\nP(ht)*log(P(t)/P(ht)) = " + conditionalentropypht );
            System.out.println("\nP(hu)*log(P(u)/P(hu)) = " + conditionalentropyphu );
            System.out.println("\nP(hv)*log(P(v)/P(hv)) = " + conditionalentropyphv );
            System.out.println("\nP(hy)*log(P(y)/P(hy)) = " + conditionalentropyphy );
            System.out.println("\nP(h.)*log(P(.)/P(h.)) = " + conditionalentropyphdot );
            System.out.println("\nP(h,)*log(P(,)/P(h,)) = " + conditionalentropyphcomma );
            System.out.println("\nP(hvacuum)*log(P(vacuum)/P(hvacuum)) = " + conditionalentropyphvacuum );
            System.out.println("\nP(ia)*log(P(a)/P(ia)) = " + conditionalentropypia );
            System.out.println("\nP(ib)*log(P(b)/P(ib)) = " + conditionalentropypib );
            System.out.println("\nP(ic)*log(P(c)/P(ic)) = " + conditionalentropypic );
            System.out.println("\nP(id)*log(P(d)/P(id)) = " + conditionalentropypid );
            System.out.println("\nP(ie)*log(P(e)/P(ie)) = " + conditionalentropypie );
            System.out.println("\nP(if)*log(P(f)/P(if)) = " + conditionalentropypif );
            System.out.println("\nP(ig)*log(P(g)/P(ig)) = " + conditionalentropypig );
            System.out.println("\nP(ih)*log(P(h)/P(ih)) = " + conditionalentropypih );
            System.out.println("\nP(ii)*log(P(i)/P(ii)) = " + conditionalentropypii );
            System.out.println("\nP(ik)*log(P(k)/P(ik)) = " + conditionalentropypik );
            System.out.println("\nP(il)*log(P(l)/P(il)) = " + conditionalentropypil );
            System.out.println("\nP(im)*log(P(m)/P(im)) = " + conditionalentropypim );
            System.out.println("\nP(in)*log(P(n)/P(in)) = " + conditionalentropypin );
            System.out.println("\nP(io)*log(P(o)/P(io)) = " + conditionalentropypio );
            System.out.println("\nP(ip)*log(P(p)/P(ip)) = " + conditionalentropypip );
            System.out.println("\nP(iq)*log(P(q)/P(iq)) = " + conditionalentropypiq );
            System.out.println("\nP(ir)*log(P(r)/P(ir)) = " + conditionalentropypir );
            System.out.println("\nP(is)*log(P(s)/P(is)) = " + conditionalentropypis );
            System.out.println("\nP(it)*log(P(t)/P(it)) = " + conditionalentropypit );
            System.out.println("\nP(iu)*log(P(u)/P(iu)) = " + conditionalentropypiu );
            System.out.println("\nP(iv)*log(P(v)/P(iv)) = " + conditionalentropypiv );
            System.out.println("\nP(iz)*log(P(z)/P(iz)) = " + conditionalentropypiz );
            System.out.println("\nP(i.)*log(P(.)/P(i.)) = " + conditionalentropypidot );
            System.out.println("\nP(i,)*log(P(,)/P(i,)) = " + conditionalentropypicomma );
            System.out.println("\nP(ivacuum)*log(P(vacuum)/P(ivacuum)) = " + conditionalentropypivacuum );
            System.out.println("\nP(ja)*log(P(a)/P(ja)) = " + conditionalentropypja );
            System.out.println("\nP(je)*log(P(e)/P(je)) = " + conditionalentropypje );
            System.out.println("\nP(ji)*log(P(i)/P(ji)) = " + conditionalentropypji );
            System.out.println("\nP(jo)*log(P(o)/P(jo)) = " + conditionalentropypjo );
            System.out.println("\nP(jr)*log(P(r)/P(jr)) = " + conditionalentropypjr );
            System.out.println("\nP(ju)*log(P(u)/P(ju)) = " + conditionalentropypju );
            System.out.println("\nP(jy)*log(P(y)/P(jy)) = " + conditionalentropypjy );
            System.out.println("\nP(j.)*log(P(.)/P(j.)) = " + conditionalentropypjdot );
            System.out.println("\nP(j,)*log(P(,)/P(j,)) = " + conditionalentropypjcomma );
            System.out.println("\nP(jvacuum)*log(P(vacuum)/P(jvacuum)) = " + conditionalentropypjvacuum );
            System.out.println("\nP(ka)*log(P(a)/P(ka)) = " + conditionalentropypka );
            System.out.println("\nP(kb)*log(P(b)/P(kb)) = " + conditionalentropypkb );
            System.out.println("\nP(kd)*log(P(d)/P(kd)) = " + conditionalentropypkd );
            System.out.println("\nP(ke)*log(P(e)/P(ke)) = " + conditionalentropypke );
            System.out.println("\nP(kf)*log(P(f)/P(kf)) = " + conditionalentropypkf );
            System.out.println("\nP(kg)*log(P(g)/P(kg)) = " + conditionalentropypkg );
            System.out.println("\nP(kh)*log(P(h)/P(kh)) = " + conditionalentropypkh );
            System.out.println("\nP(ki)*log(P(i)/P(ki)) = " + conditionalentropypki );
            System.out.println("\nP(kj)*log(P(j)/P(kj)) = " + conditionalentropypkj );
            System.out.println("\nP(kk)*log(P(k)/P(kk)) = " + conditionalentropypkk );
            System.out.println("\nP(kl)*log(P(l)/P(kl)) = " + conditionalentropypkl );
            System.out.println("\nP(km)*log(P(m)/P(km)) = " + conditionalentropypkm );
            System.out.println("\nP(kn)*log(P(n)/P(kn)) = " + conditionalentropypkn );
            System.out.println("\nP(ko)*log(P(o)/P(ko)) = " + conditionalentropypko );
            System.out.println("\nP(kp)*log(P(p)/P(kp)) = " + conditionalentropypkp );
            System.out.println("\nP(kr)*log(P(r)/P(kr)) = " + conditionalentropypkr );
            System.out.println("\nP(ks)*log(P(s)/P(ks)) = " + conditionalentropypks );
            System.out.println("\nP(kt)*log(P(t)/P(kt)) = " + conditionalentropypkt );
            System.out.println("\nP(ku)*log(P(u)/P(ku)) = " + conditionalentropypku );
            System.out.println("\nP(kv)*log(P(v)/P(kv)) = " + conditionalentropypkv );
            System.out.println("\nP(ky)*log(P(y)/P(ky)) = " + conditionalentropypky );
            System.out.println("\nP(k.)*log(P(.)/P(k.)) = " + conditionalentropypkdot );
            System.out.println("\nP(k,)*log(P(,)/P(k,)) = " + conditionalentropypkcomma );
            System.out.println("\nP(avacuum)*log(P(vacuum)/P(kvacuum)) = " + conditionalentropypkvacuum );
            System.out.println("\nP(la)*log(P(a)/P(la)) = " + conditionalentropypla );
            System.out.println("\nP(lb)*log(P(b)/P(lb)) = " + conditionalentropyplb );
            System.out.println("\nP(lc)*log(P(c)/P(lc)) = " + conditionalentropyplc );
            System.out.println("\nP(ld)*log(P(d)/P(ld)) = " + conditionalentropypld );
            System.out.println("\nP(le)*log(P(e)/P(le)) = " + conditionalentropyple );
            System.out.println("\nP(lf)*log(P(f)/P(lf)) = " + conditionalentropyplf );
            System.out.println("\nP(lg)*log(P(g)/P(lg)) = " + conditionalentropyplg );
            System.out.println("\nP(lh)*log(P(h)/P(lh)) = " + conditionalentropyplh );
            System.out.println("\nP(li)*log(P(i)/P(li)) = " + conditionalentropypli );
            System.out.println("\nP(lj)*log(P(j)/P(lj)) = " + conditionalentropyplj );
            System.out.println("\nP(lk)*log(P(k)/P(lk)) = " + conditionalentropyplk );
            System.out.println("\nP(ll)*log(P(l)/P(ll)) = " + conditionalentropypll );
            System.out.println("\nP(lm)*log(P(m)/P(lm)) = " + conditionalentropyplm );
            System.out.println("\nP(ln)*log(P(n)/P(ln)) = " + conditionalentropypln );
            System.out.println("\nP(lo)*log(P(o)/P(lo)) = " + conditionalentropyplo );
            System.out.println("\nP(lp)*log(P(p)/P(lp)) = " + conditionalentropyplp );
            System.out.println("\nP(lr)*log(P(r)/P(lr)) = " + conditionalentropyplr );
            System.out.println("\nP(ls)*log(P(s)/P(ls)) = " + conditionalentropypls );
            System.out.println("\nP(lt)*log(P(t)/P(lt)) = " + conditionalentropyplt );
            System.out.println("\nP(lu)*log(P(u)/P(lu)) = " + conditionalentropyplu );
            System.out.println("\nP(lv)*log(P(v)/P(lv)) = " + conditionalentropyplv );
            System.out.println("\nP(lw)*log(P(w)/P(lw)) = " + conditionalentropyplw );
            System.out.println("\nP(ly)*log(P(y)/P(ly)) = " + conditionalentropyply );
            System.out.println("\nP(lz)*log(P(z)/P(lz)) = " + conditionalentropyplz );
            System.out.println("\nP(l.)*log(P(.)/P(l.)) = " + conditionalentropypldot );
            System.out.println("\nP(l,)*log(P(,)/P(l,)) = " + conditionalentropyplcomma );
            System.out.println("\nP(lvacuum)*log(P(vacuum)/P(lvacuum)) = " + conditionalentropyplvacuum );
            System.out.println("\nP(ma)*log(P(a)/P(ma)) = " + conditionalentropypma );
            System.out.println("\nP(mb)*log(P(b)/P(mb)) = " + conditionalentropypmb );
            System.out.println("\nP(md)*log(P(d)/P(md)) = " + conditionalentropypmd );
            System.out.println("\nP(me)*log(P(e)/P(me)) = " + conditionalentropypme );
            System.out.println("\nP(mf)*log(P(f)/P(mf)) = " + conditionalentropypmf );
            System.out.println("\nP(mg)*log(P(g)/P(mg)) = " + conditionalentropypmg );
            System.out.println("\nP(mh)*log(P(h)/P(mh)) = " + conditionalentropypmh );
            System.out.println("\nP(mi)*log(P(i)/P(mi)) = " + conditionalentropypmi );
            System.out.println("\nP(mk)*log(P(k)/P(mk)) = " + conditionalentropypmk );
            System.out.println("\nP(ml)*log(P(l)/P(ml)) = " + conditionalentropypml );
            System.out.println("\nP(mm)*log(P(m)/P(mm)) = " + conditionalentropypmm );
            System.out.println("\nP(mn)*log(P(n)/P(mn)) = " + conditionalentropypmn );
            System.out.println("\nP(mo)*log(P(o)/P(mo)) = " + conditionalentropypmo );
            System.out.println("\nP(mp)*log(P(p)/P(mp)) = " + conditionalentropypmp );
            System.out.println("\nP(mr)*log(P(r)/P(mr)) = " + conditionalentropypmr );
            System.out.println("\nP(ms)*log(P(s)/P(ms)) = " + conditionalentropypms );
            System.out.println("\nP(mt)*log(P(t)/P(mt)) = " + conditionalentropypmt );
            System.out.println("\nP(mu)*log(P(u)/P(mu)) = " + conditionalentropypmu );
            System.out.println("\nP(mv)*log(P(v)/P(mv)) = " + conditionalentropypmv );
            System.out.println("\nP(mw)*log(P(w)/P(mw)) = " + conditionalentropypmw );
            System.out.println("\nP(my)*log(P(y)/P(my)) = " + conditionalentropypmy );
            System.out.println("\nP(m.)*log(P(.)/P(m.)) = " + conditionalentropypmdot );
            System.out.println("\nP(m,)*log(P(,)/P(m,)) = " + conditionalentropypmcomma );
            System.out.println("\nP(mvacuum)*log(P(vacuum)/P(mvacuum)) = " + conditionalentropypmvacuum );
            System.out.println("\nP(na)*log(P(a)/P(na)) = " + conditionalentropypna );
            System.out.println("\nP(nb)*log(P(b)/P(nb)) = " + conditionalentropypnb );
            System.out.println("\nP(nc)*log(P(c)/P(nc)) = " + conditionalentropypnc );
            System.out.println("\nP(nd)*log(P(d)/P(nd)) = " + conditionalentropypnd );
            System.out.println("\nP(ne)*log(P(e)/P(ne)) = " + conditionalentropypne );
            System.out.println("\nP(nf)*log(P(f)/P(nf)) = " + conditionalentropypnf );
            System.out.println("\nP(ng)*log(P(g)/P(ng)) = " + conditionalentropypng );
            System.out.println("\nP(nh)*log(P(h)/P(nh)) = " + conditionalentropypnh );
            System.out.println("\nP(ni)*log(P(i)/P(ni)) = " + conditionalentropypni );
            System.out.println("\nP(nj)*log(P(j)/P(nj)) = " + conditionalentropypnj );
            System.out.println("\nP(nk)*log(P(k)/P(nk)) = " + conditionalentropypnk );
            System.out.println("\nP(nl)*log(P(l)/P(nl)) = " + conditionalentropypnl );
            System.out.println("\nP(nm)*log(P(m)/P(nm)) = " + conditionalentropypnm );
            System.out.println("\nP(nn)*log(P(n)/P(nn)) = " + conditionalentropypnn );
            System.out.println("\nP(no)*log(P(o)/P(no)) = " + conditionalentropypno );
            System.out.println("\nP(np)*log(P(p)/P(np)) = " + conditionalentropypnp );
            System.out.println("\nP(nr)*log(P(r)/P(nr)) = " + conditionalentropypnr );
            System.out.println("\nP(ns)*log(P(s)/P(ns)) = " + conditionalentropypns );
            System.out.println("\nP(nt)*log(P(t)/P(nt)) = " + conditionalentropypnt );
            System.out.println("\nP(nu)*log(P(u)/P(nu)) = " + conditionalentropypnu );
            System.out.println("\nP(nv)*log(P(v)/P(nv)) = " + conditionalentropypnv );
            System.out.println("\nP(nx)*log(P(x)/P(nx)) = " + conditionalentropypnx );
            System.out.println("\nP(ny)*log(P(y)/P(ny)) = " + conditionalentropypny );
            System.out.println("\nP(nz)*log(P(z)/P(nz)) = " + conditionalentropypnz );
            System.out.println("\nP(n.)*log(P(.)/P(n.)) = " + conditionalentropypndot );
            System.out.println("\nP(n,)*log(P(,)/P(n,)) = " + conditionalentropypncomma );
            System.out.println("\nP(nvacuum)*log(P(vacuum)/P(nvacuum)) = " + conditionalentropypnvacuum );
            System.out.println("\nP(oa)*log(P(a)/P(oa)) = " + conditionalentropypoa );
            System.out.println("\nP(ob)*log(P(b)/P(ob)) = " + conditionalentropypob );
            System.out.println("\nP(oc)*log(P(c)/P(oc)) = " + conditionalentropypoc );
            System.out.println("\nP(od)*log(P(d)/P(od)) = " + conditionalentropypod );
            System.out.println("\nP(oe)*log(P(e)/P(oe)) = " + conditionalentropypoe );
            System.out.println("\nP(of)*log(P(f)/P(of)) = " + conditionalentropypof );
            System.out.println("\nP(og)*log(P(g)/P(og)) = " + conditionalentropypog );
            System.out.println("\nP(oh)*log(P(h)/P(oh)) = " + conditionalentropypoh );
            System.out.println("\nP(oi)*log(P(i)/P(oi)) = " + conditionalentropypoi );
            System.out.println("\nP(oj)*log(P(j)/P(oj)) = " + conditionalentropypoj );
            System.out.println("\nP(ok)*log(P(k)/P(ok)) = " + conditionalentropypok );
            System.out.println("\nP(ol)*log(P(l)/P(ol)) = " + conditionalentropypol );
            System.out.println("\nP(om)*log(P(m)/P(om)) = " + conditionalentropypom );
            System.out.println("\nP(on)*log(P(n)/P(on)) = " + conditionalentropypon );
            System.out.println("\nP(oo)*log(P(o)/P(oo)) = " + conditionalentropypoo );
            System.out.println("\nP(op)*log(P(p)/P(op)) = " + conditionalentropypop );
            System.out.println("\nP(or)*log(P(r)/P(or)) = " + conditionalentropypor );
            System.out.println("\nP(os)*log(P(s)/P(os)) = " + conditionalentropypos );
            System.out.println("\nP(ot)*log(P(t)/P(ot)) = " + conditionalentropypot );
            System.out.println("\nP(ou)*log(P(u)/P(ou)) = " + conditionalentropypou );
            System.out.println("\nP(ov)*log(P(v)/P(ov)) = " + conditionalentropypov );
            System.out.println("\nP(ow)*log(P(w)/P(ow)) = " + conditionalentropypow );
            System.out.println("\nP(ox)*log(P(x)/P(ox)) = " + conditionalentropypox );
            System.out.println("\nP(oy)*log(P(y)/P(oy)) = " + conditionalentropypoy );
            System.out.println("\nP(o.)*log(P(.)/P(o.)) = " + conditionalentropypodot );
            System.out.println("\nP(o,)*log(P(,)/P(o,)) = " + conditionalentropypocomma );
            System.out.println("\nP(ovacuum)*log(P(vacuum)/P(ovacuum)) = " + conditionalentropypovacuum );
            System.out.println("\nP(pa)*log(P(a)/P(pa)) = " + conditionalentropyppa );
            System.out.println("\nP(pb)*log(P(b)/P(pb)) = " + conditionalentropyppb );
            System.out.println("\nP(pc)*log(P(c)/P(pc)) = " + conditionalentropyppc );
            System.out.println("\nP(pd)*log(P(d)/P(pd)) = " + conditionalentropyppd );
            System.out.println("\nP(pe)*log(P(e)/P(pe)) = " + conditionalentropyppe );
            System.out.println("\nP(pf)*log(P(f)/P(pf)) = " + conditionalentropyppf );
            System.out.println("\nP(pg)*log(P(g)/P(pg)) = " + conditionalentropyppg );
            System.out.println("\nP(ph)*log(P(h)/P(ph)) = " + conditionalentropypph );
            System.out.println("\nP(pi)*log(P(i)/P(pi)) = " + conditionalentropyppi );
            System.out.println("\nP(pj)*log(P(j)/P(pj)) = " + conditionalentropyppj );
            System.out.println("\nP(pk)*log(P(k)/P(pk)) = " + conditionalentropyppk );
            System.out.println("\nP(pl)*log(P(l)/P(pl)) = " + conditionalentropyppl );
            System.out.println("\nP(pm)*log(P(m)/P(pm)) = " + conditionalentropyppm );
            System.out.println("\nP(pn)*log(P(n)/P(pn)) = " + conditionalentropyppn );
            System.out.println("\nP(po)*log(P(o)/P(po)) = " + conditionalentropyppo );
            System.out.println("\nP(pp)*log(P(p)/P(pp)) = " + conditionalentropyppp );
            System.out.println("\nP(pr)*log(P(r)/P(pr)) = " + conditionalentropyppr );
            System.out.println("\nP(ps)*log(P(s)/P(ps)) = " + conditionalentropypps );
            System.out.println("\nP(pt)*log(P(t)/P(pt)) = " + conditionalentropyppt );
            System.out.println("\nP(pu)*log(P(u)/P(pu)) = " + conditionalentropyppu );
            System.out.println("\nP(pv)*log(P(v)/P(pv)) = " + conditionalentropyppv );
            System.out.println("\nP(py)*log(P(y)/P(py)) = " + conditionalentropyppy );
            System.out.println("\nP(p.)*log(P(.)/P(p.)) = " + conditionalentropyppdot );
            System.out.println("\nP(p,)*log(P(,)/P(p,)) = " + conditionalentropyppcomma );
            System.out.println("\nP(pvacuum)*log(P(vacuum)/P(pvacuum)) = " + conditionalentropyppvacuum );
            System.out.println("\nP(qu)*log(P(u)/P(qu)) = " + conditionalentropypqu );
            System.out.println("\nP(qvacuum)*log(P(vacuum)/P(qvacuum)) = " + conditionalentropypqvacuum );
            System.out.println("\nP(ra)*log(P(a)/P(ra)) = " + conditionalentropypra );
            System.out.println("\nP(rb)*log(P(b)/P(rb)) = " + conditionalentropyprb );
            System.out.println("\nP(rc)*log(P(c)/P(rc)) = " + conditionalentropyprc );
            System.out.println("\nP(rd)*log(P(d)/P(rd)) = " + conditionalentropyprd );
            System.out.println("\nP(re)*log(P(e)/P(re)) = " + conditionalentropypre );
            System.out.println("\nP(rf)*log(P(f)/P(rf)) = " + conditionalentropyprf );
            System.out.println("\nP(rg)*log(P(g)/P(rg)) = " + conditionalentropyprg );
            System.out.println("\nP(rh)*log(P(h)/P(rh)) = " + conditionalentropyprh );
            System.out.println("\nP(ri)*log(P(i)/P(ri)) = " + conditionalentropypri );
            System.out.println("\nP(rj)*log(P(j)/P(rj)) = " + conditionalentropyprj );
            System.out.println("\nP(rk)*log(P(k)/P(rk)) = " + conditionalentropyprk );
            System.out.println("\nP(rl)*log(P(l)/P(rl)) = " + conditionalentropyprl );
            System.out.println("\nP(rm)*log(P(m)/P(rm)) = " + conditionalentropyprm );
            System.out.println("\nP(rn)*log(P(n)/P(rn)) = " + conditionalentropyprn );
            System.out.println("\nP(ro)*log(P(o)/P(ro)) = " + conditionalentropypro );
            System.out.println("\nP(rp)*log(P(p)/P(rp)) = " + conditionalentropyprp );
            System.out.println("\nP(rr)*log(P(r)/P(rr)) = " + conditionalentropyprr );
            System.out.println("\nP(rs)*log(P(s)/P(rs)) = " + conditionalentropyprs );
            System.out.println("\nP(rt)*log(P(t)/P(rt)) = " + conditionalentropyprt );
            System.out.println("\nP(ru)*log(P(u)/P(ru)) = " + conditionalentropypru );
            System.out.println("\nP(rv)*log(P(v)/P(rv)) = " + conditionalentropyprv );
            System.out.println("\nP(rw)*log(P(w)/P(rw)) = " + conditionalentropyprw );
            System.out.println("\nP(ry)*log(P(y)/P(ry)) = " + conditionalentropypry );
            System.out.println("\nP(r.)*log(P(.)/P(r.)) = " + conditionalentropyprdot );
            System.out.println("\nP(r,)*log(P(,)/P(r,)) = " + conditionalentropyprcomma );
            System.out.println("\nP(rvacuum)*log(P(vacuum)/P(rvacuum)) = " + conditionalentropyprvacuum );
            System.out.println("\nP(sa)*log(P(a)/P(sa)) = " + conditionalentropypsa );
            System.out.println("\nP(sb)*log(P(b)/P(sb)) = " + conditionalentropypsb );
            System.out.println("\nP(sc)*log(P(c)/P(sc)) = " + conditionalentropypsc );
            System.out.println("\nP(sd)*log(P(d)/P(sd)) = " + conditionalentropypsd );
            System.out.println("\nP(se)*log(P(e)/P(se)) = " + conditionalentropypse );
            System.out.println("\nP(sf)*log(P(f)/P(sf)) = " + conditionalentropypsf );
            System.out.println("\nP(sg)*log(P(g)/P(sg)) = " + conditionalentropypsg );
            System.out.println("\nP(sh)*log(P(h)/P(sh)) = " + conditionalentropypsh );
            System.out.println("\nP(si)*log(P(i)/P(si)) = " + conditionalentropypsi );
            System.out.println("\nP(sj)*log(P(j)/P(sj)) = " + conditionalentropypsj );
            System.out.println("\nP(sk)*log(P(k)/P(sk)) = " + conditionalentropypsk );
            System.out.println("\nP(sl)*log(P(l)/P(sl)) = " + conditionalentropypsl );
            System.out.println("\nP(sm)*log(P(m)/P(sm)) = " + conditionalentropypsm );
            System.out.println("\nP(sn)*log(P(n)/P(sn)) = " + conditionalentropypsn );
            System.out.println("\nP(so)*log(P(o)/P(so)) = " + conditionalentropypso );
            System.out.println("\nP(sp)*log(P(p)/P(sp)) = " + conditionalentropypsp );
            System.out.println("\nP(sr)*log(P(r)/P(sr)) = " + conditionalentropypsr );
            System.out.println("\nP(ss)*log(P(s)/P(ss)) = " + conditionalentropypss );
            System.out.println("\nP(st)*log(P(t)/P(st)) = " + conditionalentropypst );
            System.out.println("\nP(su)*log(P(u)/P(su)) = " + conditionalentropypsu );
            System.out.println("\nP(sv)*log(P(v)/P(sv)) = " + conditionalentropypsv );
            System.out.println("\nP(sw)*log(P(w)/P(sw)) = " + conditionalentropypsw );
            System.out.println("\nP(sy)*log(P(y)/P(sy)) = " + conditionalentropypsy );
            System.out.println("\nP(s.)*log(P(.)/P(s.)) = " + conditionalentropypsdot );
            System.out.println("\nP(s,)*log(P(,)/P(s,)) = " + conditionalentropypscomma );
            System.out.println("\nP(svacuum)*log(P(vacuum)/P(svacuum)) = " + conditionalentropypsvacuum );
            System.out.println("\nP(ta)*log(P(a)/P(ta)) = " + conditionalentropypta );
            System.out.println("\nP(tb)*log(P(b)/P(tb)) = " + conditionalentropyptb );
            System.out.println("\nP(tc)*log(P(c)/P(tc)) = " + conditionalentropyptc );
            System.out.println("\nP(td)*log(P(d)/P(td)) = " + conditionalentropyptd );
            System.out.println("\nP(te)*log(P(e)/P(te)) = " + conditionalentropypte );
            System.out.println("\nP(tf)*log(P(f)/P(tf)) = " + conditionalentropyptf );
            System.out.println("\nP(tg)*log(P(g)/P(tg)) = " + conditionalentropyptg );
            System.out.println("\nP(th)*log(P(h)/P(th)) = " + conditionalentropypth );
            System.out.println("\nP(ti)*log(P(i)/P(ti)) = " + conditionalentropypti );
            System.out.println("\nP(tj)*log(P(j)/P(tj)) = " + conditionalentropyptj );
            System.out.println("\nP(tk)*log(P(k)/P(tk)) = " + conditionalentropyptk );
            System.out.println("\nP(tl)*log(P(l)/P(tl)) = " + conditionalentropyptl );
            System.out.println("\nP(tm)*log(P(m)/P(tm)) = " + conditionalentropyptm );
            System.out.println("\nP(tn)*log(P(n)/P(tn)) = " + conditionalentropyptn );
            System.out.println("\nP(to)*log(P(o)/P(to)) = " + conditionalentropypto );
            System.out.println("\nP(tp)*log(P(p)/P(tp)) = " + conditionalentropyptp );
            System.out.println("\nP(tr)*log(P(r)/P(tr)) = " + conditionalentropyptr );
            System.out.println("\nP(ts)*log(P(s)/P(ts)) = " + conditionalentropypts );
            System.out.println("\nP(tt)*log(P(t)/P(tt)) = " + conditionalentropyptt );
            System.out.println("\nP(tu)*log(P(u)/P(tu)) = " + conditionalentropyptu );
            System.out.println("\nP(tv)*log(P(v)/P(tv)) = " + conditionalentropyptv );
            System.out.println("\nP(tw)*log(P(w)/P(tw)) = " + conditionalentropyptw );
            System.out.println("\nP(ty)*log(P(y)/P(ty)) = " + conditionalentropypty );
            System.out.println("\nP(tz)*log(P(z)/P(tz)) = " + conditionalentropyptz );
            System.out.println("\nP(t.)*log(P(.)/P(t.)) = " + conditionalentropyptdot );
            System.out.println("\nP(t,)*log(P(,)/P(t,)) = " + conditionalentropyptcomma );
            System.out.println("\nP(tvacuum)*log(P(vacuum)/P(tvacuum)) = " + conditionalentropyptvacuum );
            System.out.println("\nP(ua)*log(P(a)/P(ua)) = " + conditionalentropypua );
            System.out.println("\nP(ub)*log(P(b)/P(ub)) = " + conditionalentropypub );
            System.out.println("\nP(uc)*log(P(c)/P(uc)) = " + conditionalentropypuc );
            System.out.println("\nP(ud)*log(P(d)/P(ud)) = " + conditionalentropypud );
            System.out.println("\nP(ue)*log(P(e)/P(ue)) = " + conditionalentropypue );
            System.out.println("\nP(uf)*log(P(f)/P(uf)) = " + conditionalentropypuf );
            System.out.println("\nP(ug)*log(P(g)/P(ug)) = " + conditionalentropypug );
            System.out.println("\nP(uh)*log(P(h)/P(uh)) = " + conditionalentropypuh );
            System.out.println("\nP(ui)*log(P(i)/P(ui)) = " + conditionalentropypui );
            System.out.println("\nP(uj)*log(P(j)/P(uj)) = " + conditionalentropypuj );
            System.out.println("\nP(uk)*log(P(k)/P(uk)) = " + conditionalentropypuk );
            System.out.println("\nP(ul)*log(P(l)/P(ul)) = " + conditionalentropypul );
            System.out.println("\nP(um)*log(P(m)/P(um)) = " + conditionalentropypum );
            System.out.println("\nP(un)*log(P(n)/P(un)) = " + conditionalentropypun );
            System.out.println("\nP(uo)*log(P(o)/P(uo)) = " + conditionalentropypuo );
            System.out.println("\nP(up)*log(P(p)/P(up)) = " + conditionalentropypup );
            System.out.println("\nP(ur)*log(P(r)/P(ur)) = " + conditionalentropypur );
            System.out.println("\nP(us)*log(P(s)/P(us)) = " + conditionalentropypus );
            System.out.println("\nP(ut)*log(P(t)/P(ut)) = " + conditionalentropyput );
            System.out.println("\nP(uu)*log(P(u)/P(uu)) = " + conditionalentropypuu );
            System.out.println("\nP(uv)*log(P(v)/P(uv)) = " + conditionalentropypuv );
            System.out.println("\nP(uz)*log(P(z)/P(uz)) = " + conditionalentropypuz );
            System.out.println("\nP(u.)*log(P(.)/P(u.)) = " + conditionalentropypudot );
            System.out.println("\nP(u,)*log(P(,)/P(u,)) = " + conditionalentropypucomma );
            System.out.println("\nP(uvacuum)*log(P(vacuum)/P(uvacuum)) = " + conditionalentropypuvacuum );
            System.out.println("\nP(va)*log(P(a)/P(va)) = " + conditionalentropypva );
            System.out.println("\nP(vb)*log(P(b)/P(vb)) = " + conditionalentropypvb );
            System.out.println("\nP(vd)*log(P(d)/P(vd)) = " + conditionalentropypvd );
            System.out.println("\nP(ve)*log(P(e)/P(ve)) = " + conditionalentropypve );
            System.out.println("\nP(vf)*log(P(f)/P(vf)) = " + conditionalentropypvf );
            System.out.println("\nP(vg)*log(P(g)/P(vg)) = " + conditionalentropypvg );
            System.out.println("\nP(vh)*log(P(h)/P(vh)) = " + conditionalentropypvh );
            System.out.println("\nP(vi)*log(P(i)/P(vi)) = " + conditionalentropypvi );
            System.out.println("\nP(vj)*log(P(j)/P(vj)) = " + conditionalentropypvj );
            System.out.println("\nP(vk)*log(P(k)/P(vk)) = " + conditionalentropypvk );
            System.out.println("\nP(vl)*log(P(l)/P(vl)) = " + conditionalentropypvl );
            System.out.println("\nP(vm)*log(P(m)/P(vm)) = " + conditionalentropypvm );
            System.out.println("\nP(vn)*log(P(n)/P(vn)) = " + conditionalentropypvn );
            System.out.println("\nP(vo)*log(P(o)/P(vo)) = " + conditionalentropypvo );
            System.out.println("\nP(vp)*log(P(p)/P(vp)) = " + conditionalentropypvp );
            System.out.println("\nP(vr)*log(P(r)/P(vr)) = " + conditionalentropypvr );
            System.out.println("\nP(vs)*log(P(s)/P(vs)) = " + conditionalentropypvs );
            System.out.println("\nP(vt)*log(P(t)/P(vt)) = " + conditionalentropypvt );
            System.out.println("\nP(vu)*log(P(u)/P(vu)) = " + conditionalentropypvu );
            System.out.println("\nP(vv)*log(P(v)/P(vv)) = " + conditionalentropypvv );
            System.out.println("\nP(v.)*log(P(.)/P(v.)) = " + conditionalentropypvdot );
            System.out.println("\nP(v,)*log(P(,)/P(v,)) = " + conditionalentropypvcomma );
            System.out.println("\nP(vvacuum)*log(P(vacuum)/P(vvacuum)) = " + conditionalentropypvvacuum );
            System.out.println("\nP(wa)*log(P(a)/P(wa)) = " + conditionalentropypwa );
            System.out.println("\nP(wb)*log(P(b)/P(wb)) = " + conditionalentropypwb );
            System.out.println("\nP(wd)*log(P(d)/P(wd)) = " + conditionalentropypwd );
            System.out.println("\nP(we)*log(P(e)/P(we)) = " + conditionalentropypwe );
            System.out.println("\nP(wh)*log(P(h)/P(wh)) = " + conditionalentropypwh );
            System.out.println("\nP(wi)*log(P(i)/P(wi)) = " + conditionalentropypwi );
            System.out.println("\nP(wl)*log(P(l)/P(wl)) = " + conditionalentropypwl );
            System.out.println("\nP(wn)*log(P(n)/P(wn)) = " + conditionalentropypwn );
            System.out.println("\nP(wo)*log(P(o)/P(wo)) = " + conditionalentropypwo );
            System.out.println("\nP(ww)*log(P(w)/P(ww)) = " + conditionalentropypww );
            System.out.println("\nP(w.)*log(P(.)/P(w.)) = " + conditionalentropypwdot );
            System.out.println("\nP(wvacuum)*log(P(vacuum)/P(wvacuum)) = " + conditionalentropypwvacuum );
            System.out.println("\nP(xa)*log(P(a)/P(xa)) = " + conditionalentropypxa );
            System.out.println("\nP(xe)*log(P(e)/P(xe)) = " + conditionalentropypxe );
            System.out.println("\nP(xi)*log(P(i)/P(xi)) = " + conditionalentropypxi );
            System.out.println("\nP(xl)*log(P(l)/P(xl)) = " + conditionalentropypxl );
            System.out.println("\nP(xy)*log(P(y)/P(xy)) = " + conditionalentropypxy );
            System.out.println("\nP(x.)*log(P(.)/P(x.)) = " + conditionalentropypxdot );
            System.out.println("\nP(x,)*log(P(,)/P(x,)) = " + conditionalentropypxcomma );
            System.out.println("\nP(xvacuum)*log(P(vacuum)/P(xvacuum)) = " + conditionalentropypxvacuum );
            System.out.println("\nP(ya)*log(P(a)/P(ya)) = " + conditionalentropypya );
            System.out.println("\nP(yb)*log(P(b)/P(yb)) = " + conditionalentropypyb );
            System.out.println("\nP(yc)*log(P(c)/P(yc)) = " + conditionalentropypyc );
            System.out.println("\nP(yd)*log(P(d)/P(yd)) = " + conditionalentropypyd );
            System.out.println("\nP(ye)*log(P(e)/P(ye)) = " + conditionalentropypye );
            System.out.println("\nP(yf)*log(P(f)/P(yf)) = " + conditionalentropypyf );
            System.out.println("\nP(yg)*log(P(g)/P(yg)) = " + conditionalentropypyg );
            System.out.println("\nP(yh)*log(P(h)/P(yh)) = " + conditionalentropypyh );
            System.out.println("\nP(yj)*log(P(j)/P(yj)) = " + conditionalentropypyj );
            System.out.println("\nP(yk)*log(P(k)/P(yk)) = " + conditionalentropypyk );
            System.out.println("\nP(yl)*log(P(l)/P(yl)) = " + conditionalentropypyl );
            System.out.println("\nP(ym)*log(P(m)/P(ym)) = " + conditionalentropypym );
            System.out.println("\nP(yn)*log(P(n)/P(yn)) = " + conditionalentropypyn );
            System.out.println("\nP(yo)*log(P(o)/P(yo)) = " + conditionalentropypyo );
            System.out.println("\nP(yp)*log(P(p)/P(yp)) = " + conditionalentropypyp );
            System.out.println("\nP(yr)*log(P(r)/P(yr)) = " + conditionalentropypyr );
            System.out.println("\nP(ys)*log(P(s)/P(ys)) = " + conditionalentropypys );
            System.out.println("\nP(yt)*log(P(t)/P(yt)) = " + conditionalentropypyt );
            System.out.println("\nP(yu)*log(P(u)/P(yu)) = " + conditionalentropypyu );
            System.out.println("\nP(yv)*log(P(v)/P(yv)) = " + conditionalentropypyv );
            System.out.println("\nP(y.)*log(P(.)/P(y.)) = " + conditionalentropypydot );
            System.out.println("\nP(y,)*log(P(,)/P(y,)) = " + conditionalentropypycomma );
            System.out.println("\nP(yvacuum)*log(P(vacuum)/P(yvacuum)) = " + conditionalentropypyvacuum );
            System.out.println("\nP(za)*log(P(a)/P(za)) = " + conditionalentropypza );
            System.out.println("\nP(ze)*log(P(e)/P(ze)) = " + conditionalentropypze );
            System.out.println("\nP(zh)*log(P(h)/P(zh)) = " + conditionalentropypzh );
            System.out.println("\nP(zi)*log(P(i)/P(zi)) = " + conditionalentropypzi );
            System.out.println("\nP(zo)*log(P(o)/P(zo)) = " + conditionalentropypzo );
            System.out.println("\nP(zy)*log(P(y)/P(zy)) = " + conditionalentropypzy );
            System.out.println("\nP(zz)*log(P(z)/P(zz)) = " + conditionalentropypzz );
            System.out.println("\nP(zvacuum)*log(P(vacuum)/P(zvacuum)) = " + conditionalentropypzvacuum );
            System.out.println("\nP(.a)*log(P(a)/P(.a)) = " + conditionalentropypdota );
            System.out.println("\nP(.j)*log(P(j)/P(.j)) = " + conditionalentropypdotj );
            System.out.println("\nP(.n)*log(P(n)/P(.n)) = " + conditionalentropypdotn );
            System.out.println("\nP(.,)*log(P(,)/P(.,)) = " + conditionalentropypdotcomma );
            System.out.println("\nP(.vacuum)*log(P(vacuum)/P(.vacuum)) = " + conditionalentropypdotvacuum );
            System.out.println("\nP(,vacuum)*log(P(vacuum)/P(,vacuum)) = " + conditionalentropypcommavacuum );
            System.out.println("\nP(vacuuma)*log(P(a)/P(vacuuma)) = " + conditionalentropypvacuuma );
            System.out.println("\nP(vacuumb)*log(P(b)/P(vacuumb)) = " + conditionalentropypvacuumb  );
            System.out.println("\nP(vacuumc)*log(P(c)/P(vacuumc)) = " + conditionalentropypvacuumc  );
            System.out.println("\nP(vacuumd)*log(P(d)/P(vacuumd)) = " + conditionalentropypvacuumd  );
            System.out.println("\nP(vacuume)*log(P(e)/P(vacuume)) = " + conditionalentropypvacuume  );
            System.out.println("\nP(vacuumf)*log(P(f)/P(vacuumf)) = " + conditionalentropypvacuumf  );
            System.out.println("\nP(vacuumg)*log(P(g)/P(vacuumg)) = " + conditionalentropypvacuumg  );
            System.out.println("\nP(vacuumh)*log(P(h)/P(vacuumh)) = " + conditionalentropypvacuumh  );
            System.out.println("\nP(vacuumi)*log(P(i)/P(vacuumi)) = " + conditionalentropypvacuumi  );
            System.out.println("\nP(vacuumj)*log(P(j)/P(vacuumj)) = " + conditionalentropypvacuumj  );
            System.out.println("\nP(vacuumk)*log(P(k)/P(vacuumk)) = " + conditionalentropypvacuumk  );
            System.out.println("\nP(vacuuml)*log(P(l)/P(vacuuml)) = " + conditionalentropypvacuuml  );
            System.out.println("\nP(vacuumm)*log(P(m)/P(vacuumm)) = " + conditionalentropypvacuumm  );
            System.out.println("\nP(vacuumn)*log(P(n)/P(vacuumn)) = " + conditionalentropypvacuumn  );
            System.out.println("\nP(vacuumo)*log(P(o)/P(vacuumo)) = " + conditionalentropypvacuumo  );
            System.out.println("\nP(vacuump)*log(P(p)/P(vacuump)) = " + conditionalentropypvacuump  );
            System.out.println("\nP(vacuumq)*log(P(q)/P(vacuumq)) = " + conditionalentropypvacuumq  );
            System.out.println("\nP(vacuumr)*log(P(r)/P(vacuumr)) = " + conditionalentropypvacuumr  );
            System.out.println("\nP(vacuums)*log(P(s)/P(vacuums)) = " + conditionalentropypvacuums  );
            System.out.println("\nP(vacuumt)*log(P(t)/P(vacuumt)) = " + conditionalentropypvacuumt  );
            System.out.println("\nP(vacuumu)*log(P(u)/P(vacuumu)) = " + conditionalentropypvacuumu  );
            System.out.println("\nP(vacuumv)*log(P(v)/P(vacuumv)) = " + conditionalentropypvacuumv  );
            System.out.println("\nP(vacuumw)*log(P(w)/P(vacuumw)) = " + conditionalentropypvacuumw  );
            System.out.println("\nP(vacuumx)*log(P(x)/P(vacuumx)) = " + conditionalentropypvacuumx  );
            System.out.println("\nP(vacuumy)*log(P(y)/P(vacuumy)) = " + conditionalentropypvacuumy  );
            System.out.println("\nP(vacuumz)*log(P(z)/P(vacuumz)) = " + conditionalentropypvacuumz  );
            System.out.println("\nP(vacuum.)*log(P(.)/P(vacuum.)) = " + conditionalentropypvacuumdot  );
            System.out.println("\nP(vacuum,)*log(P(,)/P(vacuum,)) = " + conditionalentropypvacuumcomma  );
            System.out.println("\nP(vacuumvacuum)*log(P(vacuum)/P(vacuumvacuum)) = " + conditionalentropypvacuumvacuum  );
            System.out.println("\nThe sum of the H(s) is = " + sumconditionalentropy ); 
          
            }

            private static void countthenumberofpairsthatresulted1() 
                    
            {
                
            double countforcharactersa1 = 0.0;   
            double countforcharactersa2 = 0.0;  
            double countforcharactersa3 = 0.0;  
            double countforcharactersa4 = 0.0; 
            double countforcharactersa5 = 0.0; 
            double countforcharactersa6 = 0.0; 
            double countforcharactersa7 = 0.0; 
            double countforcharactersa8 = 0.0;   
            double countforcharactersa9 = 0.0;  
            double countforcharactersa10 = 0.0;  
            double countforcharactersa11 = 0.0; 
            double countforcharactersa12 = 0.0; 
            double countforcharactersa13 = 0.0; 
            double countforcharactersa14 = 0.0; 
            double countforcharactersa15 = 0.0;   
            double countforcharactersa16 = 0.0;  
            double countforcharactersa17 = 0.0;  
            double countforcharactersa18 = 0.0; 
            double countforcharactersa19 = 0.0; 
            double countforcharactersa20 = 0.0; 
            double countforcharactersa21 = 0.0; 
            double countforcharactersa22 = 0.0;   
            double countforcharactersa23 = 0.0;  
            double countforcharactersa24 = 0.0;  
            double countforcharactersa25 = 0.0; 
            double countforcharactersa26 = 0.0; 
            double countforcharactersa27 = 0.0; 
            double countforcharactersa28 = 0.0; 
            double countforcharactersa29 = 0.0; 
            double countforcharactersb1 = 0.0;   
            double countforcharactersb2 = 0.0;  
            double countforcharactersb3 = 0.0;  
            double countforcharactersb4 = 0.0; 
            double countforcharactersb5 = 0.0; 
            double countforcharactersb6 = 0.0; 
            double countforcharactersb7 = 0.0; 
            double countforcharactersb8 = 0.0;   
            double countforcharactersb9 = 0.0;  
            double countforcharactersb10 = 0.0;  
            double countforcharactersb11 = 0.0; 
            double countforcharactersb12 = 0.0; 
            double countforcharactersb13 = 0.0; 
            double countforcharactersb14 = 0.0; 
            double countforcharactersb15 = 0.0;   
            double countforcharactersb16 = 0.0;  
            double countforcharactersb17 = 0.0;  
            double countforcharactersb18 = 0.0; 
            double countforcharactersb19 = 0.0; 
            double countforcharactersb20 = 0.0; 
            double countforcharactersb21 = 0.0; 
            double countforcharactersb22 = 0.0;   
            double countforcharactersb23 = 0.0;  
            double countforcharactersb24 = 0.0;  
            double countforcharactersb25 = 0.0; 
            double countforcharactersb26 = 0.0; 
            double countforcharactersb27 = 0.0; 
            double countforcharactersb28 = 0.0; 
            double countforcharactersb29 = 0.0; 
            double countforcharactersc1 = 0.0;   
            double countforcharactersc2 = 0.0;  
            double countforcharactersc3 = 0.0;  
            double countforcharactersc4 = 0.0; 
            double countforcharactersc5 = 0.0; 
            double countforcharactersc6 = 0.0; 
            double countforcharactersc7 = 0.0; 
            double countforcharactersc8 = 0.0;   
            double countforcharactersc9 = 0.0;  
            double countforcharactersc10 = 0.0;  
            double countforcharactersc11 = 0.0; 
            double countforcharactersc12 = 0.0; 
            double countforcharactersc13 = 0.0; 
            double countforcharactersc14 = 0.0; 
            double countforcharactersc15 = 0.0;   
            double countforcharactersc16 = 0.0;  
            double countforcharactersc17 = 0.0;  
            double countforcharactersc18 = 0.0; 
            double countforcharactersc19 = 0.0; 
            double countforcharactersc20 = 0.0; 
            double countforcharactersc21 = 0.0; 
            double countforcharactersc22 = 0.0;   
            double countforcharactersc23 = 0.0;  
            double countforcharactersc24 = 0.0;  
            double countforcharactersc25 = 0.0; 
            double countforcharactersc26 = 0.0; 
            double countforcharactersc27 = 0.0; 
            double countforcharactersc28 = 0.0; 
            double countforcharactersc29 = 0.0; 
            double countforcharactersd1 = 0.0;   
            double countforcharactersd2 = 0.0;  
            double countforcharactersd3 = 0.0;  
            double countforcharactersd4 = 0.0; 
            double countforcharactersd5 = 0.0; 
            double countforcharactersd6 = 0.0; 
            double countforcharactersd7 = 0.0; 
            double countforcharactersd8 = 0.0;   
            double countforcharactersd9 = 0.0;  
            double countforcharactersd10 = 0.0;  
            double countforcharactersd11 = 0.0; 
            double countforcharactersd12 = 0.0; 
            double countforcharactersd13 = 0.0; 
            double countforcharactersd14 = 0.0; 
            double countforcharactersd15 = 0.0;   
            double countforcharactersd16 = 0.0;  
            double countforcharactersd17 = 0.0;  
            double countforcharactersd18 = 0.0; 
            double countforcharactersd19 = 0.0; 
            double countforcharactersd20 = 0.0; 
            double countforcharactersd21 = 0.0; 
            double countforcharactersd22 = 0.0;   
            double countforcharactersd23 = 0.0;  
            double countforcharactersd24 = 0.0;  
            double countforcharactersd25 = 0.0; 
            double countforcharactersd26 = 0.0; 
            double countforcharactersd27 = 0.0; 
            double countforcharactersd28 = 0.0; 
            double countforcharactersd29 = 0.0; 
            double countforcharacterse1 = 0.0;   
            double countforcharacterse2 = 0.0;  
            double countforcharacterse3 = 0.0;  
            double countforcharacterse4 = 0.0; 
            double countforcharacterse5 = 0.0; 
            double countforcharacterse6 = 0.0; 
            double countforcharacterse7 = 0.0; 
            double countforcharacterse8 = 0.0;   
            double countforcharacterse9 = 0.0;  
            double countforcharacterse10 = 0.0;  
            double countforcharacterse11 = 0.0; 
            double countforcharacterse12 = 0.0; 
            double countforcharacterse13 = 0.0; 
            double countforcharacterse14 = 0.0; 
            double countforcharacterse15 = 0.0;   
            double countforcharacterse16 = 0.0;  
            double countforcharacterse17 = 0.0;  
            double countforcharacterse18 = 0.0; 
            double countforcharacterse19 = 0.0; 
            double countforcharacterse20 = 0.0; 
            double countforcharacterse21 = 0.0; 
            double countforcharacterse22 = 0.0;   
            double countforcharacterse23 = 0.0;  
            double countforcharacterse24 = 0.0;  
            double countforcharacterse25 = 0.0; 
            double countforcharacterse26 = 0.0; 
            double countforcharacterse27 = 0.0; 
            double countforcharacterse28 = 0.0; 
            double countforcharacterse29 = 0.0; 
            double countforcharactersf1 = 0.0;   
            double countforcharactersf2 = 0.0;  
            double countforcharactersf3 = 0.0;  
            double countforcharactersf4 = 0.0; 
            double countforcharactersf5 = 0.0; 
            double countforcharactersf6 = 0.0; 
            double countforcharactersf7 = 0.0; 
            double countforcharactersf8 = 0.0;   
            double countforcharactersf9 = 0.0;  
            double countforcharactersf10 = 0.0;  
            double countforcharactersf11 = 0.0; 
            double countforcharactersf12 = 0.0; 
            double countforcharactersf13 = 0.0; 
            double countforcharactersf14 = 0.0; 
            double countforcharactersf15 = 0.0;   
            double countforcharactersf16 = 0.0;  
            double countforcharactersf17 = 0.0;  
            double countforcharactersf18 = 0.0; 
            double countforcharactersf19 = 0.0; 
            double countforcharactersf20 = 0.0; 
            double countforcharactersf21 = 0.0; 
            double countforcharactersf22 = 0.0;   
            double countforcharactersf23 = 0.0;  
            double countforcharactersf24 = 0.0;  
            double countforcharactersf25 = 0.0; 
            double countforcharactersf26 = 0.0; 
            double countforcharactersf27 = 0.0; 
            double countforcharactersf28 = 0.0; 
            double countforcharactersf29 = 0.0; 
            double countforcharactersg1 = 0.0;   
            double countforcharactersg2 = 0.0;  
            double countforcharactersg3 = 0.0;  
            double countforcharactersg4 = 0.0; 
            double countforcharactersg5 = 0.0; 
            double countforcharactersg6 = 0.0; 
            double countforcharactersg7 = 0.0; 
            double countforcharactersg8 = 0.0;   
            double countforcharactersg9 = 0.0;  
            double countforcharactersg10 = 0.0;  
            double countforcharactersg11 = 0.0; 
            double countforcharactersg12 = 0.0; 
            double countforcharactersg13 = 0.0; 
            double countforcharactersg14 = 0.0; 
            double countforcharactersg15 = 0.0;   
            double countforcharactersg16 = 0.0;  
            double countforcharactersg17 = 0.0;  
            double countforcharactersg18 = 0.0; 
            double countforcharactersg19 = 0.0; 
            double countforcharactersg20 = 0.0; 
            double countforcharactersg21 = 0.0; 
            double countforcharactersg22 = 0.0;   
            double countforcharactersg23 = 0.0;  
            double countforcharactersg24 = 0.0;  
            double countforcharactersg25 = 0.0; 
            double countforcharactersg26 = 0.0; 
            double countforcharactersg27 = 0.0; 
            double countforcharactersg28 = 0.0; 
            double countforcharactersg29 = 0.0; 
            double countforcharactersh1 = 0.0;   
            double countforcharactersh2 = 0.0;  
            double countforcharactersh3 = 0.0;  
            double countforcharactersh4 = 0.0; 
            double countforcharactersh5 = 0.0; 
            double countforcharactersh6 = 0.0; 
            double countforcharactersh7 = 0.0; 
            double countforcharactersh8 = 0.0;   
            double countforcharactersh9 = 0.0;  
            double countforcharactersh10 = 0.0;  
            double countforcharactersh11 = 0.0; 
            double countforcharactersh12 = 0.0; 
            double countforcharactersh13 = 0.0; 
            double countforcharactersh14 = 0.0; 
            double countforcharactersh15 = 0.0;   
            double countforcharactersh16 = 0.0;  
            double countforcharactersh17 = 0.0;  
            double countforcharactersh18 = 0.0; 
            double countforcharactersh19 = 0.0; 
            double countforcharactersh20 = 0.0; 
            double countforcharactersh21 = 0.0; 
            double countforcharactersh22 = 0.0;   
            double countforcharactersh23 = 0.0;  
            double countforcharactersh24 = 0.0;  
            double countforcharactersh25 = 0.0; 
            double countforcharactersh26 = 0.0; 
            double countforcharactersh27 = 0.0; 
            double countforcharactersh28 = 0.0; 
            double countforcharactersh29 = 0.0; 
            double countforcharactersi1 = 0.0;   
            double countforcharactersi2 = 0.0;  
            double countforcharactersi3 = 0.0;  
            double countforcharactersi4 = 0.0; 
            double countforcharactersi5 = 0.0; 
            double countforcharactersi6 = 0.0; 
            double countforcharactersi7 = 0.0; 
            double countforcharactersi8 = 0.0;   
            double countforcharactersi9 = 0.0;  
            double countforcharactersi10 = 0.0;  
            double countforcharactersi11 = 0.0; 
            double countforcharactersi12 = 0.0; 
            double countforcharactersi13 = 0.0; 
            double countforcharactersi14 = 0.0; 
            double countforcharactersi15 = 0.0;   
            double countforcharactersi16 = 0.0;  
            double countforcharactersi17 = 0.0;  
            double countforcharactersi18 = 0.0; 
            double countforcharactersi19 = 0.0; 
            double countforcharactersi20 = 0.0; 
            double countforcharactersi21 = 0.0; 
            double countforcharactersi22 = 0.0;   
            double countforcharactersi23 = 0.0;  
            double countforcharactersi24 = 0.0;  
            double countforcharactersi25 = 0.0; 
            double countforcharactersi26 = 0.0; 
            double countforcharactersi27 = 0.0; 
            double countforcharactersi28 = 0.0; 
            double countforcharactersi29 = 0.0; 
            double countforcharactersj1 = 0.0;   
            double countforcharactersj2 = 0.0;  
            double countforcharactersj3 = 0.0;  
            double countforcharactersj4 = 0.0; 
            double countforcharactersj5 = 0.0; 
            double countforcharactersj6 = 0.0; 
            double countforcharactersj7 = 0.0; 
            double countforcharactersj8 = 0.0;   
            double countforcharactersj9 = 0.0;  
            double countforcharactersj10 = 0.0;  
            double countforcharactersj11 = 0.0; 
            double countforcharactersj12 = 0.0; 
            double countforcharactersj13 = 0.0; 
            double countforcharactersj14 = 0.0; 
            double countforcharactersj15 = 0.0;   
            double countforcharactersj16 = 0.0;  
            double countforcharactersj17 = 0.0;  
            double countforcharactersj18 = 0.0; 
            double countforcharactersj19 = 0.0; 
            double countforcharactersj20 = 0.0; 
            double countforcharactersj21 = 0.0; 
            double countforcharactersj22 = 0.0;   
            double countforcharactersj23 = 0.0;  
            double countforcharactersj24 = 0.0;  
            double countforcharactersj25 = 0.0; 
            double countforcharactersj26 = 0.0; 
            double countforcharactersj27 = 0.0; 
            double countforcharactersj28 = 0.0; 
            double countforcharactersj29 = 0.0; 
            double countforcharactersk1 = 0.0;   
            double countforcharactersk2 = 0.0;  
            double countforcharactersk3 = 0.0;  
            double countforcharactersk4 = 0.0; 
            double countforcharactersk5 = 0.0; 
            double countforcharactersk6 = 0.0; 
            double countforcharactersk7 = 0.0; 
            double countforcharactersk8 = 0.0;   
            double countforcharactersk9 = 0.0;  
            double countforcharactersk10 = 0.0;  
            double countforcharactersk11 = 0.0; 
            double countforcharactersk12 = 0.0; 
            double countforcharactersk13 = 0.0; 
            double countforcharactersk14 = 0.0; 
            double countforcharactersk15 = 0.0;   
            double countforcharactersk16 = 0.0;  
            double countforcharactersk17 = 0.0;  
            double countforcharactersk18 = 0.0; 
            double countforcharactersk19 = 0.0; 
            double countforcharactersk20 = 0.0; 
            double countforcharactersk21 = 0.0; 
            double countforcharactersk22 = 0.0;   
            double countforcharactersk23 = 0.0;  
            double countforcharactersk24 = 0.0;  
            double countforcharactersk25 = 0.0; 
            double countforcharactersk26 = 0.0; 
            double countforcharactersk27 = 0.0; 
            double countforcharactersk28 = 0.0; 
            double countforcharactersk29 = 0.0; 
            double countforcharactersl1 = 0.0;   
            double countforcharactersl2 = 0.0;  
            double countforcharactersl3 = 0.0;  
            double countforcharactersl4 = 0.0; 
            double countforcharactersl5 = 0.0; 
            double countforcharactersl6 = 0.0; 
            double countforcharactersl7 = 0.0; 
            double countforcharactersl8 = 0.0;   
            double countforcharactersl9 = 0.0;  
            double countforcharactersl10 = 0.0;  
            double countforcharactersl11 = 0.0; 
            double countforcharactersl12 = 0.0; 
            double countforcharactersl13 = 0.0; 
            double countforcharactersl14 = 0.0; 
            double countforcharactersl15 = 0.0;   
            double countforcharactersl16 = 0.0;  
            double countforcharactersl17 = 0.0;  
            double countforcharactersl18 = 0.0; 
            double countforcharactersl19 = 0.0; 
            double countforcharactersl20 = 0.0; 
            double countforcharactersl21 = 0.0; 
            double countforcharactersl22 = 0.0;   
            double countforcharactersl23 = 0.0;  
            double countforcharactersl24 = 0.0;  
            double countforcharactersl25 = 0.0; 
            double countforcharactersl26 = 0.0; 
            double countforcharactersl27 = 0.0; 
            double countforcharactersl28 = 0.0; 
            double countforcharactersl29 = 0.0; 
            double countforcharactersm1 = 0.0;   
            double countforcharactersm2 = 0.0;  
            double countforcharactersm3 = 0.0;  
            double countforcharactersm4 = 0.0; 
            double countforcharactersm5 = 0.0; 
            double countforcharactersm6 = 0.0; 
            double countforcharactersm7 = 0.0; 
            double countforcharactersm8 = 0.0;   
            double countforcharactersm9 = 0.0;  
            double countforcharactersm10 = 0.0;  
            double countforcharactersm11 = 0.0; 
            double countforcharactersm12 = 0.0; 
            double countforcharactersm13 = 0.0; 
            double countforcharactersm14 = 0.0; 
            double countforcharactersm15 = 0.0;   
            double countforcharactersm16 = 0.0;  
            double countforcharactersm17 = 0.0;  
            double countforcharactersm18 = 0.0; 
            double countforcharactersm19 = 0.0; 
            double countforcharactersm20 = 0.0; 
            double countforcharactersm21 = 0.0; 
            double countforcharactersm22 = 0.0;   
            double countforcharactersm23 = 0.0;  
            double countforcharactersm24 = 0.0;  
            double countforcharactersm25 = 0.0; 
            double countforcharactersm26 = 0.0; 
            double countforcharactersm27 = 0.0; 
            double countforcharactersm28 = 0.0; 
            double countforcharactersm29 = 0.0; 
            double countforcharactersn1 = 0.0;   
            double countforcharactersn2 = 0.0;  
            double countforcharactersn3 = 0.0;  
            double countforcharactersn4 = 0.0; 
            double countforcharactersn5 = 0.0; 
            double countforcharactersn6 = 0.0; 
            double countforcharactersn7 = 0.0; 
            double countforcharactersn8 = 0.0;   
            double countforcharactersn9 = 0.0;  
            double countforcharactersn10 = 0.0;  
            double countforcharactersn11 = 0.0; 
            double countforcharactersn12 = 0.0; 
            double countforcharactersn13 = 0.0; 
            double countforcharactersn14 = 0.0; 
            double countforcharactersn15 = 0.0;   
            double countforcharactersn16 = 0.0;  
            double countforcharactersn17 = 0.0;  
            double countforcharactersn18 = 0.0; 
            double countforcharactersn19 = 0.0; 
            double countforcharactersn20 = 0.0; 
            double countforcharactersn21 = 0.0; 
            double countforcharactersn22 = 0.0;   
            double countforcharactersn23 = 0.0;  
            double countforcharactersn24 = 0.0;  
            double countforcharactersn25 = 0.0; 
            double countforcharactersn26 = 0.0; 
            double countforcharactersn27 = 0.0; 
            double countforcharactersn28 = 0.0; 
            double countforcharactersn29 = 0.0; 
            double countforcharacterso1 = 0.0;   
            double countforcharacterso2 = 0.0;  
            double countforcharacterso3 = 0.0;  
            double countforcharacterso4 = 0.0; 
            double countforcharacterso5 = 0.0; 
            double countforcharacterso6 = 0.0; 
            double countforcharacterso7 = 0.0; 
            double countforcharacterso8 = 0.0;   
            double countforcharacterso9 = 0.0;  
            double countforcharacterso10 = 0.0;  
            double countforcharacterso11 = 0.0; 
            double countforcharacterso12 = 0.0; 
            double countforcharacterso13 = 0.0; 
            double countforcharacterso14 = 0.0; 
            double countforcharacterso15 = 0.0;   
            double countforcharacterso16 = 0.0;  
            double countforcharacterso17 = 0.0;  
            double countforcharacterso18 = 0.0; 
            double countforcharacterso19 = 0.0; 
            double countforcharacterso20 = 0.0; 
            double countforcharacterso21 = 0.0; 
            double countforcharacterso22 = 0.0;   
            double countforcharacterso23 = 0.0;  
            double countforcharacterso24 = 0.0;  
            double countforcharacterso25 = 0.0; 
            double countforcharacterso26 = 0.0; 
            double countforcharacterso27 = 0.0; 
            double countforcharacterso28 = 0.0; 
            double countforcharacterso29 = 0.0; 
            double countforcharactersp1 = 0.0;   
            double countforcharactersp2 = 0.0;  
            double countforcharactersp3 = 0.0;  
            double countforcharactersp4 = 0.0; 
            double countforcharactersp5 = 0.0; 
            double countforcharactersp6 = 0.0; 
            double countforcharactersp7 = 0.0; 
            double countforcharactersp8 = 0.0;   
            double countforcharactersp9 = 0.0;  
            double countforcharactersp10 = 0.0;  
            double countforcharactersp11 = 0.0; 
            double countforcharactersp12 = 0.0; 
            double countforcharactersp13 = 0.0; 
            double countforcharactersp14 = 0.0; 
            double countforcharactersp15 = 0.0;   
            double countforcharactersp16 = 0.0;  
            double countforcharactersp17 = 0.0;  
            double countforcharactersp18 = 0.0; 
            double countforcharactersp19 = 0.0; 
            double countforcharactersp20 = 0.0; 
            double countforcharactersp21 = 0.0; 
            double countforcharactersp22 = 0.0;   
            double countforcharactersp23 = 0.0;  
            double countforcharactersp24 = 0.0;  
            double countforcharactersp25 = 0.0; 
            double countforcharactersp26 = 0.0; 
            double countforcharactersp27 = 0.0; 
            double countforcharactersp28 = 0.0; 
            double countforcharactersp29 = 0.0; 
            double countforcharactersq1 = 0.0;   
            double countforcharactersq2 = 0.0;  
            double countforcharactersq3 = 0.0;  
            double countforcharactersq4 = 0.0; 
            double countforcharactersq5 = 0.0; 
            double countforcharactersq6 = 0.0; 
            double countforcharactersq7 = 0.0; 
            double countforcharactersq8 = 0.0;   
            double countforcharactersq9 = 0.0;  
            double countforcharactersq10 = 0.0;  
            double countforcharactersq11 = 0.0; 
            double countforcharactersq12 = 0.0; 
            double countforcharactersq13 = 0.0; 
            double countforcharactersq14 = 0.0; 
            double countforcharactersq15 = 0.0;   
            double countforcharactersq16 = 0.0;  
            double countforcharactersq17 = 0.0;  
            double countforcharactersq18 = 0.0; 
            double countforcharactersq19 = 0.0; 
            double countforcharactersq20 = 0.0; 
            double countforcharactersq21 = 0.0; 
            double countforcharactersq22 = 0.0;   
            double countforcharactersq23 = 0.0;  
            double countforcharactersq24 = 0.0;  
            double countforcharactersq25 = 0.0; 
            double countforcharactersq26 = 0.0; 
            double countforcharactersq27 = 0.0; 
            double countforcharactersq28 = 0.0; 
            double countforcharactersq29 = 0.0; 
            double countforcharactersr1 = 0.0;   
            double countforcharactersr2 = 0.0;  
            double countforcharactersr3 = 0.0;  
            double countforcharactersr4 = 0.0; 
            double countforcharactersr5 = 0.0; 
            double countforcharactersr6 = 0.0; 
            double countforcharactersr7 = 0.0; 
            double countforcharactersr8 = 0.0;   
            double countforcharactersr9 = 0.0;  
            double countforcharactersr10 = 0.0;  
            double countforcharactersr11 = 0.0; 
            double countforcharactersr12 = 0.0; 
            double countforcharactersr13 = 0.0; 
            double countforcharactersr14 = 0.0; 
            double countforcharactersr15 = 0.0;   
            double countforcharactersr16 = 0.0;  
            double countforcharactersr17 = 0.0;  
            double countforcharactersr18 = 0.0; 
            double countforcharactersr19 = 0.0; 
            double countforcharactersr20 = 0.0; 
            double countforcharactersr21 = 0.0; 
            double countforcharactersr22 = 0.0;   
            double countforcharactersr23 = 0.0;  
            double countforcharactersr24 = 0.0;  
            double countforcharactersr25 = 0.0; 
            double countforcharactersr26 = 0.0; 
            double countforcharactersr27 = 0.0; 
            double countforcharactersr28 = 0.0; 
            double countforcharactersr29 = 0.0; 
            double countforcharacterss1 = 0.0;   
            double countforcharacterss2 = 0.0;  
            double countforcharacterss3 = 0.0;  
            double countforcharacterss4 = 0.0; 
            double countforcharacterss5 = 0.0; 
            double countforcharacterss6 = 0.0; 
            double countforcharacterss7 = 0.0; 
            double countforcharacterss8 = 0.0;   
            double countforcharacterss9 = 0.0;  
            double countforcharacterss10 = 0.0;  
            double countforcharacterss11 = 0.0; 
            double countforcharacterss12 = 0.0; 
            double countforcharacterss13 = 0.0; 
            double countforcharacterss14 = 0.0; 
            double countforcharacterss15 = 0.0;   
            double countforcharacterss16 = 0.0;  
            double countforcharacterss17 = 0.0;  
            double countforcharacterss18 = 0.0; 
            double countforcharacterss19 = 0.0; 
            double countforcharacterss20 = 0.0; 
            double countforcharacterss21 = 0.0; 
            double countforcharacterss22 = 0.0;   
            double countforcharacterss23 = 0.0;  
            double countforcharacterss24 = 0.0;  
            double countforcharacterss25 = 0.0; 
            double countforcharacterss26 = 0.0; 
            double countforcharacterss27 = 0.0; 
            double countforcharacterss28 = 0.0; 
            double countforcharacterss29 = 0.0; 
            double countforcharacterst1 = 0.0;   
            double countforcharacterst2 = 0.0;  
            double countforcharacterst3 = 0.0;  
            double countforcharacterst4 = 0.0; 
            double countforcharacterst5 = 0.0; 
            double countforcharacterst6 = 0.0; 
            double countforcharacterst7 = 0.0; 
            double countforcharacterst8 = 0.0;   
            double countforcharacterst9 = 0.0;  
            double countforcharacterst10 = 0.0;  
            double countforcharacterst11 = 0.0; 
            double countforcharacterst12 = 0.0; 
            double countforcharacterst13 = 0.0; 
            double countforcharacterst14 = 0.0; 
            double countforcharacterst15 = 0.0;   
            double countforcharacterst16 = 0.0;  
            double countforcharacterst17 = 0.0;  
            double countforcharacterst18 = 0.0; 
            double countforcharacterst19 = 0.0; 
            double countforcharacterst20 = 0.0; 
            double countforcharacterst21 = 0.0; 
            double countforcharacterst22 = 0.0;   
            double countforcharacterst23 = 0.0;  
            double countforcharacterst24 = 0.0;  
            double countforcharacterst25 = 0.0; 
            double countforcharacterst26 = 0.0; 
            double countforcharacterst27 = 0.0; 
            double countforcharacterst28 = 0.0; 
            double countforcharacterst29 = 0.0; 
            double countforcharactersu1 = 0.0;   
            double countforcharactersu2 = 0.0;  
            double countforcharactersu3 = 0.0;  
            double countforcharactersu4 = 0.0; 
            double countforcharactersu5 = 0.0; 
            double countforcharactersu6 = 0.0; 
            double countforcharactersu7 = 0.0; 
            double countforcharactersu8 = 0.0;   
            double countforcharactersu9 = 0.0;  
            double countforcharactersu10 = 0.0;  
            double countforcharactersu11 = 0.0; 
            double countforcharactersu12 = 0.0; 
            double countforcharactersu13 = 0.0; 
            double countforcharactersu14 = 0.0; 
            double countforcharactersu15 = 0.0;   
            double countforcharactersu16 = 0.0;  
            double countforcharactersu17 = 0.0;  
            double countforcharactersu18 = 0.0; 
            double countforcharactersu19 = 0.0; 
            double countforcharactersu20 = 0.0; 
            double countforcharactersu21 = 0.0; 
            double countforcharactersu22 = 0.0;   
            double countforcharactersu23 = 0.0;  
            double countforcharactersu24 = 0.0;  
            double countforcharactersu25 = 0.0; 
            double countforcharactersu26 = 0.0; 
            double countforcharactersu27 = 0.0; 
            double countforcharactersu28 = 0.0; 
            double countforcharactersu29 = 0.0; 
            double countforcharactersv1 = 0.0;   
            double countforcharactersv2 = 0.0;  
            double countforcharactersv3 = 0.0;  
            double countforcharactersv4 = 0.0; 
            double countforcharactersv5 = 0.0; 
            double countforcharactersv6 = 0.0; 
            double countforcharactersv7 = 0.0; 
            double countforcharactersv8 = 0.0;   
            double countforcharactersv9 = 0.0;  
            double countforcharactersv10 = 0.0;  
            double countforcharactersv11 = 0.0; 
            double countforcharactersv12 = 0.0; 
            double countforcharactersv13 = 0.0; 
            double countforcharactersv14 = 0.0; 
            double countforcharactersv15 = 0.0;   
            double countforcharactersv16 = 0.0;  
            double countforcharactersv17 = 0.0;  
            double countforcharactersv18 = 0.0; 
            double countforcharactersv19 = 0.0; 
            double countforcharactersv20 = 0.0; 
            double countforcharactersv21 = 0.0; 
            double countforcharactersv22 = 0.0;   
            double countforcharactersv23 = 0.0;  
            double countforcharactersv24 = 0.0;  
            double countforcharactersv25 = 0.0; 
            double countforcharactersv26 = 0.0; 
            double countforcharactersv27 = 0.0; 
            double countforcharactersv28 = 0.0; 
            double countforcharactersv29 = 0.0; 
            double countforcharactersw1 = 0.0;   
            double countforcharactersw2 = 0.0;  
            double countforcharactersw3 = 0.0;  
            double countforcharactersw4 = 0.0; 
            double countforcharactersw5 = 0.0; 
            double countforcharactersw6 = 0.0; 
            double countforcharactersw7 = 0.0; 
            double countforcharactersw8 = 0.0;   
            double countforcharactersw9 = 0.0;  
            double countforcharactersw10 = 0.0;  
            double countforcharactersw11 = 0.0; 
            double countforcharactersw12 = 0.0; 
            double countforcharactersw13 = 0.0; 
            double countforcharactersw14 = 0.0; 
            double countforcharactersw15 = 0.0;   
            double countforcharactersw16 = 0.0;  
            double countforcharactersw17 = 0.0;  
            double countforcharactersw18 = 0.0; 
            double countforcharactersw19 = 0.0; 
            double countforcharactersw20 = 0.0; 
            double countforcharactersw21 = 0.0; 
            double countforcharactersw22 = 0.0;   
            double countforcharactersw23 = 0.0;  
            double countforcharactersw24 = 0.0;  
            double countforcharactersw25 = 0.0; 
            double countforcharactersw26 = 0.0; 
            double countforcharactersw27 = 0.0; 
            double countforcharactersw28 = 0.0; 
            double countforcharactersw29 = 0.0; 
            double countforcharactersx1 = 0.0;   
            double countforcharactersx2 = 0.0;  
            double countforcharactersx3 = 0.0;  
            double countforcharactersx4 = 0.0; 
            double countforcharactersx5 = 0.0; 
            double countforcharactersx6 = 0.0; 
            double countforcharactersx7 = 0.0; 
            double countforcharactersx8 = 0.0;   
            double countforcharactersx9 = 0.0;  
            double countforcharactersx10 = 0.0;  
            double countforcharactersx11 = 0.0; 
            double countforcharactersx12 = 0.0; 
            double countforcharactersx13 = 0.0; 
            double countforcharactersx14 = 0.0; 
            double countforcharactersx15 = 0.0;   
            double countforcharactersx16 = 0.0;  
            double countforcharactersx17 = 0.0;  
            double countforcharactersx18 = 0.0; 
            double countforcharactersx19 = 0.0; 
            double countforcharactersx20 = 0.0; 
            double countforcharactersx21 = 0.0; 
            double countforcharactersx22 = 0.0;   
            double countforcharactersx23 = 0.0;  
            double countforcharactersx24 = 0.0;  
            double countforcharactersx25 = 0.0; 
            double countforcharactersx26 = 0.0; 
            double countforcharactersx27 = 0.0; 
            double countforcharactersx28 = 0.0; 
            double countforcharactersx29 = 0.0; 
            double countforcharactersy1 = 0.0;   
            double countforcharactersy2 = 0.0;  
            double countforcharactersy3 = 0.0;  
            double countforcharactersy4 = 0.0; 
            double countforcharactersy5 = 0.0; 
            double countforcharactersy6 = 0.0; 
            double countforcharactersy7 = 0.0; 
            double countforcharactersy8 = 0.0;   
            double countforcharactersy9 = 0.0;  
            double countforcharactersy10 = 0.0;  
            double countforcharactersy11 = 0.0; 
            double countforcharactersy12 = 0.0; 
            double countforcharactersy13 = 0.0; 
            double countforcharactersy14 = 0.0; 
            double countforcharactersy15 = 0.0;   
            double countforcharactersy16 = 0.0;  
            double countforcharactersy17 = 0.0;  
            double countforcharactersy18 = 0.0; 
            double countforcharactersy19 = 0.0; 
            double countforcharactersy20 = 0.0; 
            double countforcharactersy21 = 0.0; 
            double countforcharactersy22 = 0.0;   
            double countforcharactersy23 = 0.0;  
            double countforcharactersy24 = 0.0;  
            double countforcharactersy25 = 0.0; 
            double countforcharactersy26 = 0.0; 
            double countforcharactersy27 = 0.0; 
            double countforcharactersy28 = 0.0; 
            double countforcharactersy29 = 0.0; 
            double countforcharactersz1 = 0.0;   
            double countforcharactersz2 = 0.0;  
            double countforcharactersz3 = 0.0;  
            double countforcharactersz4 = 0.0; 
            double countforcharactersz5 = 0.0; 
            double countforcharactersz6 = 0.0; 
            double countforcharactersz7 = 0.0; 
            double countforcharactersz8 = 0.0;   
            double countforcharactersz9 = 0.0;  
            double countforcharactersz10 = 0.0;  
            double countforcharactersz11 = 0.0; 
            double countforcharactersz12 = 0.0; 
            double countforcharactersz13 = 0.0; 
            double countforcharactersz14 = 0.0; 
            double countforcharactersz15 = 0.0;   
            double countforcharactersz16 = 0.0;  
            double countforcharactersz17 = 0.0;  
            double countforcharactersz18 = 0.0; 
            double countforcharactersz19 = 0.0; 
            double countforcharactersz20 = 0.0; 
            double countforcharactersz21 = 0.0; 
            double countforcharactersz22 = 0.0;   
            double countforcharactersz23 = 0.0;  
            double countforcharactersz24 = 0.0;  
            double countforcharactersz25 = 0.0; 
            double countforcharactersz26 = 0.0; 
            double countforcharactersz27 = 0.0; 
            double countforcharactersz28 = 0.0; 
            double countforcharactersz29 = 0.0; 
            double countforcharactersdot1 = 0.0;   
            double countforcharactersdot2 = 0.0;  
            double countforcharactersdot3 = 0.0;  
            double countforcharactersdot4 = 0.0; 
            double countforcharactersdot5 = 0.0; 
            double countforcharactersdot6 = 0.0; 
            double countforcharactersdot7 = 0.0; 
            double countforcharactersdot8 = 0.0;   
            double countforcharactersdot9 = 0.0;  
            double countforcharactersdot10 = 0.0;  
            double countforcharactersdot11 = 0.0; 
            double countforcharactersdot12 = 0.0; 
            double countforcharactersdot13 = 0.0; 
            double countforcharactersdot14 = 0.0; 
            double countforcharactersdot15 = 0.0;   
            double countforcharactersdot16 = 0.0;  
            double countforcharactersdot17 = 0.0;  
            double countforcharactersdot18 = 0.0; 
            double countforcharactersdot19 = 0.0; 
            double countforcharactersdot20 = 0.0; 
            double countforcharactersdot21 = 0.0; 
            double countforcharactersdot22 = 0.0;   
            double countforcharactersdot23 = 0.0;  
            double countforcharactersdot24 = 0.0;  
            double countforcharactersdot25 = 0.0; 
            double countforcharactersdot26 = 0.0; 
            double countforcharactersdot27 = 0.0; 
            double countforcharactersdot28 = 0.0; 
            double countforcharactersdot29 = 0.0; 
            double countforcharacterscomma1 = 0.0;   
            double countforcharacterscomma2 = 0.0;  
            double countforcharacterscomma3 = 0.0;  
            double countforcharacterscomma4 = 0.0; 
            double countforcharacterscomma5 = 0.0; 
            double countforcharacterscomma6 = 0.0; 
            double countforcharacterscomma7 = 0.0; 
            double countforcharacterscomma8 = 0.0;   
            double countforcharacterscomma9 = 0.0;  
            double countforcharacterscomma10 = 0.0;  
            double countforcharacterscomma11 = 0.0; 
            double countforcharacterscomma12 = 0.0; 
            double countforcharacterscomma13 = 0.0; 
            double countforcharacterscomma14 = 0.0; 
            double countforcharacterscomma15 = 0.0;   
            double countforcharacterscomma16 = 0.0;  
            double countforcharacterscomma17 = 0.0;  
            double countforcharacterscomma18 = 0.0; 
            double countforcharacterscomma19 = 0.0; 
            double countforcharacterscomma20 = 0.0; 
            double countforcharacterscomma21 = 0.0; 
            double countforcharacterscomma22 = 0.0;   
            double countforcharacterscomma23 = 0.0;  
            double countforcharacterscomma24 = 0.0;  
            double countforcharacterscomma25 = 0.0; 
            double countforcharacterscomma26 = 0.0; 
            double countforcharacterscomma27 = 0.0; 
            double countforcharacterscomma28 = 0.0; 
            double countforcharacterscomma29 = 0.0; 
            double countforcharactersvacuum1 = 0.0;   
            double countforcharactersvacuum2 = 0.0;  
            double countforcharactersvacuum3 = 0.0;  
            double countforcharactersvacuum4 = 0.0; 
            double countforcharactersvacuum5 = 0.0; 
            double countforcharactersvacuum6 = 0.0; 
            double countforcharactersvacuum7 = 0.0; 
            double countforcharactersvacuum8 = 0.0;   
            double countforcharactersvacuum9 = 0.0;  
            double countforcharactersvacuum10 = 0.0;  
            double countforcharactersvacuum11 = 0.0; 
            double countforcharactersvacuum12 = 0.0; 
            double countforcharactersvacuum13 = 0.0; 
            double countforcharactersvacuum14 = 0.0; 
            double countforcharactersvacuum15 = 0.0;   
            double countforcharactersvacuum16 = 0.0;  
            double countforcharactersvacuum17 = 0.0;  
            double countforcharactersvacuum18 = 0.0; 
            double countforcharactersvacuum19 = 0.0; 
            double countforcharactersvacuum20 = 0.0; 
            double countforcharactersvacuum21 = 0.0; 
            double countforcharactersvacuum22 = 0.0;   
            double countforcharactersvacuum23 = 0.0;  
            double countforcharactersvacuum24 = 0.0;  
            double countforcharactersvacuum25 = 0.0; 
            double countforcharactersvacuum26 = 0.0; 
            double countforcharactersvacuum27 = 0.0; 
            double countforcharactersvacuum28 = 0.0; 
            double countforcharactersvacuum29 = 0.0; 
            
            for(String data : dataoffrenchfile)
            
            {
                
            if(data.contains("aa"))
            
            {
                
            countforcharactersa1 = countforcharactersa1+1.0;    
                
            }  
            
            if(data.contains("ab"))
            
            {
                
            countforcharactersa2 = countforcharactersa2+1.0;    
                
            }  
            
            if(data.contains("ac"))
            
            {
                
            countforcharactersa3 = countforcharactersa3+1.0;    
                
            }  
            
            if(data.contains("ad"))
            
            {
                
            countforcharactersa4 = countforcharactersa4+1.0;    
                
            }  
            
            if(data.contains("ae"))
            
            {
                
            countforcharactersa5 = countforcharactersa5+1.0;    
                
            }  
            
            if(data.contains("af"))
            
            {
                
            countforcharactersa6 = countforcharactersa6+1.0;    
                
            }  
            
            if(data.contains("ag"))
            
            {
                
            countforcharactersa7 = countforcharactersa7+1.0;    
                
            }  
            
            if(data.contains("ah"))
            
            {
                
            countforcharactersa8 = countforcharactersa8+1.0;    
                
            }  
            
            if(data.contains("ai"))
            
            {
                
            countforcharactersa9 = countforcharactersa9+1.0;    
                
            }  
            
            if(data.contains("aj"))
            
            {
                
            countforcharactersa10 = countforcharactersa10+1.0;    
                
            }  
            
            if(data.contains("ak"))
            
            {
                
            countforcharactersa11 = countforcharactersa11+1.0;    
                
            }  
            
            if(data.contains("al"))
            
            {
                
            countforcharactersa12 = countforcharactersa12+1.0;    
                
            }  
            
            if(data.contains("am"))
            
            {
                
            countforcharactersa13 = countforcharactersa13+1.0;    
                
            }  
            
            if(data.contains("an"))
            
            {
                
            countforcharactersa14 = countforcharactersa14+1.0;    
                
            }  
             
            if(data.contains("ao"))
            
            {
                
            countforcharactersa15 = countforcharactersa15+1.0;    
                
            }  
            
            if(data.contains("ap"))
            
            {
                
            countforcharactersa16 = countforcharactersa16+1.0;    
                
            }  
            
            if(data.contains("aq"))
            
            {
                
            countforcharactersa17 = countforcharactersa17+1.0;    
                
            }  
            
            if(data.contains("ar"))
            
            {
                
            countforcharactersa18 = countforcharactersa18+1.0;    
                
            }  
            
            if(data.contains("as"))
            
            {
                
            countforcharactersa19 = countforcharactersa19+1.0;    
                
            }  
            
            if(data.contains("at"))
            
            {
                
            countforcharactersa20 = countforcharactersa20+1.0;    
                
            }  
            
            if(data.contains("au"))
            
            {
                
            countforcharactersa21 = countforcharactersa21+1.0;    
                
            }  
            
            if(data.contains("av"))
            
            {
                
            countforcharactersa22 = countforcharactersa22+1.0;    
                
            }  
            
            if(data.contains("aw"))
            
            {
                
            countforcharactersa23 = countforcharactersa23+1.0;    
                
            }  
            
            if(data.contains("ax"))
            
            {
                
            countforcharactersa24 = countforcharactersa24+1.0;    
                
            }  
            
            if(data.contains("ay"))
            
            {
                
            countforcharactersa25 = countforcharactersa25+1.0;    
                
            }  
            
            if(data.contains("az"))
            
            {
                
            countforcharactersa26 = countforcharactersa26+1.0;    
                
            }  
            
            if(data.contains("a."))
            
            {
                
            countforcharactersa27 = countforcharactersa27+1.0;    
                
            }  
            
            if(data.contains("a,"))
            
            {
                
            countforcharactersa28 = countforcharactersa28+1.0;    
                
            }  
            
            if(data.contains("a "))
            
            {
                
            countforcharactersa29 = countforcharactersa29+1.0;    
                
            }  
            
            if(data.contains("ba"))
            
            {
                
            countforcharactersb1 = countforcharactersb1+1.0;    
                
            }  
            
            if(data.contains("bb"))
            
            {
                
            countforcharactersb2 = countforcharactersb2+1.0;    
                
            }  
            
            if(data.contains("bc"))
            
            {
                
            countforcharactersb3 = countforcharactersb3+1.0;    
                
            }  
            
            if(data.contains("bd"))
            
            {
                
            countforcharactersb4 = countforcharactersb4+1.0;    
                
            }  
            
            if(data.contains("be"))
            
            {
                
            countforcharactersb5 = countforcharactersb5+1.0;    
                
            }  
            
            if(data.contains("bf"))
            
            {
                
            countforcharactersb6 = countforcharactersb6+1.0;    
                
            }  
            
            if(data.contains("bg"))
            
            {
                
            countforcharactersb7 = countforcharactersb7+1.0;    
                
            }  
            
            if(data.contains("bh"))
            
            {
                
            countforcharactersb8 = countforcharactersb8+1.0;    
                
            }  
            
            if(data.contains("bi"))
            
            {
                
            countforcharactersb9 = countforcharactersb9+1.0;    
                
            }  
            
            if(data.contains("bj"))
            
            {
                
            countforcharactersb10 = countforcharactersb10+1.0;    
                
            }  
            
            if(data.contains("bk"))
            
            {
                
            countforcharactersb11 = countforcharactersb11+1.0;    
                
            }  
            
            if(data.contains("bl"))
            
            {
                
            countforcharactersb12 = countforcharactersb12+1.0;    
                
            }  
            
            if(data.contains("bm"))
            
            {
                
            countforcharactersb13 = countforcharactersb13+1.0;    
                
            }  
            
            if(data.contains("bn"))
            
            {
                
            countforcharactersb14 = countforcharactersb14+1.0;    
                
            }  
             
            if(data.contains("bo"))
            
            {
                
            countforcharactersb15 = countforcharactersb15+1.0;    
                
            }  
            
            if(data.contains("bp"))
            
            {
                
            countforcharactersb16 = countforcharactersb16+1.0;    
                
            }  
            
            if(data.contains("bq"))
            
            {
                
            countforcharactersb17 = countforcharactersb17+1.0;    
                
            }  
            
            if(data.contains("br"))
            
            {
                
            countforcharactersb18 = countforcharactersb18+1.0;    
                
            }  
            
            if(data.contains("bs"))
            
            {
                
            countforcharactersb19 = countforcharactersb19+1.0;    
                
            }  
            
            if(data.contains("bt"))
            
            {
                
            countforcharactersb20 = countforcharactersb20+1.0;    
                
            }  
            
            if(data.contains("bu"))
            
            {
                
            countforcharactersb21 = countforcharactersb21+1.0;    
                
            }  
            
            if(data.contains("bv"))
            
            {
                
            countforcharactersb22 = countforcharactersb22+1.0;    
                
            }  
            
            if(data.contains("bw"))
            
            {
                
            countforcharactersb23 = countforcharactersb23+1.0;    
                
            }  
            
            if(data.contains("bx"))
            
            {
                
            countforcharactersb24 = countforcharactersb24+1.0;    
                
            }  
            
            if(data.contains("by"))
            
            {
                
            countforcharactersb25 = countforcharactersb25+1.0;    
                
            }  
            
            if(data.contains("bz"))
            
            {
                
            countforcharactersb26 = countforcharactersb26+1.0;    
                
            }  
            
            if(data.contains("b."))
            
            {
                
            countforcharactersb27 = countforcharactersb27+1.0;    
                
            }  
            
            if(data.contains("b,"))
            
            {
                
            countforcharactersb28 = countforcharactersb28+1.0;    
                
            }  
            
            if(data.contains("b "))
            
            {
                
            countforcharactersb29 = countforcharactersb29+1.0;    
                
            }  
            
            if(data.contains("ca"))
            
            {
                
            countforcharactersc1 = countforcharactersc1+1.0;    
                
            }  
            
            if(data.contains("cb"))
            
            {
                
            countforcharactersc2 = countforcharactersc2+1.0;    
                
            }  
            
            if(data.contains("cc"))
            
            {
                
            countforcharactersc3 = countforcharactersc3+1.0;    
                
            }  
            
            if(data.contains("cd"))
            
            {
                
            countforcharactersc4 = countforcharactersc4+1.0;    
                
            }  
            
            if(data.contains("ce"))
            
            {
                
            countforcharactersc5 = countforcharactersc5+1.0;    
                
            }  
            
            if(data.contains("cf"))
            
            {
                
            countforcharactersc6 = countforcharactersc6+1.0;    
                
            }  
            
            if(data.contains("cg"))
            
            {
                
            countforcharactersc7 = countforcharactersc7+1.0;    
                
            }  
            
            if(data.contains("ch"))
            
            {
                
            countforcharactersc8 = countforcharactersc8+1.0;    
                
            }  
            
            if(data.contains("ci"))
            
            {
                
            countforcharactersc9 = countforcharactersc9+1.0;    
                
            }  
            
            if(data.contains("cj"))
            
            {
                
            countforcharactersc10 = countforcharactersc10+1.0;    
                
            }  
            
            if(data.contains("ck"))
            
            {
                
            countforcharactersc11 = countforcharactersc11+1.0;    
                
            }  
            
            if(data.contains("cl"))
            
            {
                
            countforcharactersc12 = countforcharactersc12+1.0;    
                
            }  
            
            if(data.contains("cm"))
            
            {
                
            countforcharactersc13 = countforcharactersc13+1.0;    
                
            }  
            
            if(data.contains("cn"))
            
            {
                
            countforcharactersc14 = countforcharactersc14+1.0;    
                
            }  
             
            if(data.contains("co"))
            
            {
                
            countforcharactersc15 = countforcharactersc15+1.0;    
                
            }  
            
            if(data.contains("cp"))
            
            {
                
            countforcharactersc16 = countforcharactersc16+1.0;    
                
            }  
            
            if(data.contains("cq"))
            
            {
                
            countforcharactersc17 = countforcharactersc17+1.0;    
                
            }  
            
            if(data.contains("cr"))
            
            {
                
            countforcharactersc18 = countforcharactersc18+1.0;    
                
            }  
            
            if(data.contains("cs"))
            
            {
                
            countforcharactersc19 = countforcharactersc19+1.0;    
                
            }  
            
            if(data.contains("ct"))
            
            {
                
            countforcharactersc20 = countforcharactersc20+1.0;    
                
            }  
            
            if(data.contains("cu"))
            
            {
                
            countforcharactersc21 = countforcharactersc21+1.0;    
                
            }  
            
            if(data.contains("cv"))
            
            {
                
            countforcharactersc22 = countforcharactersc22+1.0;    
                
            }  
            
            if(data.contains("cw"))
            
            {
                
            countforcharactersc23 = countforcharactersc23+1.0;    
                
            }  
            
            if(data.contains("cx"))
            
            {
                
            countforcharactersc24 = countforcharactersc24+1.0;    
                
            }  
            
            if(data.contains("cy"))
            
            {
                
            countforcharactersc25 = countforcharactersc25+1.0;    
                
            }  
            
            if(data.contains("cz"))
            
            {
                
            countforcharactersc26 = countforcharactersc26+1.0;    
                
            }  
            
            if(data.contains("c."))
            
            {
                
            countforcharactersc27 = countforcharactersc27+1.0;    
                
            }  
            
            if(data.contains("c,"))
            
            {
                
            countforcharactersc28 = countforcharactersc28+1.0;    
                
            }  
            
            if(data.contains("c "))
            
            {
                
            countforcharactersc29 = countforcharactersc29+1.0;    
                
            } 
            
            if(data.contains("da"))
            
            {
                
            countforcharactersd1 = countforcharactersd1+1.0;    
                
            }  
            
            if(data.contains("db"))
            
            {
                
            countforcharactersd2 = countforcharactersd2+1.0;    
                
            }  
            
            if(data.contains("dc"))
            
            {
                
            countforcharactersd3 = countforcharactersd3+1.0;    
                
            }  
            
            if(data.contains("dd"))
            
            {
                
            countforcharactersd4 = countforcharactersd4+1.0;    
                
            }  
            
            if(data.contains("de"))
            
            {
                
            countforcharactersd5 = countforcharactersd5+1.0;    
                
            }  
            
            if(data.contains("df"))
            
            {
                
            countforcharactersd6 = countforcharactersd6+1.0;    
                
            }  
            
            if(data.contains("dg"))
            
            {
                
            countforcharactersd7 = countforcharactersd7+1.0;    
                
            }  
            
            if(data.contains("dh"))
            
            {
                
            countforcharactersd8 = countforcharactersd8+1.0;    
                
            }  
            
            if(data.contains("di"))
            
            {
                
            countforcharactersd9 = countforcharactersd9+1.0;    
                
            }  
            
            if(data.contains("dj"))
            
            {
                
            countforcharactersd10 = countforcharactersd10+1.0;    
                
            }  
            
            if(data.contains("dk"))
            
            {
                
            countforcharactersd11 = countforcharactersd11+1.0;    
                
            }  
            
            if(data.contains("dl"))
            
            {
                
            countforcharactersd12 = countforcharactersd12+1.0;    
                
            }  
            
            if(data.contains("dm"))
            
            {
                
            countforcharactersd13 = countforcharactersd13+1.0;    
                
            }  
            
            if(data.contains("dn"))
            
            {
                
            countforcharactersd14 = countforcharactersd14+1.0;    
                
            }  
             
            if(data.contains("do"))
            
            {
                
            countforcharactersd15 = countforcharactersd15+1.0;    
                
            }  
            
            if(data.contains("dp"))
            
            {
                
            countforcharactersd16 = countforcharactersd16+1.0;    
                
            }  
            
            if(data.contains("dq"))
            
            {
                
            countforcharactersd17 = countforcharactersd17+1.0;    
                
            }  
            
            if(data.contains("dr"))
            
            {
                
            countforcharactersd18 = countforcharactersd18+1.0;    
                
            }  
            
            if(data.contains("ds"))
            
            {
                
            countforcharactersd19 = countforcharactersd19+1.0;    
                
            }  
            
            if(data.contains("dt"))
            
            {
                
            countforcharactersd20 = countforcharactersd20+1.0;    
                
            }  
            
            if(data.contains("du"))
            
            {
                
            countforcharactersd21 = countforcharactersd21+1.0;    
                
            }  
            
            if(data.contains("dv"))
            
            {
                
            countforcharactersd22 = countforcharactersd22+1.0;    
                
            }  
            
            if(data.contains("dw"))
            
            {
                
            countforcharactersd23 = countforcharactersd23+1.0;    
                
            }  
            
            if(data.contains("dx"))
            
            {
                
            countforcharactersd24 = countforcharactersd24+1.0;    
                
            }  
            
            if(data.contains("dy"))
            
            {
                
            countforcharactersd25 = countforcharactersd25+1.0;    
                
            }  
            
            if(data.contains("dz"))
            
            {
                
            countforcharactersd26 = countforcharactersd26+1.0;    
                
            }  
            
            if(data.contains("d."))
            
            {
                
            countforcharactersd27 = countforcharactersd27+1.0;    
                
            }  
            
            if(data.contains("d,"))
            
            {
                
            countforcharactersd28 = countforcharactersd28+1.0;    
                
            }  
            
            if(data.contains("d "))
            
            {
                
            countforcharactersd29 = countforcharactersd29+1.0;    
                
            }  
            
            if(data.contains("ea"))
            
            {
                
            countforcharacterse1 = countforcharacterse1+1.0;    
                
            }  
            
            if(data.contains("eb"))
            
            {
                
            countforcharacterse2 = countforcharacterse2+1.0;    
                
            }  
            
            if(data.contains("ec"))
            
            {
                
            countforcharacterse3 = countforcharacterse3+1.0;    
                
            }  
            
            if(data.contains("ed"))
            
            {
                
            countforcharacterse4 = countforcharacterse4+1.0;    
                
            }  
            
            if(data.contains("ee"))
            
            {
                
            countforcharacterse5 = countforcharacterse5+1.0;    
                
            }  
            
            if(data.contains("ef"))
            
            {
                
            countforcharacterse6 = countforcharacterse6+1.0;    
                
            }  
            
            if(data.contains("eg"))
            
            {
                
            countforcharacterse7 = countforcharacterse7+1.0;    
                
            }  
            
            if(data.contains("eh"))
            
            {
                
            countforcharacterse8 = countforcharacterse8+1.0;    
                
            }  
            
            if(data.contains("ei"))
            
            {
                
            countforcharacterse9 = countforcharacterse9+1.0;    
                
            }  
            
            if(data.contains("ej"))
            
            {
                
            countforcharacterse10 = countforcharacterse10+1.0;    
                
            }  
            
            if(data.contains("ek"))
            
            {
                
            countforcharacterse11 = countforcharacterse11+1.0;    
                
            }  
            
            if(data.contains("el"))
            
            {
                
            countforcharacterse12 = countforcharacterse12+1.0;    
                
            }  
            
            if(data.contains("em"))
            
            {
                
            countforcharacterse13 = countforcharacterse13+1.0;    
                
            }  
            
            if(data.contains("en"))
            
            {
                
            countforcharacterse14 = countforcharacterse14+1.0;    
                
            }  
             
            if(data.contains("eo"))
            
            {
                
            countforcharacterse15 = countforcharacterse15+1.0;    
                
            }  
            
            if(data.contains("ep"))
            
            {
                
            countforcharacterse16 = countforcharacterse16+1.0;    
                
            }  
            
            if(data.contains("eq"))
            
            {
                
            countforcharacterse17 = countforcharacterse17+1.0;    
                
            }  
            
            if(data.contains("er"))
            
            {
                
            countforcharacterse18 = countforcharacterse18+1.0;    
                
            }  
            
            if(data.contains("es"))
            
            {
                
            countforcharacterse19 = countforcharacterse19+1.0;    
                
            }  
            
            if(data.contains("et"))
            
            {
                
            countforcharacterse20 = countforcharacterse20+1.0;    
                
            }  
            
            if(data.contains("eu"))
            
            {
                
            countforcharacterse21 = countforcharacterse21+1.0;    
                
            }  
            
            if(data.contains("ev"))
            
            {
                
            countforcharacterse22 = countforcharacterse22+1.0;    
                
            }  
            
            if(data.contains("ew"))
            
            {
                
            countforcharacterse23 = countforcharacterse23+1.0;    
                
            }  
            
            if(data.contains("ex"))
            
            {
                
            countforcharacterse24 = countforcharacterse24+1.0;    
                
            }  
            
            if(data.contains("ey"))
            
            {
                
            countforcharacterse25 = countforcharacterse25+1.0;    
                
            }  
            
            if(data.contains("ez"))
            
            {
                
            countforcharacterse26 = countforcharacterse26+1.0;    
                
            }  
            
            if(data.contains("e."))
            
            {
                
            countforcharacterse27 = countforcharacterse27+1.0;    
                
            }  
            
            if(data.contains("e,"))
            
            {
                
            countforcharacterse28 = countforcharacterse28+1.0;    
                
            }  
            
            if(data.contains("e "))
            
            {
                
            countforcharacterse29 = countforcharacterse29+1.0;    
                
            }  
            
            if(data.contains("fa"))
            
            {
                
            countforcharactersf1 = countforcharactersf1+1.0;    
                
            }  
            
            if(data.contains("fb"))
            
            {
                
            countforcharactersf2 = countforcharactersf2+1.0;    
                
            }  
            
            if(data.contains("fc"))
            
            {
                
            countforcharactersf3 = countforcharactersf3+1.0;    
                
            }  
            
            if(data.contains("fd"))
            
            {
                
            countforcharactersf4 = countforcharactersf4+1.0;    
                
            }  
            
            if(data.contains("fe"))
            
            {
                
            countforcharactersf5 = countforcharactersf5+1.0;    
                
            }  
            
            if(data.contains("ff"))
            
            {
                
            countforcharactersf6 = countforcharactersf6+1.0;    
                
            }  
            
            if(data.contains("fg"))
            
            {
                
            countforcharactersf7 = countforcharactersf7+1.0;    
                
            }  
            
            if(data.contains("fh"))
            
            {
                
            countforcharactersf8 = countforcharactersf8+1.0;    
                
            }  
            
            if(data.contains("fi"))
            
            {
                
            countforcharactersf9 = countforcharactersf9+1.0;    
                
            }  
            
            if(data.contains("fj"))
            
            {
                
            countforcharactersf10 = countforcharactersf10+1.0;    
                
            }  
            
            if(data.contains("fk"))
            
            {
                
            countforcharactersf11 = countforcharactersf11+1.0;    
                
            }  
            
            if(data.contains("fl"))
            
            {
                
            countforcharactersf12 = countforcharactersf12+1.0;    
                
            }  
            
            if(data.contains("fm"))
            
            {
                
            countforcharactersf13 = countforcharactersf13+1.0;    
                
            }  
            
            if(data.contains("fn"))
            
            {
                
            countforcharactersf14 = countforcharactersf14+1.0;    
                
            }  
             
            if(data.contains("fo"))
            
            {
                
            countforcharactersf15 = countforcharactersf15+1.0;    
                
            }  
            
            if(data.contains("fp"))
            
            {
                
            countforcharactersf16 = countforcharactersf16+1.0;    
                
            }  
            
            if(data.contains("fq"))
            
            {
                
            countforcharactersf17 = countforcharactersf17+1.0;    
                
            }  
            
            if(data.contains("fr"))
            
            {
                
            countforcharactersf18 = countforcharactersf18+1.0;    
                
            }  
            
            if(data.contains("fs"))
            
            {
                
            countforcharactersf19 = countforcharactersf19+1.0;    
                
            }  
            
            if(data.contains("ft"))
            
            {
                
            countforcharactersf20 = countforcharactersf20+1.0;    
                
            }  
            
            if(data.contains("fu"))
            
            {
                
            countforcharactersf21 = countforcharactersf21+1.0;    
                
            }  
            
            if(data.contains("fv"))
            
            {
                
            countforcharactersf22 = countforcharactersf22+1.0;    
                
            }  
            
            if(data.contains("fw"))
            
            {
                
            countforcharactersf23 = countforcharactersf23+1.0;    
                
            }  
            
            if(data.contains("fx"))
            
            {
                
            countforcharactersf24 = countforcharactersf24+1.0;    
                
            }  
            
            if(data.contains("fy"))
            
            {
                
            countforcharactersf25 = countforcharactersf25+1.0;    
                
            }  
            
            if(data.contains("fz"))
            
            {
                
            countforcharactersf26 = countforcharactersf26+1.0;    
                
            }  
            
            if(data.contains("f."))
            
            {
                
            countforcharactersf27 = countforcharactersf27+1.0;    
                
            }  
            
            if(data.contains("f,"))
            
            {
                
            countforcharactersf28 = countforcharactersf28+1.0;    
                
            }  
            
            if(data.contains("f "))
            
            {
                
            countforcharactersf29 = countforcharactersf29+1.0;    
                
            } 
            
            if(data.contains("ga"))
            
            {
                
            countforcharactersg1 = countforcharactersg1+1.0;    
                
            }  
            
            if(data.contains("gb"))
            
            {
                
            countforcharactersg2 = countforcharactersg2+1.0;    
                
            }  
            
            if(data.contains("gc"))
            
            {
                
            countforcharactersg3 = countforcharactersg3+1.0;    
                
            }  
            
            if(data.contains("gd"))
            
            {
                
            countforcharactersg4 = countforcharactersg4+1.0;    
                
            }  
            
            if(data.contains("ge"))
            
            {
                
            countforcharactersg5 = countforcharactersg5+1.0;    
                
            }  
            
            if(data.contains("gf"))
            
            {
                
            countforcharactersg6 = countforcharactersg6+1.0;    
                
            }  
            
            if(data.contains("gg"))
            
            {
                
            countforcharactersg7 = countforcharactersg7+1.0;    
                
            }  
            
            if(data.contains("gh"))
            
            {
                
            countforcharactersg8 = countforcharactersg8+1.0;    
                
            }  
            
            if(data.contains("gi"))
            
            {
                
            countforcharactersg9 = countforcharactersg9+1.0;    
                
            }  
            
            if(data.contains("gj"))
            
            {
                
            countforcharactersg10 = countforcharactersg10+1.0;    
                
            }  
            
            if(data.contains("gk"))
            
            {
                
            countforcharactersg11 = countforcharactersg11+1.0;    
                
            }  
            
            if(data.contains("gl"))
            
            {
                
            countforcharactersg12 = countforcharactersg12+1.0;    
                
            }  
            
            if(data.contains("gm"))
            
            {
                
            countforcharactersg13 = countforcharactersg13+1.0;    
                
            }  
            
            if(data.contains("gn"))
            
            {
                
            countforcharactersg14 = countforcharactersg14+1.0;    
                
            }  
             
            if(data.contains("go"))
            
            {
                
            countforcharactersg15 = countforcharactersg15+1.0;    
                
            }  
            
            if(data.contains("gp"))
            
            {
                
            countforcharactersg16 = countforcharactersg16+1.0;    
                
            }  
            
            if(data.contains("gq"))
            
            {
                
            countforcharactersg17 = countforcharactersg17+1.0;    
                
            }  
            
            if(data.contains("gr"))
            
            {
                
            countforcharactersg18 = countforcharactersg18+1.0;    
                
            }  
            
            if(data.contains("gs"))
            
            {
                
            countforcharactersg19 = countforcharactersg19+1.0;    
                
            }  
            
            if(data.contains("gt"))
            
            {
                
            countforcharactersg20 = countforcharactersg20+1.0;    
                
            }  
            
            if(data.contains("gu"))
            
            {
                
            countforcharactersg21 = countforcharactersg21+1.0;    
                
            }  
            
            if(data.contains("gv"))
            
            {
                
            countforcharactersg22 = countforcharactersg22+1.0;    
                
            }  
            
            if(data.contains("gw"))
            
            {
                
            countforcharactersg23 = countforcharactersg23+1.0;    
                
            }  
            
            if(data.contains("gx"))
            
            {
                
            countforcharactersg24 = countforcharactersg24+1.0;    
                
            }  
            
            if(data.contains("gy"))
            
            {
                
            countforcharactersg25 = countforcharactersg25+1.0;    
                
            }  
            
            if(data.contains("gz"))
            
            {
                
            countforcharactersg26 = countforcharactersg26+1.0;    
                
            }  
            
            if(data.contains("g."))
            
            {
                
            countforcharactersg27 = countforcharactersg27+1.0;    
                
            }  
            
            if(data.contains("g,"))
            
            {
                
            countforcharactersg28 = countforcharactersg28+1.0;    
                
            }  
            
            if(data.contains("g "))
            
            {
                
            countforcharactersg29 = countforcharactersg29+1.0;    
                
            }  
            
            if(data.contains("ha"))
            
            {
                
            countforcharactersh1 = countforcharactersh1+1.0;    
                
            }  
            
            if(data.contains("hb"))
            
            {
                
            countforcharactersh2 = countforcharactersh2+1.0;    
                
            }  
            
            if(data.contains("hc"))
            
            {
                
            countforcharactersh3 = countforcharactersh3+1.0;    
                
            }  
            
            if(data.contains("hd"))
            
            {
                
            countforcharactersh4 = countforcharactersh4+1.0;    
                
            }  
            
            if(data.contains("he"))
            
            {
                
            countforcharactersh5 = countforcharactersh5+1.0;    
                
            }  
            
            if(data.contains("hf"))
            
            {
                
            countforcharactersh6 = countforcharactersh6+1.0;    
                
            }  
            
            if(data.contains("hg"))
            
            {
                
            countforcharactersh7 = countforcharactersh7+1.0;    
                
            }  
            
            if(data.contains("hh"))
            
            {
                
            countforcharactersh8 = countforcharactersh8+1.0;    
                
            }  
            
            if(data.contains("hi"))
            
            {
                
            countforcharactersh9 = countforcharactersh9+1.0;    
                
            }  
            
            if(data.contains("hj"))
            
            {
                
            countforcharactersh10 = countforcharactersh10+1.0;    
                
            }  
            
            if(data.contains("hk"))
            
            {
                
            countforcharactersh11 = countforcharactersh11+1.0;    
                
            }  
            
            if(data.contains("hl"))
            
            {
                
            countforcharactersh12 = countforcharactersh12+1.0;    
                
            }  
            
            if(data.contains("hm"))
            
            {
                
            countforcharactersh13 = countforcharactersh13+1.0;    
                
            }  
            
            if(data.contains("hn"))
            
            {
                
            countforcharactersh14 = countforcharactersh14+1.0;    
                
            }  
             
            if(data.contains("ho"))
            
            {
                
            countforcharactersh15 = countforcharactersh15+1.0;    
                
            }  
            
            if(data.contains("hp"))
            
            {
                
            countforcharactersh16 = countforcharactersh16+1.0;    
                
            }  
            
            if(data.contains("hq"))
            
            {
                
            countforcharactersh17 = countforcharactersh17+1.0;    
                
            }  
            
            if(data.contains("hr"))
            
            {
                
            countforcharactersh18 = countforcharactersh18+1.0;    
                
            }  
            
            if(data.contains("hs"))
            
            {
                
            countforcharactersh19 = countforcharactersh19+1.0;    
                
            }  
            
            if(data.contains("ht"))
            
            {
                
            countforcharactersh20 = countforcharactersh20+1.0;    
                
            }  
            
            if(data.contains("hu"))
            
            {
                
            countforcharactersh21 = countforcharactersh21+1.0;    
                
            }  
            
            if(data.contains("hv"))
            
            {
                
            countforcharactersh22 = countforcharactersh22+1.0;    
                
            }  
            
            if(data.contains("hw"))
            
            {
                
            countforcharactersh23 = countforcharactersh23+1.0;    
                
            }  
            
            if(data.contains("hx"))
            
            {
                
            countforcharactersh24 = countforcharactersh24+1.0;    
                
            }  
            
            if(data.contains("hy"))
            
            {
                
            countforcharactersh25 = countforcharactersh25+1.0;    
                
            }  
            
            if(data.contains("hz"))
            
            {
                
            countforcharactersh26 = countforcharactersh26+1.0;    
                
            }  
            
            if(data.contains("h."))
            
            {
                
            countforcharactersh27 = countforcharactersh27+1.0;    
                
            }  
            
            if(data.contains("h,"))
            
            {
                
            countforcharactersh28 = countforcharactersh28+1.0;    
                
            }  
            
            if(data.contains("h "))
            
            {
                
            countforcharactersh29 = countforcharactersh29+1.0;    
                
            }  
            
            if(data.contains("ia"))
            
            {
                
            countforcharactersi1 = countforcharactersi1+1.0;    
                
            }  
            
            if(data.contains("ib"))
            
            {
                
            countforcharactersi2 = countforcharactersi2+1.0;    
                
            }  
            
            if(data.contains("ic"))
            
            {
                
            countforcharactersi3 = countforcharactersi3+1.0;    
                
            }  
            
            if(data.contains("id"))
            
            {
                
            countforcharactersi4 = countforcharactersi4+1.0;    
                
            }  
            
            if(data.contains("ie"))
            
            {
                
            countforcharactersi5 = countforcharactersi5+1.0;    
                
            }  
            
            if(data.contains("if"))
            
            {
                
            countforcharactersi6 = countforcharactersi6+1.0;    
                
            }  
            
            if(data.contains("ig"))
            
            {
                
            countforcharactersi7 = countforcharactersi7+1.0;    
                
            }  
            
            if(data.contains("ih"))
            
            {
                
            countforcharactersi8 = countforcharactersi8+1.0;    
                
            }  
            
            if(data.contains("ii"))
            
            {
                
            countforcharactersi9 = countforcharactersi9+1.0;    
                
            }  
            
            if(data.contains("ij"))
            
            {
                
            countforcharactersi10 = countforcharactersi10+1.0;    
                
            }  
            
            if(data.contains("ik"))
            
            {
                
            countforcharactersi11 = countforcharactersi11+1.0;    
                
            }  
            
            if(data.contains("il"))
            
            {
                
            countforcharactersi12 = countforcharactersi12+1.0;    
                
            }  
            
            if(data.contains("im"))
            
            {
                
            countforcharactersi13 = countforcharactersi13+1.0;    
                
            }  
            
            if(data.contains("in"))
            
            {
                
            countforcharactersi14 = countforcharactersi14+1.0;    
                
            }  
             
            if(data.contains("io"))
            
            {
                
            countforcharactersi15 = countforcharactersi15+1.0;    
                
            }  
            
            if(data.contains("ip"))
            
            {
                
            countforcharactersi16 = countforcharactersi16+1.0;    
                
            }  
            
            if(data.contains("iq"))
            
            {
                
            countforcharactersi17 = countforcharactersi17+1.0;    
                
            }  
            
            if(data.contains("ir"))
            
            {
                
            countforcharactersi18 = countforcharactersi18+1.0;    
                
            }  
            
            if(data.contains("is"))
            
            {
                
            countforcharactersi19 = countforcharactersi19+1.0;    
                
            }  
            
            if(data.contains("it"))
            
            {
                
            countforcharactersi20 = countforcharactersi20+1.0;    
                
            }  
            
            if(data.contains("iu"))
            
            {
                
            countforcharactersi21 = countforcharactersi21+1.0;    
                
            }  
            
            if(data.contains("iv"))
            
            {
                
            countforcharactersi22 = countforcharactersi22+1.0;    
                
            }  
            
            if(data.contains("iw"))
            
            {
                
            countforcharactersi23 = countforcharactersi23+1.0;    
                
            }  
            
            if(data.contains("ix"))
            
            {
                
            countforcharactersi24 = countforcharactersi24+1.0;    
                
            }  
            
            if(data.contains("iy"))
            
            {
                
            countforcharactersi25 = countforcharactersi25+1.0;    
                
            }  
            
            if(data.contains("iz"))
            
            {
                
            countforcharactersi26 = countforcharactersi26+1.0;    
                
            }  
            
            if(data.contains("i."))
            
            {
                
            countforcharactersi27 = countforcharactersi27+1.0;    
                
            }  
            
            if(data.contains("i,"))
            
            {
                
            countforcharactersi28 = countforcharactersi28+1.0;    
                
            }  
            
            if(data.contains("i "))
            
            {
                
            countforcharactersi29 = countforcharactersi29+1.0;    
                
            } 
            
            if(data.contains("ja"))
            
            {
                
            countforcharactersj1 = countforcharactersj1+1.0;    
                
            }  
            
            if(data.contains("jb"))
            
            {
                
            countforcharactersj2 = countforcharactersj2+1.0;    
                
            }  
            
            if(data.contains("jc"))
            
            {
                
            countforcharactersj3 = countforcharactersj3+1.0;    
                
            }  
            
            if(data.contains("jd"))
            
            {
                
            countforcharactersj4 = countforcharactersj4+1.0;    
                
            }  
            
            if(data.contains("je"))
            
            {
                
            countforcharactersj5 = countforcharactersj5+1.0;    
                
            }  
            
            if(data.contains("jf"))
            
            {
                
            countforcharactersj6 = countforcharactersj6+1.0;    
                
            }  
            
            if(data.contains("jg"))
            
            {
                
            countforcharactersj7 = countforcharactersj7+1.0;    
                
            }  
            
            if(data.contains("jh"))
            
            {
                
            countforcharactersj8 = countforcharactersj8+1.0;    
                
            }  
            
            if(data.contains("ji"))
            
            {
                
            countforcharactersj9 = countforcharactersj9+1.0;    
                
            }  
            
            if(data.contains("jj"))
            
            {
                
            countforcharactersj10 = countforcharactersj10+1.0;    
                
            }  
            
            if(data.contains("jk"))
            
            {
                
            countforcharactersj11 = countforcharactersj11+1.0;    
                
            }  
            
            if(data.contains("jl"))
            
            {
                
            countforcharactersj12 = countforcharactersj12+1.0;    
                
            }  
            
            if(data.contains("jm"))
            
            {
                
            countforcharactersj13 = countforcharactersj13+1.0;    
                
            }  
            
            if(data.contains("jn"))
            
            {
                
            countforcharactersj14 = countforcharactersj14+1.0;    
                
            }  
             
            if(data.contains("jo"))
            
            {
                
            countforcharactersj15 = countforcharactersj15+1.0;    
                
            }  
            
            if(data.contains("jp"))
            
            {
                
            countforcharactersj16 = countforcharactersj16+1.0;    
                
            }  
            
            if(data.contains("jq"))
            
            {
                
            countforcharactersj17 = countforcharactersj17+1.0;    
                
            }  
            
            if(data.contains("jr"))
            
            {
                
            countforcharactersj18 = countforcharactersj18+1.0;    
                
            }  
            
            if(data.contains("js"))
            
            {
                
            countforcharactersj19 = countforcharactersj19+1.0;    
                
            }  
            
            if(data.contains("jt"))
            
            {
                
            countforcharactersj20 = countforcharactersj20+1.0;    
                
            }  
            
            if(data.contains("ju"))
            
            {
                
            countforcharactersj21 = countforcharactersj21+1.0;    
                
            }  
            
            if(data.contains("jv"))
            
            {
                
            countforcharactersj22 = countforcharactersj22+1.0;    
                
            }  
            
            if(data.contains("jw"))
            
            {
                
            countforcharactersj23 = countforcharactersj23+1.0;    
                
            }  
            
            if(data.contains("jx"))
            
            {
                
            countforcharactersj24 = countforcharactersj24+1.0;    
                
            }  
            
            if(data.contains("jy"))
            
            {
                
            countforcharactersj25 = countforcharactersj25+1.0;    
                
            }  
            
            if(data.contains("jz"))
            
            {
                
            countforcharactersj26 = countforcharactersj26+1.0;    
                
            }  
            
            if(data.contains("j."))
            
            {
                
            countforcharactersj27 = countforcharactersj27+1.0;    
                
            }  
            
            if(data.contains("j,"))
            
            {
                
            countforcharactersj28 = countforcharactersj28+1.0;    
                
            }  
            
            if(data.contains("j "))
            
            {
                
            countforcharactersj29 = countforcharactersj29+1.0;    
                
            }  
            
            if(data.contains("ka"))
            
            {
                
            countforcharactersk1 = countforcharactersk1+1.0;    
                
            }  
            
            if(data.contains("kb"))
            
            {
                
            countforcharactersk2 = countforcharactersk2+1.0;    
                
            }  
            
            if(data.contains("kc"))
            
            {
                
            countforcharactersk3 = countforcharactersk3+1.0;    
                
            }  
            
            if(data.contains("kd"))
            
            {
                
            countforcharactersk4 = countforcharactersk4+1.0;    
                
            }  
            
            if(data.contains("ke"))
            
            {
                
            countforcharactersk5 = countforcharactersk5+1.0;    
                
            }  
            
            if(data.contains("kf"))
            
            {
                
            countforcharactersk6 = countforcharactersk6+1.0;    
                
            }  
            
            if(data.contains("kg"))
            
            {
                
            countforcharactersk7 = countforcharactersk7+1.0;    
                
            }  
            
            if(data.contains("kh"))
            
            {
                
            countforcharactersk8 = countforcharactersk8+1.0;    
                
            }  
            
            if(data.contains("ki"))
            
            {
                
            countforcharactersk9 = countforcharactersk9+1.0;    
                
            }  
            
            if(data.contains("kj"))
            
            {
                
            countforcharactersk10 = countforcharactersk10+1.0;    
                
            }  
            
            if(data.contains("kk"))
            
            {
                
            countforcharactersk11 = countforcharactersk11+1.0;    
                
            }  
            
            if(data.contains("kl"))
            
            {
                
            countforcharactersk12 = countforcharactersk12+1.0;    
                
            }  
            
            if(data.contains("km"))
            
            {
                
            countforcharactersk13 = countforcharactersk13+1.0;    
                
            }  
            
            if(data.contains("kn"))
            
            {
                
            countforcharactersk14 = countforcharactersk14+1.0;    
                
            }  
             
            if(data.contains("ko"))
            
            {
                
            countforcharactersk15 = countforcharactersk15+1.0;    
                
            }  
            
            if(data.contains("kp"))
            
            {
                
            countforcharactersk16 = countforcharactersk16+1.0;    
                
            }  
            
            if(data.contains("kq"))
            
            {
                
            countforcharactersk17 = countforcharactersk17+1.0;    
                
            }  
            
            if(data.contains("kr"))
            
            {
                
            countforcharactersk18 = countforcharactersk18+1.0;    
                
            }  
            
            if(data.contains("ks"))
            
            {
                
            countforcharactersk19 = countforcharactersk19+1.0;    
                
            }  
            
            if(data.contains("kt"))
            
            {
                
            countforcharactersk20 = countforcharactersk20+1.0;    
                
            }  
            
            if(data.contains("ku"))
            
            {
                
            countforcharactersk21 = countforcharactersk21+1.0;    
                
            }  
            
            if(data.contains("kv"))
            
            {
                
            countforcharactersk22 = countforcharactersk22+1.0;    
                
            }  
            
            if(data.contains("kw"))
            
            {
                
            countforcharactersk23 = countforcharactersk23+1.0;    
                
            }  
            
            if(data.contains("kx"))
            
            {
                
            countforcharactersk24 = countforcharactersk24+1.0;    
                
            }  
            
            if(data.contains("ky"))
            
            {
                
            countforcharactersk25 = countforcharactersk25+1.0;    
                
            }  
            
            if(data.contains("kz"))
            
            {
                
            countforcharactersk26 = countforcharactersk26+1.0;    
                
            }  
            
            if(data.contains("k."))
            
            {
                
            countforcharactersk27 = countforcharactersk27+1.0;    
                
            }  
            
            if(data.contains("k,"))
            
            {
                
            countforcharactersk28 = countforcharactersk28+1.0;    
                
            }  
            
            if(data.contains("k "))
            
            {
                
            countforcharactersk29 = countforcharactersk29+1.0;    
                
            }  
            
            if(data.contains("la"))
            
            {
                
            countforcharactersl1 = countforcharactersl1+1.0;    
                
            }  
            
            if(data.contains("lb"))
            
            {
                
            countforcharactersl2 = countforcharactersl2+1.0;    
                
            }  
            
            if(data.contains("lc"))
            
            {
                
            countforcharactersl3 = countforcharactersl3+1.0;    
                
            }  
            
            if(data.contains("ld"))
            
            {
                
            countforcharactersl4 = countforcharactersl4+1.0;    
                
            }  
            
            if(data.contains("le"))
            
            {
                
            countforcharactersl5 = countforcharactersl5+1.0;    
                
            }  
            
            if(data.contains("lf"))
            
            {
                
            countforcharactersl6 = countforcharactersl6+1.0;    
                
            }  
            
            if(data.contains("lg"))
            
            {
                
            countforcharactersl7 = countforcharactersl7+1.0;    
                
            }  
            
            if(data.contains("lh"))
            
            {
                
            countforcharactersl8 = countforcharactersl8+1.0;    
                
            }  
            
            if(data.contains("li"))
            
            {
                
            countforcharactersl9 = countforcharactersl9+1.0;    
                
            }  
            
            if(data.contains("lj"))
            
            {
                
            countforcharactersl10 = countforcharactersl10+1.0;    
                
            }  
            
            if(data.contains("lk"))
            
            {
                
            countforcharactersl11 = countforcharactersl11+1.0;    
                
            }  
            
            if(data.contains("ll"))
            
            {
                
            countforcharactersl12 = countforcharactersl12+1.0;    
                
            }  
            
            if(data.contains("lm"))
            
            {
                
            countforcharactersl13 = countforcharactersl13+1.0;    
                
            }  
            
            if(data.contains("ln"))
            
            {
                
            countforcharactersl14 = countforcharactersl14+1.0;    
                
            }  
             
            if(data.contains("lo"))
            
            {
                
            countforcharactersl15 = countforcharactersl15+1.0;    
                
            }  
            
            if(data.contains("lp"))
            
            {
                
            countforcharactersl16 = countforcharactersl16+1.0;    
                
            }  
            
            if(data.contains("lq"))
            
            {
                
            countforcharactersl17 = countforcharactersl17+1.0;    
                
            }  
            
            if(data.contains("lr"))
            
            {
                
            countforcharactersl18 = countforcharactersl18+1.0;    
                
            }  
            
            if(data.contains("ls"))
            
            {
                
            countforcharactersl19 = countforcharactersl19+1.0;    
                
            }  
            
            if(data.contains("lt"))
            
            {
                
            countforcharactersl20 = countforcharactersl20+1.0;    
                
            }  
            
            if(data.contains("lu"))
            
            {
                
            countforcharactersl21 = countforcharactersl21+1.0;    
                
            }  
            
            if(data.contains("lv"))
            
            {
                
            countforcharactersl22 = countforcharactersl22+1.0;    
                
            }  
            
            if(data.contains("lw"))
            
            {
                
            countforcharactersl23 = countforcharactersl23+1.0;    
                
            }  
            
            if(data.contains("lx"))
            
            {
                
            countforcharactersl24 = countforcharactersl24+1.0;    
                
            }  
            
            if(data.contains("ly"))
            
            {
                
            countforcharactersl25 = countforcharactersl25+1.0;    
                
            }  
            
            if(data.contains("lz"))
            
            {
                
            countforcharactersl26 = countforcharactersl26+1.0;    
                
            }  
            
            if(data.contains("l."))
            
            {
                
            countforcharactersl27 = countforcharactersl27+1.0;    
                
            }  
            
            if(data.contains("l,"))
            
            {
                
            countforcharactersl28 = countforcharactersl28+1.0;    
                
            }  
            
            if(data.contains("l "))
            
            {
                
            countforcharactersl29 = countforcharactersl29+1.0;    
                
            }  
          
            if(data.contains("ma"))
            
            {
                
            countforcharactersm1 = countforcharactersm1+1.0;    
                
            }  
            
            if(data.contains("mb"))
            
            {
                
            countforcharactersm2 = countforcharactersm2+1.0;    
                
            }  
            
            if(data.contains("mc"))
            
            {
                
            countforcharactersm3 = countforcharactersm3+1.0;    
                
            }  
            
            if(data.contains("md"))
            
            {
                
            countforcharactersm4 = countforcharactersm4+1.0;    
                
            }  
            
            if(data.contains("me"))
            
            {
                
            countforcharactersm5 = countforcharactersm5+1.0;    
                
            }  
            
            if(data.contains("mf"))
            
            {
                
            countforcharactersm6 = countforcharactersm6+1.0;    
                
            }  
            
            if(data.contains("mg"))
            
            {
                
            countforcharactersm7 = countforcharactersm7+1.0;    
                
            }  
            
            if(data.contains("mh"))
            
            {
                
            countforcharactersm8 = countforcharactersm8+1.0;    
                
            }  
            
            if(data.contains("mi"))
            
            {
                
            countforcharactersm9 = countforcharactersm9+1.0;    
                
            }  
            
            if(data.contains("mj"))
            
            {
                
            countforcharactersm10 = countforcharactersm10+1.0;    
                
            }  
            
            if(data.contains("mk"))
            
            {
                
            countforcharactersm11 = countforcharactersm11+1.0;    
                
            }  
            
            if(data.contains("ml"))
            
            {
                
            countforcharactersm12 = countforcharactersm12+1.0;    
                
            }  
            
            if(data.contains("mm"))
            
            {
                
            countforcharactersm13 = countforcharactersm13+1.0;    
                
            }  
            
            if(data.contains("mn"))
            
            {
                
            countforcharactersm14 = countforcharactersm14+1.0;    
                
            }  
             
            if(data.contains("mo"))
            
            {
                
            countforcharactersm15 = countforcharactersm15+1.0;    
                
            }  
            
            if(data.contains("mp"))
            
            {
                
            countforcharactersm16 = countforcharactersm16+1.0;    
                
            }  
            
            if(data.contains("mq"))
            
            {
                
            countforcharactersm17 = countforcharactersm17+1.0;    
                
            }  
            
            if(data.contains("mr"))
            
            {
                
            countforcharactersm18 = countforcharactersm18+1.0;    
                
            }  
            
            if(data.contains("ms"))
            
            {
                
            countforcharactersm19 = countforcharactersm19+1.0;    
                
            }  
            
            if(data.contains("mt"))
            
            {
                
            countforcharactersm20 = countforcharactersm20+1.0;    
                
            }  
            
            if(data.contains("mu"))
            
            {
                
            countforcharactersm21 = countforcharactersm21+1.0;    
                
            }  
            
            if(data.contains("mv"))
            
            {
                
            countforcharactersm22 = countforcharactersm22+1.0;    
                
            }  
            
            if(data.contains("mw"))
            
            {
                
            countforcharactersm23 = countforcharactersm23+1.0;    
                
            }  
            
            if(data.contains("mx"))
            
            {
                
            countforcharactersm24 = countforcharactersm24+1.0;    
                
            }  
            
            if(data.contains("my"))
            
            {
                
            countforcharactersm25 = countforcharactersm25+1.0;    
                
            }  
            
            if(data.contains("mz"))
            
            {
                
            countforcharactersm26 = countforcharactersm26+1.0;    
                
            }  
            
            if(data.contains("m."))
            
            {
                
            countforcharactersm27 = countforcharactersm27+1.0;    
                
            }  
            
            if(data.contains("m,"))
            
            {
                
            countforcharactersm28 = countforcharactersm28+1.0;    
                
            }  
            
            if(data.contains("m "))
            
            {
                
            countforcharactersm29 = countforcharactersm29+1.0;    
                
            }  
            
            if(data.contains("na"))
            
            {
                
            countforcharactersn1 = countforcharactersn1+1.0;    
                
            }  
            
            if(data.contains("nb"))
            
            {
                
            countforcharactersn2 = countforcharactersn2+1.0;    
                
            }  
            
            if(data.contains("nc"))
            
            {
                
            countforcharactersn3 = countforcharactersn3+1.0;    
                
            }  
            
            if(data.contains("nd"))
            
            {
                
            countforcharactersn4 = countforcharactersn4+1.0;    
                
            }  
            
            if(data.contains("ne"))
            
            {
                
            countforcharactersn5 = countforcharactersn5+1.0;    
                
            }  
            
            if(data.contains("nf"))
            
            {
                
            countforcharactersn6 = countforcharactersn6+1.0;    
                
            }  
            
            if(data.contains("ng"))
            
            {
                
            countforcharactersn7 = countforcharactersn7+1.0;    
                
            }  
            
            if(data.contains("nh"))
            
            {
                
            countforcharactersn8 = countforcharactersn8+1.0;    
                
            }  
            
            if(data.contains("ni"))
            
            {
                
            countforcharactersn9 = countforcharactersn9+1.0;    
                
            }  
            
            if(data.contains("nj"))
            
            {
                
            countforcharactersn10 = countforcharactersn10+1.0;    
                
            }  
            
            if(data.contains("nk"))
            
            {
                
            countforcharactersn11 = countforcharactersn11+1.0;    
                
            }  
            
            if(data.contains("nl"))
            
            {
                
            countforcharactersn12 = countforcharactersn12+1.0;    
                
            }  
            
            if(data.contains("nm"))
            
            {
                
            countforcharactersn13 = countforcharactersn13+1.0;    
                
            }  
            
            if(data.contains("nn"))
            
            {
                
            countforcharactersn14 = countforcharactersn14+1.0;    
                
            }  
             
            if(data.contains("no"))
            
            {
                
            countforcharactersn15 = countforcharactersn15+1.0;    
                
            }  
            
            if(data.contains("np"))
            
            {
                
            countforcharactersn16 = countforcharactersn16+1.0;    
                
            }  
            
            if(data.contains("nq"))
            
            {
                
            countforcharactersn17 = countforcharactersn17+1.0;    
                
            }  
            
            if(data.contains("nr"))
            
            {
                
            countforcharactersn18 = countforcharactersn18+1.0;    
                
            }  
            
            if(data.contains("ns"))
            
            {
                
            countforcharactersn19 = countforcharactersn19+1.0;    
                
            }  
            
            if(data.contains("nt"))
            
            {
                
            countforcharactersn20 = countforcharactersn20+1.0;    
                
            }  
            
            if(data.contains("nu"))
            
            {
                
            countforcharactersn21 = countforcharactersn21+1.0;    
                
            }  
            
            if(data.contains("nv"))
            
            {
                
            countforcharactersn22 = countforcharactersn22+1.0;    
                
            }  
            
            if(data.contains("nw"))
            
            {
                
            countforcharactersn23 = countforcharactersn23+1.0;    
                
            }  
            
            if(data.contains("nx"))
            
            {
                
            countforcharactersn24 = countforcharactersn24+1.0;    
                
            }  
            
            if(data.contains("ny"))
            
            {
                
            countforcharactersn25 = countforcharactersn25+1.0;    
                
            }  
            
            if(data.contains("nz"))
            
            {
                
            countforcharactersn26 = countforcharactersn26+1.0;    
                
            }  
            
            if(data.contains("n."))
            
            {
                
            countforcharactersn27 = countforcharactersn27+1.0;    
                
            }  
            
            if(data.contains("n,"))
            
            {
                
            countforcharactersn28 = countforcharactersn28+1.0;    
                
            }  
            
            if(data.contains("n "))
            
            {
                
            countforcharactersn29 = countforcharactersn29+1.0;    
                
            }  
            
            if(data.contains("oa"))
            
            {
                
            countforcharacterso1 = countforcharacterso1+1.0;    
                
            }  
            
            if(data.contains("ob"))
            
            {
                
            countforcharacterso2 = countforcharacterso2+1.0;    
                
            }  
            
            if(data.contains("oc"))
            
            {
                
            countforcharacterso3 = countforcharacterso3+1.0;    
                
            }  
            
            if(data.contains("od"))
            
            {
                
            countforcharacterso4 = countforcharacterso4+1.0;    
                
            }  
            
            if(data.contains("oe"))
            
            {
                
            countforcharacterso5 = countforcharacterso5+1.0;    
                
            }  
            
            if(data.contains("of"))
            
            {
                
            countforcharacterso6 = countforcharacterso6+1.0;    
                
            }  
            
            if(data.contains("og"))
            
            {
                
            countforcharacterso7 = countforcharacterso7+1.0;    
                
            }  
            
            if(data.contains("oh"))
            
            {
                
            countforcharacterso8 = countforcharacterso8+1.0;    
                
            }  
            
            if(data.contains("oi"))
            
            {
                
            countforcharacterso9 = countforcharacterso9+1.0;    
                
            }  
            
            if(data.contains("oj"))
            
            {
                
            countforcharacterso10 = countforcharacterso10+1.0;    
                
            }  
            
            if(data.contains("ok"))
            
            {
                
            countforcharacterso11 = countforcharacterso11+1.0;    
                
            }  
            
            if(data.contains("ol"))
            
            {
                
            countforcharacterso12 = countforcharacterso12+1.0;    
                
            }  
            
            if(data.contains("om"))
            
            {
                
            countforcharacterso13 = countforcharacterso13+1.0;    
                
            }  
            
            if(data.contains("on"))
            
            {
                
            countforcharacterso14 = countforcharacterso14+1.0;    
                
            }  
             
            if(data.contains("oo"))
            
            {
                
            countforcharacterso15 = countforcharacterso15+1.0;    
                
            }  
            
            if(data.contains("op"))
            
            {
                
            countforcharacterso16 = countforcharacterso16+1.0;    
                
            }  
            
            if(data.contains("oq"))
            
            {
                
            countforcharacterso17 = countforcharacterso17+1.0;    
                
            }  
            
            if(data.contains("or"))
            
            {
                
            countforcharacterso18 = countforcharacterso18+1.0;    
                
            }  
            
            if(data.contains("os"))
            
            {
                
            countforcharacterso19 = countforcharacterso19+1.0;    
                
            }  
            
            if(data.contains("ot"))
            
            {
                
            countforcharacterso20 = countforcharacterso20+1.0;    
                
            }  
            
            if(data.contains("ou"))
            
            {
                
            countforcharacterso21 = countforcharacterso21+1.0;    
                
            }  
            
            if(data.contains("ov"))
            
            {
                
            countforcharacterso22 = countforcharacterso22+1.0;    
                
            }  
            
            if(data.contains("ow"))
            
            {
                
            countforcharacterso23 = countforcharacterso23+1.0;    
                
            }  
            
            if(data.contains("ox"))
            
            {
                
            countforcharacterso24 = countforcharacterso24+1.0;    
                
            }  
            
            if(data.contains("oy"))
            
            {
                
            countforcharacterso25 = countforcharacterso25+1.0;    
                
            }  
            
            if(data.contains("oz"))
            
            {
                
            countforcharacterso26 = countforcharacterso26+1.0;    
                
            }  
            
            if(data.contains("o."))
            
            {
                
            countforcharacterso27 = countforcharacterso27+1.0;    
                
            }  
            
            if(data.contains("o,"))
            
            {
                
            countforcharacterso28 = countforcharacterso28+1.0;    
                
            }  
            
            if(data.contains("o "))
            
            {
                
            countforcharacterso29 = countforcharacterso29+1.0;    
                
            } 
            
            if(data.contains("pa"))
            
            {
                
            countforcharactersp1 = countforcharactersp1+1.0;    
                
            }  
            
            if(data.contains("pb"))
            
            {
                
            countforcharactersp2 = countforcharactersp2+1.0;    
                
            }  
            
            if(data.contains("pc"))
            
            {
                
            countforcharactersp3 = countforcharactersp3+1.0;    
                
            }  
            
            if(data.contains("pd"))
            
            {
                
            countforcharactersp4 = countforcharactersp4+1.0;    
                
            }  
            
            if(data.contains("pe"))
            
            {
                
            countforcharactersp5 = countforcharactersp5+1.0;    
                
            }  
            
            if(data.contains("pf"))
            
            {
                
            countforcharactersp6 = countforcharactersp6+1.0;    
                
            }  
            
            if(data.contains("pg"))
            
            {
                
            countforcharactersp7 = countforcharactersp7+1.0;    
                
            }  
            
            if(data.contains("ph"))
            
            {
                
            countforcharactersp8 = countforcharactersp8+1.0;    
                
            }  
            
            if(data.contains("pi"))
            
            {
                
            countforcharactersp9 = countforcharactersp9+1.0;    
                
            }  
            
            if(data.contains("pj"))
            
            {
                
            countforcharactersp10 = countforcharactersp10+1.0;    
                
            }  
            
            if(data.contains("pk"))
            
            {
                
            countforcharactersp11 = countforcharactersp11+1.0;    
                
            }  
            
            if(data.contains("pl"))
            
            {
                
            countforcharactersp12 = countforcharactersp12+1.0;    
                
            }  
            
            if(data.contains("pm"))
            
            {
                
            countforcharactersp13 = countforcharactersp13+1.0;    
                
            }  
            
            if(data.contains("pn"))
            
            {
                
            countforcharactersp14 = countforcharactersp14+1.0;    
                
            }  
             
            if(data.contains("po"))
            
            {
                
            countforcharactersp15 = countforcharactersp15+1.0;    
                
            }  
            
            if(data.contains("pp"))
            
            {
                
            countforcharactersp16 = countforcharactersp16+1.0;    
                
            }  
            
            if(data.contains("pq"))
            
            {
                
            countforcharactersp17 = countforcharactersp17+1.0;    
                
            }  
            
            if(data.contains("pr"))
            
            {
                
            countforcharactersp18 = countforcharactersp18+1.0;    
                
            }  
            
            if(data.contains("ps"))
            
            {
                
            countforcharactersp19 = countforcharactersp19+1.0;    
                
            }  
            
            if(data.contains("pt"))
            
            {
                
            countforcharactersp20 = countforcharactersp20+1.0;    
                
            }  
            
            if(data.contains("pu"))
            
            {
                
            countforcharactersp21 = countforcharactersp21+1.0;    
                
            }  
            
            if(data.contains("pv"))
            
            {
                
            countforcharactersp22 = countforcharactersp22+1.0;    
                
            }  
            
            if(data.contains("pw"))
            
            {
                
            countforcharactersp23 = countforcharactersp23+1.0;    
                
            }  
            
            if(data.contains("px"))
            
            {
                
            countforcharactersp24 = countforcharactersp24+1.0;    
                
            }  
            
            if(data.contains("py"))
            
            {
                
            countforcharactersp25 = countforcharactersp25+1.0;    
                
            }  
            
            if(data.contains("pz"))
            
            {
                
            countforcharactersp26 = countforcharactersp26+1.0;    
                
            }  
            
            if(data.contains("p."))
            
            {
                
            countforcharactersp27 = countforcharactersp27+1.0;    
                
            }  
            
            if(data.contains("p,"))
            
            {
                
            countforcharactersp28 = countforcharactersp28+1.0;    
                
            }  
            
            if(data.contains("p "))
            
            {
                
            countforcharactersp29 = countforcharactersp29+1.0;    
                
            }  
            
            if(data.contains("qa"))
            
            {
                
            countforcharactersq1 = countforcharactersq1+1.0;    
                
            }  
            
            if(data.contains("qb"))
            
            {
                
            countforcharactersq2 = countforcharactersq2+1.0;    
                
            }  
            
            if(data.contains("qc"))
            
            {
                
            countforcharactersq3 = countforcharactersq3+1.0;    
                
            }  
            
            if(data.contains("qd"))
            
            {
                
            countforcharactersq4 = countforcharactersq4+1.0;    
                
            }  
            
            if(data.contains("qe"))
            
            {
                
            countforcharactersq5 = countforcharactersq5+1.0;    
                
            }  
            
            if(data.contains("qf"))
            
            {
                
            countforcharactersq6 = countforcharactersq6+1.0;    
                
            }  
            
            if(data.contains("qg"))
            
            {
                
            countforcharactersq7 = countforcharactersq7+1.0;    
                
            }  
            
            if(data.contains("qh"))
            
            {
                
            countforcharactersq8 = countforcharactersq8+1.0;    
                
            }  
            
            if(data.contains("qi"))
            
            {
                
            countforcharactersq9 = countforcharactersq9+1.0;    
                
            }  
            
            if(data.contains("qj"))
            
            {
                
            countforcharactersq10 = countforcharactersq10+1.0;    
                
            }  
            
            if(data.contains("qk"))
            
            {
                
            countforcharactersq11 = countforcharactersq11+1.0;    
                
            }  
            
            if(data.contains("ql"))
            
            {
                
            countforcharactersq12 = countforcharactersq12+1.0;    
                
            }  
            
            if(data.contains("qm"))
            
            {
                
            countforcharactersq13 = countforcharactersq13+1.0;    
                
            }  
            
            if(data.contains("qn"))
            
            {
                
            countforcharactersq14 = countforcharactersq14+1.0;    
                
            }  
             
            if(data.contains("qo"))
            
            {
                
            countforcharactersq15 = countforcharactersq15+1.0;    
                
            }  
            
            if(data.contains("qp"))
            
            {
                
            countforcharactersq16 = countforcharactersq16+1.0;    
                
            }  
            
            if(data.contains("qq"))
            
            {
                
            countforcharactersq17 = countforcharactersq17+1.0;    
                
            }  
            
            if(data.contains("qr"))
            
            {
                
            countforcharactersq18 = countforcharactersq18+1.0;    
                
            }  
            
            if(data.contains("qs"))
            
            {
                
            countforcharactersq19 = countforcharactersq19+1.0;    
                
            }  
            
            if(data.contains("qt"))
            
            {
                
            countforcharactersq20 = countforcharactersq20+1.0;    
                
            }  
            
            if(data.contains("qu"))
            
            {
                
            countforcharactersq21 = countforcharactersq21+1.0;    
                
            }  
            
            if(data.contains("qv"))
            
            {
                
            countforcharactersq22 = countforcharactersq22+1.0;    
                
            }  
            
            if(data.contains("qw"))
            
            {
                
            countforcharactersq23 = countforcharactersq23+1.0;    
                
            }  
            
            if(data.contains("qx"))
            
            {
                
            countforcharactersq24 = countforcharactersq24+1.0;    
                
            }  
            
            if(data.contains("qy"))
            
            {
                
            countforcharactersq25 = countforcharactersq25+1.0;    
                
            }  
            
            if(data.contains("qz"))
            
            {
                
            countforcharactersq26 = countforcharactersq26+1.0;    
                
            }  
            
            if(data.contains("q."))
            
            {
                
            countforcharactersq27 = countforcharactersq27+1.0;    
                
            }  
            
            if(data.contains("q,"))
            
            {
                
            countforcharactersq28 = countforcharactersq28+1.0;    
                
            }  
            
            if(data.contains("q "))
            
            {
                
            countforcharactersq29 = countforcharactersq29+1.0;    
                
            }  
            
            if(data.contains("ra"))
            
            {
                
            countforcharactersr1 = countforcharactersr1+1.0;    
                
            }  
            
            if(data.contains("rb"))
            
            {
                
            countforcharactersr2 = countforcharactersr2+1.0;    
                
            }  
            
            if(data.contains("rc"))
            
            {
                
            countforcharactersr3 = countforcharactersr3+1.0;    
                
            }  
            
            if(data.contains("rd"))
            
            {
                
            countforcharactersr4 = countforcharactersr4+1.0;    
                
            }  
            
            if(data.contains("re"))
            
            {
                
            countforcharactersr5 = countforcharactersr5+1.0;    
                
            }  
            
            if(data.contains("rf"))
            
            {
                
            countforcharactersr6 = countforcharactersr6+1.0;    
                
            }  
            
            if(data.contains("rg"))
            
            {
                
            countforcharactersr7 = countforcharactersr7+1.0;    
                
            }  
            
            if(data.contains("rh"))
            
            {
                
            countforcharactersr8 = countforcharactersr8+1.0;    
                
            }  
            
            if(data.contains("ri"))
            
            {
                
            countforcharactersr9 = countforcharactersr9+1.0;    
                
            }  
            
            if(data.contains("rj"))
            
            {
                
            countforcharactersr10 = countforcharactersr10+1.0;    
                
            }  
            
            if(data.contains("rk"))
            
            {
                
            countforcharactersr11 = countforcharactersr11+1.0;    
                
            }  
            
            if(data.contains("rl"))
            
            {
                
            countforcharactersr12 = countforcharactersr12+1.0;    
                
            }  
            
            if(data.contains("rm"))
            
            {
                
            countforcharactersr13 = countforcharactersr13+1.0;    
                
            }  
            
            if(data.contains("rn"))
            
            {
                
            countforcharactersr14 = countforcharactersr14+1.0;    
                
            }  
             
            if(data.contains("ro"))
            
            {
                
            countforcharactersr15 = countforcharactersr15+1.0;    
                
            }  
            
            if(data.contains("rp"))
            
            {
                
            countforcharactersr16 = countforcharactersr16+1.0;    
                
            }  
            
            if(data.contains("rq"))
            
            {
                
            countforcharactersr17 = countforcharactersr17+1.0;    
                
            }  
            
            if(data.contains("rr"))
            
            {
                
            countforcharactersr18 = countforcharactersr18+1.0;    
                
            }  
            
            if(data.contains("rs"))
            
            {
                
            countforcharactersr19 = countforcharactersr19+1.0;    
                
            }  
            
            if(data.contains("rt"))
            
            {
                
            countforcharactersr20 = countforcharactersr20+1.0;    
                
            }  
            
            if(data.contains("ru"))
            
            {
                
            countforcharactersr21 = countforcharactersr21+1.0;    
                
            }  
            
            if(data.contains("rv"))
            
            {
                
            countforcharactersr22 = countforcharactersr22+1.0;    
                
            }  
            
            if(data.contains("rw"))
            
            {
                
            countforcharactersr23 = countforcharactersr23+1.0;    
                
            }  
            
            if(data.contains("rx"))
            
            {
                
            countforcharactersr24 = countforcharactersr24+1.0;    
                
            }  
            
            if(data.contains("ry"))
            
            {
                
            countforcharactersr25 = countforcharactersr25+1.0;    
                
            }  
            
            if(data.contains("rz"))
            
            {
                
            countforcharactersr26 = countforcharactersr26+1.0;    
                
            }  
            
            if(data.contains("r."))
            
            {
                
            countforcharactersr27 = countforcharactersr27+1.0;    
                
            }  
            
            if(data.contains("r,"))
            
            {
                
            countforcharactersr28 = countforcharactersr28+1.0;    
                
            }  
            
            if(data.contains("r "))
            
            {
                
            countforcharactersr29 = countforcharactersr29+1.0;    
                
            }  
            
            if(data.contains("sa"))
            
            {
                
            countforcharacterss1 = countforcharacterss1+1.0;    
                
            }  
            
            if(data.contains("sb"))
            
            {
                
            countforcharacterss2 = countforcharacterss2+1.0;    
                
            }  
            
            if(data.contains("sc"))
            
            {
                
            countforcharacterss3 = countforcharacterss3+1.0;    
                
            }  
            
            if(data.contains("sd"))
            
            {
                
            countforcharacterss4 = countforcharacterss4+1.0;    
                
            }  
            
            if(data.contains("se"))
            
            {
                
            countforcharacterss5 = countforcharacterss5+1.0;    
                
            }  
            
            if(data.contains("sf"))
            
            {
                
            countforcharacterss6 = countforcharacterss6+1.0;    
                
            }  
            
            if(data.contains("sg"))
            
            {
                
            countforcharacterss7 = countforcharacterss7+1.0;    
                
            }  
            
            if(data.contains("sh"))
            
            {
                
            countforcharacterss8 = countforcharacterss8+1.0;    
                
            }  
            
            if(data.contains("si"))
            
            {
                
            countforcharacterss9 = countforcharacterss9+1.0;    
                
            }  
            
            if(data.contains("sj"))
            
            {
                
            countforcharacterss10 = countforcharacterss10+1.0;    
                
            }  
            
            if(data.contains("sk"))
            
            {
                
            countforcharacterss11 = countforcharacterss11+1.0;    
                
            }  
            
            if(data.contains("sl"))
            
            {
                
            countforcharacterss12 = countforcharacterss12+1.0;    
                
            }  
            
            if(data.contains("sm"))
            
            {
                
            countforcharacterss13 = countforcharacterss13+1.0;    
                
            }  
            
            if(data.contains("sn"))
            
            {
                
            countforcharacterss14 = countforcharacterss14+1.0;    
                
            }  
             
            if(data.contains("so"))
            
            {
                
            countforcharacterss15 = countforcharacterss15+1.0;    
                
            }  
            
            if(data.contains("sp"))
            
            {
                
            countforcharacterss16 = countforcharacterss16+1.0;    
                
            }  
            
            if(data.contains("sq"))
            
            {
                
            countforcharacterss17 = countforcharacterss17+1.0;    
                
            }  
            
            if(data.contains("sr"))
            
            {
                
            countforcharacterss18 = countforcharacterss18+1.0;    
                
            }  
            
            if(data.contains("ss"))
            
            {
                
            countforcharacterss19 = countforcharacterss19+1.0;    
                
            }  
            
            if(data.contains("st"))
            
            {
                
            countforcharacterss20 = countforcharacterss20+1.0;    
                
            }  
            
            if(data.contains("su"))
            
            {
                
            countforcharacterss21 = countforcharacterss21+1.0;    
                
            }  
            
            if(data.contains("sv"))
            
            {
                
            countforcharacterss22 = countforcharacterss22+1.0;    
                
            }  
            
            if(data.contains("sw"))
            
            {
                
            countforcharacterss23 = countforcharacterss23+1.0;    
                
            }  
            
            if(data.contains("sx"))
            
            {
                
            countforcharacterss24 = countforcharacterss24+1.0;    
                
            }  
            
            if(data.contains("sy"))
            
            {
                
            countforcharacterss25 = countforcharacterss25+1.0;    
                
            }  
            
            if(data.contains("sz"))
            
            {
                
            countforcharacterss26 = countforcharacterss26+1.0;    
                
            }  
            
            if(data.contains("s."))
            
            {
                
            countforcharacterss27 = countforcharacterss27+1.0;    
                
            }  
            
            if(data.contains("s,"))
            
            {
                
            countforcharacterss28 = countforcharacterss28+1.0;    
                
            }  
            
            if(data.contains("s "))
            
            {
                
            countforcharacterss29 = countforcharacterss29+1.0;    
                
            }  
            
            if(data.contains("ta"))
            
            {
                
            countforcharacterst1 = countforcharacterst1+1.0;    
                
            }  
            
            if(data.contains("tb"))
            
            {
                
            countforcharacterst2 = countforcharacterst2+1.0;    
                
            }  
            
            if(data.contains("tc"))
            
            {
                
            countforcharacterst3 = countforcharacterst3+1.0;    
                
            }  
            
            if(data.contains("td"))
            
            {
                
            countforcharacterst4 = countforcharacterst4+1.0;    
                
            }  
            
            if(data.contains("te"))
            
            {
                
            countforcharacterst5 = countforcharacterst5+1.0;    
                
            }  
            
            if(data.contains("tf"))
            
            {
                
            countforcharacterst6 = countforcharacterst6+1.0;    
                
            }  
            
            if(data.contains("tg"))
            
            {
                
            countforcharacterst7 = countforcharacterst7+1.0;    
                
            }  
            
            if(data.contains("th"))
            
            {
                
            countforcharacterst8 = countforcharacterst8+1.0;    
                
            }  
            
            if(data.contains("ti"))
            
            {
                
            countforcharacterst9 = countforcharacterst9+1.0;    
                
            }  
            
            if(data.contains("tj"))
            
            {
                
            countforcharacterst10 = countforcharacterst10+1.0;    
                
            }  
            
            if(data.contains("tk"))
            
            {
                
            countforcharacterst11 = countforcharacterst11+1.0;    
                
            }  
            
            if(data.contains("tl"))
            
            {
                
            countforcharacterst12 = countforcharacterst12+1.0;    
                
            }  
            
            if(data.contains("tm"))
            
            {
                
            countforcharacterst13 = countforcharacterst13+1.0;    
                
            }  
            
            if(data.contains("tn"))
            
            {
                
            countforcharacterst14 = countforcharacterst14+1.0;    
                
            }  
             
            if(data.contains("to"))
            
            {
                
            countforcharacterst15 = countforcharacterst15+1.0;    
                
            }  
            
            if(data.contains("tp"))
            
            {
                
            countforcharacterst16 = countforcharacterst16+1.0;    
                
            }  
            
            if(data.contains("tq"))
            
            {
                
            countforcharacterst17 = countforcharacterst17+1.0;    
                
            }  
            
            if(data.contains("tr"))
            
            {
                
            countforcharacterst18 = countforcharacterst18+1.0;    
                
            }  
            
            if(data.contains("ts"))
            
            {
                
            countforcharacterst19 = countforcharacterst19+1.0;    
                
            }  
            
            if(data.contains("tt"))
            
            {
                
            countforcharacterst20 = countforcharacterst20+1.0;    
                
            }  
            
            if(data.contains("tu"))
            
            {
                
            countforcharacterst21 = countforcharacterst21+1.0;    
                
            }  
            
            if(data.contains("tv"))
            
            {
                
            countforcharacterst22 = countforcharacterst22+1.0;    
                
            }  
            
            if(data.contains("tw"))
            
            {
                
            countforcharacterst23 = countforcharacterst23+1.0;    
                
            }  
            
            if(data.contains("tx"))
            
            {
                
            countforcharacterst24 = countforcharacterst24+1.0;    
                
            }  
            
            if(data.contains("ty"))
            
            {
                
            countforcharacterst25 = countforcharacterst25+1.0;    
                
            }  
            
            if(data.contains("tz"))
            
            {
                
            countforcharacterst26 = countforcharacterst26+1.0;    
                
            }  
            
            if(data.contains("t."))
            
            {
                
            countforcharacterst27 = countforcharacterst27+1.0;    
                
            }  
            
            if(data.contains("t,"))
            
            {
                
            countforcharacterst28 = countforcharacterst28+1.0;    
                
            }  
            
            if(data.contains("t "))
            
            {
                
            countforcharacterst29 = countforcharacterst29+1.0;    
                
            }  
            
            if(data.contains("ua"))
            
            {
                
            countforcharactersu1 = countforcharactersu1+1.0;    
                
            }  
            
            if(data.contains("ub"))
            
            {
                
            countforcharactersu2 = countforcharactersu2+1.0;    
                
            }  
            
            if(data.contains("uc"))
            
            {
                
            countforcharactersu3 = countforcharactersu3+1.0;    
                
            }  
            
            if(data.contains("ud"))
            
            {
                
            countforcharactersu4 = countforcharactersu4+1.0;    
                
            }  
            
            if(data.contains("ue"))
            
            {
                
            countforcharactersu5 = countforcharactersu5+1.0;    
                
            }  
            
            if(data.contains("uf"))
            
            {
                
            countforcharactersu6 = countforcharactersu6+1.0;    
                
            }  
            
            if(data.contains("ug"))
            
            {
                
            countforcharactersu7 = countforcharactersu7+1.0;    
                
            }  
            
            if(data.contains("uh"))
            
            {
                
            countforcharactersu8 = countforcharactersu8+1.0;    
                
            }  
            
            if(data.contains("ui"))
            
            {
                
            countforcharactersu9 = countforcharactersu9+1.0;    
                
            }  
            
            if(data.contains("uj"))
            
            {
                
            countforcharactersu10 = countforcharactersu10+1.0;    
                
            }  
            
            if(data.contains("uk"))
            
            {
                
            countforcharactersu11 = countforcharactersu11+1.0;    
                
            }  
            
            if(data.contains("ul"))
            
            {
                
            countforcharactersu12 = countforcharactersu12+1.0;    
                
            }  
            
            if(data.contains("um"))
            
            {
                
            countforcharactersu13 = countforcharactersu13+1.0;    
                
            }  
            
            if(data.contains("un"))
            
            {
                
            countforcharactersu14 = countforcharactersu14+1.0;    
                
            }  
             
            if(data.contains("uo"))
            
            {
                
            countforcharactersu15 = countforcharactersu15+1.0;    
                
            }  
            
            if(data.contains("up"))
            
            {
                
            countforcharactersu16 = countforcharactersu16+1.0;    
                
            }  
            
            if(data.contains("uq"))
            
            {
                
            countforcharactersu17 = countforcharactersu17+1.0;    
                
            }  
            
            if(data.contains("ur"))
            
            {
                
            countforcharactersu18 = countforcharactersu18+1.0;    
                
            }  
            
            if(data.contains("us"))
            
            {
                
            countforcharactersu19 = countforcharactersu19+1.0;    
                
            }  
            
            if(data.contains("ut"))
            
            {
                
            countforcharactersu20 = countforcharactersu20+1.0;    
                
            }  
            
            if(data.contains("uu"))
            
            {
                
            countforcharactersu21 = countforcharactersu21+1.0;    
                
            }  
            
            if(data.contains("uv"))
            
            {
                
            countforcharactersu22 = countforcharactersu22+1.0;    
                
            }  
            
            if(data.contains("uw"))
            
            {
                
            countforcharactersu23 = countforcharactersu23+1.0;    
                
            }  
            
            if(data.contains("ux"))
            
            {
                
            countforcharactersu24 = countforcharactersu24+1.0;    
                
            }  
            
            if(data.contains("uy"))
            
            {
                
            countforcharactersu25 = countforcharactersu25+1.0;    
                
            }  
            
            if(data.contains("uz"))
            
            {
                
            countforcharactersu26 = countforcharactersu26+1.0;    
                
            }  
            
            if(data.contains("u."))
            
            {
                
            countforcharactersu27 = countforcharactersu27+1.0;    
                
            }  
            
            if(data.contains("u,"))
            
            {
                
            countforcharactersu28 = countforcharactersu28+1.0;    
                
            }  
            
            if(data.contains("u "))
            
            {
                
            countforcharactersu29 = countforcharactersu29+1.0;    
                
            }  
            
            if(data.contains("va"))
            
            {
                
            countforcharactersv1 = countforcharactersv1+1.0;    
                
            }  
            
            if(data.contains("vb"))
            
            {
                
            countforcharactersv2 = countforcharactersv2+1.0;    
                
            }  
            
            if(data.contains("vc"))
            
            {
                
            countforcharactersv3 = countforcharactersv3+1.0;    
                
            }  
            
            if(data.contains("vd"))
            
            {
                
            countforcharactersv4 = countforcharactersv4+1.0;    
                
            }  
            
            if(data.contains("ve"))
            
            {
                
            countforcharactersv5 = countforcharactersv5+1.0;    
                
            }  
            
            if(data.contains("vf"))
            
            {
                
            countforcharactersv6 = countforcharactersv6+1.0;    
                
            }  
            
            if(data.contains("vg"))
            
            {
                
            countforcharactersv7 = countforcharactersv7+1.0;    
                
            }  
            
            if(data.contains("vh"))
            
            {
                
            countforcharactersv8 = countforcharactersv8+1.0;    
                
            }  
            
            if(data.contains("vi"))
            
            {
                
            countforcharactersv9 = countforcharactersv9+1.0;    
                
            }  
            
            if(data.contains("vj"))
            
            {
                
            countforcharactersv10 = countforcharactersv10+1.0;    
                
            }  
            
            if(data.contains("vk"))
            
            {
                
            countforcharactersv11 = countforcharactersv11+1.0;    
                
            }  
            
            if(data.contains("vl"))
            
            {
                
            countforcharactersv12 = countforcharactersv12+1.0;    
                
            }  
            
            if(data.contains("vm"))
            
            {
                
            countforcharactersv13 = countforcharactersv13+1.0;    
                
            }  
            
            if(data.contains("vn"))
            
            {
                
            countforcharactersv14 = countforcharactersv14+1.0;    
                
            }  
             
            if(data.contains("vo"))
            
            {
                
            countforcharactersv15 = countforcharactersv15+1.0;    
                
            }  
            
            if(data.contains("vp"))
            
            {
                
            countforcharactersv16 = countforcharactersv16+1.0;    
                
            }  
            
            if(data.contains("vq"))
            
            {
                
            countforcharactersv17 = countforcharactersv17+1.0;    
                
            }  
            
            if(data.contains("vr"))
            
            {
                
            countforcharactersv18 = countforcharactersv18+1.0;    
                
            }  
            
            if(data.contains("vs"))
            
            {
                
            countforcharactersv19 = countforcharactersv19+1.0;    
                
            }  
            
            if(data.contains("vt"))
            
            {
                
            countforcharactersv20 = countforcharactersv20+1.0;    
                
            }  
            
            if(data.contains("vu"))
            
            {
                
            countforcharactersv21 = countforcharactersv21+1.0;    
                
            }  
            
            if(data.contains("vv"))
            
            {
                
            countforcharactersv22 = countforcharactersv22+1.0;    
                
            }  
            
            if(data.contains("vw"))
            
            {
                
            countforcharactersv23 = countforcharactersv23+1.0;    
                
            }  
            
            if(data.contains("vx"))
            
            {
                
            countforcharactersv24 = countforcharactersv24+1.0;    
                
            }  
            
            if(data.contains("vy"))
            
            {
                
            countforcharactersv25 = countforcharactersv25+1.0;    
                
            }  
            
            if(data.contains("vz"))
            
            {
                
            countforcharactersv26 = countforcharactersv26+1.0;    
                
            }  
            
            if(data.contains("v."))
            
            {
                
            countforcharactersv27 = countforcharactersv27+1.0;    
                
            }  
            
            if(data.contains("v,"))
            
            {
                
            countforcharactersv28 = countforcharactersv28+1.0;    
                
            }  
            
            if(data.contains("v "))
            
            {
                
            countforcharactersv29 = countforcharactersv29+1.0;    
                
            }  
            
            if(data.contains("wa"))
            
            {
                
            countforcharactersw1 = countforcharactersw1+1.0;    
                
            }  
            
            if(data.contains("wb"))
            
            {
                
            countforcharactersw2 = countforcharactersw2+1.0;    
                
            }  
            
            if(data.contains("wc"))
            
            {
                
            countforcharactersw3 = countforcharactersw3+1.0;    
                
            }  
            
            if(data.contains("wd"))
            
            {
                
            countforcharactersw4 = countforcharactersw4+1.0;    
                
            }  
            
            if(data.contains("we"))
            
            {
                
            countforcharactersw5 = countforcharactersw5+1.0;    
                
            }  
            
            if(data.contains("wf"))
            
            {
                
            countforcharactersw6 = countforcharactersw6+1.0;    
                
            }  
            
            if(data.contains("wg"))
            
            {
                
            countforcharactersw7 = countforcharactersw7+1.0;    
                
            }  
            
            if(data.contains("wh"))
            
            {
                
            countforcharactersw8 = countforcharactersw8+1.0;    
                
            }  
            
            if(data.contains("wi"))
            
            {
                
            countforcharactersw9 = countforcharactersw9+1.0;    
                
            }  
            
            if(data.contains("wj"))
            
            {
                
            countforcharactersw10 = countforcharactersw10+1.0;    
                
            }  
            
            if(data.contains("wk"))
            
            {
                
            countforcharactersw11 = countforcharactersw11+1.0;    
                
            }  
            
            if(data.contains("wl"))
            
            {
                
            countforcharactersw12 = countforcharactersw12+1.0;    
                
            }  
            
            if(data.contains("wm"))
            
            {
                
            countforcharactersw13 = countforcharactersw13+1.0;    
                
            }  
            
            if(data.contains("wn"))
            
            {
                
            countforcharactersw14 = countforcharactersw14+1.0;    
                
            }  
             
            if(data.contains("wo"))
            
            {
                
            countforcharactersw15 = countforcharactersw15+1.0;    
                
            }  
            
            if(data.contains("wp"))
            
            {
                
            countforcharactersw16 = countforcharactersw16+1.0;    
                
            }  
            
            if(data.contains("wq"))
            
            {
                
            countforcharactersw17 = countforcharactersw17+1.0;    
                
            }  
            
            if(data.contains("wr"))
            
            {
                
            countforcharactersw18 = countforcharactersw18+1.0;    
                
            }  
            
            if(data.contains("ws"))
            
            {
                
            countforcharactersw19 = countforcharactersw19+1.0;    
                
            }  
            
            if(data.contains("wt"))
            
            {
                
            countforcharactersw20 = countforcharactersw20+1.0;    
                
            }  
            
            if(data.contains("wu"))
            
            {
                
            countforcharactersw21 = countforcharactersw21+1.0;    
                
            }  
            
            if(data.contains("wv"))
            
            {
                
            countforcharactersw22 = countforcharactersw22+1.0;    
                
            }  
            
            if(data.contains("ww"))
            
            {
                
            countforcharactersw23 = countforcharactersw23+1.0;    
                
            }  
            
            if(data.contains("wx"))
            
            {
                
            countforcharactersw24 = countforcharactersw24+1.0;    
                
            }  
            
            if(data.contains("wy"))
            
            {
                
            countforcharactersw25 = countforcharactersw25+1.0;    
                
            }  
            
            if(data.contains("wz"))
            
            {
                
            countforcharactersw26 = countforcharactersw26+1.0;    
                
            }  
            
            if(data.contains("w."))
            
            {
                
            countforcharactersw27 = countforcharactersw27+1.0;    
                
            }  
            
            if(data.contains("w,"))
            
            {
                
            countforcharactersw28 = countforcharactersw28+1.0;    
                
            }  
            
            if(data.contains("w "))
            
            {
                
            countforcharactersw29 = countforcharactersw29+1.0;    
                
            }  
            
            if(data.contains("xa"))
            
            {
                
            countforcharactersx1 = countforcharactersx1+1.0;    
                
            }  
            
            if(data.contains("xb"))
            
            {
                
            countforcharactersx2 = countforcharactersx2+1.0;    
                
            }  
            
            if(data.contains("xc"))
            
            {
                
            countforcharactersx3 = countforcharactersx3+1.0;    
                
            }  
            
            if(data.contains("xd"))
            
            {
                
            countforcharactersx4 = countforcharactersx4+1.0;    
                
            }  
            
            if(data.contains("xe"))
            
            {
                
            countforcharactersx5 = countforcharactersx5+1.0;    
                
            }  
            
            if(data.contains("xf"))
            
            {
                
            countforcharactersx6 = countforcharactersx6+1.0;    
                
            }  
            
            if(data.contains("xg"))
            
            {
                
            countforcharactersx7 = countforcharactersx7+1.0;    
                
            }  
            
            if(data.contains("xh"))
            
            {
                
            countforcharactersx8 = countforcharactersx8+1.0;    
                
            }  
            
            if(data.contains("xi"))
            
            {
                
            countforcharactersx9 = countforcharactersx9+1.0;    
                
            }  
            
            if(data.contains("xj"))
            
            {
                
            countforcharactersx10 = countforcharactersx10+1.0;    
                
            }  
            
            if(data.contains("xk"))
            
            {
                
            countforcharactersx11 = countforcharactersx11+1.0;    
                
            }  
            
            if(data.contains("xl"))
            
            {
                
            countforcharactersx12 = countforcharactersx12+1.0;    
                
            }  
            
            if(data.contains("xm"))
            
            {
                
            countforcharactersx13 = countforcharactersx13+1.0;    
                
            }  
            
            if(data.contains("xn"))
            
            {
                
            countforcharactersx14 = countforcharactersx14+1.0;    
                
            }  
             
            if(data.contains("xo"))
            
            {
                
            countforcharactersx15 = countforcharactersx15+1.0;    
                
            }  
            
            if(data.contains("xp"))
            
            {
                
            countforcharactersx16 = countforcharactersx16+1.0;    
                
            }  
            
            if(data.contains("xq"))
            
            {
                
            countforcharactersx17 = countforcharactersx17+1.0;    
                
            }  
            
            if(data.contains("xr"))
            
            {
                
            countforcharactersx18 = countforcharactersx18+1.0;    
                
            }  
            
            if(data.contains("xs"))
            
            {
                
            countforcharactersx19 = countforcharactersx19+1.0;    
                
            }  
            
            if(data.contains("xt"))
            
            {
                
            countforcharactersx20 = countforcharactersx20+1.0;    
                
            }  
            
            if(data.contains("xu"))
            
            {
                
            countforcharactersx21 = countforcharactersx21+1.0;    
                
            }  
            
            if(data.contains("xv"))
            
            {
                
            countforcharactersx22 = countforcharactersx22+1.0;    
                
            }  
            
            if(data.contains("xw"))
            
            {
                
            countforcharactersx23 = countforcharactersx23+1.0;    
                
            }  
            
            if(data.contains("xx"))
            
            {
                
            countforcharactersx24 = countforcharactersx24+1.0;    
                
            }  
            
            if(data.contains("xy"))
            
            {
                
            countforcharactersx25 = countforcharactersx25+1.0;    
                
            }  
            
            if(data.contains("xz"))
            
            {
                
            countforcharactersx26 = countforcharactersx26+1.0;    
                
            }  
            
            if(data.contains("x."))
            
            {
                
            countforcharactersx27 = countforcharactersx27+1.0;    
                
            }  
            
            if(data.contains("x,"))
            
            {
                
            countforcharactersx28 = countforcharactersx28+1.0;    
                
            }  
            
            if(data.contains("x "))
            
            {
                
            countforcharactersx29 = countforcharactersx29+1.0;    
                
            }  
            
            if(data.contains("ya"))
            
            {
                
            countforcharactersy1 = countforcharactersy1+1.0;    
                
            }  
            
            if(data.contains("yb"))
            
            {
                
            countforcharactersy2 = countforcharactersy2+1.0;    
                
            }  
            
            if(data.contains("yc"))
            
            {
                
            countforcharactersy3 = countforcharactersy3+1.0;    
                
            }  
            
            if(data.contains("yd"))
            
            {
                
            countforcharactersy4 = countforcharactersy4+1.0;    
                
            }  
            
            if(data.contains("ye"))
            
            {
                
            countforcharactersy5 = countforcharactersy5+1.0;    
                
            }  
            
            if(data.contains("yf"))
            
            {
                
            countforcharactersy6 = countforcharactersy6+1.0;    
                
            }  
            
            if(data.contains("yg"))
            
            {
                
            countforcharactersy7 = countforcharactersy7+1.0;    
                
            }  
            
            if(data.contains("yh"))
            
            {
                
            countforcharactersy8 = countforcharactersy8+1.0;    
                
            }  
            
            if(data.contains("yi"))
            
            {
                
            countforcharactersy9 = countforcharactersy9+1.0;    
                
            }  
            
            if(data.contains("yj"))
            
            {
                
            countforcharactersy10 = countforcharactersy10+1.0;    
                
            }  
            
            if(data.contains("yk"))
            
            {
                
            countforcharactersy11 = countforcharactersy11+1.0;    
                
            }  
            
            if(data.contains("yl"))
            
            {
                
            countforcharactersy12 = countforcharactersy12+1.0;    
                
            }  
            
            if(data.contains("ym"))
            
            {
                
            countforcharactersy13 = countforcharactersy13+1.0;    
                
            }  
            
            if(data.contains("yn"))
            
            {
                
            countforcharactersy14 = countforcharactersy14+1.0;    
                
            }  
             
            if(data.contains("yo"))
            
            {
                
            countforcharactersy15 = countforcharactersy15+1.0;    
                
            }  
            
            if(data.contains("yp"))
            
            {
                
            countforcharactersy16 = countforcharactersy16+1.0;    
                
            }  
            
            if(data.contains("yq"))
            
            {
                
            countforcharactersy17 = countforcharactersy17+1.0;    
                
            }  
            
            if(data.contains("yr"))
            
            {
                
            countforcharactersy18 = countforcharactersy18+1.0;    
                
            }  
            
            if(data.contains("ys"))
            
            {
                
            countforcharactersy19 = countforcharactersy19+1.0;    
                
            }  
            
            if(data.contains("yt"))
            
            {
                
            countforcharactersy20 = countforcharactersy20+1.0;    
                
            }  
            
            if(data.contains("yu"))
            
            {
                
            countforcharactersy21 = countforcharactersy21+1.0;    
                
            }  
            
            if(data.contains("yv"))
            
            {
                
            countforcharactersy22 = countforcharactersy22+1.0;    
                
            }  
            
            if(data.contains("yw"))
            
            {
                
            countforcharactersy23 = countforcharactersy23+1.0;    
                
            }  
            
            if(data.contains("yx"))
            
            {
                
            countforcharactersy24 = countforcharactersy24+1.0;    
                
            }  
            
            if(data.contains("yy"))
            
            {
                
            countforcharactersy25 = countforcharactersy25+1.0;    
                
            }  
            
            if(data.contains("yz"))
            
            {
                
            countforcharactersy26 = countforcharactersy26+1.0;    
                
            }  
            
            if(data.contains("y."))
            
            {
                
            countforcharactersy27 = countforcharactersy27+1.0;    
                
            }  
            
            if(data.contains("y,"))
            
            {
                
            countforcharactersy28 = countforcharactersy28+1.0;    
                
            }  
            
            if(data.contains("y "))
            
            {
                
            countforcharactersy29 = countforcharactersy29+1.0;    
                
            }  
            
            if(data.contains("za"))
            
            {
                
            countforcharactersz1 = countforcharactersz1+1.0;    
                
            }  
            
            if(data.contains("zb"))
            
            {
                
            countforcharactersz2 = countforcharactersz2+1.0;    
                
            }  
            
            if(data.contains("zc"))
            
            {
                
            countforcharactersz3 = countforcharactersz3+1.0;    
                
            }  
            
            if(data.contains("zd"))
            
            {
                
            countforcharactersz4 = countforcharactersz4+1.0;    
                
            }  
            
            if(data.contains("ze"))
            
            {
                
            countforcharactersz5 = countforcharactersz5+1.0;    
                
            }  
            
            if(data.contains("zf"))
            
            {
                
            countforcharactersz6 = countforcharactersz6+1.0;    
                
            }  
            
            if(data.contains("zg"))
            
            {
                
            countforcharactersz7 = countforcharactersz7+1.0;    
                
            }  
            
            if(data.contains("zh"))
            
            {
                
            countforcharactersz8 = countforcharactersz8+1.0;    
                
            }  
            
            if(data.contains("zi"))
            
            {
                
            countforcharactersz9 = countforcharactersz9+1.0;    
                
            }  
            
            if(data.contains("zj"))
            
            {
                
            countforcharactersz10 = countforcharactersz10+1.0;    
                
            }  
            
            if(data.contains("zk"))
            
            {
                
            countforcharactersz11 = countforcharactersz11+1.0;    
                
            }  
            
            if(data.contains("zl"))
            
            {
                
            countforcharactersz12 = countforcharactersz12+1.0;    
                
            }  
            
            if(data.contains("zm"))
            
            {
                
            countforcharactersz13 = countforcharactersz13+1.0;    
                
            }  
            
            if(data.contains("zn"))
            
            {
                
            countforcharactersz14 = countforcharactersz14+1.0;    
                
            }  
             
            if(data.contains("zo"))
            
            {
                
            countforcharactersz15 = countforcharactersz15+1.0;    
                
            }  
            
            if(data.contains("zp"))
            
            {
                
            countforcharactersz16 = countforcharactersz16+1.0;    
                
            }  
            
            if(data.contains("zq"))
            
            {
                
            countforcharactersz17 = countforcharactersz17+1.0;    
                
            }  
            
            if(data.contains("zr"))
            
            {
                
            countforcharactersz18 = countforcharactersz18+1.0;    
                
            }  
            
            if(data.contains("zs"))
            
            {
                
            countforcharactersz19 = countforcharactersz19+1.0;    
                
            }  
            
            if(data.contains("zt"))
            
            {
                
            countforcharactersz20 = countforcharactersz20+1.0;    
                
            }  
            
            if(data.contains("zu"))
            
            {
                
            countforcharactersz21 = countforcharactersz21+1.0;    
                
            }  
            
            if(data.contains("zv"))
            
            {
                
            countforcharactersz22 = countforcharactersz22+1.0;    
                
            }  
            
            if(data.contains("zw"))
            
            {
                
            countforcharactersz23 = countforcharactersz23+1.0;    
                
            }  
            
            if(data.contains("zx"))
            
            {
                
            countforcharactersz24 = countforcharactersz24+1.0;    
                
            }  
            
            if(data.contains("zy"))
            
            {
                
            countforcharactersz25 = countforcharactersz25+1.0;    
                
            }  
            
            if(data.contains("zz"))
            
            {
                
            countforcharactersz26 = countforcharactersz26+1.0;    
                
            }  
            
            if(data.contains("z."))
            
            {
                
            countforcharactersz27 = countforcharactersz27+1.0;    
                
            }  
            
            if(data.contains("z,"))
            
            {
                
            countforcharactersz28 = countforcharactersz28+1.0;    
                
            }  
            
            if(data.contains("z "))
            
            {
                
            countforcharactersz29 = countforcharactersz29+1.0;    
                
            }  
            
            if(data.contains(".a"))
            
            {
                
            countforcharactersdot1 = countforcharactersdot1+1.0;    
                
            }  
            
            if(data.contains(".b"))
            
            {
                
            countforcharactersdot2 = countforcharactersdot2+1.0;    
                
            }  
            
            if(data.contains(".c"))
            
            {
                
            countforcharactersdot3 = countforcharactersdot3+1.0;    
                
            }  
            
            if(data.contains(".d"))
            
            {
                
            countforcharactersdot4 = countforcharactersdot4+1.0;    
                
            }  
            
            if(data.contains(".e"))
            
            {
                
            countforcharactersdot5 = countforcharactersdot5+1.0;    
                
            }  
            
            if(data.contains(".f"))
            
            {
                
            countforcharactersdot6 = countforcharactersdot6+1.0;    
                
            }  
            
            if(data.contains(".g"))
            
            {
                
            countforcharactersdot7 = countforcharactersdot7+1.0;    
                
            }  
            
            if(data.contains(".h"))
            
            {
                
            countforcharactersdot8 = countforcharactersdot8+1.0;    
                
            }  
            
            if(data.contains(".i"))
            
            {
                
            countforcharactersdot9 = countforcharactersdot9+1.0;    
                
            }  
            
            if(data.contains(".j"))
            
            {
                
            countforcharactersdot10 = countforcharactersdot10+1.0;    
                
            }  
            
            if(data.contains(".k"))
            
            {
                
            countforcharactersdot11 = countforcharactersdot11+1.0;    
                
            }  
            
            if(data.contains(".l"))
            
            {
                
            countforcharactersdot12 = countforcharactersdot12+1.0;    
                
            }  
            
            if(data.contains(".m"))
            
            {
                
            countforcharactersdot13 = countforcharactersdot13+1.0;    
                
            }  
            
            if(data.contains(".n"))
            
            {
                
            countforcharactersdot14 = countforcharactersdot14+1.0;    
                
            }  
             
            if(data.contains(".o"))
            
            {
                
            countforcharactersdot15 = countforcharactersdot15+1.0;    
                
            }  
            
            if(data.contains(".p"))
            
            {
                
            countforcharactersdot16 = countforcharactersdot16+1.0;    
                
            }  
            
            if(data.contains(".q"))
            
            {
                
            countforcharactersdot17 = countforcharactersdot17+1.0;    
                
            }  
            
            if(data.contains(".r"))
            
            {
                
            countforcharactersdot18 = countforcharactersdot18+1.0;    
                
            }  
            
            if(data.contains(".s"))
            
            {
                
            countforcharactersdot19 = countforcharactersdot19+1.0;    
                
            }  
            
            if(data.contains(".t"))
            
            {
                
            countforcharactersdot20 = countforcharactersdot20+1.0;    
                
            }  
            
            if(data.contains(".u"))
            
            {
                
            countforcharactersdot21 = countforcharactersdot21+1.0;    
                
            }  
            
            if(data.contains(".v"))
            
            {
                
            countforcharactersdot22 = countforcharactersdot22+1.0;    
                
            }  
            
            if(data.contains(".w"))
            
            {
                
            countforcharactersdot23 = countforcharactersdot23+1.0;    
                
            }  
            
            if(data.contains(".x"))
            
            {
                
            countforcharactersdot24 = countforcharactersdot24+1.0;    
                
            }  
            
            if(data.contains(".y"))
            
            {
                
            countforcharactersdot25 = countforcharactersdot25+1.0;    
                
            }  
            
            if(data.contains(".z"))
            
            {
                
            countforcharactersdot26 = countforcharactersdot26+1.0;    
                
            }  
            
            if(data.contains(".."))
            
            {
                
            countforcharactersdot27 = countforcharactersdot27+1.0;    
                
            }  
            
            if(data.contains(".,"))
            
            {
                
            countforcharactersdot28 = countforcharactersdot28+1.0;    
                
            }  
            
            if(data.contains(". "))
            
            {
                
            countforcharactersdot29 = countforcharactersdot29+1.0;    
                
            }  
            
            if(data.contains(",a"))
            
            {
                
            countforcharacterscomma1 = countforcharacterscomma1+1.0;    
                
            }  
            
            if(data.contains(",b"))
            
            {
                
            countforcharacterscomma2 = countforcharacterscomma2+1.0;    
                
            }  
            
            if(data.contains(",c"))
            
            {
                
            countforcharacterscomma3 = countforcharacterscomma3+1.0;    
                
            }  
            
            if(data.contains(",d"))
            
            {
                
            countforcharacterscomma4 = countforcharacterscomma4+1.0;    
                
            }  
            
            if(data.contains(",e"))
            
            {
                
            countforcharacterscomma5 = countforcharacterscomma5+1.0;    
                
            }  
            
            if(data.contains(",f"))
            
            {
                
            countforcharacterscomma6 = countforcharacterscomma6+1.0;    
                
            }  
            
            if(data.contains(",g"))
            
            {
                
            countforcharacterscomma7 = countforcharacterscomma7+1.0;    
                
            }  
            
            if(data.contains(",h"))
            
            {
                
            countforcharacterscomma8 = countforcharacterscomma8+1.0;    
                
            }  
            
            if(data.contains(",i"))
            
            {
                
            countforcharacterscomma9 = countforcharacterscomma9+1.0;    
                
            }  
            
            if(data.contains(",j"))
            
            {
                
            countforcharacterscomma10 = countforcharacterscomma10+1.0;    
                
            }  
            
            if(data.contains(",k"))
            
            {
                
            countforcharacterscomma11 = countforcharacterscomma11+1.0;    
                
            }  
            
            if(data.contains(",l"))
            
            {
                
            countforcharacterscomma12 = countforcharacterscomma12+1.0;    
                
            }  
            
            if(data.contains(",m"))
            
            {
                
            countforcharacterscomma13 = countforcharacterscomma13+1.0;    
                
            }  
            
            if(data.contains(",n"))
            
            {
                
            countforcharacterscomma14 = countforcharacterscomma14+1.0;    
                
            }  
             
            if(data.contains(",o"))
            
            {
                
            countforcharacterscomma15 = countforcharacterscomma15+1.0;    
                
            }  
            
            if(data.contains(",p"))
            
            {
                
            countforcharacterscomma16 = countforcharacterscomma16+1.0;    
                
            }  
            
            if(data.contains(",q"))
            
            {
                
            countforcharacterscomma17 = countforcharacterscomma17+1.0;    
                
            }  
            
            if(data.contains(",r"))
            
            {
                
            countforcharacterscomma18 = countforcharacterscomma18+1.0;    
                
            }  
            
            if(data.contains(",s"))
            
            {
                
            countforcharacterscomma19 = countforcharacterscomma19+1.0;    
                
            }  
            
            if(data.contains(",t"))
            
            {
                
            countforcharacterscomma20 = countforcharacterscomma20+1.0;    
                
            }  
            
            if(data.contains(",u"))
            
            {
                
            countforcharacterscomma21 = countforcharacterscomma21+1.0;    
                
            }  
            
            if(data.contains(",v"))
            
            {
                
            countforcharacterscomma22 = countforcharacterscomma22+1.0;    
                
            }  
            
            if(data.contains(",w"))
            
            {
                
            countforcharacterscomma23 = countforcharacterscomma23+1.0;    
                
            }  
            
            if(data.contains(",x"))
            
            {
                
            countforcharacterscomma24 = countforcharacterscomma24+1.0;    
                
            }  
            
            if(data.contains(",y"))
            
            {
                
            countforcharacterscomma25 = countforcharacterscomma25+1.0;    
                
            }  
            
            if(data.contains(",z"))
            
            {
                
            countforcharacterscomma26 = countforcharacterscomma26+1.0;    
                
            }  
            
            if(data.contains(",."))
            
            {
                
            countforcharacterscomma27 = countforcharacterscomma27+1.0;    
                
            }  
            
            if(data.contains(",,"))
            
            {
                
            countforcharacterscomma28 = countforcharacterscomma28+1.0;    
                
            }  
            
            if(data.contains(", "))
            
            {
                
            countforcharacterscomma29 = countforcharacterscomma29+1.0;    
                
            }  
            
            if(data.contains(" a"))
            
            {
                
            countforcharactersvacuum1 = countforcharactersvacuum1+1.0;    
                
            }  
            
            if(data.contains(" b"))
            
            {
                
            countforcharactersvacuum2 = countforcharactersvacuum2+1.0;    
                
            }  
            
            if(data.contains(" c"))
            
            {
                
            countforcharactersvacuum3 = countforcharactersvacuum3+1.0;    
                
            }  
            
            if(data.contains(" d"))
            
            {
                
            countforcharactersvacuum4 = countforcharactersvacuum4+1.0;    
                
            }  
            
            if(data.contains(" e"))
            
            {
                
            countforcharactersvacuum5 = countforcharactersvacuum5+1.0;    
                
            }  
            
            if(data.contains(" f"))
            
            {
                
            countforcharactersvacuum6 = countforcharactersvacuum6+1.0;    
                
            }  
            
            if(data.contains(" g"))
            
            {
                
            countforcharactersvacuum7 = countforcharactersvacuum7+1.0;    
                
            }  
            
            if(data.contains(" h"))
            
            {
                
            countforcharactersvacuum8 = countforcharactersvacuum8+1.0;    
                
            }  
            
            if(data.contains(" i"))
            
            {
                
            countforcharactersvacuum9 = countforcharactersvacuum9+1.0;    
                
            }  
            
            if(data.contains(" j"))
            
            {
                
            countforcharactersvacuum10 = countforcharactersvacuum10+1.0;    
                
            }  
            
            if(data.contains(" k"))
            
            {
                
            countforcharactersvacuum11 = countforcharactersvacuum11+1.0;    
                
            }  
            
            if(data.contains(" l"))
            
            {
                
            countforcharactersvacuum12 = countforcharactersvacuum12+1.0;    
                
            }  
            
            if(data.contains(" m"))
            
            {
                
            countforcharactersvacuum13 = countforcharactersvacuum13+1.0;    
                
            }  
            
            if(data.contains(" n"))
            
            {
                
            countforcharactersvacuum14 = countforcharactersvacuum14+1.0;    
                
            }  
             
            if(data.contains(" o"))
            
            {
                
            countforcharactersvacuum15 = countforcharactersvacuum15+1.0;    
                
            }  
            
            if(data.contains(" p"))
            
            {
                
            countforcharactersvacuum16 = countforcharactersvacuum16+1.0;    
                
            }  
            
            if(data.contains(" q"))
            
            {
                
            countforcharactersvacuum17 = countforcharactersvacuum17+1.0;    
                
            }  
            
            if(data.contains(" r"))
            
            {
                
            countforcharactersvacuum18 = countforcharactersvacuum18+1.0;    
                
            }  
            
            if(data.contains(" s"))
            
            {
                
            countforcharactersvacuum19 = countforcharactersvacuum19+1.0;    
                
            }  
            
            if(data.contains(" t"))
            
            {
                
            countforcharactersvacuum20 = countforcharactersvacuum20+1.0;    
                
            }  
            
            if(data.contains(" u"))
            
            {
                
            countforcharactersvacuum21 = countforcharactersvacuum21+1.0;    
                
            }  
            
            if(data.contains(" v"))
            
            {
                
            countforcharactersvacuum22 = countforcharactersvacuum22+1.0;    
                
            }  
            
            if(data.contains(" w"))
            
            {
                
            countforcharactersvacuum23 = countforcharactersvacuum23+1.0;    
                
            }  
            
            if(data.contains(" x"))
            
            {
                
            countforcharactersvacuum24 = countforcharactersvacuum24+1.0;    
                
            }  
            
            if(data.contains(" y"))
            
            {
                
            countforcharactersvacuum25 = countforcharactersvacuum25+1.0;    
                
            }  
            
            if(data.contains(" z"))
            
            {
                
            countforcharactersvacuum26 = countforcharactersvacuum26+1.0;    
                
            }  
            
            if(data.contains(" ."))
            
            {
                
            countforcharactersvacuum27 = countforcharactersvacuum27+1.0;    
                
            }  
            
            if(data.contains(" ,"))
            
            {
                
            countforcharactersvacuum28 = countforcharactersvacuum28+1.0;    
                
            }  
            
            if(data.contains("  "))
            
            {
                
            countforcharactersvacuum29 = countforcharactersvacuum29+1.0;    
                
            }  
            
            }
            
            System.out.println("\nThe number of pair characters aa is = " + countforcharactersa1 );
            System.out.println("\nThe number of pair characters ab is = " + countforcharactersa2 );
            System.out.println("\nThe number of pair characters ac is = " + countforcharactersa3 );
            System.out.println("\nThe number of pair characters ad is = " + countforcharactersa4 );
            System.out.println("\nThe number of pair characters ae is = " + countforcharactersa5 );
            System.out.println("\nThe number of pair characters af is = " + countforcharactersa6 );
            System.out.println("\nThe number of pair characters ag is = " + countforcharactersa7 );
            System.out.println("\nThe number of pair characters ah is = " + countforcharactersa8 );
            System.out.println("\nThe number of pair characters ai is = " + countforcharactersa9 );
            System.out.println("\nThe number of pair characters aj is = " + countforcharactersa10 );
            System.out.println("\nThe number of pair characters ak is = " + countforcharactersa11 );
            System.out.println("\nThe number of pair characters al is = " + countforcharactersa12 );
            System.out.println("\nThe number of pair characters am is = " + countforcharactersa13 );
            System.out.println("\nThe number of pair characters an is = " + countforcharactersa14 );
            System.out.println("\nThe number of pair characters ao is = " + countforcharactersa15 );
            System.out.println("\nThe number of pair characters ap is = " + countforcharactersa16 );
            System.out.println("\nThe number of pair characters aq is = " + countforcharactersa17 );
            System.out.println("\nThe number of pair characters ar is = " + countforcharactersa18 );
            System.out.println("\nThe number of pair characters as is = " + countforcharactersa19 );
            System.out.println("\nThe number of pair characters at is = " + countforcharactersa20 );
            System.out.println("\nThe number of pair characters au is = " + countforcharactersa21 );
            System.out.println("\nThe number of pair characters av is = " + countforcharactersa22 );
            System.out.println("\nThe number of pair characters aw is = " + countforcharactersa23 );
            System.out.println("\nThe number of pair characters ax is = " + countforcharactersa24 );
            System.out.println("\nThe number of pair characters ay is = " + countforcharactersa25 );
            System.out.println("\nThe number of pair characters az is = " + countforcharactersa26 );
            System.out.println("\nThe number of pair characters a. is = " + countforcharactersa27 );
            System.out.println("\nThe number of pair characters a, is = " + countforcharactersa28 );
            System.out.println("\nThe number of pair characters avacuum is = " + countforcharactersa29 );
            System.out.println("\nThe number of pair characters ba is = " + countforcharactersb1 );
            System.out.println("\nThe number of pair characters bb is = " + countforcharactersb2 );
            System.out.println("\nThe number of pair characters bc is = " + countforcharactersb3 );
            System.out.println("\nThe number of pair characters bd is = " + countforcharactersb4 );
            System.out.println("\nThe number of pair characters be is = " + countforcharactersb5 );
            System.out.println("\nThe number of pair characters bf is = " + countforcharactersb6 );
            System.out.println("\nThe number of pair characters bg is = " + countforcharactersb7 );
            System.out.println("\nThe number of pair characters bh is = " + countforcharactersb8 );
            System.out.println("\nThe number of pair characters bi is = " + countforcharactersb9 );
            System.out.println("\nThe number of pair characters bj is = " + countforcharactersb10 );
            System.out.println("\nThe number of pair characters bk is = " + countforcharactersb11 );
            System.out.println("\nThe number of pair characters bl is = " + countforcharactersb12 );
            System.out.println("\nThe number of pair characters bm is = " + countforcharactersb13 );
            System.out.println("\nThe number of pair characters bn is = " + countforcharactersb14 );
            System.out.println("\nThe number of pair characters bo is = " + countforcharactersb15 );
            System.out.println("\nThe number of pair characters bp is = " + countforcharactersb16 );
            System.out.println("\nThe number of pair characters bq is = " + countforcharactersb17 );
            System.out.println("\nThe number of pair characters br is = " + countforcharactersb18 );
            System.out.println("\nThe number of pair characters bs is = " + countforcharactersb19 );
            System.out.println("\nThe number of pair characters bt is = " + countforcharactersb20 );
            System.out.println("\nThe number of pair characters bu is = " + countforcharactersb21 );
            System.out.println("\nThe number of pair characters bv is = " + countforcharactersb22 );
            System.out.println("\nThe number of pair characters bw is = " + countforcharactersb23 );
            System.out.println("\nThe number of pair characters bx is = " + countforcharactersb24 );
            System.out.println("\nThe number of pair characters by is = " + countforcharactersb25 );
            System.out.println("\nThe number of pair characters bz is = " + countforcharactersb26 );
            System.out.println("\nThe number of pair characters b. is = " + countforcharactersb27 );
            System.out.println("\nThe number of pair characters b, is = " + countforcharactersb28 );
            System.out.println("\nThe number of pair characters bvacuum is = " + countforcharactersb29 );
            System.out.println("\nThe number of pair characters ca is = " + countforcharactersc1 );
            System.out.println("\nThe number of pair characters cb is = " + countforcharactersc2 );
            System.out.println("\nThe number of pair characters cc is = " + countforcharactersc3 );
            System.out.println("\nThe number of pair characters cd is = " + countforcharactersc4 );
            System.out.println("\nThe number of pair characters ce is = " + countforcharactersc5 );
            System.out.println("\nThe number of pair characters cf is = " + countforcharactersc6 );
            System.out.println("\nThe number of pair characters cg is = " + countforcharactersc7 );
            System.out.println("\nThe number of pair characters ch is = " + countforcharactersc8 );
            System.out.println("\nThe number of pair characters ci is = " + countforcharactersc9 );
            System.out.println("\nThe number of pair characters cj is = " + countforcharactersc10 );
            System.out.println("\nThe number of pair characters ck is = " + countforcharactersc11 );
            System.out.println("\nThe number of pair characters cl is = " + countforcharactersc12 );
            System.out.println("\nThe number of pair characters cm is = " + countforcharactersc13 );
            System.out.println("\nThe number of pair characters cn is = " + countforcharactersc14 );
            System.out.println("\nThe number of pair characters co is = " + countforcharactersc15 );
            System.out.println("\nThe number of pair characters cp is = " + countforcharactersc16 );
            System.out.println("\nThe number of pair characters cq is = " + countforcharactersc17 );
            System.out.println("\nThe number of pair characters cr is = " + countforcharactersc18 );
            System.out.println("\nThe number of pair characters cs is = " + countforcharactersc19 );
            System.out.println("\nThe number of pair characters ct is = " + countforcharactersc20 );
            System.out.println("\nThe number of pair characters cu is = " + countforcharactersc21 );
            System.out.println("\nThe number of pair characters cv is = " + countforcharactersc22 );
            System.out.println("\nThe number of pair characters cw is = " + countforcharactersc23 );
            System.out.println("\nThe number of pair characters cx is = " + countforcharactersc24 );
            System.out.println("\nThe number of pair characters cy is = " + countforcharactersc25 );
            System.out.println("\nThe number of pair characters cz is = " + countforcharactersc26 );
            System.out.println("\nThe number of pair characters c. is = " + countforcharactersc27 );
            System.out.println("\nThe number of pair characters c, is = " + countforcharactersc28 );
            System.out.println("\nThe number of pair characters cvacuum is = " + countforcharactersc29 );
            System.out.println("\nThe number of pair characters da is = " + countforcharactersd1 );
            System.out.println("\nThe number of pair characters db is = " + countforcharactersd2 );
            System.out.println("\nThe number of pair characters dc is = " + countforcharactersd3 );
            System.out.println("\nThe number of pair characters dd is = " + countforcharactersd4 );
            System.out.println("\nThe number of pair characters de is = " + countforcharactersd5 );
            System.out.println("\nThe number of pair characters df is = " + countforcharactersd6 );
            System.out.println("\nThe number of pair characters dg is = " + countforcharactersd7 );
            System.out.println("\nThe number of pair characters dh is = " + countforcharactersd8 );
            System.out.println("\nThe number of pair characters di is = " + countforcharactersd9 );
            System.out.println("\nThe number of pair characters dj is = " + countforcharactersd10 );
            System.out.println("\nThe number of pair characters dk is = " + countforcharactersd11 );
            System.out.println("\nThe number of pair characters dl is = " + countforcharactersd12 );
            System.out.println("\nThe number of pair characters dm is = " + countforcharactersd13 );
            System.out.println("\nThe number of pair characters dn is = " + countforcharactersd14 );
            System.out.println("\nThe number of pair characters do is = " + countforcharactersd15 );
            System.out.println("\nThe number of pair characters dp is = " + countforcharactersd16 );
            System.out.println("\nThe number of pair characters dq is = " + countforcharactersd17 );
            System.out.println("\nThe number of pair characters dr is = " + countforcharactersd18 );
            System.out.println("\nThe number of pair characters ds is = " + countforcharactersd19 );
            System.out.println("\nThe number of pair characters dt is = " + countforcharactersd20 );
            System.out.println("\nThe number of pair characters du is = " + countforcharactersd21 );
            System.out.println("\nThe number of pair characters dv is = " + countforcharactersd22 );
            System.out.println("\nThe number of pair characters dw is = " + countforcharactersd23 );
            System.out.println("\nThe number of pair characters dx is = " + countforcharactersd24 );
            System.out.println("\nThe number of pair characters dy is = " + countforcharactersd25 );
            System.out.println("\nThe number of pair characters dz is = " + countforcharactersd26 );
            System.out.println("\nThe number of pair characters d. is = " + countforcharactersd27 );
            System.out.println("\nThe number of pair characters d, is = " + countforcharactersd28 );
            System.out.println("\nThe number of pair characters dvacuum is = " + countforcharactersd29 );
            System.out.println("\nThe number of pair characters ea is = " + countforcharacterse1 );
            System.out.println("\nThe number of pair characters eb is = " + countforcharacterse2 );
            System.out.println("\nThe number of pair characters ec is = " + countforcharacterse3 );
            System.out.println("\nThe number of pair characters ed is = " + countforcharacterse4 );
            System.out.println("\nThe number of pair characters ee is = " + countforcharacterse5 );
            System.out.println("\nThe number of pair characters ef is = " + countforcharacterse6 );
            System.out.println("\nThe number of pair characters eg is = " + countforcharacterse7 );
            System.out.println("\nThe number of pair characters eh is = " + countforcharacterse8 );
            System.out.println("\nThe number of pair characters ei is = " + countforcharacterse9 );
            System.out.println("\nThe number of pair characters ej is = " + countforcharacterse10 );
            System.out.println("\nThe number of pair characters ek is = " + countforcharacterse11 );
            System.out.println("\nThe number of pair characters el is = " + countforcharacterse12 );
            System.out.println("\nThe number of pair characters em is = " + countforcharacterse13 );
            System.out.println("\nThe number of pair characters en is = " + countforcharacterse14 );
            System.out.println("\nThe number of pair characters eo is = " + countforcharacterse15 );
            System.out.println("\nThe number of pair characters ep is = " + countforcharacterse16 );
            System.out.println("\nThe number of pair characters eq is = " + countforcharacterse17 );
            System.out.println("\nThe number of pair characters er is = " + countforcharacterse18 );
            System.out.println("\nThe number of pair characters es is = " + countforcharacterse19 );
            System.out.println("\nThe number of pair characters et is = " + countforcharacterse20 );
            System.out.println("\nThe number of pair characters eu is = " + countforcharacterse21 );
            System.out.println("\nThe number of pair characters ev is = " + countforcharacterse22 );
            System.out.println("\nThe number of pair characters ew is = " + countforcharacterse23 );
            System.out.println("\nThe number of pair characters ex is = " + countforcharacterse24 );
            System.out.println("\nThe number of pair characters ey is = " + countforcharacterse25 );
            System.out.println("\nThe number of pair characters ez is = " + countforcharacterse26 );
            System.out.println("\nThe number of pair characters e. is = " + countforcharacterse27 );
            System.out.println("\nThe number of pair characters e, is = " + countforcharacterse28 );
            System.out.println("\nThe number of pair characters evacuum is = " + countforcharacterse29 );
            System.out.println("\nThe number of pair characters fa is = " + countforcharactersf1 );
            System.out.println("\nThe number of pair characters fb is = " + countforcharactersf2 );
            System.out.println("\nThe number of pair characters fc is = " + countforcharactersf3 );
            System.out.println("\nThe number of pair characters fd is = " + countforcharactersf4 );
            System.out.println("\nThe number of pair characters fe is = " + countforcharactersf5 );
            System.out.println("\nThe number of pair characters ff is = " + countforcharactersf6 );
            System.out.println("\nThe number of pair characters fg is = " + countforcharactersf7 );
            System.out.println("\nThe number of pair characters fh is = " + countforcharactersf8 );
            System.out.println("\nThe number of pair characters fi is = " + countforcharactersf9 );
            System.out.println("\nThe number of pair characters fj is = " + countforcharactersf10 );
            System.out.println("\nThe number of pair characters fk is = " + countforcharactersf11 );
            System.out.println("\nThe number of pair characters fl is = " + countforcharactersf12 );
            System.out.println("\nThe number of pair characters fm is = " + countforcharactersf13 );
            System.out.println("\nThe number of pair characters fn is = " + countforcharactersf14 );
            System.out.println("\nThe number of pair characters fo is = " + countforcharactersf15 );
            System.out.println("\nThe number of pair characters fp is = " + countforcharactersf16 );
            System.out.println("\nThe number of pair characters fq is = " + countforcharactersf17 );
            System.out.println("\nThe number of pair characters fr is = " + countforcharactersf18 );
            System.out.println("\nThe number of pair characters fs is = " + countforcharactersf19 );
            System.out.println("\nThe number of pair characters ft is = " + countforcharactersf20 );
            System.out.println("\nThe number of pair characters fu is = " + countforcharactersf21 );
            System.out.println("\nThe number of pair characters fv is = " + countforcharactersf22 );
            System.out.println("\nThe number of pair characters fw is = " + countforcharactersf23 );
            System.out.println("\nThe number of pair characters fx is = " + countforcharactersf24 );
            System.out.println("\nThe number of pair characters fy is = " + countforcharactersf25 );
            System.out.println("\nThe number of pair characters fz is = " + countforcharactersf26 );
            System.out.println("\nThe number of pair characters f. is = " + countforcharactersf27 );
            System.out.println("\nThe number of pair characters f, is = " + countforcharactersf28 );
            System.out.println("\nThe number of pair characters fvacuum is = " + countforcharactersf29 );
            System.out.println("\nThe number of pair characters ga is = " + countforcharactersg1 );
            System.out.println("\nThe number of pair characters gb is = " + countforcharactersg2 );
            System.out.println("\nThe number of pair characters gc is = " + countforcharactersg3 );
            System.out.println("\nThe number of pair characters gd is = " + countforcharactersg4 );
            System.out.println("\nThe number of pair characters ge is = " + countforcharactersg5 );
            System.out.println("\nThe number of pair characters gf is = " + countforcharactersg6 );
            System.out.println("\nThe number of pair characters gg is = " + countforcharactersg7 );
            System.out.println("\nThe number of pair characters gh is = " + countforcharactersg8 );
            System.out.println("\nThe number of pair characters gi is = " + countforcharactersg9 );
            System.out.println("\nThe number of pair characters gj is = " + countforcharactersg10 );
            System.out.println("\nThe number of pair characters gk is = " + countforcharactersg11 );
            System.out.println("\nThe number of pair characters gl is = " + countforcharactersg12 );
            System.out.println("\nThe number of pair characters gm is = " + countforcharactersg13 );
            System.out.println("\nThe number of pair characters gn is = " + countforcharactersg14 );
            System.out.println("\nThe number of pair characters go is = " + countforcharactersg15 );
            System.out.println("\nThe number of pair characters gp is = " + countforcharactersg16 );
            System.out.println("\nThe number of pair characters gq is = " + countforcharactersg17 );
            System.out.println("\nThe number of pair characters gr is = " + countforcharactersg18 );
            System.out.println("\nThe number of pair characters gs is = " + countforcharactersg19 );
            System.out.println("\nThe number of pair characters gt is = " + countforcharactersg20 );
            System.out.println("\nThe number of pair characters gu is = " + countforcharactersg21 );
            System.out.println("\nThe number of pair characters gv is = " + countforcharactersg22 );
            System.out.println("\nThe number of pair characters gw is = " + countforcharactersg23 );
            System.out.println("\nThe number of pair characters gx is = " + countforcharactersg24 );
            System.out.println("\nThe number of pair characters gy is = " + countforcharactersg25 );
            System.out.println("\nThe number of pair characters gz is = " + countforcharactersg26 );
            System.out.println("\nThe number of pair characters g. is = " + countforcharactersg27 );
            System.out.println("\nThe number of pair characters g, is = " + countforcharactersg28 );
            System.out.println("\nThe number of pair characters gvacuum is = " + countforcharactersg29 );
            System.out.println("\nThe number of pair characters ha is = " + countforcharactersh1 );
            System.out.println("\nThe number of pair characters hb is = " + countforcharactersh2 );
            System.out.println("\nThe number of pair characters hc is = " + countforcharactersh3 );
            System.out.println("\nThe number of pair characters hd is = " + countforcharactersh4 );
            System.out.println("\nThe number of pair characters he is = " + countforcharactersh5 );
            System.out.println("\nThe number of pair characters hf is = " + countforcharactersh6 );
            System.out.println("\nThe number of pair characters hg is = " + countforcharactersh7 );
            System.out.println("\nThe number of pair characters hh is = " + countforcharactersh8 );
            System.out.println("\nThe number of pair characters hi is = " + countforcharactersh9 );
            System.out.println("\nThe number of pair characters hj is = " + countforcharactersh10 );
            System.out.println("\nThe number of pair characters hk is = " + countforcharactersh11 );
            System.out.println("\nThe number of pair characters hl is = " + countforcharactersh12 );
            System.out.println("\nThe number of pair characters hm is = " + countforcharactersh13 );
            System.out.println("\nThe number of pair characters hn is = " + countforcharactersh14 );
            System.out.println("\nThe number of pair characters ho is = " + countforcharactersh15 );
            System.out.println("\nThe number of pair characters hp is = " + countforcharactersh16 );
            System.out.println("\nThe number of pair characters hq is = " + countforcharactersh17 );
            System.out.println("\nThe number of pair characters hr is = " + countforcharactersh18 );
            System.out.println("\nThe number of pair characters hs is = " + countforcharactersh19 );
            System.out.println("\nThe number of pair characters ht is = " + countforcharactersh20 );
            System.out.println("\nThe number of pair characters hu is = " + countforcharactersh21 );
            System.out.println("\nThe number of pair characters hv is = " + countforcharactersh22 );
            System.out.println("\nThe number of pair characters hw is = " + countforcharactersh23 );
            System.out.println("\nThe number of pair characters hx is = " + countforcharactersh24 );
            System.out.println("\nThe number of pair characters hy is = " + countforcharactersh25 );
            System.out.println("\nThe number of pair characters hz is = " + countforcharactersh26 );
            System.out.println("\nThe number of pair characters h. is = " + countforcharactersh27 );
            System.out.println("\nThe number of pair characters h, is = " + countforcharactersh28 );
            System.out.println("\nThe number of pair characters hvacuum is = " + countforcharactersh29 );
            System.out.println("\nThe number of pair characters ia is = " + countforcharactersi1 );
            System.out.println("\nThe number of pair characters ib is = " + countforcharactersi2 );
            System.out.println("\nThe number of pair characters ic is = " + countforcharactersi3 );
            System.out.println("\nThe number of pair characters id is = " + countforcharactersi4 );
            System.out.println("\nThe number of pair characters ie is = " + countforcharactersi5 );
            System.out.println("\nThe number of pair characters if is = " + countforcharactersi6 );
            System.out.println("\nThe number of pair characters ig is = " + countforcharactersi7 );
            System.out.println("\nThe number of pair characters ih is = " + countforcharactersi8 );
            System.out.println("\nThe number of pair characters ii is = " + countforcharactersi9 );
            System.out.println("\nThe number of pair characters ij is = " + countforcharactersi10 );
            System.out.println("\nThe number of pair characters ik is = " + countforcharactersi11 );
            System.out.println("\nThe number of pair characters il is = " + countforcharactersi12 );
            System.out.println("\nThe number of pair characters im is = " + countforcharactersi13 );
            System.out.println("\nThe number of pair characters in is = " + countforcharactersi14 );
            System.out.println("\nThe number of pair characters io is = " + countforcharactersi15 );
            System.out.println("\nThe number of pair characters ip is = " + countforcharactersi16 );
            System.out.println("\nThe number of pair characters iq is = " + countforcharactersi17 );
            System.out.println("\nThe number of pair characters ir is = " + countforcharactersi18 );
            System.out.println("\nThe number of pair characters is is = " + countforcharactersi19 );
            System.out.println("\nThe number of pair characters it is = " + countforcharactersi20 );
            System.out.println("\nThe number of pair characters iu is = " + countforcharactersi21 );
            System.out.println("\nThe number of pair characters iv is = " + countforcharactersi22 );
            System.out.println("\nThe number of pair characters iw is = " + countforcharactersi23 );
            System.out.println("\nThe number of pair characters ix is = " + countforcharactersi24 );
            System.out.println("\nThe number of pair characters iy is = " + countforcharactersi25 );
            System.out.println("\nThe number of pair characters iz is = " + countforcharactersi26 );
            System.out.println("\nThe number of pair characters i. is = " + countforcharactersi27 );
            System.out.println("\nThe number of pair characters i, is = " + countforcharactersi28 );
            System.out.println("\nThe number of pair characters ivacuum is = " + countforcharactersi29 );
            System.out.println("\nThe number of pair characters ja is = " + countforcharactersj1 );
            System.out.println("\nThe number of pair characters jb is = " + countforcharactersj2 );
            System.out.println("\nThe number of pair characters jc is = " + countforcharactersj3 );
            System.out.println("\nThe number of pair characters jd is = " + countforcharactersj4 );
            System.out.println("\nThe number of pair characters je is = " + countforcharactersj5 );
            System.out.println("\nThe number of pair characters jf is = " + countforcharactersj6 );
            System.out.println("\nThe number of pair characters jg is = " + countforcharactersj7 );
            System.out.println("\nThe number of pair characters jh is = " + countforcharactersj8 );
            System.out.println("\nThe number of pair characters ji is = " + countforcharactersj9 );
            System.out.println("\nThe number of pair characters jj is = " + countforcharactersj10 );
            System.out.println("\nThe number of pair characters jk is = " + countforcharactersj11 );
            System.out.println("\nThe number of pair characters jl is = " + countforcharactersj12 );
            System.out.println("\nThe number of pair characters jm is = " + countforcharactersj13 );
            System.out.println("\nThe number of pair characters jn is = " + countforcharactersj14 );
            System.out.println("\nThe number of pair characters jo is = " + countforcharactersj15 );
            System.out.println("\nThe number of pair characters jp is = " + countforcharactersj16 );
            System.out.println("\nThe number of pair characters jq is = " + countforcharactersj17 );
            System.out.println("\nThe number of pair characters jr is = " + countforcharactersj18 );
            System.out.println("\nThe number of pair characters js is = " + countforcharactersj19 );
            System.out.println("\nThe number of pair characters jt is = " + countforcharactersj20 );
            System.out.println("\nThe number of pair characters ju is = " + countforcharactersj21 );
            System.out.println("\nThe number of pair characters jv is = " + countforcharactersj22 );
            System.out.println("\nThe number of pair characters jw is = " + countforcharactersj23 );
            System.out.println("\nThe number of pair characters jx is = " + countforcharactersj24 );
            System.out.println("\nThe number of pair characters jy is = " + countforcharactersj25 );
            System.out.println("\nThe number of pair characters jz is = " + countforcharactersj26 );
            System.out.println("\nThe number of pair characters j. is = " + countforcharactersj27 );
            System.out.println("\nThe number of pair characters j, is = " + countforcharactersj28 );
            System.out.println("\nThe number of pair characters jvacuum is = " + countforcharactersj29 );
            System.out.println("\nThe number of pair characters ka is = " + countforcharactersk1 );
            System.out.println("\nThe number of pair characters kb is = " + countforcharactersk2 );
            System.out.println("\nThe number of pair characters kc is = " + countforcharactersk3 );
            System.out.println("\nThe number of pair characters kd is = " + countforcharactersk4 );
            System.out.println("\nThe number of pair characters ke is = " + countforcharactersk5 );
            System.out.println("\nThe number of pair characters kf is = " + countforcharactersk6 );
            System.out.println("\nThe number of pair characters kg is = " + countforcharactersk7 );
            System.out.println("\nThe number of pair characters kh is = " + countforcharactersk8 );
            System.out.println("\nThe number of pair characters ki is = " + countforcharactersk9 );
            System.out.println("\nThe number of pair characters kj is = " + countforcharactersk10 );
            System.out.println("\nThe number of pair characters kk is = " + countforcharactersk11 );
            System.out.println("\nThe number of pair characters kl is = " + countforcharactersk12 );
            System.out.println("\nThe number of pair characters km is = " + countforcharactersk13 );
            System.out.println("\nThe number of pair characters kn is = " + countforcharactersk14 );
            System.out.println("\nThe number of pair characters ko is = " + countforcharactersk15 );
            System.out.println("\nThe number of pair characters kp is = " + countforcharactersk16 );
            System.out.println("\nThe number of pair characters kq is = " + countforcharactersk17 );
            System.out.println("\nThe number of pair characters kr is = " + countforcharactersk18 );
            System.out.println("\nThe number of pair characters ks is = " + countforcharactersk19 );
            System.out.println("\nThe number of pair characters kt is = " + countforcharactersk20 );
            System.out.println("\nThe number of pair characters ku is = " + countforcharactersk21 );
            System.out.println("\nThe number of pair characters kv is = " + countforcharactersk22 );
            System.out.println("\nThe number of pair characters kw is = " + countforcharactersk23 );
            System.out.println("\nThe number of pair characters kx is = " + countforcharactersk24 );
            System.out.println("\nThe number of pair characters ky is = " + countforcharactersk25 );
            System.out.println("\nThe number of pair characters kz is = " + countforcharactersk26 );
            System.out.println("\nThe number of pair characters k. is = " + countforcharactersk27 );
            System.out.println("\nThe number of pair characters k, is = " + countforcharactersk28 );
            System.out.println("\nThe number of pair characters kvacuum is = " + countforcharactersk29 );
            System.out.println("\nThe number of pair characters la is = " + countforcharactersl1 );
            System.out.println("\nThe number of pair characters lb is = " + countforcharactersl2 );
            System.out.println("\nThe number of pair characters lc is = " + countforcharactersl3 );
            System.out.println("\nThe number of pair characters ld is = " + countforcharactersl4 );
            System.out.println("\nThe number of pair characters le is = " + countforcharactersl5 );
            System.out.println("\nThe number of pair characters lf is = " + countforcharactersl6 );
            System.out.println("\nThe number of pair characters lg is = " + countforcharactersl7 );
            System.out.println("\nThe number of pair characters lh is = " + countforcharactersl8 );
            System.out.println("\nThe number of pair characters li is = " + countforcharactersl9 );
            System.out.println("\nThe number of pair characters lj is = " + countforcharactersl10 );
            System.out.println("\nThe number of pair characters lk is = " + countforcharactersl11 );
            System.out.println("\nThe number of pair characters ll is = " + countforcharactersl12 );
            System.out.println("\nThe number of pair characters lm is = " + countforcharactersl13 );
            System.out.println("\nThe number of pair characters ln is = " + countforcharactersl14 );
            System.out.println("\nThe number of pair characters lo is = " + countforcharactersl15 );
            System.out.println("\nThe number of pair characters lp is = " + countforcharactersl16 );
            System.out.println("\nThe number of pair characters lq is = " + countforcharactersl17 );
            System.out.println("\nThe number of pair characters lr is = " + countforcharactersl18 );
            System.out.println("\nThe number of pair characters ls is = " + countforcharactersl19 );
            System.out.println("\nThe number of pair characters lt is = " + countforcharactersl20 );
            System.out.println("\nThe number of pair characters lu is = " + countforcharactersl21 );
            System.out.println("\nThe number of pair characters lv is = " + countforcharactersl22 );
            System.out.println("\nThe number of pair characters lw is = " + countforcharactersl23 );
            System.out.println("\nThe number of pair characters lx is = " + countforcharactersl24 );
            System.out.println("\nThe number of pair characters ly is = " + countforcharactersl25 );
            System.out.println("\nThe number of pair characters lz is = " + countforcharactersl26 );
            System.out.println("\nThe number of pair characters l. is = " + countforcharactersl27 );
            System.out.println("\nThe number of pair characters l, is = " + countforcharactersl28 );
            System.out.println("\nThe number of pair characters lvacuum is = " + countforcharactersl29 );
            System.out.println("\nThe number of pair characters ma is = " + countforcharactersm1 );
            System.out.println("\nThe number of pair characters mb is = " + countforcharactersm2 );
            System.out.println("\nThe number of pair characters mc is = " + countforcharactersm3 );
            System.out.println("\nThe number of pair characters md is = " + countforcharactersm4 );
            System.out.println("\nThe number of pair characters me is = " + countforcharactersm5 );
            System.out.println("\nThe number of pair characters mf is = " + countforcharactersm6 );
            System.out.println("\nThe number of pair characters mg is = " + countforcharactersm7 );
            System.out.println("\nThe number of pair characters mh is = " + countforcharactersm8 );
            System.out.println("\nThe number of pair characters mi is = " + countforcharactersm9 );
            System.out.println("\nThe number of pair characters mj is = " + countforcharactersm10 );
            System.out.println("\nThe number of pair characters mk is = " + countforcharactersm11 );
            System.out.println("\nThe number of pair characters ml is = " + countforcharactersm12 );
            System.out.println("\nThe number of pair characters mm is = " + countforcharactersm13 );
            System.out.println("\nThe number of pair characters mn is = " + countforcharactersm14 );
            System.out.println("\nThe number of pair characters mo is = " + countforcharactersm15 );
            System.out.println("\nThe number of pair characters mp is = " + countforcharactersm16 );
            System.out.println("\nThe number of pair characters mq is = " + countforcharactersm17 );
            System.out.println("\nThe number of pair characters mr is = " + countforcharactersm18 );
            System.out.println("\nThe number of pair characters ms is = " + countforcharactersm19 );
            System.out.println("\nThe number of pair characters mt is = " + countforcharactersm20 );
            System.out.println("\nThe number of pair characters mu is = " + countforcharactersm21 );
            System.out.println("\nThe number of pair characters mv is = " + countforcharactersm22 );
            System.out.println("\nThe number of pair characters mw is = " + countforcharactersm23 );
            System.out.println("\nThe number of pair characters mx is = " + countforcharactersm24 );
            System.out.println("\nThe number of pair characters my is = " + countforcharactersm25 );
            System.out.println("\nThe number of pair characters mz is = " + countforcharactersm26 );
            System.out.println("\nThe number of pair characters m. is = " + countforcharactersm27 );
            System.out.println("\nThe number of pair characters m, is = " + countforcharactersm28 );
            System.out.println("\nThe number of pair characters mvacuum is = " + countforcharactersm29 );
            System.out.println("\nThe number of pair characters na is = " + countforcharactersn1 );
            System.out.println("\nThe number of pair characters nb is = " + countforcharactersn2 );
            System.out.println("\nThe number of pair characters nc is = " + countforcharactersn3 );
            System.out.println("\nThe number of pair characters nd is = " + countforcharactersn4 );
            System.out.println("\nThe number of pair characters ne is = " + countforcharactersn5 );
            System.out.println("\nThe number of pair characters nf is = " + countforcharactersn6 );
            System.out.println("\nThe number of pair characters ng is = " + countforcharactersn7 );
            System.out.println("\nThe number of pair characters nh is = " + countforcharactersn8 );
            System.out.println("\nThe number of pair characters ni is = " + countforcharactersn9 );
            System.out.println("\nThe number of pair characters nj is = " + countforcharactersn10 );
            System.out.println("\nThe number of pair characters nk is = " + countforcharactersn11 );
            System.out.println("\nThe number of pair characters nl is = " + countforcharactersn12 );
            System.out.println("\nThe number of pair characters nm is = " + countforcharactersn13 );
            System.out.println("\nThe number of pair characters nn is = " + countforcharactersn14 );
            System.out.println("\nThe number of pair characters no is = " + countforcharactersn15 );
            System.out.println("\nThe number of pair characters np is = " + countforcharactersn16 );
            System.out.println("\nThe number of pair characters nq is = " + countforcharactersn17 );
            System.out.println("\nThe number of pair characters nr is = " + countforcharactersn18 );
            System.out.println("\nThe number of pair characters ns is = " + countforcharactersn19 );
            System.out.println("\nThe number of pair characters nt is = " + countforcharactersn20 );
            System.out.println("\nThe number of pair characters nu is = " + countforcharactersn21 );
            System.out.println("\nThe number of pair characters nv is = " + countforcharactersn22 );
            System.out.println("\nThe number of pair characters nw is = " + countforcharactersn23 );
            System.out.println("\nThe number of pair characters nx is = " + countforcharactersn24 );
            System.out.println("\nThe number of pair characters ny is = " + countforcharactersn25 );
            System.out.println("\nThe number of pair characters nz is = " + countforcharactersn26 );
            System.out.println("\nThe number of pair characters n. is = " + countforcharactersn27 );
            System.out.println("\nThe number of pair characters n, is = " + countforcharactersn28 );
            System.out.println("\nThe number of pair characters nvacuum is = " + countforcharactersn29 );
            System.out.println("\nThe number of pair characters oa is = " + countforcharacterso1 );
            System.out.println("\nThe number of pair characters ob is = " + countforcharacterso2 );
            System.out.println("\nThe number of pair characters oc is = " + countforcharacterso3 );
            System.out.println("\nThe number of pair characters od is = " + countforcharacterso4 );
            System.out.println("\nThe number of pair characters oe is = " + countforcharacterso5 );
            System.out.println("\nThe number of pair characters of is = " + countforcharacterso6 );
            System.out.println("\nThe number of pair characters og is = " + countforcharacterso7 );
            System.out.println("\nThe number of pair characters oh is = " + countforcharacterso8 );
            System.out.println("\nThe number of pair characters oi is = " + countforcharacterso9 );
            System.out.println("\nThe number of pair characters oj is = " + countforcharacterso10 );
            System.out.println("\nThe number of pair characters ok is = " + countforcharacterso11 );
            System.out.println("\nThe number of pair characters ol is = " + countforcharacterso12 );
            System.out.println("\nThe number of pair characters om is = " + countforcharacterso13 );
            System.out.println("\nThe number of pair characters on is = " + countforcharacterso14 );
            System.out.println("\nThe number of pair characters oo is = " + countforcharacterso15 );
            System.out.println("\nThe number of pair characters op is = " + countforcharacterso16 );
            System.out.println("\nThe number of pair characters oq is = " + countforcharacterso17 );
            System.out.println("\nThe number of pair characters or is = " + countforcharacterso18 );
            System.out.println("\nThe number of pair characters os is = " + countforcharacterso19 );
            System.out.println("\nThe number of pair characters ot is = " + countforcharacterso20 );
            System.out.println("\nThe number of pair characters ou is = " + countforcharacterso21 );
            System.out.println("\nThe number of pair characters ov is = " + countforcharacterso22 );
            System.out.println("\nThe number of pair characters ow is = " + countforcharacterso23 );
            System.out.println("\nThe number of pair characters ox is = " + countforcharacterso24 );
            System.out.println("\nThe number of pair characters oy is = " + countforcharacterso25 );
            System.out.println("\nThe number of pair characters oz is = " + countforcharacterso26 );
            System.out.println("\nThe number of pair characters o. is = " + countforcharacterso27 );
            System.out.println("\nThe number of pair characters o, is = " + countforcharacterso28 );
            System.out.println("\nThe number of pair characters ovacuum is = " + countforcharacterso29 );
            System.out.println("\nThe number of pair characters pa is = " + countforcharactersp1 );
            System.out.println("\nThe number of pair characters pb is = " + countforcharactersp2 );
            System.out.println("\nThe number of pair characters pc is = " + countforcharactersp3 );
            System.out.println("\nThe number of pair characters pd is = " + countforcharactersp4 );
            System.out.println("\nThe number of pair characters pe is = " + countforcharactersp5 );
            System.out.println("\nThe number of pair characters pf is = " + countforcharactersp6 );
            System.out.println("\nThe number of pair characters pg is = " + countforcharactersp7 );
            System.out.println("\nThe number of pair characters ph is = " + countforcharactersp8 );
            System.out.println("\nThe number of pair characters pi is = " + countforcharactersp9 );
            System.out.println("\nThe number of pair characters pj is = " + countforcharactersp10 );
            System.out.println("\nThe number of pair characters pk is = " + countforcharactersp11 );
            System.out.println("\nThe number of pair characters pl is = " + countforcharactersp12 );
            System.out.println("\nThe number of pair characters pm is = " + countforcharactersp13 );
            System.out.println("\nThe number of pair characters pn is = " + countforcharactersp14 );
            System.out.println("\nThe number of pair characters po is = " + countforcharactersp15 );
            System.out.println("\nThe number of pair characters pp is = " + countforcharactersp16 );
            System.out.println("\nThe number of pair characters pq is = " + countforcharactersp17 );
            System.out.println("\nThe number of pair characters pr is = " + countforcharactersp18 );
            System.out.println("\nThe number of pair characters ps is = " + countforcharactersp19 );
            System.out.println("\nThe number of pair characters pt is = " + countforcharactersp20 );
            System.out.println("\nThe number of pair characters pu is = " + countforcharactersp21 );
            System.out.println("\nThe number of pair characters pv is = " + countforcharactersp22 );
            System.out.println("\nThe number of pair characters pw is = " + countforcharactersp23 );
            System.out.println("\nThe number of pair characters px is = " + countforcharactersp24 );
            System.out.println("\nThe number of pair characters py is = " + countforcharactersp25 );
            System.out.println("\nThe number of pair characters pz is = " + countforcharactersp26 );
            System.out.println("\nThe number of pair characters p. is = " + countforcharactersp27 );
            System.out.println("\nThe number of pair characters p, is = " + countforcharactersp28 );
            System.out.println("\nThe number of pair characters pvacuum is = " + countforcharactersp29 );
            System.out.println("\nThe number of pair characters qa is = " + countforcharactersq1 );
            System.out.println("\nThe number of pair characters qb is = " + countforcharactersq2 );
            System.out.println("\nThe number of pair characters qc is = " + countforcharactersq3 );
            System.out.println("\nThe number of pair characters qd is = " + countforcharactersq4 );
            System.out.println("\nThe number of pair characters qe is = " + countforcharactersq5 );
            System.out.println("\nThe number of pair characters qf is = " + countforcharactersq6 );
            System.out.println("\nThe number of pair characters qg is = " + countforcharactersq7 );
            System.out.println("\nThe number of pair characters qh is = " + countforcharactersq8 );
            System.out.println("\nThe number of pair characters qi is = " + countforcharactersq9 );
            System.out.println("\nThe number of pair characters qj is = " + countforcharactersq10 );
            System.out.println("\nThe number of pair characters qk is = " + countforcharactersq11 );
            System.out.println("\nThe number of pair characters ql is = " + countforcharactersq12 );
            System.out.println("\nThe number of pair characters qm is = " + countforcharactersq13 );
            System.out.println("\nThe number of pair characters qn is = " + countforcharactersq14 );
            System.out.println("\nThe number of pair characters qo is = " + countforcharactersq15 );
            System.out.println("\nThe number of pair characters qp is = " + countforcharactersq16 );
            System.out.println("\nThe number of pair characters qq is = " + countforcharactersq17 );
            System.out.println("\nThe number of pair characters qr is = " + countforcharactersq18 );
            System.out.println("\nThe number of pair characters qs is = " + countforcharactersq19 );
            System.out.println("\nThe number of pair characters qt is = " + countforcharactersq20 );
            System.out.println("\nThe number of pair characters qu is = " + countforcharactersq21 );
            System.out.println("\nThe number of pair characters qv is = " + countforcharactersq22 );
            System.out.println("\nThe number of pair characters qw is = " + countforcharactersq23 );
            System.out.println("\nThe number of pair characters qx is = " + countforcharactersq24 );
            System.out.println("\nThe number of pair characters qy is = " + countforcharactersq25 );
            System.out.println("\nThe number of pair characters qz is = " + countforcharactersq26 );
            System.out.println("\nThe number of pair characters q. is = " + countforcharactersq27 );
            System.out.println("\nThe number of pair characters q, is = " + countforcharactersq28 );
            System.out.println("\nThe number of pair characters qvacuum is = " + countforcharactersq29 );
            System.out.println("\nThe number of pair characters ra is = " + countforcharactersr1 );
            System.out.println("\nThe number of pair characters rb is = " + countforcharactersr2 );
            System.out.println("\nThe number of pair characters rc is = " + countforcharactersr3 );
            System.out.println("\nThe number of pair characters rd is = " + countforcharactersr4 );
            System.out.println("\nThe number of pair characters re is = " + countforcharactersr5 );
            System.out.println("\nThe number of pair characters rf is = " + countforcharactersr6 );
            System.out.println("\nThe number of pair characters rg is = " + countforcharactersr7 );
            System.out.println("\nThe number of pair characters rh is = " + countforcharactersr8 );
            System.out.println("\nThe number of pair characters ri is = " + countforcharactersr9 );
            System.out.println("\nThe number of pair characters rj is = " + countforcharactersr10 );
            System.out.println("\nThe number of pair characters rk is = " + countforcharactersr11 );
            System.out.println("\nThe number of pair characters rl is = " + countforcharactersr12 );
            System.out.println("\nThe number of pair characters rm is = " + countforcharactersr13 );
            System.out.println("\nThe number of pair characters rn is = " + countforcharactersr14 );
            System.out.println("\nThe number of pair characters ro is = " + countforcharactersr15 );
            System.out.println("\nThe number of pair characters rp is = " + countforcharactersr16 );
            System.out.println("\nThe number of pair characters rq is = " + countforcharactersr17 );
            System.out.println("\nThe number of pair characters rr is = " + countforcharactersr18 );
            System.out.println("\nThe number of pair characters rs is = " + countforcharactersr19 );
            System.out.println("\nThe number of pair characters rt is = " + countforcharactersr20 );
            System.out.println("\nThe number of pair characters ru is = " + countforcharactersr21 );
            System.out.println("\nThe number of pair characters rv is = " + countforcharactersr22 );
            System.out.println("\nThe number of pair characters rw is = " + countforcharactersr23 );
            System.out.println("\nThe number of pair characters rx is = " + countforcharactersr24 );
            System.out.println("\nThe number of pair characters ry is = " + countforcharactersr25 );
            System.out.println("\nThe number of pair characters rz is = " + countforcharactersr26 );
            System.out.println("\nThe number of pair characters r. is = " + countforcharactersr27 );
            System.out.println("\nThe number of pair characters r, is = " + countforcharactersr28 );
            System.out.println("\nThe number of pair characters rvacuum is = " + countforcharactersr29 );
            System.out.println("\nThe number of pair characters sa is = " + countforcharacterss1 );
            System.out.println("\nThe number of pair characters sb is = " + countforcharacterss2 );
            System.out.println("\nThe number of pair characters sc is = " + countforcharacterss3 );
            System.out.println("\nThe number of pair characters sd is = " + countforcharacterss4 );
            System.out.println("\nThe number of pair characters se is = " + countforcharacterss5 );
            System.out.println("\nThe number of pair characters sf is = " + countforcharacterss6 );
            System.out.println("\nThe number of pair characters sg is = " + countforcharacterss7 );
            System.out.println("\nThe number of pair characters sh is = " + countforcharacterss8 );
            System.out.println("\nThe number of pair characters si is = " + countforcharacterss9 );
            System.out.println("\nThe number of pair characters sj is = " + countforcharacterss10 );
            System.out.println("\nThe number of pair characters sk is = " + countforcharacterss11 );
            System.out.println("\nThe number of pair characters sl is = " + countforcharacterss12 );
            System.out.println("\nThe number of pair characters sm is = " + countforcharacterss13 );
            System.out.println("\nThe number of pair characters sn is = " + countforcharacterss14 );
            System.out.println("\nThe number of pair characters so is = " + countforcharacterss15 );
            System.out.println("\nThe number of pair characters sp is = " + countforcharacterss16 );
            System.out.println("\nThe number of pair characters sq is = " + countforcharacterss17 );
            System.out.println("\nThe number of pair characters sr is = " + countforcharacterss18 );
            System.out.println("\nThe number of pair characters ss is = " + countforcharacterss19 );
            System.out.println("\nThe number of pair characters st is = " + countforcharacterss20 );
            System.out.println("\nThe number of pair characters su is = " + countforcharacterss21 );
            System.out.println("\nThe number of pair characters sv is = " + countforcharacterss22 );
            System.out.println("\nThe number of pair characters sw is = " + countforcharacterss23 );
            System.out.println("\nThe number of pair characters sx is = " + countforcharacterss24 );
            System.out.println("\nThe number of pair characters sy is = " + countforcharacterss25 );
            System.out.println("\nThe number of pair characters sz is = " + countforcharacterss26 );
            System.out.println("\nThe number of pair characters s. is = " + countforcharacterss27 );
            System.out.println("\nThe number of pair characters s, is = " + countforcharacterss28 );
            System.out.println("\nThe number of pair characters svacuum is = " + countforcharacterss29 );
            System.out.println("\nThe number of pair characters ta is = " + countforcharacterst1 );
            System.out.println("\nThe number of pair characters tb is = " + countforcharacterst2 );
            System.out.println("\nThe number of pair characters tc is = " + countforcharacterst3 );
            System.out.println("\nThe number of pair characters td is = " + countforcharacterst4 );
            System.out.println("\nThe number of pair characters te is = " + countforcharacterst5 );
            System.out.println("\nThe number of pair characters tf is = " + countforcharacterst6 );
            System.out.println("\nThe number of pair characters tg is = " + countforcharacterst7 );
            System.out.println("\nThe number of pair characters th is = " + countforcharacterst8 );
            System.out.println("\nThe number of pair characters ti is = " + countforcharacterst9 );
            System.out.println("\nThe number of pair characters tj is = " + countforcharacterst10 );
            System.out.println("\nThe number of pair characters tk is = " + countforcharacterst11 );
            System.out.println("\nThe number of pair characters tl is = " + countforcharacterst12 );
            System.out.println("\nThe number of pair characters tm is = " + countforcharacterst13 );
            System.out.println("\nThe number of pair characters tn is = " + countforcharacterst14 );
            System.out.println("\nThe number of pair characters to is = " + countforcharacterst15 );
            System.out.println("\nThe number of pair characters tp is = " + countforcharacterst16 );
            System.out.println("\nThe number of pair characters tq is = " + countforcharacterst17 );
            System.out.println("\nThe number of pair characters tr is = " + countforcharacterst18 );
            System.out.println("\nThe number of pair characters ts is = " + countforcharacterst19 );
            System.out.println("\nThe number of pair characters tt is = " + countforcharacterst20 );
            System.out.println("\nThe number of pair characters tu is = " + countforcharacterst21 );
            System.out.println("\nThe number of pair characters tv is = " + countforcharacterst22 );
            System.out.println("\nThe number of pair characters tw is = " + countforcharacterst23 );
            System.out.println("\nThe number of pair characters tx is = " + countforcharacterst24 );
            System.out.println("\nThe number of pair characters ty is = " + countforcharacterst25 );
            System.out.println("\nThe number of pair characters tz is = " + countforcharacterst26 );
            System.out.println("\nThe number of pair characters t. is = " + countforcharacterst27 );
            System.out.println("\nThe number of pair characters t, is = " + countforcharacterst28 );
            System.out.println("\nThe number of pair characters tvacuum is = " + countforcharacterst29 );
            System.out.println("\nThe number of pair characters ua is = " + countforcharactersu1 );
            System.out.println("\nThe number of pair characters ub is = " + countforcharactersu2 );
            System.out.println("\nThe number of pair characters uc is = " + countforcharactersu3 );
            System.out.println("\nThe number of pair characters ud is = " + countforcharactersu4 );
            System.out.println("\nThe number of pair characters ue is = " + countforcharactersu5 );
            System.out.println("\nThe number of pair characters uf is = " + countforcharactersu6 );
            System.out.println("\nThe number of pair characters ug is = " + countforcharactersu7 );
            System.out.println("\nThe number of pair characters uh is = " + countforcharactersu8 );
            System.out.println("\nThe number of pair characters ui is = " + countforcharactersu9 );
            System.out.println("\nThe number of pair characters uj is = " + countforcharactersu10 );
            System.out.println("\nThe number of pair characters uk is = " + countforcharactersu11 );
            System.out.println("\nThe number of pair characters ul is = " + countforcharactersu12 );
            System.out.println("\nThe number of pair characters um is = " + countforcharactersu13 );
            System.out.println("\nThe number of pair characters un is = " + countforcharactersu14 );
            System.out.println("\nThe number of pair characters uo is = " + countforcharactersu15 );
            System.out.println("\nThe number of pair characters up is = " + countforcharactersu16 );
            System.out.println("\nThe number of pair characters uq is = " + countforcharactersu17 );
            System.out.println("\nThe number of pair characters ur is = " + countforcharactersu18 );
            System.out.println("\nThe number of pair characters us is = " + countforcharactersu19 );
            System.out.println("\nThe number of pair characters ut is = " + countforcharactersu20 );
            System.out.println("\nThe number of pair characters uu is = " + countforcharactersu21 );
            System.out.println("\nThe number of pair characters uv is = " + countforcharactersu22 );
            System.out.println("\nThe number of pair characters uw is = " + countforcharactersu23 );
            System.out.println("\nThe number of pair characters ux is = " + countforcharactersu24 );
            System.out.println("\nThe number of pair characters uy is = " + countforcharactersu25 );
            System.out.println("\nThe number of pair characters uz is = " + countforcharactersu26 );
            System.out.println("\nThe number of pair characters u. is = " + countforcharactersu27 );
            System.out.println("\nThe number of pair characters u, is = " + countforcharactersu28 );
            System.out.println("\nThe number of pair characters uvacuum is = " + countforcharactersu29 );
            System.out.println("\nThe number of pair characters va is = " + countforcharactersv1 );
            System.out.println("\nThe number of pair characters vb is = " + countforcharactersv2 );
            System.out.println("\nThe number of pair characters vc is = " + countforcharactersv3 );
            System.out.println("\nThe number of pair characters vd is = " + countforcharactersv4 );
            System.out.println("\nThe number of pair characters ve is = " + countforcharactersv5 );
            System.out.println("\nThe number of pair characters vf is = " + countforcharactersv6 );
            System.out.println("\nThe number of pair characters vg is = " + countforcharactersv7 );
            System.out.println("\nThe number of pair characters vh is = " + countforcharactersv8 );
            System.out.println("\nThe number of pair characters vi is = " + countforcharactersv9 );
            System.out.println("\nThe number of pair characters vj is = " + countforcharactersv10 );
            System.out.println("\nThe number of pair characters vk is = " + countforcharactersv11 );
            System.out.println("\nThe number of pair characters vl is = " + countforcharactersv12 );
            System.out.println("\nThe number of pair characters vm is = " + countforcharactersv13 );
            System.out.println("\nThe number of pair characters vn is = " + countforcharactersv14 );
            System.out.println("\nThe number of pair characters vo is = " + countforcharactersv15 );
            System.out.println("\nThe number of pair characters vp is = " + countforcharactersv16 );
            System.out.println("\nThe number of pair characters vq is = " + countforcharactersv17 );
            System.out.println("\nThe number of pair characters vr is = " + countforcharactersv18 );
            System.out.println("\nThe number of pair characters vs is = " + countforcharactersv19 );
            System.out.println("\nThe number of pair characters vt is = " + countforcharactersv20 );
            System.out.println("\nThe number of pair characters vu is = " + countforcharactersv21 );
            System.out.println("\nThe number of pair characters vv is = " + countforcharactersv22 );
            System.out.println("\nThe number of pair characters vw is = " + countforcharactersv23 );
            System.out.println("\nThe number of pair characters vx is = " + countforcharactersv24 );
            System.out.println("\nThe number of pair characters vy is = " + countforcharactersv25 );
            System.out.println("\nThe number of pair characters vz is = " + countforcharactersv26 );
            System.out.println("\nThe number of pair characters v. is = " + countforcharactersv27 );
            System.out.println("\nThe number of pair characters v, is = " + countforcharactersv28 );
            System.out.println("\nThe number of pair characters vvacuum is = " + countforcharactersv29 );
            System.out.println("\nThe number of pair characters wa is = " + countforcharactersw1 );
            System.out.println("\nThe number of pair characters wb is = " + countforcharactersw2 );
            System.out.println("\nThe number of pair characters wc is = " + countforcharactersw3 );
            System.out.println("\nThe number of pair characters wd is = " + countforcharactersw4 );
            System.out.println("\nThe number of pair characters we is = " + countforcharactersw5 );
            System.out.println("\nThe number of pair characters wf is = " + countforcharactersw6 );
            System.out.println("\nThe number of pair characters wg is = " + countforcharactersw7 );
            System.out.println("\nThe number of pair characters wh is = " + countforcharactersw8 );
            System.out.println("\nThe number of pair characters wi is = " + countforcharactersw9 );
            System.out.println("\nThe number of pair characters wj is = " + countforcharactersw10 );
            System.out.println("\nThe number of pair characters wk is = " + countforcharactersw11 );
            System.out.println("\nThe number of pair characters wl is = " + countforcharactersw12 );
            System.out.println("\nThe number of pair characters wm is = " + countforcharactersw13 );
            System.out.println("\nThe number of pair characters wn is = " + countforcharactersw14 );
            System.out.println("\nThe number of pair characters wo is = " + countforcharactersw15 );
            System.out.println("\nThe number of pair characters wp is = " + countforcharactersw16 );
            System.out.println("\nThe number of pair characters wq is = " + countforcharactersw17 );
            System.out.println("\nThe number of pair characters wr is = " + countforcharactersw18 );
            System.out.println("\nThe number of pair characters ws is = " + countforcharactersw19 );
            System.out.println("\nThe number of pair characters wt is = " + countforcharactersw20 );
            System.out.println("\nThe number of pair characters wu is = " + countforcharactersw21 );
            System.out.println("\nThe number of pair characters wv is = " + countforcharactersw22 );
            System.out.println("\nThe number of pair characters ww is = " + countforcharactersw23 );
            System.out.println("\nThe number of pair characters wx is = " + countforcharactersw24 );
            System.out.println("\nThe number of pair characters wy is = " + countforcharactersw25 );
            System.out.println("\nThe number of pair characters wz is = " + countforcharactersw26 );
            System.out.println("\nThe number of pair characters w. is = " + countforcharactersw27 );
            System.out.println("\nThe number of pair characters w, is = " + countforcharactersw28 );
            System.out.println("\nThe number of pair characters wvacuum is = " + countforcharactersw29 );
            System.out.println("\nThe number of pair characters xa is = " + countforcharactersx1 );
            System.out.println("\nThe number of pair characters xb is = " + countforcharactersx2 );
            System.out.println("\nThe number of pair characters xc is = " + countforcharactersx3 );
            System.out.println("\nThe number of pair characters xd is = " + countforcharactersx4 );
            System.out.println("\nThe number of pair characters xe is = " + countforcharactersx5 );
            System.out.println("\nThe number of pair characters xf is = " + countforcharactersx6 );
            System.out.println("\nThe number of pair characters xg is = " + countforcharactersx7 );
            System.out.println("\nThe number of pair characters xh is = " + countforcharactersx8 );
            System.out.println("\nThe number of pair characters xi is = " + countforcharactersx9 );
            System.out.println("\nThe number of pair characters xj is = " + countforcharactersx10 );
            System.out.println("\nThe number of pair characters xk is = " + countforcharactersx11 );
            System.out.println("\nThe number of pair characters xl is = " + countforcharactersx12 );
            System.out.println("\nThe number of pair characters xm is = " + countforcharactersx13 );
            System.out.println("\nThe number of pair characters xn is = " + countforcharactersx14 );
            System.out.println("\nThe number of pair characters xo is = " + countforcharactersx15 );
            System.out.println("\nThe number of pair characters xp is = " + countforcharactersx16 );
            System.out.println("\nThe number of pair characters xq is = " + countforcharactersx17 );
            System.out.println("\nThe number of pair characters xr is = " + countforcharactersx18 );
            System.out.println("\nThe number of pair characters xs is = " + countforcharactersx19 );
            System.out.println("\nThe number of pair characters xt is = " + countforcharactersx20 );
            System.out.println("\nThe number of pair characters xu is = " + countforcharactersx21 );
            System.out.println("\nThe number of pair characters xv is = " + countforcharactersx22 );
            System.out.println("\nThe number of pair characters xw is = " + countforcharactersx23 );
            System.out.println("\nThe number of pair characters xx is = " + countforcharactersx24 );
            System.out.println("\nThe number of pair characters xy is = " + countforcharactersx25 );
            System.out.println("\nThe number of pair characters xz is = " + countforcharactersx26 );
            System.out.println("\nThe number of pair characters x. is = " + countforcharactersx27 );
            System.out.println("\nThe number of pair characters x, is = " + countforcharactersx28 );
            System.out.println("\nThe number of pair characters xvacuum is = " + countforcharactersx29 );
            System.out.println("\nThe number of pair characters ya is = " + countforcharactersy1 );
            System.out.println("\nThe number of pair characters yb is = " + countforcharactersy2 );
            System.out.println("\nThe number of pair characters yc is = " + countforcharactersy3 );
            System.out.println("\nThe number of pair characters yd is = " + countforcharactersy4 );
            System.out.println("\nThe number of pair characters ye is = " + countforcharactersy5 );
            System.out.println("\nThe number of pair characters yf is = " + countforcharactersy6 );
            System.out.println("\nThe number of pair characters yg is = " + countforcharactersy7 );
            System.out.println("\nThe number of pair characters yh is = " + countforcharactersy8 );
            System.out.println("\nThe number of pair characters yi is = " + countforcharactersy9 );
            System.out.println("\nThe number of pair characters yj is = " + countforcharactersy10 );
            System.out.println("\nThe number of pair characters yk is = " + countforcharactersy11 );
            System.out.println("\nThe number of pair characters yl is = " + countforcharactersy12 );
            System.out.println("\nThe number of pair characters ym is = " + countforcharactersy13 );
            System.out.println("\nThe number of pair characters yn is = " + countforcharactersy14 );
            System.out.println("\nThe number of pair characters yo is = " + countforcharactersy15 );
            System.out.println("\nThe number of pair characters yp is = " + countforcharactersy16 );
            System.out.println("\nThe number of pair characters yq is = " + countforcharactersy17 );
            System.out.println("\nThe number of pair characters yr is = " + countforcharactersy18 );
            System.out.println("\nThe number of pair characters ys is = " + countforcharactersy19 );
            System.out.println("\nThe number of pair characters yt is = " + countforcharactersy20 );
            System.out.println("\nThe number of pair characters yu is = " + countforcharactersy21 );
            System.out.println("\nThe number of pair characters yv is = " + countforcharactersy22 );
            System.out.println("\nThe number of pair characters yw is = " + countforcharactersy23 );
            System.out.println("\nThe number of pair characters yx is = " + countforcharactersy24 );
            System.out.println("\nThe number of pair characters yy is = " + countforcharactersy25 );
            System.out.println("\nThe number of pair characters yz is = " + countforcharactersy26 );
            System.out.println("\nThe number of pair characters y. is = " + countforcharactersy27 );
            System.out.println("\nThe number of pair characters y, is = " + countforcharactersy28 );
            System.out.println("\nThe number of pair characters yvacuum is = " + countforcharactersy29 );
            System.out.println("\nThe number of pair characters za is = " + countforcharactersz1 );
            System.out.println("\nThe number of pair characters zb is = " + countforcharactersz2 );
            System.out.println("\nThe number of pair characters zc is = " + countforcharactersz3 );
            System.out.println("\nThe number of pair characters zd is = " + countforcharactersz4 );
            System.out.println("\nThe number of pair characters ze is = " + countforcharactersz5 );
            System.out.println("\nThe number of pair characters zf is = " + countforcharactersz6 );
            System.out.println("\nThe number of pair characters zg is = " + countforcharactersz7 );
            System.out.println("\nThe number of pair characters zh is = " + countforcharactersz8 );
            System.out.println("\nThe number of pair characters zi is = " + countforcharactersz9 );
            System.out.println("\nThe number of pair characters zj is = " + countforcharactersz10 );
            System.out.println("\nThe number of pair characters zk is = " + countforcharactersz11 );
            System.out.println("\nThe number of pair characters zl is = " + countforcharactersz12 );
            System.out.println("\nThe number of pair characters zm is = " + countforcharactersz13 );
            System.out.println("\nThe number of pair characters zn is = " + countforcharactersz14 );
            System.out.println("\nThe number of pair characters zo is = " + countforcharactersz15 );
            System.out.println("\nThe number of pair characters zp is = " + countforcharactersz16 );
            System.out.println("\nThe number of pair characters zq is = " + countforcharactersz17 );
            System.out.println("\nThe number of pair characters zr is = " + countforcharactersz18 );
            System.out.println("\nThe number of pair characters zs is = " + countforcharactersz19 );
            System.out.println("\nThe number of pair characters zt is = " + countforcharactersz20 );
            System.out.println("\nThe number of pair characters zu is = " + countforcharactersz21 );
            System.out.println("\nThe number of pair characters zv is = " + countforcharactersz22 );
            System.out.println("\nThe number of pair characters zw is = " + countforcharactersz23 );
            System.out.println("\nThe number of pair characters zx is = " + countforcharactersz24 );
            System.out.println("\nThe number of pair characters zy is = " + countforcharactersz25 );
            System.out.println("\nThe number of pair characters zz is = " + countforcharactersz26 );
            System.out.println("\nThe number of pair characters z. is = " + countforcharactersz27 );
            System.out.println("\nThe number of pair characters z, is = " + countforcharactersz28 );
            System.out.println("\nThe number of pair characters zvacuum is = " + countforcharactersz29 );
            System.out.println("\nThe number of pair characters .a is = " + countforcharactersdot1 );
            System.out.println("\nThe number of pair characters .b is = " + countforcharactersdot2 );
            System.out.println("\nThe number of pair characters .c is = " + countforcharactersdot3 );
            System.out.println("\nThe number of pair characters .d is = " + countforcharactersdot4 );
            System.out.println("\nThe number of pair characters .e is = " + countforcharactersdot5 );
            System.out.println("\nThe number of pair characters .f is = " + countforcharactersdot6 );
            System.out.println("\nThe number of pair characters .g is = " + countforcharactersdot7 );
            System.out.println("\nThe number of pair characters .h is = " + countforcharactersdot8 );
            System.out.println("\nThe number of pair characters .i is = " + countforcharactersdot9 );
            System.out.println("\nThe number of pair characters .j is = " + countforcharactersdot10 );
            System.out.println("\nThe number of pair characters .k is = " + countforcharactersdot11 );
            System.out.println("\nThe number of pair characters .l is = " + countforcharactersdot12 );
            System.out.println("\nThe number of pair characters .m is = " + countforcharactersdot13 );
            System.out.println("\nThe number of pair characters .n is = " + countforcharactersdot14 );
            System.out.println("\nThe number of pair characters .o is = " + countforcharactersdot15 );
            System.out.println("\nThe number of pair characters .p is = " + countforcharactersdot16 );
            System.out.println("\nThe number of pair characters .q is = " + countforcharactersdot17 );
            System.out.println("\nThe number of pair characters .r is = " + countforcharactersdot18 );
            System.out.println("\nThe number of pair characters .s is = " + countforcharactersdot19 );
            System.out.println("\nThe number of pair characters .t is = " + countforcharactersdot20 );
            System.out.println("\nThe number of pair characters .u is = " + countforcharactersdot21 );
            System.out.println("\nThe number of pair characters .v is = " + countforcharactersdot22 );
            System.out.println("\nThe number of pair characters .w is = " + countforcharactersdot23 );
            System.out.println("\nThe number of pair characters .x is = " + countforcharactersdot24 );
            System.out.println("\nThe number of pair characters .y is = " + countforcharactersdot25 );
            System.out.println("\nThe number of pair characters .z is = " + countforcharactersdot26 );
            System.out.println("\nThe number of pair characters .. is = " + countforcharactersdot27 );
            System.out.println("\nThe number of pair characters ., is = " + countforcharactersdot28 );
            System.out.println("\nThe number of pair characters .vacuum is = " + countforcharactersz29 );
            System.out.println("\nThe number of pair characters ,a is = " + countforcharacterscomma1 );
            System.out.println("\nThe number of pair characters ,b is = " + countforcharacterscomma2 );
            System.out.println("\nThe number of pair characters ,c is = " + countforcharacterscomma3 );
            System.out.println("\nThe number of pair characters ,d is = " + countforcharacterscomma4 );
            System.out.println("\nThe number of pair characters ,e is = " + countforcharacterscomma5 );
            System.out.println("\nThe number of pair characters ,f is = " + countforcharacterscomma6 );
            System.out.println("\nThe number of pair characters ,g is = " + countforcharacterscomma7 );
            System.out.println("\nThe number of pair characters ,h is = " + countforcharacterscomma8 );
            System.out.println("\nThe number of pair characters ,i is = " + countforcharacterscomma9 );
            System.out.println("\nThe number of pair characters ,j is = " + countforcharacterscomma10 );
            System.out.println("\nThe number of pair characters ,k is = " + countforcharacterscomma11 );
            System.out.println("\nThe number of pair characters ,l is = " + countforcharacterscomma12 );
            System.out.println("\nThe number of pair characters ,m is = " + countforcharacterscomma13 );
            System.out.println("\nThe number of pair characters ,n is = " + countforcharacterscomma14 );
            System.out.println("\nThe number of pair characters ,o is = " + countforcharacterscomma15 );
            System.out.println("\nThe number of pair characters ,p is = " + countforcharacterscomma16 );
            System.out.println("\nThe number of pair characters ,q is = " + countforcharacterscomma17 );
            System.out.println("\nThe number of pair characters ,r is = " + countforcharacterscomma18 );
            System.out.println("\nThe number of pair characters ,s is = " + countforcharacterscomma19 );
            System.out.println("\nThe number of pair characters ,t is = " + countforcharacterscomma20 );
            System.out.println("\nThe number of pair characters ,u is = " + countforcharacterscomma21 );
            System.out.println("\nThe number of pair characters ,v is = " + countforcharacterscomma22 );
            System.out.println("\nThe number of pair characters ,w is = " + countforcharacterscomma23 );
            System.out.println("\nThe number of pair characters ,x is = " + countforcharacterscomma24 );
            System.out.println("\nThe number of pair characters ,y is = " + countforcharacterscomma25 );
            System.out.println("\nThe number of pair characters ,z is = " + countforcharacterscomma26 );
            System.out.println("\nThe number of pair characters ,. is = " + countforcharacterscomma27 );
            System.out.println("\nThe number of pair characters ,, is = " + countforcharacterscomma28 );
            System.out.println("\nThe number of pair characters ,vacuum is = " + countforcharacterscomma29 );
            System.out.println("\nThe number of pair characters vacuuma is = " + countforcharactersvacuum1 );
            System.out.println("\nThe number of pair characters vacuumb is = " + countforcharactersvacuum2 );
            System.out.println("\nThe number of pair characters vacuumc is = " + countforcharactersvacuum3 );
            System.out.println("\nThe number of pair characters vacuumd is = " + countforcharactersvacuum4 );
            System.out.println("\nThe number of pair characters vacuume is = " + countforcharactersvacuum5 );
            System.out.println("\nThe number of pair characters vacuumf is = " + countforcharactersvacuum6 );
            System.out.println("\nThe number of pair characters vacuumg is = " + countforcharactersvacuum7 );
            System.out.println("\nThe number of pair characters vacuumh is = " + countforcharactersvacuum8 );
            System.out.println("\nThe number of pair characters vacuumi is = " + countforcharactersvacuum9 );
            System.out.println("\nThe number of pair characters vacuumj is = " + countforcharactersvacuum10 );
            System.out.println("\nThe number of pair characters vacuumk is = " + countforcharactersvacuum11 );
            System.out.println("\nThe number of pair characters vacuuml is = " + countforcharactersvacuum12 );
            System.out.println("\nThe number of pair characters vacuumm is = " + countforcharactersvacuum13 );
            System.out.println("\nThe number of pair characters vacuumn is = " + countforcharactersvacuum14 );
            System.out.println("\nThe number of pair characters vacuumo is = " + countforcharactersvacuum15 );
            System.out.println("\nThe number of pair characters vacuump is = " + countforcharactersvacuum16 );
            System.out.println("\nThe number of pair characters vacuumq is = " + countforcharactersvacuum17 );
            System.out.println("\nThe number of pair characters vacuumr is = " + countforcharactersvacuum18 );
            System.out.println("\nThe number of pair characters vacuums is = " + countforcharactersvacuum19 );
            System.out.println("\nThe number of pair characters vacuumt is = " + countforcharactersvacuum20 );
            System.out.println("\nThe number of pair characters vacuumu is = " + countforcharactersvacuum21 );
            System.out.println("\nThe number of pair characters vacuumv is = " + countforcharactersvacuum22 );
            System.out.println("\nThe number of pair characters vacuumw is = " + countforcharactersvacuum23 );
            System.out.println("\nThe number of pair characters vacuumx is = " + countforcharactersvacuum24 );
            System.out.println("\nThe number of pair characters vacuumy is = " + countforcharactersvacuum25 );
            System.out.println("\nThe number of pair characters vacuumz is = " + countforcharactersvacuum26 );
            System.out.println("\nThe number of pair characters vacuum. is = " + countforcharactersvacuum27 );
            System.out.println("\nThe number of pair characters vacuum, is = " + countforcharactersvacuum28 );
            System.out.println("\nThe number of pair characters vacuumvacuum is = " + countforcharactersvacuum29 );
            System.out.println("\nThe sum of all the pair characters is = " + (countforcharactersa1+countforcharactersa2+countforcharactersa3+countforcharactersa4+countforcharactersa5+countforcharactersa6+countforcharactersa7 
                                                                        + countforcharactersa8+countforcharactersa9+countforcharactersa10+countforcharactersa11+countforcharactersa12+countforcharactersa13+countforcharactersa14
                                                                        + countforcharactersa15+countforcharactersa16+countforcharactersa17+countforcharactersa18+countforcharactersa19+countforcharactersa20+countforcharactersa21
                                                                        + countforcharactersa22+countforcharactersa23+countforcharactersa24+countforcharactersa25+countforcharactersa26+countforcharactersa27+countforcharactersa28
                                                                        + countforcharactersa29
                                                                        + countforcharactersb1+countforcharactersb2+countforcharactersb3+countforcharactersb4+countforcharactersb5+countforcharactersb6+countforcharactersb7 
                                                                        + countforcharactersb8+countforcharactersb9+countforcharactersb10+countforcharactersb11+countforcharactersb12+countforcharactersb13+countforcharactersb14
                                                                        + countforcharactersb15+countforcharactersb16+countforcharactersb17+countforcharactersb18+countforcharactersb19+countforcharactersb20+countforcharactersb21
                                                                        + countforcharactersb22+countforcharactersb23+countforcharactersb24+countforcharactersb25+countforcharactersb26+countforcharactersb27+countforcharactersb28
                                                                        + countforcharactersb29
                                                                        + countforcharactersc1+countforcharactersc2+countforcharactersc3+countforcharactersc4+countforcharactersc5+countforcharactersc6+countforcharactersc7 
                                                                        + countforcharactersc8+countforcharactersc9+countforcharactersc10+countforcharactersc11+countforcharactersc12+countforcharactersc13+countforcharactersc14
                                                                        + countforcharactersc15+countforcharactersc16+countforcharactersc17+countforcharactersc18+countforcharactersc19+countforcharactersc20+countforcharactersc21
                                                                        + countforcharactersc22+countforcharactersc23+countforcharactersc24+countforcharactersc25+countforcharactersc26+countforcharactersc27+countforcharactersc28
                                                                        + countforcharactersc29
                                                                        + countforcharactersd1+countforcharactersd2+countforcharactersd3+countforcharactersd4+countforcharactersd5+countforcharactersd6+countforcharactersd7 
                                                                        + countforcharactersd8+countforcharactersd9+countforcharactersd10+countforcharactersd11+countforcharactersd12+countforcharactersd13+countforcharactersd14
                                                                        + countforcharactersd15+countforcharactersd16+countforcharactersd17+countforcharactersd18+countforcharactersd19+countforcharactersd20+countforcharactersd21
                                                                        + countforcharactersd22+countforcharactersd23+countforcharactersd24+countforcharactersd25+countforcharactersd26+countforcharactersd27+countforcharactersd28
                                                                        + countforcharactersd29
                                                                        + countforcharacterse1+countforcharacterse2+countforcharacterse3+countforcharacterse4+countforcharacterse5+countforcharacterse6+countforcharacterse7 
                                                                        + countforcharacterse8+countforcharacterse9+countforcharacterse10+countforcharacterse11+countforcharacterse12+countforcharacterse13+countforcharacterse14
                                                                        + countforcharacterse15+countforcharacterse16+countforcharacterse17+countforcharacterse18+countforcharacterse19+countforcharacterse20+countforcharacterse21
                                                                        + countforcharacterse22+countforcharacterse23+countforcharacterse24+countforcharacterse25+countforcharacterse26+countforcharacterse27+countforcharacterse28
                                                                        + countforcharacterse29
                                                                        + countforcharactersf1+countforcharactersf2+countforcharactersf3+countforcharactersf4+countforcharactersf5+countforcharactersf6+countforcharactersf7 
                                                                        + countforcharactersf8+countforcharactersf9+countforcharactersf10+countforcharactersf11+countforcharactersf12+countforcharactersf13+countforcharactersf14
                                                                        + countforcharactersf15+countforcharactersf16+countforcharactersf17+countforcharactersf18+countforcharactersf19+countforcharactersf20+countforcharactersf21
                                                                        + countforcharactersf22+countforcharactersf23+countforcharactersf24+countforcharactersf25+countforcharactersf26+countforcharactersf27+countforcharactersf28
                                                                        + countforcharactersf29
                                                                        + countforcharactersg1+countforcharactersg2+countforcharactersg3+countforcharactersg4+countforcharactersg5+countforcharactersg6+countforcharactersg7 
                                                                        + countforcharactersg8+countforcharactersg9+countforcharactersg10+countforcharactersg11+countforcharactersg12+countforcharactersg13+countforcharactersg14
                                                                        + countforcharactersg15+countforcharactersg16+countforcharactersg17+countforcharactersg18+countforcharactersg19+countforcharactersg20+countforcharactersg21
                                                                        + countforcharactersg22+countforcharactersg23+countforcharactersg24+countforcharactersg25+countforcharactersg26+countforcharactersg27+countforcharactersg28
                                                                        + countforcharactersg29
                                                                        + countforcharactersh1+countforcharactersh2+countforcharactersh3+countforcharactersh4+countforcharactersh5+countforcharactersh6+countforcharactersh7 
                                                                        + countforcharactersh8+countforcharactersh9+countforcharactersh10+countforcharactersh11+countforcharactersh12+countforcharactersh13+countforcharactersh14
                                                                        + countforcharactersh15+countforcharactersh16+countforcharactersh17+countforcharactersh18+countforcharactersh19+countforcharactersh20+countforcharactersh21
                                                                        + countforcharactersh22+countforcharactersh23+countforcharactersh24+countforcharactersh25+countforcharactersh26+countforcharactersh27+countforcharactersh28
                                                                        + countforcharactersh29
                                                                        + countforcharactersi1+countforcharactersi2+countforcharactersi3+countforcharactersi4+countforcharactersi5+countforcharactersi6+countforcharactersi7 
                                                                        + countforcharactersi8+countforcharactersi9+countforcharactersi10+countforcharactersi11+countforcharactersi12+countforcharactersi13+countforcharactersi14
                                                                        + countforcharactersi15+countforcharactersi16+countforcharactersi17+countforcharactersi18+countforcharactersi19+countforcharactersi20+countforcharactersi21
                                                                        + countforcharactersi22+countforcharactersi23+countforcharactersi24+countforcharactersi25+countforcharactersi26+countforcharactersi27+countforcharactersi28
                                                                        + countforcharactersi29
                                                                        + countforcharactersj1+countforcharactersj2+countforcharactersj3+countforcharactersj4+countforcharactersj5+countforcharactersj6+countforcharactersj7 
                                                                        + countforcharactersj8+countforcharactersj9+countforcharactersj10+countforcharactersj11+countforcharactersj12+countforcharactersj13+countforcharactersj14
                                                                        + countforcharactersj15+countforcharactersj16+countforcharactersj17+countforcharactersj18+countforcharactersj19+countforcharactersj20+countforcharactersj21
                                                                        + countforcharactersj22+countforcharactersj23+countforcharactersj24+countforcharactersj25+countforcharactersj26+countforcharactersj27+countforcharactersj28
                                                                        + countforcharactersj29
                                                                        + countforcharactersk1+countforcharactersk2+countforcharactersk3+countforcharactersk4+countforcharactersk5+countforcharactersk6+countforcharactersk7 
                                                                        + countforcharactersk8+countforcharactersk9+countforcharactersk10+countforcharactersk11+countforcharactersk12+countforcharactersk13+countforcharactersk14
                                                                        + countforcharactersk15+countforcharactersk16+countforcharactersk17+countforcharactersk18+countforcharactersk19+countforcharactersk20+countforcharactersk21
                                                                        + countforcharactersk22+countforcharactersk23+countforcharactersk24+countforcharactersk25+countforcharactersk26+countforcharactersk27+countforcharactersk28
                                                                        + countforcharactersk29
                                                                        + countforcharactersl1+countforcharactersl2+countforcharactersl3+countforcharactersl4+countforcharactersl5+countforcharactersl6+countforcharactersl7 
                                                                        + countforcharactersl8+countforcharactersl9+countforcharactersl10+countforcharactersl11+countforcharactersl12+countforcharactersl13+countforcharactersl14
                                                                        + countforcharactersl15+countforcharactersl16+countforcharactersl17+countforcharactersl18+countforcharactersl19+countforcharactersl20+countforcharactersl21
                                                                        + countforcharactersl22+countforcharactersl23+countforcharactersl24+countforcharactersl25+countforcharactersl26+countforcharactersl27+countforcharactersl28
                                                                        + countforcharactersl29
                                                                        + countforcharactersm1+countforcharactersm2+countforcharactersm3+countforcharactersm4+countforcharactersm5+countforcharactersm6+countforcharactersm7 
                                                                        + countforcharactersm8+countforcharactersm9+countforcharactersm10+countforcharactersm11+countforcharactersm12+countforcharactersm13+countforcharactersm14
                                                                        + countforcharactersm15+countforcharactersm16+countforcharactersm17+countforcharactersm18+countforcharactersm19+countforcharactersm20+countforcharactersm21
                                                                        + countforcharactersm22+countforcharactersm23+countforcharactersm24+countforcharactersm25+countforcharactersm26+countforcharactersm27+countforcharactersm28
                                                                        + countforcharactersm29
                                                                        + countforcharactersn1+countforcharactersn2+countforcharactersn3+countforcharactersn4+countforcharactersn5+countforcharactersn6+countforcharactersn7 
                                                                        + countforcharactersn8+countforcharactersn9+countforcharactersn10+countforcharactersn11+countforcharactersn12+countforcharactersn13+countforcharactersn14
                                                                        + countforcharactersn15+countforcharactersn16+countforcharactersn17+countforcharactersn18+countforcharactersn19+countforcharactersn20+countforcharactersn21
                                                                        + countforcharactersn22+countforcharactersn23+countforcharactersn24+countforcharactersn25+countforcharactersn26+countforcharactersn27+countforcharactersn28
                                                                        + countforcharactersn29
                                                                        + countforcharacterso1+countforcharacterso2+countforcharacterso3+countforcharacterso4+countforcharacterso5+countforcharacterso6+countforcharacterso7 
                                                                        + countforcharacterso8+countforcharacterso9+countforcharacterso10+countforcharacterso11+countforcharacterso12+countforcharacterso13+countforcharacterso14
                                                                        + countforcharacterso15+countforcharacterso16+countforcharacterso17+countforcharacterso18+countforcharacterso19+countforcharacterso20+countforcharacterso21
                                                                        + countforcharacterso22+countforcharacterso23+countforcharacterso24+countforcharacterso25+countforcharacterso26+countforcharacterso27+countforcharacterso28
                                                                        + countforcharacterso29
                                                                        + countforcharactersp1+countforcharactersp2+countforcharactersp3+countforcharactersp4+countforcharactersp5+countforcharactersp6+countforcharactersp7 
                                                                        + countforcharactersp8+countforcharactersp9+countforcharactersp10+countforcharactersp11+countforcharactersp12+countforcharactersp13+countforcharactersp14
                                                                        + countforcharactersp15+countforcharactersp16+countforcharactersp17+countforcharactersp18+countforcharactersp19+countforcharactersp20+countforcharactersp21
                                                                        + countforcharactersp22+countforcharactersp23+countforcharactersp24+countforcharactersp25+countforcharactersp26+countforcharactersp27+countforcharactersp28
                                                                        + countforcharactersp29
                                                                        + countforcharactersq1+countforcharactersq2+countforcharactersq3+countforcharactersq4+countforcharactersq5+countforcharactersq6+countforcharactersq7 
                                                                        + countforcharactersq8+countforcharactersq9+countforcharactersq10+countforcharactersq11+countforcharactersq12+countforcharactersq13+countforcharactersq14
                                                                        + countforcharactersq15+countforcharactersq16+countforcharactersq17+countforcharactersq18+countforcharactersq19+countforcharactersq20+countforcharactersq21
                                                                        + countforcharactersq22+countforcharactersq23+countforcharactersq24+countforcharactersq25+countforcharactersq26+countforcharactersq27+countforcharactersq28
                                                                        + countforcharactersq29
                                                                        + countforcharactersr1+countforcharactersr2+countforcharactersr3+countforcharactersr4+countforcharactersr5+countforcharactersr6+countforcharactersr7 
                                                                        + countforcharactersr8+countforcharactersr9+countforcharactersr10+countforcharactersr11+countforcharactersr12+countforcharactersr13+countforcharactersr14
                                                                        + countforcharactersr15+countforcharactersr16+countforcharactersr17+countforcharactersr18+countforcharactersr19+countforcharactersr20+countforcharactersr21
                                                                        + countforcharactersr22+countforcharactersr23+countforcharactersr24+countforcharactersr25+countforcharactersr26+countforcharactersr27+countforcharactersr28
                                                                        + countforcharactersr29
                                                                        + countforcharacterss1+countforcharacterss2+countforcharacterss3+countforcharacterss4+countforcharacterss5+countforcharacterss6+countforcharacterss7 
                                                                        + countforcharacterss8+countforcharacterss9+countforcharacterss10+countforcharacterss11+countforcharacterss12+countforcharacterss13+countforcharacterss14
                                                                        + countforcharacterss15+countforcharacterss16+countforcharacterss17+countforcharacterss18+countforcharacterss19+countforcharacterss20+countforcharacterss21
                                                                        + countforcharacterss22+countforcharacterss23+countforcharacterss24+countforcharacterss25+countforcharacterss26+countforcharacterss27+countforcharacterss28
                                                                        + countforcharacterss29
                                                                        + countforcharacterst1+countforcharacterst2+countforcharacterst3+countforcharacterst4+countforcharacterst5+countforcharacterst6+countforcharacterst7 
                                                                        + countforcharacterst8+countforcharacterst9+countforcharacterst10+countforcharacterst11+countforcharacterst12+countforcharacterst13+countforcharacterst14
                                                                        + countforcharacterst15+countforcharacterst16+countforcharacterst17+countforcharacterst18+countforcharacterst19+countforcharacterst20+countforcharacterst21
                                                                        + countforcharacterst22+countforcharacterst23+countforcharacterst24+countforcharacterst25+countforcharacterst26+countforcharacterst27+countforcharacterst28
                                                                        + countforcharacterst29
                                                                        + countforcharactersu1+countforcharactersu2+countforcharactersu3+countforcharactersu4+countforcharactersu5+countforcharactersu6+countforcharactersu7 
                                                                        + countforcharactersu8+countforcharactersu9+countforcharactersu10+countforcharactersu11+countforcharactersu12+countforcharactersu13+countforcharactersu14
                                                                        + countforcharactersu15+countforcharactersu16+countforcharactersu17+countforcharactersu18+countforcharactersu19+countforcharactersu20+countforcharactersu21
                                                                        + countforcharactersu22+countforcharactersu23+countforcharactersu24+countforcharactersu25+countforcharactersu26+countforcharactersu27+countforcharactersu28
                                                                        + countforcharactersu29
                                                                        + countforcharactersv1+countforcharactersv2+countforcharactersv3+countforcharactersv4+countforcharactersv5+countforcharactersv6+countforcharactersv7 
                                                                        + countforcharactersv8+countforcharactersv9+countforcharactersv10+countforcharactersv11+countforcharactersv12+countforcharactersv13+countforcharactersv14
                                                                        + countforcharactersv15+countforcharactersv16+countforcharactersv17+countforcharactersv18+countforcharactersv19+countforcharactersv20+countforcharactersv21
                                                                        + countforcharactersv22+countforcharactersv23+countforcharactersv24+countforcharactersv25+countforcharactersv26+countforcharactersv27+countforcharactersv28
                                                                        + countforcharactersv29
                                                                        + countforcharactersw1+countforcharactersw2+countforcharactersw3+countforcharactersw4+countforcharactersw5+countforcharactersw6+countforcharactersw7 
                                                                        + countforcharactersw8+countforcharactersw9+countforcharactersw10+countforcharactersw11+countforcharactersw12+countforcharactersw13+countforcharactersw14
                                                                        + countforcharactersw15+countforcharactersw16+countforcharactersw17+countforcharactersw18+countforcharactersw19+countforcharactersw20+countforcharactersw21
                                                                        + countforcharactersw22+countforcharactersw23+countforcharactersw24+countforcharactersw25+countforcharactersw26+countforcharactersw27+countforcharactersw28
                                                                        + countforcharactersw29
                                                                        + countforcharactersx1+countforcharactersx2+countforcharactersx3+countforcharactersx4+countforcharactersx5+countforcharactersx6+countforcharactersx7 
                                                                        + countforcharactersx8+countforcharactersx9+countforcharactersx10+countforcharactersx11+countforcharactersx12+countforcharactersx13+countforcharactersx14
                                                                        + countforcharactersx15+countforcharactersx16+countforcharactersx17+countforcharactersx18+countforcharactersx19+countforcharactersx20+countforcharactersx21
                                                                        + countforcharactersx22+countforcharactersx23+countforcharactersx24+countforcharactersx25+countforcharactersx26+countforcharactersx27+countforcharactersx28
                                                                        + countforcharactersx29
                                                                        + countforcharactersy1+countforcharactersy2+countforcharactersy3+countforcharactersy4+countforcharactersy5+countforcharactersy6+countforcharactersy7 
                                                                        + countforcharactersy8+countforcharactersy9+countforcharactersy10+countforcharactersy11+countforcharactersy12+countforcharactersy13+countforcharactersy14
                                                                        + countforcharactersy15+countforcharactersy16+countforcharactersy17+countforcharactersy18+countforcharactersy19+countforcharactersy20+countforcharactersy21
                                                                        + countforcharactersy22+countforcharactersy23+countforcharactersy24+countforcharactersy25+countforcharactersy26+countforcharactersy27+countforcharactersy28
                                                                        + countforcharactersy29
                                                                        + countforcharactersz1+countforcharactersz2+countforcharactersz3+countforcharactersz4+countforcharactersz5+countforcharactersz6+countforcharactersz7 
                                                                        + countforcharactersz8+countforcharactersz9+countforcharactersz10+countforcharactersz11+countforcharactersz12+countforcharactersz13+countforcharactersz14
                                                                        + countforcharactersz15+countforcharactersz16+countforcharactersz17+countforcharactersz18+countforcharactersz19+countforcharactersz20+countforcharactersz21
                                                                        + countforcharactersz22+countforcharactersz23+countforcharactersz24+countforcharactersz25+countforcharactersz26+countforcharactersz27+countforcharactersz28
                                                                        + countforcharactersz29
                                                                        + countforcharactersdot1+countforcharactersdot2+countforcharactersdot3+countforcharactersdot4+countforcharactersdot5+countforcharactersdot6+countforcharactersdot7 
                                                                        + countforcharactersdot8+countforcharactersdot9+countforcharactersdot10+countforcharactersdot11+countforcharactersdot12+countforcharactersdot13+countforcharactersdot14
                                                                        + countforcharactersdot15+countforcharactersdot16+countforcharactersdot17+countforcharactersdot18+countforcharactersdot19+countforcharactersdot20+countforcharactersdot21
                                                                        + countforcharactersdot22+countforcharactersdot23+countforcharactersdot24+countforcharactersdot25+countforcharactersdot26+countforcharactersdot27+countforcharactersdot28
                                                                        + countforcharactersdot29 
                                                                        + countforcharacterscomma1+countforcharacterscomma2+countforcharacterscomma3+countforcharacterscomma4+countforcharacterscomma5+countforcharacterscomma6+countforcharacterscomma7 
                                                                        + countforcharacterscomma8+countforcharacterscomma9+countforcharacterscomma10+countforcharacterscomma11+countforcharacterscomma12+countforcharacterscomma13+countforcharacterscomma14
                                                                        + countforcharacterscomma15+countforcharacterscomma16+countforcharacterscomma17+countforcharacterscomma18+countforcharacterscomma19+countforcharacterscomma20+countforcharacterscomma21
                                                                        + countforcharacterscomma22+countforcharacterscomma23+countforcharacterscomma24+countforcharacterscomma25+countforcharacterscomma26+countforcharacterscomma27+countforcharacterscomma28
                                                                        + countforcharacterscomma29
                                                                        + countforcharactersvacuum1+countforcharactersvacuum2+countforcharactersvacuum3+countforcharactersvacuum4+countforcharactersvacuum5+countforcharactersvacuum6+countforcharactersvacuum7 
                                                                        + countforcharactersvacuum8+countforcharactersvacuum9+countforcharactersvacuum10+countforcharactersvacuum11+countforcharactersvacuum12+countforcharactersvacuum13+countforcharactersvacuum14
                                                                        + countforcharactersvacuum15+countforcharactersvacuum16+countforcharactersvacuum17+countforcharactersvacuum18+countforcharactersvacuum19+countforcharactersvacuum20+countforcharactersvacuum21
                                                                        + countforcharactersvacuum22+countforcharactersvacuum23+countforcharactersvacuum24+countforcharactersvacuum25+countforcharactersvacuum26+countforcharactersvacuum27+countforcharactersvacuum28
                                                                        + countforcharactersvacuum29 ));
  
            }

            private static void calculatethedistributioninpairsofneighboringcharacters1() 
                    
            {
                
            double paa = 16.0/383163.0;
            double pab = 549.0/383163.0;
            double pac = 1026.0/383163.0;
            double pad = 360.0/383163.0;
            double pae = 12.0/383163.0;
            double paf = 354.0/383163.0;
            double pag = 878.0/383163.0;
            double pah = 84.0/383163.0;
            double pai = 3136.0/383163.0;
            double paj = 50.0/383163.0;
            double pak = 153.0/383163.0;
            double pal = 1386.0/383163.0;
            double pam = 696.0/383163.0;
            double pan = 2653.0/383163.0;
            double pao = 11.0/383163.0;
            double pap = 956.0/383163.0;
            double paq = 205.0/383163.0;
            double par = 2816.0/383163.0;
            double pas = 2115.0/383163.0;
            double pat = 1566.0/383163.0;
            double pau = 1933.0/383163.0;
            double pav = 1804.0/383163.0;
            double paw = 1.0/383163.0;
            double pax = 28.0/383163.0;
            double pay = 212.0/383163.0;
            double paz = 56.0/383163.0;
            double padot = 374.0/383163.0;
            double pacomma = 325.0/383163.0;
            double pavacuum = 3687.0/383163.0;
            double pba = 580.0/383163.0;
            double pbb = 16.0/383163.0;
            double pbc = 1.0/383163.0;
            double pbd = 2.0/383163.0;
            double pbe = 611.0/383163.0;
            double pbi = 683.0/383163.0;
            double pbj = 101.0/383163.0;
            double pbl = 800.0/383163.0;
            double pbm = 3.0/383163.0;
            double pbo = 923.0/383163.0;
            double pbr = 653.0/383163.0;
            double pbs = 129.0/383163.0;
            double pbt = 34.0/383163.0;
            double pbu = 197.0/383163.0;
            double pby = 24.0/383163.0;
            double pbdot = 3.0/383163.0;
            double pbcomma = 3.0/383163.0;
            double pbvacuum = 31.0/383163.0;
            double pca = 1293.0/383163.0;
            double pcc = 283.0/383163.0;
            double pcd = 6.0/383163.0;
            double pce = 2081.0/383163.0;
            double pch = 1732.0/383163.0;
            double pci = 973.0/383163.0;
            double pck = 136.0/383163.0;
            double pcl = 526.0/383163.0;
            double pcm = 1.0/383163.0;
            double pco = 2265.0/383163.0;
            double pcq = 30.0/383163.0;
            double pcr = 717.0/383163.0;
            double pcs = 43.0/383163.0;
            double pct = 586.0/383163.0;
            double pcu = 611.0/383163.0;
            double pcv = 2.0/383163.0;
            double pcy = 12.0/383163.0;
            double pcdot = 53.0/383163.0;
            double pccomma = 53.0/383163.0;
            double pcvacuum = 1233.0/383163.0;
            double pda = 1631.0/383163.0;
            double pdb = 1.0/383163.0;
            double pdc = 4.0/383163.0;
            double pdd = 16.0/383163.0;
            double pde = 3270.0/383163.0;
            double pdg = 2.0/383163.0;
            double pdh = 5.0/383163.0;
            double pdi = 1628.0/383163.0;
            double pdj = 3.0/383163.0;
            double pdk = 3.0/383163.0;
            double pdl = 7.0/383163.0;
            double pdm = 13.0/383163.0;
            double pdn = 17.0/383163.0;
            double pdo = 783.0/383163.0;
            double pdr = 643.0/383163.0;
            double pds = 207.0/383163.0;
            double pdt = 2.0/383163.0;
            double pdu = 948.0/383163.0;
            double pdv = 20.0/383163.0;
            double pdw = 2.0/383163.0;
            double pdy = 14.0/383163.0;
            double pddot = 139.0/383163.0;
            double pdcomma = 135.0/383163.0;
            double pdvacuum = 1484.0/383163.0;
            double pea = 749.0/383163.0;
            double peb = 207.0/383163.0;
            double pec = 1687.0/383163.0;
            double ped = 427.0/383163.0;
            double pee = 851.0/383163.0;
            double pef = 369.0/383163.0;
            double peg = 788.0/383163.0;
            double peh = 73.0/383163.0;
            double pei = 765.0/383163.0;
            double pej = 159.0/383163.0;
            double pek = 14.0/383163.0;
            double pel = 2079.0/383163.0;
            double pem = 1987.0/383163.0;
            double pen = 3527.0/383163.0;
            double peo = 58.0/383163.0;
            double pep = 1083.0/383163.0;
            double peq = 93.0/383163.0;
            double per = 2982.0/383163.0;
            double pes = 3254.0/383163.0;
            double pet = 2975.0/383163.0;
            double peu = 2153.0/383163.0;
            double pev = 980.0/383163.0;
            double pew = 3.0/383163.0;
            double pex = 512.0/383163.0;
            double pey = 15.0/383163.0;
            double pez = 550.0/383163.0;
            double pedot = 2328.0/383163.0;
            double pecomma = 1578.0/383163.0;
            double pevacuum = 4445.0/383163.0;
            double pfa = 1100.0/383163.0;
            double pfb = 5.0/383163.0;
            double pfe = 677.0/383163.0;
            double pff = 493.0/383163.0;
            double pfh = 1.0/383163.0;
            double pfi = 838.0/383163.0;
            double pfj = 18.0/383163.0;
            double pfl = 226.0/383163.0;
            double pfo = 536.0/383163.0;
            double pfr = 318.0/383163.0;
            double pfs = 29.0/383163.0;
            double pft = 126.0/383163.0;
            double pfu = 207.0/383163.0;
            double pfdot = 29.0/383163.0;
            double pfcomma = 26.0/383163.0;
            double pfvacuum = 184.0/383163.0;
            double pga = 839.0/383163.0;
            double pgb = 4.0/383163.0;
            double pgd = 29.0/383163.0;
            double pge = 1487.0/383163.0;
            double pgg = 33.0/383163.0;
            double pgh = 23.0/383163.0;
            double pgi = 292.0/383163.0;
            double pgj = 2.0/383163.0;
            double pgl = 185.0/383163.0;
            double pgm = 11.0/383163.0;
            double pgn = 457.0/383163.0;
            double pgo = 157.0/383163.0;
            double pgr = 528.0/383163.0;
            double pgs = 25.0/383163.0;
            double pgt = 170.0/383163.0;
            double pgu = 322.0/383163.0;
            double pgv = 17.0/383163.0;
            double pgy = 14.0/383163.0;
            double pgz = 1.0/383163.0;
            double pgdot = 58.0/383163.0;
            double pgcomma = 42.0/383163.0;
            double pgvacuum = 188.0/383163.0; 
            double pha = 2016.0/383163.0;
            double phe = 1233.0/383163.0;
            double phi = 469.0/383163.0;
            double phl = 5.0/383163.0;
            double phm = 7.0/383163.0;
            double phn = 44.0/383163.0;
            double pho = 1181.0/383163.0;
            double phr = 38.0/383163.0;
            double pht = 12.0/383163.0;
            double phu = 154.0/383163.0;
            double phv = 1.0/383163.0;
            double phy = 30.0/383163.0;
            double phdot = 3.0/383163.0;
            double phcomma = 17.0/383163.0;
            double phvacuum = 93.0/383163.0;
            double pia = 614.0/383163.0;
            double pib = 271.0/383163.0;
            double pic = 781.0/383163.0;
            double pid = 672.0/383163.0;
            double pie = 2246.0/383163.0;
            double pif = 279.0/383163.0;
            double pig = 779.0/383163.0;
            double pih = 12.0/383163.0;
            double pii = 3.0/383163.0;
            double pij = 4.0/383163.0;
            double pik = 109.0/383163.0;
            double pil = 2455.0/383163.0;
            double pim = 727.0/383163.0;
            double pin = 2280.0/383163.0;
            double pio = 1000.0/383163.0;
            double pip = 185.0/383163.0;
            double piq = 543.0/383163.0;
            double pir = 1980.0/383163.0;
            double pis = 2597.0/383163.0;
            double pit = 3046.0/383163.0;
            double piu = 38.0/383163.0;
            double piv = 533.0/383163.0;
            double pix = 293.0/383163.0;
            double piz = 18.0/383163.0;
            double pidot = 352.0/383163.0;
            double picomma = 356.0/383163.0;
            double pivacuum = 2124.0/383163.0;   
            double pja = 337.0/383163.0;
            double pje = 959.0/383163.0;
            double pji = 9.0/383163.0;
            double pjo = 661.0/383163.0;
            double pju = 351.0/383163.0;
            double pjdot = 1.0/383163.0;
            double pjvacuum = 302.0/383163.0;
            double pka = 440.0/383163.0;
            double pke = 298.0/383163.0;
            double pkh = 2.0/383163.0;
            double pki = 54.0/383163.0;
            double pkj = 28.0/383163.0;
            double pkk = 21.0/383163.0;
            double pkl = 2.0/383163.0;
            double pkm = 1.0/383163.0;
            double pkn = 16.0/383163.0;
            double pko = 66.0/383163.0;
            double pkp = 1.0/383163.0;
            double pkr = 26.0/383163.0;
            double pks = 23.0/383163.0;
            double pkt = 4.0/383163.0;
            double pku = 8.0/383163.0;
            double pkv = 17.0/383163.0;
            double pky = 3.0/383163.0;
            double pkdot = 30.0/383163.0;
            double pkcomma = 38.0/383163.0;
            double pkvacuum = 93.0/383163.0; 
            double pla = 2685.0/383163.0;
            double plb = 13.0/383163.0;
            double plc = 52.0/383163.0;
            double pld = 38.0/383163.0;
            double ple = 3562.0/383163.0;
            double plf = 38.0/383163.0;
            double plg = 67.0/383163.0;
            double plh = 32.0/383163.0;
            double pli = 1271.0/383163.0;
            double plj = 2.0/383163.0;
            double plk = 17.0/383163.0;
            double pll = 1940.0/383163.0;
            double plm = 193.0/383163.0;
            double pln = 1.0/383163.0;
            double plo = 994.0/383163.0;
            double plp = 19.0/383163.0;
            double plq = 370.0/383163.0;
            double plr = 9.0/383163.0;
            double pls = 510.0/383163.0;
            double plt = 116.0/383163.0;
            double plu = 1301.0/383163.0;
            double plv = 146.0/383163.0;
            double ply = 64.0/383163.0;
            double plz = 1.0/383163.0;
            double pldot = 299.0/383163.0;
            double plcomma = 181.0/383163.0;
            double plvacuum = 2546.0/383163.0; 
            double pma = 2071.0/383163.0;
            double pmb = 541.0/383163.0;
            double pmd = 1.0/383163.0;
            double pme = 2605.0/383163.0;
            double pmi = 915.0/383163.0;
            double pml = 2.0/383163.0;
            double pmm = 1281.0/383163.0;
            double pmn = 26.0/383163.0;
            double pmo = 1050.0/383163.0;
            double pmp = 985.0/383163.0;
            double pms = 27.0/383163.0;
            double pmu = 308.0/383163.0;
            double pmw = 3.0/383163.0;
            double pmy = 11.0/383163.0;
            double pmdot = 150.0/383163.0;
            double pmcomma = 52.0/383163.0;
            double pmvacuum = 303.0/383163.0;   
            double pna = 1109.0/383163.0;
            double pnb = 1.0/383163.0;
            double pnc = 1181.0/383163.0;
            double pnd = 1906.0/383163.0;
            double pne = 2633.0/383163.0;
            double pnf = 320.0/383163.0;
            double png = 682.0/383163.0;
            double pnh = 159.0/383163.0;
            double pni = 731.0/383163.0;
            double pnj = 45.0/383163.0;
            double pnk = 23.0/383163.0;
            double pnl = 41.0/383163.0;
            double pnm = 9.0/383163.0;
            double pnn = 975.0/383163.0;
            double pno = 1120.0/383163.0;
            double pnp = 1.0/383163.0;
            double pnq = 226.0/383163.0;
            double pnr = 122.0/383163.0;
            double pns = 2027.0/383163.0;
            double pnt = 3026.0/383163.0;
            double pnu = 453.0/383163.0;
            double pnv = 253.0/383163.0;
            double pnx = 3.0/383163.0;
            double pny = 36.0/383163.0;
            double pnz = 26.0/383163.0;
            double pndot = 739.0/383163.0;
            double pncomma = 549.0/383163.0;
            double pnvacuum = 3277.0/383163.0;   
            double poa = 11.0/383163.0;
            double pob = 357.0/383163.0;
            double poc = 454.0/383163.0;
            double pod = 206.0/383163.0;
            double poe = 194.0/383163.0;
            double pof = 159.0/383163.0;
            double pog = 140.0/383163.0;
            double poh = 44.0/383163.0;
            double poi = 2140.0/383163.0;
            double poj = 13.0/383163.0;
            double pok = 57.0/383163.0;
            double pol = 1041.0/383163.0;
            double pom = 1594.0/383163.0;
            double pon = 3145.0/383163.0;
            double poo = 72.0/383163.0;
            double pop = 520.0/383163.0;
            double poq = 81.0/383163.0;
            double por = 1589.0/383163.0;
            double pos = 972.0/383163.0;
            double pot = 847.0/383163.0;
            double pou = 3281.0/383163.0;
            double pov = 100.0/383163.0;
            double pow = 26.0/383163.0;
            double pox = 39.0/383163.0;
            double poy = 281.0/383163.0;
            double podot = 99.0/383163.0;
            double pocomma = 59.0/383163.0;
            double povacuum = 283.0/383163.0;
            double ppa = 2253.0/383163.0;
            double ppc = 22.0/383163.0;
            double ppe = 1765.0/383163.0;
            double pph = 264.0/383163.0;
            double ppi = 669.0/383163.0;
            double ppk = 6.0/383163.0;
            double ppl = 1069.0/383163.0;
            double ppn = 10.0/383163.0;
            double ppo = 2046.0/383163.0;
            double ppp = 617.0/383163.0;
            double ppr = 1513.0/383163.0;
            double pps = 386.0/383163.0;
            double ppt = 195.0/383163.0;
            double ppu = 544.0/383163.0;
            double ppy = 4.0/383163.0;
            double ppdot = 77.0/383163.0;
            double ppcomma = 41.0/383163.0;
            double ppvacuum = 403.0/383163.0;
            double pqi = 1.0/383163.0;
            double pqu = 3014.0/383163.0;
            double pqdot= 3.0/383163.0;
            double pqcomma = 1.0/383163.0;
            double pqvacuum = 36.0/383163.0;
            double pra = 2094.0/383163.0;
            double prb = 63.0/383163.0;
            double prc = 582.0/383163.0;
            double prd = 932.0/383163.0;
            double pre = 3586.0/383163.0;
            double prf = 79.0/383163.0;
            double prg = 298.0/383163.0;
            double prh = 11.0/383163.0;
            double pri = 2073.0/383163.0;
            double prj = 1.0/383163.0;
            double prk = 28.0/383163.0;
            double prl = 202.0/383163.0;
            double prm = 551.0/383163.0;
            double prn = 511.0/383163.0;
            double pro = 1672.0/383163.0;
            double prp = 156.0/383163.0;
            double prq = 244.0/383163.0;
            double prr = 1960.0/383163.0;
            double prs = 1343.0/383163.0;
            double prt = 1241.0/383163.0;
            double pru = 502.0/383163.0;
            double prv = 414.0/383163.0;
            double prw = 2.0/383163.0;
            double pry = 1376.0/383163.0;
            double prz = 2.0/383163.0;
            double prdot = 806.0/383163.0;
            double prcomma = 569.0/383163.0;
            double prvacuum = 2751.0/383163.0;
            double psa = 1977.0/383163.0;
            double psb = 10.0/383163.0;
            double psc = 432.0/383163.0;
            double psd = 2.0/383163.0;
            double pse = 2630.0/383163.0;
            double psf = 31.0/383163.0;
            double psg = 8.0/383163.0;
            double psh = 54.0/383163.0;
            double psi = 1478.0/383163.0;
            double psj = 4.0/383163.0;
            double psk = 208.0/383163.0;
            double psl = 87.0/383163.0;
            double psm = 72.0/383163.0;
            double psn = 8.0/383163.0;
            double pso = 1887.0/383163.0;
            double psp = 599.0/383163.0;
            double psq = 407.0/383163.0;
            double psr = 1.0/383163.0;
            double pss = 1782.0/383163.0;
            double pst = 1833.0/383163.0;
            double psu = 1516.0/383163.0;
            double psv = 58.0/383163.0;
            double psw = 4.0/383163.0;
            double psy = 153.0/383163.0;
            double psdot = 1300.0/383163.0;
            double pscomma = 1041.0/383163.0;
            double psvacuum = 3863.0/383163.0;
            double pta = 2061.0/383163.0;
            double ptb = 6.0/383163.0;
            double ptc = 11.0/383163.0;
            double pte = 2934.0/383163.0;
            double pth = 313.0/383163.0;
            double pti = 1665.0/383163.0;
            double ptj = 3.0/383163.0;
            double ptk = 8.0/383163.0;
            double ptl = 152.0/383163.0;
            double ptm = 3.0/383163.0;
            double ptn = 7.0/383163.0;
            double pto = 1667.0/383163.0;
            double ptr = 2220.0/383163.0;
            double pts = 588.0/383163.0;
            double ptt = 1060.0/3383163.0;
            double ptu = 1046.0/383163.0;
            double ptv = 17.0/383163.0;
            double ptw = 2.0/383163.0;
            double pty = 74.0/383163.0;
            double ptz = 1.0/383163.0;
            double ptdot = 1022.0/383163.0;
            double ptcomma = 761.0/383163.0;
            double ptvacuum = 3997.0/383163.0;  
            double pua = 723.0/383163.0;
            double pub = 198.0/383163.0;
            double puc = 517.0/383163.0;
            double pud = 265.0/383163.0;
            double pue = 2387.0/383163.0;
            double puf = 197.0/383163.0;
            double pug = 149.0/383163.0;
            double puh = 20.0/383163.0;
            double pui = 1994.0/383163.0;
            double puj = 188.0/383163.0;
            double puk = 14.0/383163.0;
            double pul = 1009.0/383163.0;
            double pum = 375.0/383163.0;
            double pun = 2208.0/383163.0;
            double puo = 266.0/383163.0;
            double pup = 553.0/383163.0;
            double puq = 27.0/383163.0;
            double pur = 2748.0/383163.0;
            double pus = 1875.0/383163.0;
            double put = 1804.0/383163.0;
            double puv = 916.0/383163.0;
            double pux = 1095.0/383163.0;
            double puy = 81.0/383163.0;
            double puz = 21.0/383163.0;
            double pudot = 181.0/383163.0;
            double pucomma = 165.0/383163.0;
            double puvacuum = 2620.0/383163.0; 
            double pva = 1636.0/383163.0;
            double pvd = 5.0/383163.0;
            double pve = 2089.0/383163.0;
            double pvg = 2.0/383163.0;
            double pvi = 1205.0/383163.0;
            double pvl = 1.0/383163.0;
            double pvo = 1549.0/383163.0;
            double pvr = 449.0/383163.0;
            double pvu = 179.0/383163.0;
            double pvdot = 7.0/383163.0;
            double pvcomma = 1.0/383163.0;
            double pvvacuum = 11.0/383163.0;  
            double pwa = 13.0/383163.0;
            double pwb = 1.0/383163.0;
            double pwd = 1.0/383163.0;
            double pwe = 22.0/383163.0;
            double pwh = 7.0/383163.0;
            double pwi = 10.0/383163.0;
            double pwl = 1.0/383163.0;
            double pwn = 3.0/383163.0;
            double pwo = 10.0/383163.0;
            double pwdot = 4.0/383163.0;
            double pwcomma = 4.0/383163.0;
            double pwvacuum = 9.0/383163.0;
            double pxa = 105.0/383163.0;
            double pxc = 90.0/383163.0;
            double pxe = 72.0/383163.0;
            double pxh = 7.0/383163.0;
            double pxi = 81.0/383163.0;
            double pxo = 6.0/383163.0;
            double pxp = 205.0/383163.0;
            double pxq = 12.0/383163.0;
            double pxt = 76.0/383163.0;
            double pxu = 7.0/383163.0;
            double pxy = 15.0/383163.0;
            double pxdot = 193.0/383163.0;
            double pxcomma = 153.0/383163.0;
            double pxvacuum = 1080.0/383163.0;
            double pya = 282.0/383163.0;
            double pyb = 2.0/383163.0;
            double pyc = 34.0/383163.0;
            double pyd = 13.0/383163.0;
            double pye = 428.0/383163.0;
            double pyg = 61.0/383163.0;
            double pyj = 2.0/383163.0;
            double pyl = 86.0/383163.0;
            double pym = 35.0/383163.0;
            double pyn = 45.0/383163.0;
            double pyo = 37.0/383163.0;
            double pyp = 59.0/383163.0;
            double pyr = 13.0/383163.0;
            double pys = 110.0/383163.0;
            double pyt = 15.0/383163.0;
            double pyu = 2.0/383163.0;
            double pyv = 5.0/383163.0;
            double pyx = 1.0/383163.0;
            double pydot = 324.0/383163.0;
            double pycomma = 101.0/383163.0;
            double pyvacuum = 1339.0/383163.0;
            double pza = 24.0/383163.0;
            double pze = 60.0/383163.0;
            double pzh = 1.0/383163.0;
            double pzi = 23.0/383163.0;
            double pzl = 3.0/383163.0;
            double pzo = 27.0/383163.0;
            double pzu = 1.0/383163.0;
            double pzy = 1.0/383163.0;
            double pzz = 6.0/383163.0;
            double pzdot = 26.0/383163.0;
            double pzcomma = 36.0/383163.0;
            double pzvacuum = 523.0/383163.0;
            double pdotdot = 1.0/383163.0;
            double pdotcomma = 1.0/383163.0;
            double pdotvacuum = 523.0/383163.0;
            double pcommavacuum = 3239.0/383163.0;
            double pvacuuma = 3545.0/383163.0;
            double pvacuumb = 1949.0/383163.0;
            double pvacuumc = 3322.0/383163.0;
            double pvacuumd = 3656.0/383163.0;
            double pvacuume = 3725.0/383163.0;
            double pvacuumf = 1874.0/383163.0;
            double pvacuumg = 1047.0/383163.0;
            double pvacuumh = 1869.0/383163.0;
            double pvacuumi = 2355.0/383163.0;
            double pvacuumj = 1593.0/383163.0;
            double pvacuumk = 328.0/383163.0;
            double pvacuuml = 3593.0/383163.0;
            double pvacuumm = 2651.0/383163.0;
            double pvacuumn = 2177.0/383163.0;
            double pvacuumo = 1670.0/383163.0;
            double pvacuump = 3377.0/383163.0;
            double pvacuumq = 2645.0/383163.0;
            double pvacuumr = 2498.0/383163.0;
            double pvacuums = 3427.0/383163.0;
            double pvacuumt = 2799.0/383163.0;
            double pvacuumu = 2094.0/383163.0;
            double pvacuumv = 2285.0/383163.0;
            double pvacuumw = 41.0/383163.0;
            double pvacuumx = 4.0/383163.0;
            double pvacuumy = 620.0/383163.0;
            double pvacuumz = 28.0/383163.0;
            double pvacuumdot = 108.0/383163.0;
            double pvacuumcomma = 278.0/383163.0;  
            double pvacuumvacuum = 3793.0/383163.0;   

            double sumprobability = paa+pab+pac+pad+pae+paf+pag+pah+pai+paj+pak+pal+pam+pan+pao+pap+paq+par+pas+pat+pau+pav+paw+pax+pay+paz+padot+pacomma+pavacuum
                                   +pba+pbb+pbc+pbd+pbe+pbi+pbj+pbl+pbm+pbo+pbr+pbs+pbt+pbu+pby+pbdot+pbcomma+pbvacuum
                                   +pca+pcc+pcd+pce+pch+pci+pck+pcl+pcm+pco+pcq+pcr+pcs+pct+pcu+pcv+pcy+pcdot+pccomma+pcvacuum
                                   +pda+pdb+pdc+pdd+pde+pdg+pdh+pdi+pdj+pdk+pdl+pdm+pdn+pdo+pdr+pds+pdt+pdu+pdv+pdw+pdy+pddot+pdcomma+pdvacuum
                                   +pea+peb+pec+ped+pee+pef+peg+peh+pei+pej+pek+pel+pem+pen+peo+pep+peq+per+pes+pet+peu+pev+pew+pex+pey+pez+pedot+pecomma+pevacuum
                                   +pfa+pfb+pfe+pff+pfh+pfi+pfj+pfl+pfo+pfr+pfs+pft+pfu+pfdot+pfcomma+pfvacuum
                                   +pga+pgb+pgd+pge+pgg+pgh+pgi+pgj+pgl+pgm+pgn+pgo+pgr+pgs+pgt+pgu+pgv+pgy+pgz+pgdot+pgcomma+pgvacuum
                                   +pha+phe+phi+phl+phm+phn+pho+phr+pht+phu+phv+phy+phdot+phcomma+phvacuum
                                   +pia+pib+pic+pid+pie+pif+pig+pih+pii+pij+pik+pil+pim+pin+pio+pip+piq+pir+pis+pit+piu+piv+pix+piz+pidot+picomma+pivacuum
                                   +pja+pje+pji+pjo+pju+pjdot+pjvacuum
                                   +pka+pke+pkh+pki+pkj+pkk+pkl+pkm+pkn+pko+pkp+pkr+pks+pkt+pku+pkv+pky+pkdot+pkcomma+pkvacuum
                                   +pla+plb+plc+pld+ple+plf+plg+plh+pli+plj+plk+pll+plm+pln+plo+plp+plq+plr+pls+plt+plu+plv+ply+plz+pldot+plcomma+plvacuum
                                   +pma+pmb+pmd+pme+pmi+pml+pmm+pmn+pmo+pmp+pms+pmu+pmw+pmy+pmdot+pmcomma+pmvacuum
                                   +pna+pnb+pnc+pnd+pne+pnf+png+pnh+pni+pnj+pnk+pnl+pnm+pnn+pno+pnp+pnq+pnr+pns+pnt+pnu+pnv+pnx+pny+pnz+pndot+pncomma+pnvacuum
                                   +poa+pob+poc+pod+poe+pof+pog+poh+poi+poj+pok+pol+pom+pon+poo+pop+poq+por+pos+pot+pou+pov+pow+pox+poy+podot+pocomma+povacuum
                                   +ppa+ppc+ppe+pph+ppi+ppk+ppl+ppn+ppo+ppp+ppr+pps+ppt+ppu+ppy+ppdot+ppcomma+ppvacuum
                                   +pqi+pqu+pqdot+pqcomma+pqvacuum
                                   +pra+prb+prc+prd+pre+prf+prg+prh+pri+prj+prk+prl+prm+prn+pro+prp+prq+prr+prs+prt+pru+prv+prw+pry+prz+prdot+prcomma+prvacuum
                                   +psa+psb+psc+psd+pse+psf+psg+psh+psi+psj+psk+psl+psm+psn+pso+psp+psq+psr+pss+pst+psu+psv+psw+psy+psdot+pscomma+psvacuum
                                   +pta+ptb+ptc+pte+pth+pti+ptj+ptk+ptl+ptm+ptn+pto+ptr+pts+ptt+ptu+ptv+ptw+pty+ptz+ptdot+ptcomma+ptvacuum
                                   +pua+pub+puc+pud+pue+puf+pug+puh+pui+puj+puk+pul+pum+pun+puo+pup+puq+pur+pus+put+puv+pux+puy+puz+pudot+pucomma+puvacuum
                                   +pva+pvd+pve+pvg+pvi+pvl+pvo+pvr+pvu+pvdot+pvcomma+pvvacuum
                                   +pwa+pwb+pwd+pwe+pwh+pwi+pwl+pwn+pwo+pwdot+pwcomma+pwvacuum
                                   +pxa+pxc+pxe+pxh+pxi+pxo+pxp+pxq+pxt+pxu+pxy+pxdot+pxcomma+pxvacuum
                                   +pya+pyb+pyc+pyd+pye+pyg+pyj+pyl+pym+pyn+pyo+pyp+pyr+pys+pyt+pyu+pyv+pyx+pydot+pycomma+pyvacuum
                                   +pza+pze+pzh+pzi+pzl+pzo+pzu+pzy+pzz+pzdot+pzcomma+pzvacuum
                                   +pdotdot+pdotcomma+pdotvacuum
                                   +pcommavacuum
                                   +pvacuuma+pvacuumb+pvacuumc+pvacuumd+pvacuume+pvacuumf+pvacuumg+pvacuumh+pvacuumi+pvacuumj+pvacuumk+pvacuuml+pvacuumm+pvacuumn+pvacuumo+pvacuump+pvacuumq+pvacuumr+pvacuums+pvacuumt+pvacuumu+pvacuumv+pvacuumw+pvacuumx+pvacuumy+pvacuumz+pvacuumdot+pvacuumcomma+pvacuumvacuum;
            
            System.out.println("\nP(aa) = 16.0/383163.0 = " + paa );
            System.out.println("\nP(ab) = 549.0/383163.0 = " + pab );
            System.out.println("\nP(ac) = 1026.0/383163.0 = " + pac );
            System.out.println("\nP(ad) = 360.0/383163.0 = " + pad );
            System.out.println("\nP(ae) = 12.0/383163.0 = " + pae );
            System.out.println("\nP(af) = 354.0/383163.0 = " + paf );
            System.out.println("\nP(ag) = 878.0/383163.0 = " + pag );
            System.out.println("\nP(ah) = 84.0/383163.0 = " + pah );
            System.out.println("\nP(ai) = 3136.0/383163.0 = " + pai );
            System.out.println("\nP(aj) = 50.0/383163.0 = " + paj );
            System.out.println("\nP(ak) = 153.0/383163.0 = " + pak );
            System.out.println("\nP(al) = 1386.0/383163.0 = " + pal );
            System.out.println("\nP(am) = 696.0/383163.0 = " + pam );
            System.out.println("\nP(an) = 2653.0/383163.0 = " + pan );
            System.out.println("\nP(ao) = 11.0/383163.0 = " + pao );
            System.out.println("\nP(ap) = 956.0/383163.0 = " + pap );
            System.out.println("\nP(aq) = 205.0/383163.0 = " + paq );
            System.out.println("\nP(ar) = 2816.0/383163.0 = " + par );
            System.out.println("\nP(as) = 2115.0/383163.0 = " + pas );
            System.out.println("\nP(at) = 1566.0/383163.0 = " + pat );
            System.out.println("\nP(au) = 1933.0/383163.0 = " + pau );
            System.out.println("\nP(av) = 1804.0/383163.0 = " + pav );
            System.out.println("\nP(aw) = 1.0/383163.0 = " + paw );
            System.out.println("\nP(ax) = 28.0/383163.0 = " + pax );
            System.out.println("\nP(ay) = 212.0/383163.0 = " + pay );
            System.out.println("\nP(az) = 56.0/383163.0 = " + paz );
            System.out.println("\nP(a.) = 374.0/383163.0 = " + padot );
            System.out.println("\nP(a,) = 325.0/383163.0 = " + pacomma );
            System.out.println("\nP(avacuum) = 3687.0/383163.0 = " + pavacuum );
            System.out.println("\nP(ba) = 580.0/383163.0 = " + pba );
            System.out.println("\nP(bb) = 16.0/383163.0 = " + pbb );
            System.out.println("\nP(bc) = 1.0/383163.0 = " + pbc );
            System.out.println("\nP(bd) = 2.0/383163.0 = " + pbd );
            System.out.println("\nP(be) = 611.0/383163.0 = " + pbe );
            System.out.println("\nP(bi) = 683.0/383163.0 = " + pbi );
            System.out.println("\nP(bj) = 101.0/383163.0 = " + pbj );
            System.out.println("\nP(bl) = 800.0/383163.0 = " + pbl );
            System.out.println("\nP(bm) = 3.0/383163.0 = " + pbm );
            System.out.println("\nP(bo) = 923.0/383163.0 = " + pbo );
            System.out.println("\nP(br) = 653.0/383163.0 = " + pbr );
            System.out.println("\nP(bs) = 129.0/383163.0 = " + pbs );
            System.out.println("\nP(bt) = 34.0/383163.0 = " + pbt );
            System.out.println("\nP(bu) = 197.0/383163.0 = " + pbu );
            System.out.println("\nP(by) = 24.0/383163.0 = " + pby );
            System.out.println("\nP(b.) = 3.0/383163.0 = " + pbdot );
            System.out.println("\nP(b,) = 3.0/383163.0 = " + pbcomma );
            System.out.println("\nP(bvacuum) = 31.0/383163.0 = " + pbvacuum );
            System.out.println("\nP(ca) = 1293.0/383163.0 = " + pca );
            System.out.println("\nP(cc) = 283.0/383163.0 = " + pcc );
            System.out.println("\nP(cd) = 6.0/383163.0 = " + pcd );
            System.out.println("\nP(ce) = 2081.0/383163.0 = " + pce );
            System.out.println("\nP(ch) = 1732.0/383163.0 = " + pch );
            System.out.println("\nP(ci) = 973.0/383163.0 = " + pci );
            System.out.println("\nP(ck) = 136.0/383163.0 = " + pck );
            System.out.println("\nP(cl) = 526.0/383163.0 = " + pcl );
            System.out.println("\nP(cm) = 1.0/383163.0 = " + pcm );
            System.out.println("\nP(co) = 2265.0/383163.0 = " + pco );
            System.out.println("\nP(cq) = 30.0/383163.0 = " + pcq );
            System.out.println("\nP(cr) = 717.0/383163.0 = " + pcr );
            System.out.println("\nP(cs) = 43.0/383163.0 = " + pcs );
            System.out.println("\nP(ct) = 586.0/383163.0 = " + pct );
            System.out.println("\nP(cu) = 611.0/383163.0 = " + pcu );
            System.out.println("\nP(cv) = 2.0/383163.0 = " + pcv );
            System.out.println("\nP(cy) = 12.0/383163.0 = " + pcy );
            System.out.println("\nP(c.) = 53.0/383163.0 = " + pcdot );
            System.out.println("\nP(c,) = 53.0/383163.0 = " + pccomma );
            System.out.println("\nP(cvacuum) = 1233.0/383163.0 = " + pcvacuum );
            System.out.println("\nP(da) = 1631.0/383163.0 = " + pda );
            System.out.println("\nP(db) = 1.0/383163.0 = " + pdb );
            System.out.println("\nP(dc) = 4.0/383163.0 = " + pdc );
            System.out.println("\nP(dd) = 16.0/383163.0 = " + pdd );
            System.out.println("\nP(de) = 3270.0/383163.0 = " + pde );
            System.out.println("\nP(dg) = 2.0/383163.0 = " + pdg );
            System.out.println("\nP(dh) = 5.0/383163.0 = " + pdh );
            System.out.println("\nP(di) = 1628.0/383163.0 = " + pdi );
            System.out.println("\nP(dj) = 3.0/383163.0 = " + pdj );
            System.out.println("\nP(dk) = 3.0/383163.0 = " + pdk);
            System.out.println("\nP(dl) = 7.0/383163.0 = " + pdl );
            System.out.println("\nP(dm) = 13.0/383163.0 = " + pdm );
            System.out.println("\nP(dn) = 17.0/383163.0 = " + pdn );
            System.out.println("\nP(do) = 783.0/383163.0 = " + pdo );
            System.out.println("\nP(dr) = 643.0/383163.0 = " + pdr );
            System.out.println("\nP(ds) = 207.0/383163.0 = " + pds );
            System.out.println("\nP(dt) = 2.0/383163.0 = " + pdt );
            System.out.println("\nP(du) = 948.0/383163.0 = " + pdu );
            System.out.println("\nP(dv) = 20.0/383163.0 = " + pdv );
            System.out.println("\nP(dw) = 2.0/383163.0 = " + pdw );
            System.out.println("\nP(dy) = 14.0/383163.0 = " + pdy );
            System.out.println("\nP(d.) = 139.0/383163.0 = " + pddot );
            System.out.println("\nP(d,) = 135.0/383163.0 = " + pdcomma );
            System.out.println("\nP(dvacuum) = 1484.0/383163.0 = " + pdvacuum );
            System.out.println("\nP(ea) = 749.0/383163.0 = " + pea );
            System.out.println("\nP(eb) = 207.0/383163.0 = " + peb );
            System.out.println("\nP(ec) = 1687.0/383163.0 = " + pec );
            System.out.println("\nP(ed) = 427.0/383163.0 = " + ped );
            System.out.println("\nP(ee) = 851.0/383163.0 = " + pee );
            System.out.println("\nP(ef) = 369.0/383163.0 = " + pef );
            System.out.println("\nP(eg) = 788.0/383163.0 = " + peg );
            System.out.println("\nP(eh) = 73.0/383163.0 = " + peh );
            System.out.println("\nP(ei) = 765.0/383163.0 = " + pei );
            System.out.println("\nP(ej) = 159.0/383163.0 = " + pej );
            System.out.println("\nP(ek) = 14.0/383163.0 = " + pek );
            System.out.println("\nP(el) = 2079.0/383163.0 = " + pel );
            System.out.println("\nP(em) = 1987.0/383163.0 = " + pem );
            System.out.println("\nP(en) = 3527.0/383163.0 = " + pen );
            System.out.println("\nP(eo) = 58.0/383163.0 = " + peo );
            System.out.println("\nP(ep) = 1083.0/383163.0 = " + pep );
            System.out.println("\nP(eq) = 93.0/383163.0 = " + peq );
            System.out.println("\nP(er) = 2982.0/383163.0 = " + per );
            System.out.println("\nP(es) = 3254.0/383163.0 = " + pes );
            System.out.println("\nP(et) = 2975.0/383163.0 = " + pet );
            System.out.println("\nP(eu) = 2153.0/383163.0 = " + peu );
            System.out.println("\nP(ev) = 980.0/383163.0 = " + pev );
            System.out.println("\nP(ew) = 3.0/383163.0 = " + pew );
            System.out.println("\nP(ex) = 512.0/383163.0 = " + pex );
            System.out.println("\nP(ey) = 15.0/383163.0 = " + pey );
            System.out.println("\nP(ez) = 550.0/383163.0 = " + pez );
            System.out.println("\nP(e.) = 2328.0/383163.0 = " + pedot );
            System.out.println("\nP(e,) = 1578.0/383163.0 = " + pecomma );
            System.out.println("\nP(evacuum) = 4445.0/383163.0 = " + pevacuum );
            System.out.println("\nP(fa) = 1100.0/383163.0 = " + pfa );
            System.out.println("\nP(fb) = 5.0/383163.0 = " + pfb );
            System.out.println("\nP(fe) = 677.0/383163.0 = " + pfe );
            System.out.println("\nP(ff) = 493.0/383163.0 = " + pff );
            System.out.println("\nP(fh) = 1.0/383163.0 = " + pfh );
            System.out.println("\nP(fi) = 838.0/383163.0 = " + pfi );
            System.out.println("\nP(fj) = 18.0/383163.0 = " + pfj );
            System.out.println("\nP(fl) = 226.0/383163.0 = " + pfl );
            System.out.println("\nP(fo) = 536.0/383163.0 = " + pfo );
            System.out.println("\nP(fr) = 318.0/383163.0 = " + pfr );
            System.out.println("\nP(fs) = 29.0/383163.0 = " + pfs );
            System.out.println("\nP(ft) = 126.0/383163.0 = " + pft );
            System.out.println("\nP(fu) = 207.0/383163.0 = " + pfu );
            System.out.println("\nP(f.) = 29.0/383163.0 = " + pfdot );
            System.out.println("\nP(f,) = 26.0/383163.0 = " + pfcomma );
            System.out.println("\nP(fvacuum) = 184.0/383163.0 = " + pfvacuum );
            System.out.println("\nP(ga) = 839.0/383163.0 = " + pga );
            System.out.println("\nP(gb) = 4.0/383163.0 = " + pgb );
            System.out.println("\nP(gd) = 29.0/383163.0 = " + pgd );
            System.out.println("\nP(ge) = 1487.0/383163.0 = " + pge );
            System.out.println("\nP(gg) = 33.0/383163.0 = " + pgg );
            System.out.println("\nP(gh) = 23.0/383163.0 = " + pgh );
            System.out.println("\nP(gi) = 292.0/383163.0 = " + pgi );
            System.out.println("\nP(gj) = 2.0/383163.0 = " + pgj );
            System.out.println("\nP(gl) = 185.0/383163.0 = " + pgl );
            System.out.println("\nP(gm) = 11.0/383163.0 = " + pgm );
            System.out.println("\nP(gn) = 457.0/383163.0 = " + pgn );
            System.out.println("\nP(go) = 157.0/383163.0 = " + pgo );
            System.out.println("\nP(gr) = 528.0/383163.0 = " + pgr );
            System.out.println("\nP(gs) = 25.0/383163.0 = " + pgs );
            System.out.println("\nP(gt) = 170.0/383163.0 = " + pgt );
            System.out.println("\nP(gu) = 322.0/383163.0 = " + pgu );
            System.out.println("\nP(gv) = 17.0/383163.0 = " + pgv );
            System.out.println("\nP(gy) = 14.0/383163.0 = " + pgy );
            System.out.println("\nP(gz) = 1.0/383163.0 = " + pgz );
            System.out.println("\nP(g.) = 58.0/383163.0 = " + pgdot );
            System.out.println("\nP(g,) = 42.0/383163.0 = " + pgcomma );
            System.out.println("\nP(gvacuum) = 188.0/383163.0 = " + pgvacuum );
            System.out.println("\nP(ha) = 2016.0/383163.0 = " + pha );
            System.out.println("\nP(he) = 1233.0/383163.0 = " + phe );
            System.out.println("\nP(hi) = 469.0/383163.0 = " + phi );
            System.out.println("\nP(hl) = 5.0/383163.0 = " + phl );
            System.out.println("\nP(hm) = 7.0/383163.0 = " + phm );
            System.out.println("\nP(hn) = 44.0/383163.0 = " + phn );
            System.out.println("\nP(ho) = 1181.0/383163.0 = " + pho );
            System.out.println("\nP(hr) = 38.0/383163.0 = " + phr );
            System.out.println("\nP(ht) = 12.0/383163.0 = " + pht );
            System.out.println("\nP(hu) = 154.0/383163.0 = " + phu );
            System.out.println("\nP(hv) = 1.0/383163.0 = " + phv );
            System.out.println("\nP(hy) = 30.0/383163.0 = " + phy );
            System.out.println("\nP(h.) = 3.0/383163.0 = " + phdot );
            System.out.println("\nP(h,) = 17.0/383163.0 = " + phcomma );
            System.out.println("\nP(hvacuum) = 93.0/383163.0 = " + phvacuum );
            System.out.println("\nP(ia) = 614.0/383163.0 = " + pia );
            System.out.println("\nP(ib) = 271.0/383163.0 = " + pib );
            System.out.println("\nP(ic) = 781.0/383163.0 = " + pic );
            System.out.println("\nP(id) = 672.0/383163.0 = " + pid );
            System.out.println("\nP(ie) = 2246.0/383163.0 = " + pie );
            System.out.println("\nP(if) = 279.0/383163.0 = " + pif );
            System.out.println("\nP(ig) = 779.0/383163.0 = " + pig );
            System.out.println("\nP(ih) = 12.0/383163.0 = " + pih );
            System.out.println("\nP(ii) = 3.0/383163.0 = " + pii );
            System.out.println("\nP(ij) = 4.0/383163.0 = " + pij );
            System.out.println("\nP(ik) = 109.0/383163.0 = " + pik );
            System.out.println("\nP(il) = 2455.0/383163.0 = " + pil );
            System.out.println("\nP(im) = 727.0/383163.0 = " + pim );
            System.out.println("\nP(in) = 2280.0/383163.0 = " + pin );
            System.out.println("\nP(io) = 1000.0/383163.0 = " + pio );
            System.out.println("\nP(ip) = 185.0/383163.0 = " + pip );
            System.out.println("\nP(iq) = 543.0/383163.0 = " + piq );
            System.out.println("\nP(ir) = 1980.0/383163.0 = " + pir );
            System.out.println("\nP(is) = 2597.0/383163.0 = " + pis );
            System.out.println("\nP(it) = 3046.0/383163.0 = " + pit );
            System.out.println("\nP(iu) = 38.0/383163.0 = " + piu );
            System.out.println("\nP(iv) = 533.0/383163.0 = " + piv );
            System.out.println("\nP(ix) = 293.0/383163.0 = " + pix );
            System.out.println("\nP(iz) = 18.0/383163.0 = " + piz );
            System.out.println("\nP(i.) = 352.0/383163.0 = " + pidot );
            System.out.println("\nP(i,) = 356.0/383163.0 = " + picomma );
            System.out.println("\nP(ivacuum) = 2124.0/383163.0 = " + pivacuum );
            System.out.println("\nP(ja) = 337.0/383163.0 = " + pja );
            System.out.println("\nP(je) = 959.0/383163.0 = " + pje );
            System.out.println("\nP(ji) = 9.0/383163.0 = " + pji );
            System.out.println("\nP(jo) = 661.0/383163.0 = " + pjo );
            System.out.println("\nP(ju) = 351.0/383163.0 = " + pju );
            System.out.println("\nP(j.) = 1.0/383163.0 = " + pjdot );
            System.out.println("\nP(jvacuum) = 302.0/383163.0 = " + pjvacuum );
            System.out.println("\nP(ka) = 440.0/383163.0 = " + pka );
            System.out.println("\nP(ke) = 298.0/383163.0 = " + pke );
            System.out.println("\nP(kh) = 2.0/383163.0 = " + pkh );
            System.out.println("\nP(ki) = 54.0/383163.0 = " + pki );
            System.out.println("\nP(kj) = 28.0/383163.0 = " + pkj );
            System.out.println("\nP(kk) = 21.0/383163.0 = " + pkk );
            System.out.println("\nP(kl) = 2.0/383163.0 = " + pkl );
            System.out.println("\nP(km) = 1.0/383163.0 = " + pkm );
            System.out.println("\nP(kn) = 16.0/383163.0 = " + pkn );
            System.out.println("\nP(ko) = 66.0/383163.0 = " + pko );
            System.out.println("\nP(kp) = 1.0/383163.0 = " + pkp );
            System.out.println("\nP(kr) = 26.0/383163.0 = " + pkr );
            System.out.println("\nP(ks) = 23.0/383163.0 = " + pks );
            System.out.println("\nP(kt) = 4.0/383163.0 = " + pkt );
            System.out.println("\nP(ku) = 8.0/383163.0 = " + pku );
            System.out.println("\nP(kv) = 17.0/383163.0 = " + pkv );
            System.out.println("\nP(ky) = 3.0/383163.0 = " + pky );
            System.out.println("\nP(k.) = 30.0/383163.0 = " + pkdot );
            System.out.println("\nP(k,) = 38.0/383163.0 = " + pkcomma );
            System.out.println("\nP(kvacuum) = 93.0/383163.0 = " + pkvacuum );
            System.out.println("\nP(la) = 2685.0/383163.0 = " + pla );
            System.out.println("\nP(lb) = 13.0/383163.0 = " + plb );
            System.out.println("\nP(lc) = 52.0/383163.0 = " + plc );
            System.out.println("\nP(ld) = 38.0/383163.0 = " + pld );
            System.out.println("\nP(le) = 3562.0/383163.0 = " + ple );
            System.out.println("\nP(lf) = 38.0/383163.0 = " + plf );
            System.out.println("\nP(lg) = 67.0/383163.0 = " + plg );
            System.out.println("\nP(lh) = 32.0/383163.0 = " + plh );
            System.out.println("\nP(li) = 1271.0/383163.0 = " + pli );
            System.out.println("\nP(lj) = 2.0/383163.0 = " + plj );
            System.out.println("\nP(lk) = 17.0/383163.0 = " + plk );
            System.out.println("\nP(ll) = 1940.0/383163.0 = " + pll );
            System.out.println("\nP(lm) = 193.0/383163.0 = " + plm );
            System.out.println("\nP(ln) = 1.0/383163.0 = " + pln );
            System.out.println("\nP(lo) = 994.0/383163.0 = " + plo );
            System.out.println("\nP(lp) = 19.0/383163.0 = " + plp );
            System.out.println("\nP(lq) = 370.0/383163.0 = " + plq );
            System.out.println("\nP(lr) = 9.0/383163.0 = " + plr );
            System.out.println("\nP(ls) = 510.0/383163.0 = " + pls );
            System.out.println("\nP(lt) = 116.0/383163.0 = " + plt );
            System.out.println("\nP(lu) = 1301.0/383163.0 = " + plu );
            System.out.println("\nP(lv) = 146.0/383163.0 = " + plv );
            System.out.println("\nP(ly) = 64.0/383163.0 = " + ply );
            System.out.println("\nP(lz) = 1.0/383163.0 = " + plz );
            System.out.println("\nP(l.) = 299.0/383163.0 = " + pldot );
            System.out.println("\nP(l,) = 181.0/383163.0 = " + plcomma );
            System.out.println("\nP(lvacuum) = 2546.0/383163.0 = " + plvacuum );
            System.out.println("\nP(ma) = 2071.0/383163.0 = " + pma );
            System.out.println("\nP(mb) = 541.0/383163.0 = " + pmb );
            System.out.println("\nP(md) = 1.0/383163.0 = " + pmd );
            System.out.println("\nP(me) = 2605.0/383163.0 = " + pme );
            System.out.println("\nP(mi) = 915.0/383163.0 = " + pmi );
            System.out.println("\nP(ml) = 2.0/383163.0 = " + pml );
            System.out.println("\nP(mm) = 1281.0/383163.0 = " + pmm );
            System.out.println("\nP(mn) = 26.0/383163.0 = " + pmn );
            System.out.println("\nP(mo) = 1050.0/383163.0 = " + pmo );
            System.out.println("\nP(mp) = 985.0/383163.0 = " + pmp );
            System.out.println("\nP(ms) = 27.0/383163.0 = " + pms );
            System.out.println("\nP(mu) = 308.0/383163.0 = " + pmu );
            System.out.println("\nP(mw) = 3.0/383163.0 = " + pmw );
            System.out.println("\nP(my) = 11.0/383163.0 = " + pmy );
            System.out.println("\nP(m.) = 150.0/383163.0 = " + pmdot );
            System.out.println("\nP(m,) = 52.0/383163.0 = " + pmcomma );
            System.out.println("\nP(mvacuum) = 303.0/383163.0 = " + pmvacuum );
            System.out.println("\nP(na) = 1109.0/383163.0 = " + pna );
            System.out.println("\nP(nb) = 1.0/383163.0 = " + pnb );
            System.out.println("\nP(nc) = 1181.0/383163.0 = " + pnc );
            System.out.println("\nP(nd) = 1906.0/383163.0 = " + pnd );
            System.out.println("\nP(ne) = 2633.0/383163.0 = " + pne );
            System.out.println("\nP(nf) = 320.0/383163.0 = " + pnf );
            System.out.println("\nP(ng) = 682.0/383163.0 = " + png );
            System.out.println("\nP(nh) = 159.0/383163.0 = " + pnh );
            System.out.println("\nP(ni) = 731.0/383163.0 = " + pni );
            System.out.println("\nP(nj) = 45.0/383163.0 = " + pnj );
            System.out.println("\nP(nk) = 23.0/383163.0 = " + pnk );
            System.out.println("\nP(nl) = 41.0/383163.0 = " + pnl );
            System.out.println("\nP(nm) = 9.0/383163.0 = " + pnm );
            System.out.println("\nP(nn) = 975.0/383163.0 = " + pnn );
            System.out.println("\nP(no) = 1120.0/383163.0 = " + pno );
            System.out.println("\nP(np) = 1.0/383163.0 = " + pnp );
            System.out.println("\nP(nq) = 226.0/383163.0 = " + pnq );
            System.out.println("\nP(nr) = 122.0/383163.0 = " + pnr );
            System.out.println("\nP(ns) = 2027.0/383163.0 = " + pns );
            System.out.println("\nP(nt) = 3026.0/383163.0 = " + pnt );
            System.out.println("\nP(nu) = 453.0/383163.0 = " + pnu );
            System.out.println("\nP(nv) = 253.0/383163.0 = " + pnv );
            System.out.println("\nP(nx) = 3.0/383163.0 = " + pnx );
            System.out.println("\nP(ny) = 36.0/383163.0 = " + pny );
            System.out.println("\nP(nz) = 26.0/383163.0 = " + pnz );
            System.out.println("\nP(n.) = 739.0/383163.0 = " + pndot );
            System.out.println("\nP(n,) = 549.0/383163.0 = " + pnz );
            System.out.println("\nP(nvacuum) = 3277.0/383163.0 = " + pnvacuum );
            System.out.println("\nP(oa) = 11.0/383163.0 = " + poa );
            System.out.println("\nP(ob) = 357.0/383163.0 = " + pob );
            System.out.println("\nP(oc) = 454.0/383163.0 = " + poc );
            System.out.println("\nP(od) = 206.0/383163.0 = " + pod );
            System.out.println("\nP(oe) = 194.0/383163.0 = " + poe );
            System.out.println("\nP(of) = 159.0/383163.0 = " + pof );
            System.out.println("\nP(og) = 140.0/383163.0 = " + pog );
            System.out.println("\nP(oh) = 44.0/383163.0 = " + poh );
            System.out.println("\nP(oi) = 2140.0/383163.0 = " + poi );
            System.out.println("\nP(oj) = 13.0/383163.0 = " + poj );
            System.out.println("\nP(ok) = 57.0/383163.0 = " + pok );
            System.out.println("\nP(ol) = 1041.0/383163.0 = " + pol );
            System.out.println("\nP(om) = 1594.0/383163.0 = " + pom );
            System.out.println("\nP(on) = 3145.0/383163.0 = " + pon );
            System.out.println("\nP(oo) = 72.0/383163.0 = " + poo );
            System.out.println("\nP(op) = 520.0/383163.0 = " + pop );
            System.out.println("\nP(oq) = 81.0/383163.0 = " + poq );
            System.out.println("\nP(or) = 1589.0/383163.0 = " + por );
            System.out.println("\nP(os) = 972.0/383163.0 = " + pos );
            System.out.println("\nP(ot) = 847.0/383163.0 = " + pot );
            System.out.println("\nP(ou) = 3281.0/383163.0 = " + pou );
            System.out.println("\nP(ov) = 100.0/383163.0 = " + pov );
            System.out.println("\nP(ow) = 26.0/383163.0 = " + pow );
            System.out.println("\nP(ox) = 39.0/383163.0 = " + pox );
            System.out.println("\nP(oy) = 281.0/383163.0 = " + poy );
            System.out.println("\nP(o.) = 99.0/383163.0 = " + podot );
            System.out.println("\nP(o,) = 59.0/383163.0 = " + pocomma );
            System.out.println("\nP(ovacuum) = 283.0/383163.0 = " + povacuum );
            System.out.println("\nP(pa) = 2253.0/383163.0 = " + ppa );
            System.out.println("\nP(pc) = 22.0/383163.0 = " + ppc );
            System.out.println("\nP(pe) = 1765.0/383163.0 = " + ppe );
            System.out.println("\nP(ph) = 264.0/383163.0 = " + pph );
            System.out.println("\nP(pi) = 669.0/383163.0 = " + ppi );
            System.out.println("\nP(pk) = 6.0/383163.0 = " + ppk );
            System.out.println("\nP(pl) = 1069.0/383163.0 = " + ppl );
            System.out.println("\nP(pn) = 10.0/383163.0 = " + ppn );
            System.out.println("\nP(po) = 2046.0/383163.0 = " + ppo );
            System.out.println("\nP(pp) = 617.0/383163.0 = " + ppp );
            System.out.println("\nP(pr) = 1513.0/383163.0 = " + ppr );
            System.out.println("\nP(ps) = 386.0/383163.0 = " + pps );
            System.out.println("\nP(pt) = 195.0/383163.0 = " + ppt );
            System.out.println("\nP(pu) = 544.0/383163.0 = " + ppu );
            System.out.println("\nP(py) = 4.0/383163.0 = " + ppy );
            System.out.println("\nP(p.) = 77.0/383163.0 = " + ppdot );
            System.out.println("\nP(p,) = 41.0/383163.0 = " + ppcomma );
            System.out.println("\nP(pvacuum) = 403.0/383163.0 = " + ppvacuum );
            System.out.println("\nP(qi) = 1.0/383163.0 = " + pqi );
            System.out.println("\nP(qu) = 3014.0/383163.0 = " + pqu );
            System.out.println("\nP(q.) = 3.0/383163.0 = " + pqdot );
            System.out.println("\nP(q,) = 1.0/383163.0 = " + pqcomma );
            System.out.println("\nP(qvacuum) = 36.0/383163.0 = " + pqvacuum );
            System.out.println("\nP(ra) = 2094.0/383163.0 = " + pra );
            System.out.println("\nP(rb) = 63.0/383163.0 = " + prb );
            System.out.println("\nP(rc) = 582.0/383163.0 = " + prc );
            System.out.println("\nP(rd) = 932.0/383163.0 = " + prd );
            System.out.println("\nP(re) = 3586.0/383163.0 = " + pre );
            System.out.println("\nP(rf) = 79.0/383163.0 = " + prf );
            System.out.println("\nP(rg) = 298.0/383163.0 = " + prg );
            System.out.println("\nP(rh) = 11.0/383163.0 = " + prh );
            System.out.println("\nP(ri) = 2073.0/383163.0 = " + pri );
            System.out.println("\nP(rj) = 1.0/383163.0 = " + prj );
            System.out.println("\nP(rk) = 28.0/383163.0 = " + prk );
            System.out.println("\nP(rl) = 202.0/383163.0 = " + prl );
            System.out.println("\nP(rm) = 551.0/383163.0 = " + prm );
            System.out.println("\nP(rn) = 511.0/383163.0 = " + prn );
            System.out.println("\nP(ro) = 1672.0/383163.0 = " + pro );
            System.out.println("\nP(rp) = 156.0/383163.0 = " + prp );
            System.out.println("\nP(rq) = 244.0/383163.0 = " + prq );
            System.out.println("\nP(rr) = 1960.0/383163.0 = " + prr );
            System.out.println("\nP(rs) = 1343.0/383163.0 = " + prs );
            System.out.println("\nP(rt) = 1241.0/383163.0 = " + prt );
            System.out.println("\nP(ru) = 502.0/383163.0 = " + pru );
            System.out.println("\nP(rv) = 414.0/383163.0 = " + prv );
            System.out.println("\nP(rw) = 2.0/383163.0 = " + prw );
            System.out.println("\nP(ry) = 1376.0/383163.0 = " + pry );
            System.out.println("\nP(rz) = 2.0/383163.0 = " + prz );
            System.out.println("\nP(r.) = 806.0/383163.0 = " + prdot );
            System.out.println("\nP(r,) = 569.0/383163.0 = " + prcomma );
            System.out.println("\nP(rvacuum) = 2751.0/383163.0 = " + prvacuum );
            System.out.println("\nP(sa) = 1977.0/383163.0 = " + psa );
            System.out.println("\nP(sb) = 10.0/383163.0 = " + psb );
            System.out.println("\nP(sc) = 432.0/383163.0 = " + psc );
            System.out.println("\nP(sd) = 2.0/383163.0 = " + psd );
            System.out.println("\nP(se) = 2630.0/383163.0 = " + pse );
            System.out.println("\nP(sf) = 31.0/383163.0 = " + psf );
            System.out.println("\nP(sg) = 8.0/383163.0 = " + psg );
            System.out.println("\nP(sh) = 54.0/383163.0 = " + psh );
            System.out.println("\nP(si) = 1478.0/383163.0 = " + psi );
            System.out.println("\nP(sj) = 4.0/383163.0 = " + psj );
            System.out.println("\nP(sk) = 208.0/383163.0 = " + psk );
            System.out.println("\nP(sl) = 87.0/383163.0 = " + psl );
            System.out.println("\nP(sm) = 72.0/383163.0 = " + psm );
            System.out.println("\nP(sn) = 8.0/383163.0 = " + psn );
            System.out.println("\nP(so) = 1887.0/383163.0 = " + pso );
            System.out.println("\nP(sp) = 599.0/383163.0 = " + psp );
            System.out.println("\nP(sq) = 407.0/383163.0 = " + psq );
            System.out.println("\nP(sr) = 1.0/383163.0 = " + psr );
            System.out.println("\nP(ss) = 1782.0/383163.0 = " + pss );
            System.out.println("\nP(st) = 1833.0/383163.0 = " + pst );
            System.out.println("\nP(su) = 1516.0/383163.0 = " + psu );
            System.out.println("\nP(sv) = 58.0/383163.0 = " + psv );
            System.out.println("\nP(sw) = 4.0/383163.0 = " + psw );
            System.out.println("\nP(sy) = 153.0/383163.0 = " + psy );
            System.out.println("\nP(s.) = 1300.0/383163.0 = " + psdot );
            System.out.println("\nP(s,) = 1041.0/383163.0 = " + pscomma );
            System.out.println("\nP(svacuum) = 3863.0/383163.0 = " + psvacuum );
            System.out.println("\nP(ta) = 2061.0/383163.0 = " + pta );
            System.out.println("\nP(tb) = 6.0/383163.0 = " + ptb );
            System.out.println("\nP(tc) = 11.0/383163.0 = " + ptc );
            System.out.println("\nP(te) = 2934.0/383163.0 = " + pte );
            System.out.println("\nP(th) = 313.0/383163.0 = " + pth );
            System.out.println("\nP(ti) = 1665.0/383163.0 = " + pti );
            System.out.println("\nP(tj) = 3.0/383163.0 = " + ptj );
            System.out.println("\nP(tk) = 8.0/383163.0 = " + ptk );
            System.out.println("\nP(tl) = 152.0/383163.0 = " + ptl );
            System.out.println("\nP(tm) = 3.0/383163.0 = " + ptm );
            System.out.println("\nP(tn) = 7.0/383163.0 = " + ptn );
            System.out.println("\nP(to) = 1667.0/383163.0 = " + pto );
            System.out.println("\nP(tr) = 2220.0/383163.0 = " + ptr );
            System.out.println("\nP(ts) = 588.0/383163.0 = " + pts );
            System.out.println("\nP(tt) = 1060.0/383163.0 = " + ptt );
            System.out.println("\nP(tu) = 1046.0/383163.0 = " + ptu );
            System.out.println("\nP(tv) = 17.0/383163.0 = " + ptv );
            System.out.println("\nP(tw) = 2.0/383163.0 = " + ptw );
            System.out.println("\nP(ty) = 74.0/383163.0 = " + pty );
            System.out.println("\nP(tz) = 1.0/383163.0 = " + ptz );
            System.out.println("\nP(t.) = 1022.0/383163.0 = " + ptdot );
            System.out.println("\nP(t,) = 761.0/383163.0 = " + ptcomma );
            System.out.println("\nP(tvacuum) = 3997.0/383163.0 = " + ptvacuum );
            System.out.println("\nP(ua) = 723.0/383163.0 = " + pua );
            System.out.println("\nP(ub) = 198.0/383163.0 = " + pub );
            System.out.println("\nP(uc) = 517.0/383163.0 = " + puc );
            System.out.println("\nP(ud) = 265.0/383163.0 = " + pud );
            System.out.println("\nP(ue) = 2387.0/383163.0 = " + pue );
            System.out.println("\nP(uf) = 197.0/383163.0 = " + puf );
            System.out.println("\nP(ug) = 149.0/383163.0 = " + pug );
            System.out.println("\nP(uh) = 20.0/383163.0 = " + puh );
            System.out.println("\nP(ui) = 1994.0/383163.0 = " + pui );
            System.out.println("\nP(uj) = 188.0/383163.0 = " + puj );
            System.out.println("\nP(uk) = 14.0/383163.0 = " + puk );
            System.out.println("\nP(ul) = 1009.0/383163.0 = " + pul );
            System.out.println("\nP(um) = 375.0/383163.0 = " + pum );
            System.out.println("\nP(un) = 2208.0/383163.0 = " + pun );
            System.out.println("\nP(uo) = 266.0/383163.0 = " + puo );
            System.out.println("\nP(up) = 553.0/383163.0 = " + pup );
            System.out.println("\nP(uq) = 27.0/383163.0 = " + puq );
            System.out.println("\nP(ur) = 2748.0/383163.0 = " + pur );
            System.out.println("\nP(us) = 1875.0/383163.0 = " + pus );
            System.out.println("\nP(ut) = 1804.0/383163.0 = " + put );
            System.out.println("\nP(uv) = 916.0/383163.0 = " + puv );
            System.out.println("\nP(ux) = 1095.0/383163.0 = " + pux );
            System.out.println("\nP(uy) = 81.0/383163.0 = " + puy );
            System.out.println("\nP(uz) = 21.0/383163.0 = " + puz );
            System.out.println("\nP(u.) = 181.0/383163.0 = " + pudot );
            System.out.println("\nP(u,) = 165.0/383163.0 = " + pucomma );
            System.out.println("\nP(uvacuum) = 2620.0/383163.0 = " + puvacuum );
            System.out.println("\nP(va) = 1636.0/383163.0 = " + pva );
            System.out.println("\nP(vd) = 5.0/383163.0 = " + pvd );
            System.out.println("\nP(ve) = 2089.0/383163.0 = " + pve );
            System.out.println("\nP(vg) = 2.0/383163.0 = " + pvg );
            System.out.println("\nP(vi) = 1205.0/383163.0 = " + pvi );
            System.out.println("\nP(vl) = 1.0/383163.0 = " + pvl );
            System.out.println("\nP(vo) = 1549.0/383163.0 = " + pvo );
            System.out.println("\nP(vr) = 449.0/383163.0 = " + pvr );
            System.out.println("\nP(vu) = 179.0/383163.0 = " + pvu );
            System.out.println("\nP(v.) = 7.0/383163.0 = " + pvdot );
            System.out.println("\nP(v,) = 1.0/383163.0 = " + pvcomma );
            System.out.println("\nP(vvacuum) = 11.0/383163.0 = " + pvvacuum );
            System.out.println("\nP(wa) = 13.0/383163.0 = " + pwa );
            System.out.println("\nP(wb) = 1.0/383163.0 = " + pwb );
            System.out.println("\nP(wd) = 1.0/383163.0 = " + pwd );
            System.out.println("\nP(we) = 22.0/383163.0 = " + pwe );
            System.out.println("\nP(wh) = 7.0/383163.0 = " + pwh );
            System.out.println("\nP(wi) = 10.0/383163.0 = " + pwi );
            System.out.println("\nP(wl) = 1.0/383163.0 = " + pwl );
            System.out.println("\nP(wn) = 3.0/383163.0 = " + pwn );
            System.out.println("\nP(wo) = 10.0/383163.0 = " + pwo );
            System.out.println("\nP(w.) = 4.0/383163.0 = " + pwdot );
            System.out.println("\nP(w,) = 4.0/383163.0 = " + pwcomma );
            System.out.println("\nP(wvacuum) = 9.0/383163.0 = " + pwvacuum );
            System.out.println("\nP(xa) = 105.0/383163.0 = " + pxa );
            System.out.println("\nP(xc) = 90.0/383163.0 = " + pxc );
            System.out.println("\nP(xe) = 72.0/383163.0 = " + pxe );
            System.out.println("\nP(xh) = 7.0/383163.0 = " + pxh );
            System.out.println("\nP(xi) = 81.0/383163.0 = " + pxi );
            System.out.println("\nP(xo) = 6.0/383163.0 = " + pxo );
            System.out.println("\nP(xp) = 205.0/383163.0 = " + pxp );
            System.out.println("\nP(xq) = 12.0/383163.0 = " + pxq );
            System.out.println("\nP(xt) = 76.0/383163.0 = " + pxt );
            System.out.println("\nP(xu) = 7.0/383163.0 = " + pxu );
            System.out.println("\nP(xy) = 15.0/383163.0 = " + pxy );
            System.out.println("\nP(x.) = 193.0/383163.0 = " + pxdot );
            System.out.println("\nP(x,) = 153.0/383163.0 = " + pxcomma );
            System.out.println("\nP(xvacuum) = 1080.0/383163.0 = " + pxvacuum );
            System.out.println("\nP(ya) = 282.0/383163.0 = " + pya );
            System.out.println("\nP(yb) = 2.0/383163.0 = " + pyb );
            System.out.println("\nP(yc) = 34.0/383163.0 = " + pyc );
            System.out.println("\nP(yd) = 13.0/383163.0 = " + pyd );
            System.out.println("\nP(ye) = 428.0/383163.0 = " + pye );
            System.out.println("\nP(yg) = 61.0/383163.0 = " + pyg );
            System.out.println("\nP(yj) = 2.0/383163.0 = " + pyj );
            System.out.println("\nP(yl) = 86.0/383163.0 = " + pyl );
            System.out.println("\nP(ym) = 35.0/383163.0 = " + pym );
            System.out.println("\nP(yn) = 45.0/383163.0 = " + pyn );
            System.out.println("\nP(yo) = 37.0/383163.0 = " + pyo );
            System.out.println("\nP(yp) = 59.0/383163.0 = " + pyp );
            System.out.println("\nP(yr) = 13.0/383163.0 = " + pyr );
            System.out.println("\nP(ys) = 110.0/383163.0 = " + pys );
            System.out.println("\nP(yt) = 15.0/383163.0 = " + pyt );
            System.out.println("\nP(yu) = 2.0/383163.0 = " + pyu );
            System.out.println("\nP(yv) = 5.0/383163.0 = " + pyv );
            System.out.println("\nP(yx) = 1.0/383163.0 = " + pyx );
            System.out.println("\nP(y.) = 324.0/383163.0 = " + pydot );
            System.out.println("\nP(y,) = 101.0/383163.0 = " + pycomma );
            System.out.println("\nP(yvacuum) = 1339.0/383163.0 = " + pyvacuum );
            System.out.println("\nP(za) = 24.0/383163.0 = " + pza );
            System.out.println("\nP(ze) = 60.0/383163.0 = " + pze );
            System.out.println("\nP(zh) = 1.0/383163.0 = " + pzh );
            System.out.println("\nP(zi) = 23.0/383163.0 = " + pzi );
            System.out.println("\nP(zl) = 3.0/383163.0 = " + pzl );
            System.out.println("\nP(zo) = 27.0/383163.0 = " + pzo );
            System.out.println("\nP(zu) = 1.0/383163.0 = " + pzu );
            System.out.println("\nP(zy) = 1.0/383163.0 = " + pzy );
            System.out.println("\nP(zz) = 6.0/383163.0 = " + pzz );
            System.out.println("\nP(z.) = 26.0/383163.0 = " + pzdot );
            System.out.println("\nP(z,) = 36.0/383163.0 = " + pzcomma );
            System.out.println("\nP(zvacuum) = 523.0/383163.0 = " + pzvacuum );
            System.out.println("\nP(..) = 1.0/383163.0 = " + pdotdot );
            System.out.println("\nP(.,) = 1.0/383163.0 = " + pdotcomma );
            System.out.println("\nP(.vacuum) = 523.0/383163.0 = " + pdotvacuum );
            System.out.println("\nP(,vacuum) = 3239.0/383163.0 = " + pcommavacuum );
            System.out.println("\nP(vacuuma) = 3545.0/383163.0 = " + pvacuuma );
            System.out.println("\nP(vacuumb) = 1949.0/383163.0 = " + pvacuumb );
            System.out.println("\nP(vacuumc) = 3322.0/383163.0 = " + pvacuumc );
            System.out.println("\nP(vacuumd) = 3656.0/383163.0 = " + pvacuumd );
            System.out.println("\nP(vacuume) = 3725.0/383163.0 = " + pvacuume );
            System.out.println("\nP(vacuumf) = 1874.0/383163.0 = " + pvacuumf );
            System.out.println("\nP(vacuumg) = 1047.0/383163.0 = " + pvacuumg );
            System.out.println("\nP(vacuumh) = 1869.0/383163.0 = " + pvacuumh );
            System.out.println("\nP(vacuumi) = 2355.0/383163.0 = " + pvacuumi );
            System.out.println("\nP(vacuumj) = 1593.0/383163.0 = " + pvacuumj );
            System.out.println("\nP(vacuumk) = 328.0/383163.0 = " + pvacuumk );
            System.out.println("\nP(vacuuml) = 3593.0/383163.0 = " + pvacuuml );
            System.out.println("\nP(vacuumm) = 2651.0/383163.0 = " + pvacuumm );
            System.out.println("\nP(vacuumn) = 2177.0/383163.0 = " + pvacuumn );
            System.out.println("\nP(vacuumo) = 1670.0/383163.0 = " + pvacuumo );
            System.out.println("\nP(vacuump) = 3377.0/383163.0 = " + pvacuump );
            System.out.println("\nP(vacuumq) = 2645.0/383163.0 = " + pvacuumq );
            System.out.println("\nP(vacuumr) = 2498.0/383163.0 = " + pvacuumr );
            System.out.println("\nP(vacuums) = 3427.0/383163.0 = " + pvacuums );
            System.out.println("\nP(vacuumt) = 2799.0/383163.0 = " + pvacuumt );
            System.out.println("\nP(vacuumu) = 2094.0/383163.0 = " + pvacuumu );
            System.out.println("\nP(vacuumv) = 2285.0/383163.0 = " + pvacuumv );
            System.out.println("\nP(vacuumw) = 41.0/383163.0 = " + pvacuumw );
            System.out.println("\nP(vacuumx) = 4.0/383163.0 = " + pvacuumx );
            System.out.println("\nP(vacuumy) = 620.0/383163.0 = " + pvacuumy );
            System.out.println("\nP(vacuumz) = 28.0/383163.0 = " + pvacuumz );
            System.out.println("\nP(vacuum.) = 108.0/383163.0 = " + pvacuumdot );
            System.out.println("\nP(vacuum,) = 278.0/383163.0 = " + pvacuumcomma );
            System.out.println("\nP(vacuumvacuum) = 3793.0/383163.0 = " + pvacuumvacuum );
            System.out.println("\nThe sum of the probability is = " + sumprobability ); 
            System.out.println("\nThe number of pair characters that are not included is cause the probability of them is 0.");
                  
            }

            private static void calculatethejointentropy1() 
    
            {
              
            double paa = 16.0/383163.0;
            double pab = 549.0/383163.0;
            double pac = 1026.0/383163.0;
            double pad = 360.0/383163.0;
            double pae = 12.0/383163.0;
            double paf = 354.0/383163.0;
            double pag = 878.0/383163.0;
            double pah = 84.0/383163.0;
            double pai = 3136.0/383163.0;
            double paj = 50.0/383163.0;
            double pak = 153.0/383163.0;
            double pal = 1386.0/383163.0;
            double pam = 696.0/383163.0;
            double pan = 2653.0/383163.0;
            double pao = 11.0/383163.0;
            double pap = 956.0/383163.0;
            double paq = 205.0/383163.0;
            double par = 2816.0/383163.0;
            double pas = 2115.0/383163.0;
            double pat = 1566.0/383163.0;
            double pau = 1933.0/383163.0;
            double pav = 1804.0/383163.0;
            double paw = 1.0/383163.0;
            double pax = 28.0/383163.0;
            double pay = 212.0/383163.0;
            double paz = 56.0/383163.0;
            double padot = 374.0/383163.0;
            double pacomma = 325.0/383163.0;
            double pavacuum = 3687.0/383163.0;
            double pba = 580.0/383163.0;
            double pbb = 16.0/383163.0;
            double pbc = 1.0/383163.0;
            double pbd = 2.0/383163.0;
            double pbe = 611.0/383163.0;
            double pbi = 683.0/383163.0;
            double pbj = 101.0/383163.0;
            double pbl = 800.0/383163.0;
            double pbm = 3.0/383163.0;
            double pbo = 923.0/383163.0;
            double pbr = 653.0/383163.0;
            double pbs = 129.0/383163.0;
            double pbt = 34.0/383163.0;
            double pbu = 197.0/383163.0;
            double pby = 24.0/383163.0;
            double pbdot = 3.0/383163.0;
            double pbcomma = 3.0/383163.0;
            double pbvacuum = 31.0/383163.0;
            double pca = 1293.0/383163.0;
            double pcc = 283.0/383163.0;
            double pcd = 6.0/383163.0;
            double pce = 2081.0/383163.0;
            double pch = 1732.0/383163.0;
            double pci = 973.0/383163.0;
            double pck = 136.0/383163.0;
            double pcl = 526.0/383163.0;
            double pcm = 1.0/383163.0;
            double pco = 2265.0/383163.0;
            double pcq = 30.0/383163.0;
            double pcr = 717.0/383163.0;
            double pcs = 43.0/383163.0;
            double pct = 586.0/383163.0;
            double pcu = 611.0/383163.0;
            double pcv = 2.0/383163.0;
            double pcy = 12.0/383163.0;
            double pcdot = 53.0/383163.0;
            double pccomma = 53.0/383163.0;
            double pcvacuum = 1233.0/383163.0;
            double pda = 1631.0/383163.0;
            double pdb = 1.0/383163.0;
            double pdc = 4.0/383163.0;
            double pdd = 16.0/383163.0;
            double pde = 3270.0/383163.0;
            double pdg = 2.0/383163.0;
            double pdh = 5.0/383163.0;
            double pdi = 1628.0/383163.0;
            double pdj = 3.0/383163.0;
            double pdk = 3.0/383163.0;
            double pdl = 7.0/383163.0;
            double pdm = 13.0/383163.0;
            double pdn = 17.0/383163.0;
            double pdo = 783.0/383163.0;
            double pdr = 643.0/383163.0;
            double pds = 207.0/383163.0;
            double pdt = 2.0/383163.0;
            double pdu = 948.0/383163.0;
            double pdv = 20.0/383163.0;
            double pdw = 2.0/383163.0;
            double pdy = 14.0/383163.0;
            double pddot = 139.0/383163.0;
            double pdcomma = 135.0/383163.0;
            double pdvacuum = 1484.0/383163.0;
            double pea = 749.0/383163.0;
            double peb = 207.0/383163.0;
            double pec = 1687.0/383163.0;
            double ped = 427.0/383163.0;
            double pee = 851.0/383163.0;
            double pef = 369.0/383163.0;
            double peg = 788.0/383163.0;
            double peh = 73.0/383163.0;
            double pei = 765.0/383163.0;
            double pej = 159.0/383163.0;
            double pek = 14.0/383163.0;
            double pel = 2079.0/383163.0;
            double pem = 1987.0/383163.0;
            double pen = 3527.0/383163.0;
            double peo = 58.0/383163.0;
            double pep = 1083.0/383163.0;
            double peq = 93.0/383163.0;
            double per = 2982.0/383163.0;
            double pes = 3254.0/383163.0;
            double pet = 2975.0/383163.0;
            double peu = 2153.0/383163.0;
            double pev = 980.0/383163.0;
            double pew = 3.0/383163.0;
            double pex = 512.0/383163.0;
            double pey = 15.0/383163.0;
            double pez = 550.0/383163.0;
            double pedot = 2328.0/383163.0;
            double pecomma = 1578.0/383163.0;
            double pevacuum = 4445.0/383163.0;
            double pfa = 1100.0/383163.0;
            double pfb = 5.0/383163.0;
            double pfe = 677.0/383163.0;
            double pff = 493.0/383163.0;
            double pfh = 1.0/383163.0;
            double pfi = 838.0/383163.0;
            double pfj = 18.0/383163.0;
            double pfl = 226.0/383163.0;
            double pfo = 536.0/383163.0;
            double pfr = 318.0/383163.0;
            double pfs = 29.0/383163.0;
            double pft = 126.0/383163.0;
            double pfu = 207.0/383163.0;
            double pfdot = 29.0/383163.0;
            double pfcomma = 26.0/383163.0;
            double pfvacuum = 184.0/383163.0;
            double pga = 839.0/383163.0;
            double pgb = 4.0/383163.0;
            double pgd = 29.0/383163.0;
            double pge = 1487.0/383163.0;
            double pgg = 33.0/383163.0;
            double pgh = 23.0/383163.0;
            double pgi = 292.0/383163.0;
            double pgj = 2.0/383163.0;
            double pgl = 185.0/383163.0;
            double pgm = 11.0/383163.0;
            double pgn = 457.0/383163.0;
            double pgo = 157.0/383163.0;
            double pgr = 528.0/383163.0;
            double pgs = 25.0/383163.0;
            double pgt = 170.0/383163.0;
            double pgu = 322.0/383163.0;
            double pgv = 17.0/383163.0;
            double pgy = 14.0/383163.0;
            double pgz = 1.0/383163.0;
            double pgdot = 58.0/383163.0;
            double pgcomma = 42.0/383163.0;
            double pgvacuum = 188.0/383163.0; 
            double pha = 2016.0/383163.0;
            double phe = 1233.0/383163.0;
            double phi = 469.0/383163.0;
            double phl = 5.0/383163.0;
            double phm = 7.0/383163.0;
            double phn = 44.0/383163.0;
            double pho = 1181.0/383163.0;
            double phr = 38.0/383163.0;
            double pht = 12.0/383163.0;
            double phu = 154.0/383163.0;
            double phv = 1.0/383163.0;
            double phy = 30.0/383163.0;
            double phdot = 3.0/383163.0;
            double phcomma = 17.0/383163.0;
            double phvacuum = 93.0/383163.0;
            double pia = 614.0/383163.0;
            double pib = 271.0/383163.0;
            double pic = 781.0/383163.0;
            double pid = 672.0/383163.0;
            double pie = 2246.0/383163.0;
            double pif = 279.0/383163.0;
            double pig = 779.0/383163.0;
            double pih = 12.0/383163.0;
            double pii = 3.0/383163.0;
            double pij = 4.0/383163.0;
            double pik = 109.0/383163.0;
            double pil = 2455.0/383163.0;
            double pim = 727.0/383163.0;
            double pin = 2280.0/383163.0;
            double pio = 1000.0/383163.0;
            double pip = 185.0/383163.0;
            double piq = 543.0/383163.0;
            double pir = 1980.0/383163.0;
            double pis = 2597.0/383163.0;
            double pit = 3046.0/383163.0;
            double piu = 38.0/383163.0;
            double piv = 533.0/383163.0;
            double pix = 293.0/383163.0;
            double piz = 18.0/383163.0;
            double pidot = 352.0/383163.0;
            double picomma = 356.0/383163.0;
            double pivacuum = 2124.0/383163.0;   
            double pja = 337.0/383163.0;
            double pje = 959.0/383163.0;
            double pji = 9.0/383163.0;
            double pjo = 661.0/383163.0;
            double pju = 351.0/383163.0;
            double pjdot = 1.0/383163.0;
            double pjvacuum = 302.0/383163.0;
            double pka = 440.0/383163.0;
            double pke = 298.0/383163.0;
            double pkh = 2.0/383163.0;
            double pki = 54.0/383163.0;
            double pkj = 28.0/383163.0;
            double pkk = 21.0/383163.0;
            double pkl = 2.0/383163.0;
            double pkm = 1.0/383163.0;
            double pkn = 16.0/383163.0;
            double pko = 66.0/383163.0;
            double pkp = 1.0/383163.0;
            double pkr = 26.0/383163.0;
            double pks = 23.0/383163.0;
            double pkt = 4.0/383163.0;
            double pku = 8.0/383163.0;
            double pkv = 17.0/383163.0;
            double pky = 3.0/383163.0;
            double pkdot = 30.0/383163.0;
            double pkcomma = 38.0/383163.0;
            double pkvacuum = 93.0/383163.0; 
            double pla = 2685.0/383163.0;
            double plb = 13.0/383163.0;
            double plc = 52.0/383163.0;
            double pld = 38.0/383163.0;
            double ple = 3562.0/383163.0;
            double plf = 38.0/383163.0;
            double plg = 67.0/383163.0;
            double plh = 32.0/383163.0;
            double pli = 1271.0/383163.0;
            double plj = 2.0/383163.0;
            double plk = 17.0/383163.0;
            double pll = 1940.0/383163.0;
            double plm = 193.0/383163.0;
            double pln = 1.0/383163.0;
            double plo = 994.0/383163.0;
            double plp = 19.0/383163.0;
            double plq = 370.0/383163.0;
            double plr = 9.0/383163.0;
            double pls = 510.0/383163.0;
            double plt = 116.0/383163.0;
            double plu = 1301.0/383163.0;
            double plv = 146.0/383163.0;
            double ply = 64.0/383163.0;
            double plz = 1.0/383163.0;
            double pldot = 299.0/383163.0;
            double plcomma = 181.0/383163.0;
            double plvacuum = 2546.0/383163.0; 
            double pma = 2071.0/383163.0;
            double pmb = 541.0/383163.0;
            double pmd = 1.0/383163.0;
            double pme = 2605.0/383163.0;
            double pmi = 915.0/383163.0;
            double pml = 2.0/383163.0;
            double pmm = 1281.0/383163.0;
            double pmn = 26.0/383163.0;
            double pmo = 1050.0/383163.0;
            double pmp = 985.0/383163.0;
            double pms = 27.0/383163.0;
            double pmu = 308.0/383163.0;
            double pmw = 3.0/383163.0;
            double pmy = 11.0/383163.0;
            double pmdot = 150.0/383163.0;
            double pmcomma = 52.0/383163.0;
            double pmvacuum = 303.0/383163.0; 
            double pna = 1109.0/383163.0;
            double pnb = 1.0/383163.0;
            double pnc = 1181.0/383163.0;
            double pnd = 1906.0/383163.0;
            double pne = 2633.0/383163.0;
            double pnf = 320.0/383163.0;
            double png = 682.0/383163.0;
            double pnh = 159.0/383163.0;
            double pni = 731.0/383163.0;
            double pnj = 45.0/383163.0;
            double pnk = 23.0/383163.0;
            double pnl = 41.0/383163.0;
            double pnm = 9.0/383163.0;
            double pnn = 975.0/383163.0;
            double pno = 1120.0/383163.0;
            double pnp = 1.0/383163.0;
            double pnq = 226.0/383163.0;
            double pnr = 122.0/383163.0;
            double pns = 2027.0/383163.0;
            double pnt = 3026.0/383163.0;
            double pnu = 453.0/383163.0;
            double pnv = 253.0/383163.0;
            double pnx = 3.0/383163.0;
            double pny = 36.0/383163.0;
            double pnz = 26.0/383163.0;
            double pndot = 739.0/383163.0;
            double pncomma = 549.0/383163.0;
            double pnvacuum = 3277.0/383163.0; 
            double poa = 11.0/383163.0;
            double pob = 357.0/383163.0;
            double poc = 454.0/383163.0;
            double pod = 206.0/383163.0;
            double poe = 194.0/383163.0;
            double pof = 159.0/383163.0;
            double pog = 140.0/383163.0;
            double poh = 44.0/383163.0;
            double poi = 2140.0/383163.0;
            double poj = 13.0/383163.0;
            double pok = 57.0/383163.0;
            double pol = 1041.0/383163.0;
            double pom = 1594.0/383163.0;
            double pon = 3145.0/383163.0;
            double poo = 72.0/383163.0;
            double pop = 520.0/383163.0;
            double poq = 81.0/383163.0;
            double por = 1589.0/383163.0;
            double pos = 972.0/383163.0;
            double pot = 847.0/383163.0;
            double pou = 3281.0/383163.0;
            double pov = 100.0/383163.0;
            double pow = 26.0/383163.0;
            double pox = 39.0/383163.0;
            double poy = 281.0/383163.0;
            double podot = 99.0/383163.0;
            double pocomma = 59.0/383163.0;
            double povacuum = 283.0/383163.0;
            double ppa = 2253.0/383163.0;
            double ppc = 22.0/383163.0;
            double ppe = 1765.0/383163.0;
            double pph = 264.0/383163.0;
            double ppi = 669.0/383163.0;
            double ppk = 6.0/383163.0;
            double ppl = 1069.0/383163.0;
            double ppn = 10.0/383163.0;
            double ppo = 2046.0/383163.0;
            double ppp = 617.0/383163.0;
            double ppr = 1513.0/383163.0;
            double pps = 386.0/383163.0;
            double ppt = 195.0/383163.0;
            double ppu = 544.0/383163.0;
            double ppy = 4.0/383163.0;
            double ppdot = 77.0/383163.0;
            double ppcomma = 41.0/383163.0;
            double ppvacuum = 403.0/383163.0;
            double pqi = 1.0/383163.0;
            double pqu = 3014.0/383163.0;
            double pqdot= 3.0/383163.0;
            double pqcomma = 1.0/383163.0;
            double pqvacuum = 36.0/383163.0;
            double pra = 2094.0/383163.0;
            double prb = 63.0/383163.0;
            double prc = 582.0/383163.0;
            double prd = 932.0/383163.0;
            double pre = 3586.0/383163.0;
            double prf = 79.0/383163.0;
            double prg = 298.0/383163.0;
            double prh = 11.0/383163.0;
            double pri = 2073.0/383163.0;
            double prj = 1.0/383163.0;
            double prk = 28.0/383163.0;
            double prl = 202.0/383163.0;
            double prm = 551.0/383163.0;
            double prn = 511.0/383163.0;
            double pro = 1672.0/383163.0;
            double prp = 156.0/383163.0;
            double prq = 244.0/383163.0;
            double prr = 1960.0/383163.0;
            double prs = 1343.0/383163.0;
            double prt = 1241.0/383163.0;
            double pru = 502.0/383163.0;
            double prv = 414.0/383163.0;
            double prw = 2.0/383163.0;
            double pry = 1376.0/383163.0;
            double prz = 2.0/383163.0;
            double prdot = 806.0/383163.0;
            double prcomma = 569.0/383163.0;
            double prvacuum = 2751.0/383163.0;
            double psa = 1977.0/383163.0;
            double psb = 10.0/383163.0;
            double psc = 432.0/383163.0;
            double psd = 2.0/383163.0;
            double pse = 2630.0/383163.0;
            double psf = 31.0/383163.0;
            double psg = 8.0/383163.0;
            double psh = 54.0/383163.0;
            double psi = 1478.0/383163.0;
            double psj = 4.0/383163.0;
            double psk = 208.0/383163.0;
            double psl = 87.0/383163.0;
            double psm = 72.0/383163.0;
            double psn = 8.0/383163.0;
            double pso = 1887.0/383163.0;
            double psp = 599.0/383163.0;
            double psq = 407.0/383163.0;
            double psr = 1.0/383163.0;
            double pss = 1782.0/383163.0;
            double pst = 1833.0/383163.0;
            double psu = 1516.0/383163.0;
            double psv = 58.0/383163.0;
            double psw = 4.0/383163.0;
            double psy = 153.0/383163.0;
            double psdot = 1300.0/383163.0;
            double pscomma = 1041.0/383163.0;
            double psvacuum = 3863.0/383163.0;
            double pta = 2061.0/383163.0;
            double ptb = 6.0/383163.0;
            double ptc = 11.0/383163.0;
            double pte = 2934.0/383163.0;
            double pth = 313.0/383163.0;
            double pti = 1665.0/383163.0;
            double ptj = 3.0/383163.0;
            double ptk = 8.0/383163.0;
            double ptl = 152.0/383163.0;
            double ptm = 3.0/383163.0;
            double ptn = 7.0/383163.0;
            double pto = 1667.0/383163.0;
            double ptr = 2220.0/383163.0;
            double pts = 588.0/383163.0;
            double ptt = 1060.0/3383163.0;
            double ptu = 1046.0/383163.0;
            double ptv = 17.0/383163.0;
            double ptw = 2.0/383163.0;
            double pty = 74.0/383163.0;
            double ptz = 1.0/383163.0;
            double ptdot = 1022.0/383163.0;
            double ptcomma = 761.0/383163.0;
            double ptvacuum = 3997.0/383163.0;  
            double pua = 723.0/383163.0;
            double pub = 198.0/383163.0;
            double puc = 517.0/383163.0;
            double pud = 265.0/383163.0;
            double pue = 2387.0/383163.0;
            double puf = 197.0/383163.0;
            double pug = 149.0/383163.0;
            double puh = 20.0/383163.0;
            double pui = 1994.0/383163.0;
            double puj = 188.0/383163.0;
            double puk = 14.0/383163.0;
            double pul = 1009.0/383163.0;
            double pum = 375.0/383163.0;
            double pun = 2208.0/383163.0;
            double puo = 266.0/383163.0;
            double pup = 553.0/383163.0;
            double puq = 27.0/383163.0;
            double pur = 2748.0/383163.0;
            double pus = 1875.0/383163.0;
            double put = 1804.0/383163.0;
            double puv = 916.0/383163.0;
            double pux = 1095.0/383163.0;
            double puy = 81.0/383163.0;
            double puz = 21.0/383163.0;
            double pudot = 181.0/383163.0;
            double pucomma = 165.0/383163.0;
            double puvacuum = 2620.0/383163.0; 
            double pva = 1636.0/383163.0;
            double pvd = 5.0/383163.0;
            double pve = 2089.0/383163.0;
            double pvg = 2.0/383163.0;
            double pvi = 1205.0/383163.0;
            double pvl = 1.0/383163.0;
            double pvo = 1549.0/383163.0;
            double pvr = 449.0/383163.0;
            double pvu = 179.0/383163.0;
            double pvdot = 7.0/383163.0;
            double pvcomma = 1.0/383163.0;
            double pvvacuum = 11.0/383163.0;  
            double pwa = 13.0/383163.0;
            double pwb = 1.0/383163.0;
            double pwd = 1.0/383163.0;
            double pwe = 22.0/383163.0;
            double pwh = 7.0/383163.0;
            double pwi = 10.0/383163.0;
            double pwl = 1.0/383163.0;
            double pwn = 3.0/383163.0;
            double pwo = 10.0/383163.0;
            double pwdot = 4.0/383163.0;
            double pwcomma = 4.0/383163.0;
            double pwvacuum = 9.0/383163.0;
            double pxa = 105.0/383163.0;
            double pxc = 90.0/383163.0;
            double pxe = 72.0/383163.0;
            double pxh = 7.0/383163.0;
            double pxi = 81.0/383163.0;
            double pxo = 6.0/383163.0;
            double pxp = 205.0/383163.0;
            double pxq = 12.0/383163.0;
            double pxt = 76.0/383163.0;
            double pxu = 7.0/383163.0;
            double pxy = 15.0/383163.0;
            double pxdot = 193.0/383163.0;
            double pxcomma = 153.0/383163.0;
            double pxvacuum = 1080.0/383163.0;
            double pya = 282.0/383163.0;
            double pyb = 2.0/383163.0;
            double pyc = 34.0/383163.0;
            double pyd = 13.0/383163.0;
            double pye = 428.0/383163.0;
            double pyg = 61.0/383163.0;
            double pyj = 2.0/383163.0;
            double pyl = 86.0/383163.0;
            double pym = 35.0/383163.0;
            double pyn = 45.0/383163.0;
            double pyo = 37.0/383163.0;
            double pyp = 59.0/383163.0;
            double pyr = 13.0/383163.0;
            double pys = 110.0/383163.0;
            double pyt = 15.0/383163.0;
            double pyu = 2.0/383163.0;
            double pyv = 5.0/383163.0;
            double pyx = 1.0/383163.0;
            double pydot = 324.0/383163.0;
            double pycomma = 101.0/383163.0;
            double pyvacuum = 1339.0/383163.0;
            double pza = 24.0/383163.0;
            double pze = 60.0/383163.0;
            double pzh = 1.0/383163.0;
            double pzi = 23.0/383163.0;
            double pzl = 3.0/383163.0;
            double pzo = 27.0/383163.0;
            double pzu = 1.0/383163.0;
            double pzy = 1.0/383163.0;
            double pzz = 6.0/383163.0;
            double pzdot = 26.0/383163.0;
            double pzcomma = 36.0/383163.0;
            double pzvacuum = 523.0/383163.0;
            double pdotdot = 1.0/383163.0;
            double pdotcomma = 1.0/383163.0;
            double pdotvacuum = 523.0/383163.0;
            double pcommavacuum = 3239.0/383163.0;
            double pvacuuma = 3545.0/383163.0;
            double pvacuumb = 1949.0/383163.0;
            double pvacuumc = 3322.0/383163.0;
            double pvacuumd = 3656.0/383163.0;
            double pvacuume = 3725.0/383163.0;
            double pvacuumf = 1874.0/383163.0;
            double pvacuumg = 1047.0/383163.0;
            double pvacuumh = 1869.0/383163.0;
            double pvacuumi = 2355.0/383163.0;
            double pvacuumj = 1593.0/383163.0;
            double pvacuumk = 328.0/383163.0;
            double pvacuuml = 3593.0/383163.0;
            double pvacuumm = 2651.0/383163.0;
            double pvacuumn = 2177.0/383163.0;
            double pvacuumo = 1670.0/383163.0;
            double pvacuump = 3377.0/383163.0;
            double pvacuumq = 2645.0/383163.0;
            double pvacuumr = 2498.0/383163.0;
            double pvacuums = 3427.0/383163.0;
            double pvacuumt = 2799.0/383163.0;
            double pvacuumu = 2094.0/383163.0;
            double pvacuumv = 2285.0/383163.0;
            double pvacuumw = 41.0/383163.0;
            double pvacuumx = 4.0/383163.0;
            double pvacuumy = 620.0/383163.0;
            double pvacuumz = 28.0/383163.0;
            double pvacuumdot = 108.0/383163.0;
            double pvacuumcomma = 278.0/383163.0;  
            double pvacuumvacuum = 3793.0/383163.0;  
            
            double entropypaa = paa*(Math.log(1/paa));
            double entropypab = pab*(Math.log(1/pab));
            double entropypac = pac*(Math.log(1/pac));
            double entropypad = pad*(Math.log(1/pad));
            double entropypae = pae*(Math.log(1/pae));
            double entropypaf = paf*(Math.log(1/paf));
            double entropypag = pag*(Math.log(1/pag));
            double entropypah = pah*(Math.log(1/pah));
            double entropypai = pai*(Math.log(1/pai));
            double entropypaj = paj*(Math.log(1/paj));
            double entropypak = pak*(Math.log(1/pak));
            double entropypal = pal*(Math.log(1/pal));
            double entropypam = pam*(Math.log(1/pam));
            double entropypan = pan*(Math.log(1/pan));
            double entropypao = pao*(Math.log(1/pao));
            double entropypap = pap*(Math.log(1/pap));
            double entropypaq = paq*(Math.log(1/paq));
            double entropypar = par*(Math.log(1/par));
            double entropypas = pas*(Math.log(1/pas));
            double entropypat = pat*(Math.log(1/pat));
            double entropypau = pau*(Math.log(1/pau));
            double entropypav = pav*(Math.log(1/pav));
            double entropypaw = paw*(Math.log(1/paw));
            double entropypax = pax*(Math.log(1/pax));
            double entropypay = pay*(Math.log(1/pay));
            double entropypaz = paz*(Math.log(1/paz));
            double entropypadot = padot*(Math.log(1/padot));
            double entropypacomma = pacomma*(Math.log(1/pacomma));
            double entropypavacuum = pavacuum*(Math.log(1/pavacuum));
            double entropypba = pba*(Math.log(1/pba));
            double entropypbb = pbb*(Math.log(1/pbb));
            double entropypbc = pbc*(Math.log(1/pbc));
            double entropypbd = pbd*(Math.log(1/pbd));
            double entropypbe = pbe*(Math.log(1/pbe));
            double entropypbi = pbi*(Math.log(1/pbi));
            double entropypbj = pbj*(Math.log(1/pbj));
            double entropypbl = pbl*(Math.log(1/pbl));
            double entropypbm = pbm*(Math.log(1/pbm));
            double entropypbo = pbo*(Math.log(1/pbo));
            double entropypbr = pbr*(Math.log(1/pbr));
            double entropypbs = pbs*(Math.log(1/pbs));
            double entropypbt = pbt*(Math.log(1/pbt));
            double entropypbu = pbu*(Math.log(1/pbu));
            double entropypby = pby*(Math.log(1/pby));
            double entropypbdot = pbdot*(Math.log(1/pbdot));
            double entropypbcomma = pbcomma*(Math.log(1/pbcomma));
            double entropypbvacuum = pbvacuum*(Math.log(1/pbvacuum));
            double entropypca = pca*(Math.log(1/pca));
            double entropypcc = pcc*(Math.log(1/pcc));
            double entropypcd = pcd*(Math.log(1/pcd));
            double entropypce = pce*(Math.log(1/pce));
            double entropypch = pch*(Math.log(1/pch));
            double entropypci = pci*(Math.log(1/pci));
            double entropypck = pck*(Math.log(1/pck));
            double entropypcl = pcl*(Math.log(1/pcl));
            double entropypcm = pcm*(Math.log(1/pcm));
            double entropypco = pco*(Math.log(1/pco));
            double entropypcq = pcq*(Math.log(1/pcq));
            double entropypcr = pcr*(Math.log(1/pcr));
            double entropypcs = pcs*(Math.log(1/pcs));
            double entropypct = pct*(Math.log(1/pct));
            double entropypcu = pcu*(Math.log(1/pcu));
            double entropypcv = pcv*(Math.log(1/pcv));
            double entropypcy = pcy*(Math.log(1/pcy));
            double entropypcdot = pcdot*(Math.log(1/pcdot));
            double entropypccomma = pccomma*(Math.log(1/pccomma));
            double entropypcvacuum = pcvacuum*(Math.log(1/pcvacuum));
            double entropypda = pda*(Math.log(1/pda));
            double entropypdb = pdb*(Math.log(1/pdb));
            double entropypdc = pdc*(Math.log(1/pdc));
            double entropypdd = pdd*(Math.log(1/pdd));
            double entropypde = pde*(Math.log(1/pde));
            double entropypdg = pdg*(Math.log(1/pdg));
            double entropypdh = pdh*(Math.log(1/pdh));
            double entropypdi = pdi*(Math.log(1/pdi));
            double entropypdj = pdj*(Math.log(1/pdj));
            double entropypdk = pdk*(Math.log(1/pdk));
            double entropypdl = pdl*(Math.log(1/pdl));
            double entropypdm = pdm*(Math.log(1/pdm));
            double entropypdn = pdn*(Math.log(1/pdn));
            double entropypdo = pdo*(Math.log(1/pdo));
            double entropypdr = pdr*(Math.log(1/pdr));
            double entropypds = pds*(Math.log(1/pds));
            double entropypdt = pdt*(Math.log(1/pdt));
            double entropypdu = pdu*(Math.log(1/pdu));
            double entropypdv = pdv*(Math.log(1/pdv));
            double entropypdw = pdw*(Math.log(1/pdw));
            double entropypdy = pdy*(Math.log(1/pdy));
            double entropypddot = pddot*(Math.log(1/pddot));
            double entropypdcomma = pdcomma*(Math.log(1/pdcomma));
            double entropypdvacuum = pdvacuum*(Math.log(1/pdvacuum));
            double entropypea = pea*(Math.log(1/pea));
            double entropypeb = peb*(Math.log(1/peb));
            double entropypec = pec*(Math.log(1/pec));
            double entropyped = ped*(Math.log(1/ped));
            double entropypee = pee*(Math.log(1/pee));
            double entropypef = pef*(Math.log(1/pef));
            double entropypeg = peg*(Math.log(1/peg));
            double entropypeh = peh*(Math.log(1/peh));
            double entropypei = pei*(Math.log(1/pei));
            double entropypej = pej*(Math.log(1/pej));
            double entropypek = pek*(Math.log(1/pek));
            double entropypel = pel*(Math.log(1/pel));
            double entropypem = pem*(Math.log(1/pem));
            double entropypen = pen*(Math.log(1/pen));
            double entropypeo = peo*(Math.log(1/peo));
            double entropypep = pep*(Math.log(1/pep));
            double entropypeq = peq*(Math.log(1/peq));
            double entropyper = per*(Math.log(1/per));
            double entropypes = pes*(Math.log(1/pes));
            double entropypet = pet*(Math.log(1/pet));
            double entropypeu = peu*(Math.log(1/peu));
            double entropypev = pev*(Math.log(1/pev));
            double entropypew = pew*(Math.log(1/pew));
            double entropypex = pex*(Math.log(1/pex));
            double entropypey = pey*(Math.log(1/pey));
            double entropypez = pez*(Math.log(1/pez));
            double entropypedot = pedot*(Math.log(1/pedot));
            double entropypecomma = pecomma*(Math.log(1/pecomma));
            double entropypevacuum = pevacuum*(Math.log(1/pevacuum));
            double entropypfa = pfa*(Math.log(1/pfa));
            double entropypfb = pfb*(Math.log(1/pfb));
            double entropypfe = pfe*(Math.log(1/pfe));
            double entropypff = pff*(Math.log(1/pff));
            double entropypfh = pfh*(Math.log(1/pfh));
            double entropypfi = pfi*(Math.log(1/pfi));
            double entropypfj = pfj*(Math.log(1/pfj));
            double entropypfl = pfl*(Math.log(1/pfl));
            double entropypfo = pfo*(Math.log(1/pfo));
            double entropypfr = pfr*(Math.log(1/pfr));
            double entropypfs = pfs*(Math.log(1/pfs));
            double entropypft = pft*(Math.log(1/pft));
            double entropypfu = pfu*(Math.log(1/pfu));
            double entropypfdot = pfdot*(Math.log(1/pfdot));
            double entropypfcomma = pfcomma*(Math.log(1/pfcomma));
            double entropypfvacuum = pfvacuum*(Math.log(1/pfvacuum)); 
            double entropypga = pga*(Math.log(1/pga));
            double entropypgb = pgb*(Math.log(1/pgb));
            double entropypgd = pgd*(Math.log(1/pgd));
            double entropypge = pge*(Math.log(1/pge));
            double entropypgg = pgg*(Math.log(1/pgg));
            double entropypgh = pgh*(Math.log(1/pgh));
            double entropypgi = pgi*(Math.log(1/pgi));
            double entropypgj = pgj*(Math.log(1/pgj));
            double entropypgl = pgl*(Math.log(1/pgl));
            double entropypgm = pgm*(Math.log(1/pgm));
            double entropypgn = pgn*(Math.log(1/pgn));
            double entropypgo = pgo*(Math.log(1/pgo));
            double entropypgr = pgr*(Math.log(1/pgr));
            double entropypgs = pgs*(Math.log(1/pgs));
            double entropypgt = pgt*(Math.log(1/pgt));
            double entropypgu = pgu*(Math.log(1/pgu));
            double entropypgv = pgv*(Math.log(1/pgv));
            double entropypgy = pgy*(Math.log(1/pgy));
            double entropypgz = pgz*(Math.log(1/pgz));
            double entropypgdot = pgdot*(Math.log(1/pgdot));
            double entropypgcomma = pgcomma*(Math.log(1/pgcomma));
            double entropypgvacuum = pgvacuum*(Math.log(1/pgvacuum));
            double entropypha = pha*(Math.log(1/pha));
            double entropyphe = phe*(Math.log(1/phe));
            double entropyphi = phi*(Math.log(1/phi));
            double entropyphl = phl*(Math.log(1/phl));
            double entropyphm = phm*(Math.log(1/phm));
            double entropyphn = phn*(Math.log(1/phn));
            double entropypho = pho*(Math.log(1/pho));
            double entropyphr = phr*(Math.log(1/phr));
            double entropypht = pht*(Math.log(1/pht));
            double entropyphu = phu*(Math.log(1/phu));
            double entropyphv = phv*(Math.log(1/phv));
            double entropyphy = phy*(Math.log(1/phy));
            double entropyphdot = phdot*(Math.log(1/phdot));
            double entropyphcomma = phcomma*(Math.log(1/phcomma));
            double entropyphvacuum = phvacuum*(Math.log(1/phvacuum));
            double entropypia = pia*(Math.log(1/pia));
            double entropypib = pib*(Math.log(1/pib));
            double entropypic = pic*(Math.log(1/pic));
            double entropypid = pid*(Math.log(1/pid));
            double entropypie = pie*(Math.log(1/pie));
            double entropypif = pif*(Math.log(1/pif));
            double entropypig = pig*(Math.log(1/pig));
            double entropypih = pih*(Math.log(1/pih));
            double entropypii = pii*(Math.log(1/pii));
            double entropypij = pij*(Math.log(1/pij));
            double entropypik = pik*(Math.log(1/pik));
            double entropypil = pil*(Math.log(1/pil));
            double entropypim = pim*(Math.log(1/pim));
            double entropypin = pin*(Math.log(1/pin));
            double entropypio = pio*(Math.log(1/pio));
            double entropypip = pip*(Math.log(1/pip));
            double entropypiq = piq*(Math.log(1/piq));
            double entropypir = pir*(Math.log(1/pir));
            double entropypis = pis*(Math.log(1/pis));
            double entropypit = pit*(Math.log(1/pit));
            double entropypiu = piu*(Math.log(1/piu));
            double entropypiv = piv*(Math.log(1/piv));
            double entropypix = pix*(Math.log(1/pix));
            double entropypiz = piz*(Math.log(1/piz));
            double entropypidot = pidot*(Math.log(1/pidot));
            double entropypicomma = picomma*(Math.log(1/picomma));
            double entropypivacuum = pivacuum*(Math.log(1/pivacuum));
            double entropypja = pja*(Math.log(1/pja));
            double entropypje = pje*(Math.log(1/pje));
            double entropypji = pji*(Math.log(1/pji));
            double entropypjo = pjo*(Math.log(1/pjo));
            double entropypju = pju*(Math.log(1/pju));
            double entropypjdot = pjdot*(Math.log(1/pjdot));
            double entropypjvacuum = pjvacuum*(Math.log(1/pjvacuum));
            double entropypka = pka*(Math.log(1/pka));
            double entropypke = pke*(Math.log(1/pke));
            double entropypkh = pkh*(Math.log(1/pkh));
            double entropypki = pki*(Math.log(1/pki));
            double entropypkj = pkj*(Math.log(1/pkj));
            double entropypkk = pkk*(Math.log(1/pkk));
            double entropypkl = pkl*(Math.log(1/pkl));
            double entropypkm = pkm*(Math.log(1/pkm));
            double entropypkn = pkn*(Math.log(1/pkn));
            double entropypko = pko*(Math.log(1/pko));
            double entropypkp = pkp*(Math.log(1/pkp));
            double entropypkr = pkr*(Math.log(1/pkr));
            double entropypks = pks*(Math.log(1/pks));
            double entropypkt = pkt*(Math.log(1/pkt));
            double entropypku = pku*(Math.log(1/pku));
            double entropypkv = pkv*(Math.log(1/pkv));
            double entropypky = pky*(Math.log(1/pky));
            double entropypkdot = pkdot*(Math.log(1/pkdot));
            double entropypkcomma = pkcomma*(Math.log(1/pkcomma));
            double entropypkvacuum = pkvacuum*(Math.log(1/pkvacuum));
            double entropypla = pla*(Math.log(1/pla));
            double entropyplb = plb*(Math.log(1/plb));
            double entropyplc = plc*(Math.log(1/plc));
            double entropypld = pld*(Math.log(1/pld));
            double entropyple = ple*(Math.log(1/ple));
            double entropyplf = plf*(Math.log(1/plf));
            double entropyplg = plg*(Math.log(1/plg));
            double entropyplh = plh*(Math.log(1/plh));
            double entropypli = pli*(Math.log(1/pli));
            double entropyplj = plj*(Math.log(1/plj));
            double entropyplk = plk*(Math.log(1/plk));
            double entropypll = pll*(Math.log(1/pll));
            double entropyplm = plm*(Math.log(1/plm));
            double entropypln = pln*(Math.log(1/pln));
            double entropyplo = plo*(Math.log(1/plo));
            double entropyplp = plp*(Math.log(1/plp));
            double entropyplq = plq*(Math.log(1/plq));
            double entropyplr = plr*(Math.log(1/plr));
            double entropypls = pls*(Math.log(1/pls));
            double entropyplt = plt*(Math.log(1/plt));
            double entropyplu = plu*(Math.log(1/plu));
            double entropyplv = plv*(Math.log(1/plv));
            double entropyply = ply*(Math.log(1/ply));
            double entropyplz = plz*(Math.log(1/plz));
            double entropypldot = pldot*(Math.log(1/pldot));
            double entropyplcomma = plcomma*(Math.log(1/plcomma));
            double entropyplvacuum = plvacuum*(Math.log(1/plvacuum));
            double entropypma = pma*(Math.log(1/pma));
            double entropypmb = pmb*(Math.log(1/pmb));
            double entropypmd = pmd*(Math.log(1/pmd));
            double entropypme = pme*(Math.log(1/pme));
            double entropypmi = pmi*(Math.log(1/pmi));
            double entropypml = pml*(Math.log(1/pml));
            double entropypmm = pmm*(Math.log(1/pmm));
            double entropypmn = pmn*(Math.log(1/pmn));
            double entropypmo = pmo*(Math.log(1/pmo));
            double entropypmp = pmp*(Math.log(1/pmp));
            double entropypms = pms*(Math.log(1/pms));
            double entropypmu = pmu*(Math.log(1/pmu));
            double entropypmw = pmw*(Math.log(1/pmw));
            double entropypmy = pmy*(Math.log(1/pmy));
            double entropypmdot = pmdot*(Math.log(1/pmdot));
            double entropypmcomma = pmcomma*(Math.log(1/pmcomma));
            double entropypmvacuum = pmvacuum*(Math.log(1/pmvacuum));
            double entropypna = pna*(Math.log(1/pna));
            double entropypnb = pnb*(Math.log(1/pnb));
            double entropypnc = pnc*(Math.log(1/pnc));
            double entropypnd = pnd*(Math.log(1/pnd));
            double entropypne = pne*(Math.log(1/pne));
            double entropypnf = pnf*(Math.log(1/pnf));
            double entropypng = png*(Math.log(1/png));
            double entropypnh = pnh*(Math.log(1/pnh));
            double entropypni = pni*(Math.log(1/pni));
            double entropypnj = pnj*(Math.log(1/pnj));
            double entropypnk = pnk*(Math.log(1/pnk));
            double entropypnl = pnl*(Math.log(1/pnl));
            double entropypnm = pnm*(Math.log(1/pnm));
            double entropypnn = pnn*(Math.log(1/pnn));
            double entropypno = pno*(Math.log(1/pno));
            double entropypnp = pnp*(Math.log(1/pnp));
            double entropypnq = pnq*(Math.log(1/pnq));
            double entropypnr = pnr*(Math.log(1/pnr));
            double entropypns = pns*(Math.log(1/pns));
            double entropypnt = pnt*(Math.log(1/pnt));
            double entropypnu = pnu*(Math.log(1/pnu));
            double entropypnv = pnv*(Math.log(1/pnv));
            double entropypnx = pnx*(Math.log(1/pnx));
            double entropypny = pny*(Math.log(1/pny));
            double entropypnz = pnz*(Math.log(1/pnz));
            double entropypndot = pndot*(Math.log(1/pndot));
            double entropypncomma = pncomma*(Math.log(1/pncomma));
            double entropypnvacuum = pnvacuum*(Math.log(1/pnvacuum));
            double entropypoa = poa*(Math.log(1/poa));
            double entropypob = pob*(Math.log(1/pob));
            double entropypoc = poc*(Math.log(1/poc));
            double entropypod = pod*(Math.log(1/pod));
            double entropypoe = poe*(Math.log(1/poe));
            double entropypof = pof*(Math.log(1/pof));
            double entropypog = pog*(Math.log(1/pog));
            double entropypoh = poh*(Math.log(1/poh));
            double entropypoi = poi*(Math.log(1/poi));
            double entropypoj = poj*(Math.log(1/poj));
            double entropypok = pok*(Math.log(1/pok));
            double entropypol = pol*(Math.log(1/pol));
            double entropypom = pom*(Math.log(1/pom));
            double entropypon = pon*(Math.log(1/pon));
            double entropypoo = poo*(Math.log(1/poo));
            double entropypop = pop*(Math.log(1/pop));
            double entropypoq = poq*(Math.log(1/poq));
            double entropypor = por*(Math.log(1/por));
            double entropypos = pos*(Math.log(1/pos));
            double entropypot = pot*(Math.log(1/pot));
            double entropypou = pou*(Math.log(1/pou));
            double entropypov = pov*(Math.log(1/pov));
            double entropypow = pow*(Math.log(1/pow));
            double entropypox = pox*(Math.log(1/pox));
            double entropypoy = poy*(Math.log(1/poy));
            double entropypodot = podot*(Math.log(1/podot));
            double entropypocomma = pocomma*(Math.log(1/pocomma));
            double entropypovacuum = povacuum*(Math.log(1/povacuum));
            double entropyppa = ppa*(Math.log(1/ppa));
            double entropyppc = ppc*(Math.log(1/ppc));
            double entropyppe = ppe*(Math.log(1/ppe));
            double entropypph = pph*(Math.log(1/pph));
            double entropyppi = ppi*(Math.log(1/ppi));
            double entropyppk = ppk*(Math.log(1/ppk));
            double entropyppl = ppl*(Math.log(1/ppl));
            double entropyppn = ppn*(Math.log(1/ppn));
            double entropyppo = ppo*(Math.log(1/ppo));
            double entropyppp = ppp*(Math.log(1/ppp));
            double entropyppr = ppr*(Math.log(1/ppr));
            double entropypps = pps*(Math.log(1/pps));
            double entropyppt = ppt*(Math.log(1/ppt));
            double entropyppu = ppu*(Math.log(1/ppu));
            double entropyppy = ppy*(Math.log(1/ppy));
            double entropyppdot = ppdot*(Math.log(1/ppdot));
            double entropyppcomma = ppcomma*(Math.log(1/ppcomma));
            double entropyppvacuum = ppvacuum*(Math.log(1/ppvacuum));
            double entropypqi = pqi*(Math.log(1/pqi));
            double entropypqu = pqu*(Math.log(1/pqu));
            double entropypqdot = pqdot*(Math.log(1/pqdot));
            double entropypqcomma = pqcomma*(Math.log(1/pqcomma));
            double entropypqvacuum = pqvacuum*(Math.log(1/pqvacuum));
            double entropypra = pra*(Math.log(1/pra));
            double entropyprb = prb*(Math.log(1/prb));
            double entropyprc = prc*(Math.log(1/prc));
            double entropyprd = prd*(Math.log(1/prd));
            double entropypre = pre*(Math.log(1/pre));
            double entropyprf = prf*(Math.log(1/prf));
            double entropyprg = prg*(Math.log(1/prg));
            double entropyprh = prh*(Math.log(1/prh));
            double entropypri = pri*(Math.log(1/pri));
            double entropyprj = prj*(Math.log(1/prj));
            double entropyprk = prk*(Math.log(1/prk));
            double entropyprl = prl*(Math.log(1/prl));
            double entropyprm = prm*(Math.log(1/prm));
            double entropyprn = prn*(Math.log(1/prn));
            double entropypro = pro*(Math.log(1/pro));
            double entropyprp = prp*(Math.log(1/prp));
            double entropyprq = prq*(Math.log(1/prq));
            double entropyprr = prr*(Math.log(1/prr));
            double entropyprs = prs*(Math.log(1/prs));
            double entropyprt = prt*(Math.log(1/prt));
            double entropypru = pru*(Math.log(1/pru));
            double entropyprv = prv*(Math.log(1/prv));
            double entropyprw = prw*(Math.log(1/prw));
            double entropypry = pry*(Math.log(1/pry));
            double entropyprz = prz*(Math.log(1/prz));
            double entropyprdot = prdot*(Math.log(1/prdot));
            double entropyprcomma = prcomma*(Math.log(1/prcomma));
            double entropyprvacuum = prvacuum*(Math.log(1/prvacuum));
            double entropypsa = psa*(Math.log(1/psa));
            double entropypsb = psb*(Math.log(1/psb));
            double entropypsc = psc*(Math.log(1/psc));
            double entropypsd = psd*(Math.log(1/psd));
            double entropypse = pse*(Math.log(1/pse));
            double entropypsf = psf*(Math.log(1/psf));
            double entropypsg = psg*(Math.log(1/psg));
            double entropypsh = psh*(Math.log(1/psh));
            double entropypsi = psi*(Math.log(1/psi));
            double entropypsj = psj*(Math.log(1/psj));
            double entropypsk = psk*(Math.log(1/psk));
            double entropypsl = psl*(Math.log(1/psl));
            double entropypsm = psm*(Math.log(1/psm));
            double entropypsn = psn*(Math.log(1/psn));
            double entropypso = pso*(Math.log(1/pso));
            double entropypsp = psp*(Math.log(1/psp));
            double entropypsq = psq*(Math.log(1/psq));
            double entropypsr = psr*(Math.log(1/psr));
            double entropypss = pss*(Math.log(1/pss));
            double entropypst = pst*(Math.log(1/pst));
            double entropypsu = psu*(Math.log(1/psu));
            double entropypsv = psv*(Math.log(1/psv));
            double entropypsw = psw*(Math.log(1/psw));
            double entropypsy = psy*(Math.log(1/psy));
            double entropypsdot = psdot*(Math.log(1/psdot));
            double entropypscomma = pscomma*(Math.log(1/pscomma));
            double entropypsvacuum = psvacuum*(Math.log(1/psvacuum));
            double entropypta = pta*(Math.log(1/pta));
            double entropyptb = ptb*(Math.log(1/ptb));
            double entropyptc = ptc*(Math.log(1/ptc));
            double entropypte = pte*(Math.log(1/pte));
            double entropypth = pth*(Math.log(1/pth));
            double entropypti = pti*(Math.log(1/pti));
            double entropyptj = ptj*(Math.log(1/ptj));
            double entropyptk = ptk*(Math.log(1/ptk));
            double entropyptl = ptl*(Math.log(1/ptl));
            double entropyptm = ptm*(Math.log(1/ptm));
            double entropyptn = ptn*(Math.log(1/ptn));
            double entropypto = pto*(Math.log(1/pto));
            double entropyptr = ptr*(Math.log(1/ptr));
            double entropypts = pts*(Math.log(1/pts));
            double entropyptt = ptt*(Math.log(1/ptt));
            double entropyptu = ptu*(Math.log(1/ptu));
            double entropyptv = ptv*(Math.log(1/ptv));
            double entropyptw = ptw*(Math.log(1/ptw));
            double entropypty = pty*(Math.log(1/pty));
            double entropyptz = ptz*(Math.log(1/ptz));
            double entropyptdot = ptdot*(Math.log(1/ptdot));
            double entropyptcomma = ptcomma*(Math.log(1/ptcomma));
            double entropyptvacuum = ptvacuum*(Math.log(1/ptvacuum));
            double entropypua = pua*(Math.log(1/pua));
            double entropypub = pub*(Math.log(1/pub));
            double entropypuc = puc*(Math.log(1/puc));
            double entropypud = pud*(Math.log(1/pud));
            double entropypue = pue*(Math.log(1/pue));
            double entropypuf = puf*(Math.log(1/puf));
            double entropypug = pug*(Math.log(1/pug));
            double entropypuh = puh*(Math.log(1/puh));
            double entropypui = pai*(Math.log(1/pui));
            double entropypuj = puj*(Math.log(1/puj));
            double entropypuk = puk*(Math.log(1/puk));
            double entropypul = pul*(Math.log(1/pul));
            double entropypum = pum*(Math.log(1/pum));
            double entropypun = pun*(Math.log(1/pun));
            double entropypuo = puo*(Math.log(1/puo));
            double entropypup = pup*(Math.log(1/pup));
            double entropypuq = puq*(Math.log(1/puq));
            double entropypur = pur*(Math.log(1/pur));
            double entropypus = pus*(Math.log(1/pus));
            double entropyput = put*(Math.log(1/put));
            double entropypuv = puv*(Math.log(1/puv));
            double entropypux = pux*(Math.log(1/pux));
            double entropypuy = puy*(Math.log(1/puy));
            double entropypuz = puz*(Math.log(1/puz));
            double entropypudot = pudot*(Math.log(1/pudot));
            double entropypucomma = pucomma*(Math.log(1/pucomma));
            double entropypuvacuum = puvacuum*(Math.log(1/puvacuum));
            double entropypva = pva*(Math.log(1/pva));
            double entropypvd = pvd*(Math.log(1/pvd));
            double entropypve = pve*(Math.log(1/pve));
            double entropypvg = pvg*(Math.log(1/pvg));
            double entropypvi = pvi*(Math.log(1/pvi));
            double entropypvl = pvl*(Math.log(1/pvl));
            double entropypvo = pvo*(Math.log(1/pvo));
            double entropypvr = pvr*(Math.log(1/pvr));
            double entropypvu = pvu*(Math.log(1/pvu));
            double entropypvdot = pvdot*(Math.log(1/pvdot));
            double entropypvcomma = pvcomma*(Math.log(1/pvcomma));
            double entropypvvacuum = pvvacuum*(Math.log(1/pvvacuum));
            double entropypwa = pwa*(Math.log(1/pwa));
            double entropypwb = pwb*(Math.log(1/pwb));
            double entropypwd = pwd*(Math.log(1/pwd));
            double entropypwe = pwe*(Math.log(1/pwe));
            double entropypwh = pwh*(Math.log(1/pwh));
            double entropypwi = pwi*(Math.log(1/pwi));
            double entropypwl = pwl*(Math.log(1/pwl));
            double entropypwn = pwn*(Math.log(1/pwn));
            double entropypwo = pwo*(Math.log(1/pwo));
            double entropypwdot = pwdot*(Math.log(1/pwdot));
            double entropypwcomma = pwcomma*(Math.log(1/pwcomma));
            double entropypwvacuum = pwvacuum*(Math.log(1/pwvacuum));
            double entropypxa = pxa*(Math.log(1/pxa));
            double entropypxc = pxc*(Math.log(1/pxc));
            double entropypxe = pxe*(Math.log(1/pxe));
            double entropypxh = pxh*(Math.log(1/pxh));
            double entropypxi = pxi*(Math.log(1/pxi));
            double entropypxo = pxo*(Math.log(1/pxo));
            double entropypxp = pxp*(Math.log(1/pxp));
            double entropypxq = pxq*(Math.log(1/pxq));
            double entropypxt = pxt*(Math.log(1/pxt));
            double entropypxu = pxu*(Math.log(1/pxu));
            double entropypxy = pxy*(Math.log(1/pxy));
            double entropypxdot = pxdot*(Math.log(1/pxdot));
            double entropypxcomma = pxcomma*(Math.log(1/pxcomma));
            double entropypxvacuum = pxvacuum*(Math.log(1/pxvacuum));
            double entropypya = pya*(Math.log(1/pya));
            double entropypyb = pyb*(Math.log(1/pyb));
            double entropypyc = pyc*(Math.log(1/pyc));
            double entropypyd = pyd*(Math.log(1/pyd));
            double entropypye = pye*(Math.log(1/pye));
            double entropypyg = pyg*(Math.log(1/pyg));
            double entropypyj = pyj*(Math.log(1/pyj));
            double entropypyl = pyl*(Math.log(1/pyl));
            double entropypym = pym*(Math.log(1/pym));
            double entropypyn = pyn*(Math.log(1/pyn));
            double entropypyo = pyo*(Math.log(1/pyo));
            double entropypyp = pyp*(Math.log(1/pyp));
            double entropypyr = pyr*(Math.log(1/pyr));
            double entropypys = pys*(Math.log(1/pys));
            double entropypyt = pyt*(Math.log(1/pyt));
            double entropypyu = pyu*(Math.log(1/pyu));
            double entropypyv = pyv*(Math.log(1/pyv));
            double entropypyx = pyx*(Math.log(1/pyx));
            double entropypydot = pydot*(Math.log(1/pydot));
            double entropypycomma = pycomma*(Math.log(1/pycomma));
            double entropypyvacuum = pyvacuum*(Math.log(1/pyvacuum));
            double entropypza = pza*(Math.log(1/pza));
            double entropypze = pze*(Math.log(1/pze));
            double entropypzh = pzh*(Math.log(1/pzh));
            double entropypzi = pzi*(Math.log(1/pzi));
            double entropypzl = pzl*(Math.log(1/pzl));
            double entropypzo = pzo*(Math.log(1/pzo));
            double entropypzu = pzu*(Math.log(1/pzu));
            double entropypzy = pzy*(Math.log(1/pzy));
            double entropypzz = pzz*(Math.log(1/pzz));
            double entropypzdot = pzdot*(Math.log(1/pzdot));
            double entropypzcomma = pzcomma*(Math.log(1/pzcomma));
            double entropypzvacuum = pzvacuum*(Math.log(1/pzvacuum));
            double entropypdotdot = pdotdot*(Math.log(1/pdotdot));
            double entropypdotcomma = pdotcomma*(Math.log(1/pdotcomma));
            double entropypdotvacuum = pdotvacuum*(Math.log(1/pdotvacuum));
            double entropypcommavacuum = pcommavacuum*(Math.log(1/pcommavacuum));
            double entropypvacuuma = pvacuuma*(Math.log(1/pvacuuma));
            double entropypvacuumb = pvacuumb*(Math.log(1/pvacuumb));
            double entropypvacuumc = pvacuumc*(Math.log(1/pvacuumc));
            double entropypvacuumd = pvacuumd*(Math.log(1/pvacuumd));
            double entropypvacuume = pvacuume*(Math.log(1/pvacuume));
            double entropypvacuumf = pvacuumf*(Math.log(1/pvacuumf));
            double entropypvacuumg = pvacuumg*(Math.log(1/pvacuumg));
            double entropypvacuumh = pvacuumh*(Math.log(1/pvacuumh));
            double entropypvacuumi = pvacuumi*(Math.log(1/pvacuumi));
            double entropypvacuumj = pvacuumj*(Math.log(1/pvacuumj));
            double entropypvacuumk = pvacuumk*(Math.log(1/pvacuumk));
            double entropypvacuuml = pvacuuml*(Math.log(1/pvacuuml));
            double entropypvacuumm = pvacuumm*(Math.log(1/pvacuumm));
            double entropypvacuumn = pvacuumn*(Math.log(1/pvacuumn));
            double entropypvacuumo = pvacuumo*(Math.log(1/pvacuumo));
            double entropypvacuump = pvacuump*(Math.log(1/pvacuump));
            double entropypvacuumq = pvacuumq*(Math.log(1/pvacuumq));
            double entropypvacuumr = pvacuumr*(Math.log(1/pvacuumr));
            double entropypvacuums = pvacuums*(Math.log(1/pvacuums));
            double entropypvacuumt = pvacuumt*(Math.log(1/pvacuumt));
            double entropypvacuumu = pvacuumu*(Math.log(1/pvacuumu));
            double entropypvacuumv = pvacuumv*(Math.log(1/pvacuumv));
            double entropypvacuumw = pvacuumw*(Math.log(1/pvacuumw));
            double entropypvacuumx = pvacuumx*(Math.log(1/pvacuumx));
            double entropypvacuumy = pvacuumy*(Math.log(1/pvacuumy));
            double entropypvacuumz = pvacuumz*(Math.log(1/pvacuumz));
            double entropypvacuumdot = pvacuumdot*(Math.log(1/pvacuumdot));
            double entropypvacuumcomma = pvacuumcomma*(Math.log(1/pvacuumcomma));
            double entropypvacuumvacuum = pvacuumvacuum*(Math.log(1/pvacuumvacuum));
            
            double sumentropy = entropypaa+entropypab+entropypac+entropypad+entropypae+entropypaf+entropypag+entropypah+entropypai+entropypaj+entropypak+entropypal+entropypam+entropypan+entropypao+entropypap+entropypaq+entropypar+entropypas+entropypat+entropypau+entropypav+entropypaw+entropypax+entropypay+entropypaz+entropypadot+entropypacomma+entropypavacuum
                               +entropypba+entropypbb+entropypbc+entropypbd+entropypbe+entropypbi+entropypbj+entropypbl+entropypbm+entropypbo+entropypbr+entropypbs+entropypbt+entropypbu+entropypby+entropypbdot+entropypbcomma+entropypbvacuum
                               +entropypca+entropypcc+entropypcd+entropypce+entropypch+entropypci+entropypck+entropypcl+entropypcm+entropypco+entropypcq+entropypcr+entropypcs+entropypct+entropypcu+entropypcv+entropypcy+entropypcdot+entropypccomma+entropypcvacuum
                               +entropypda+entropypdb+entropypdc+entropypdd+entropypde+entropypdg+entropypdh+entropypdi+entropypdj+entropypdk+entropypdl+entropypdm+entropypdn+entropypdo+entropypdr+entropypds+entropypdt+entropypdu+entropypdv+entropypdw+entropypdy+entropypddot+entropypdcomma+entropypdvacuum
                               +entropypea+entropypeb+entropypec+entropyped+entropypee+entropypef+entropypeg+entropypeh+entropypei+entropypej+entropypek+entropypel+entropypem+entropypen+entropypeo+entropypep+entropypeq+entropyper+entropypes+entropypet+entropypeu+entropypev+entropypew+entropypex+entropypey+entropypez+entropypedot+entropypecomma+entropypevacuum
                               +entropypfa+entropypfb+entropypfe+entropypff+entropypfh+entropypfi+entropypfj+entropypfl+entropypfo+entropypfr+entropypfs+entropypft+entropypfu+entropypfdot+entropypfcomma+entropypfvacuum
                               +entropypga+entropypgb+entropypgd+entropypge+entropypgg+entropypgh+entropypgi+entropypgj+entropypgl+entropypgm+entropypgn+entropypgo+entropypgr+entropypgs+entropypgt+entropypgu+entropypgv+entropypgy+entropypgz+entropypgdot+entropypgcomma+entropypgvacuum
                               +entropypha+entropyphe+entropyphi+entropyphl+entropyphm+entropyphn+entropypho+entropyphr+entropypht+entropyphu+entropyphv+entropyphy+entropyphdot+entropyphcomma+entropyphvacuum
                               +entropypia+entropypib+entropypic+entropypid+entropypie+entropypif+entropypig+entropypih+entropypii+entropypij+entropypik+entropypil+entropypim+entropypin+entropypio+entropypip+entropypiq+entropypir+entropypis+entropypit+entropypiu+entropypiv+entropypix+entropypiz+entropypidot+entropypicomma+entropypivacuum
                               +entropypja+entropypje+entropypji+entropypjo+entropypju+entropypjdot+entropypjvacuum
                               +entropypka+entropypke+entropypkh+entropypki+entropypkj+entropypkk+entropypkl+entropypkm+entropypkn+entropypko+entropypkp+entropypkr+entropypks+entropypkt+entropypku+entropypkv+entropypky+entropypkdot+entropypkcomma+entropypkvacuum
                               +entropypla+entropyplb+entropyplc+entropypld+entropyple+entropyplf+entropyplg+entropyplh+entropypli+entropyplj+entropyplk+entropypll+entropyplm+entropypln+entropyplo+entropyplp+entropyplq+entropyplr+entropypls+entropyplt+entropyplu+entropyplv+entropyply+entropyplz+entropypldot+entropyplcomma+entropyplvacuum
                               +entropypma+entropypmb+entropypmd+entropypme+entropypmi+entropypml+entropypmm+entropypmn+entropypmo+entropypmp+entropypms+entropypmu+entropypmw+entropypmy+entropypmdot+entropypmcomma+entropypmvacuum
                               +entropypna+entropypnb+entropypnc+entropypnd+entropypne+entropypnf+entropypng+entropypnh+entropypni+entropypnj+entropypnk+entropypnl+entropypnm+entropypnn+entropypno+entropypnp+entropypnq+entropypnr+entropypns+entropypnt+entropypnu+entropypnv+entropypnx+entropypny+entropypnz+entropypndot+entropypncomma+entropypnvacuum
                               +entropypoa+entropypob+entropypoc+entropypod+entropypoe+entropypof+entropypog+entropypoh+entropypoi+entropypoj+entropypok+entropypol+entropypom+entropypon+entropypoo+entropypop+entropypoq+entropypor+entropypos+entropypot+entropypou+entropypov+entropypow+entropypox+entropypoy+entropypodot+entropypocomma+entropypovacuum
                               +entropyppa+entropyppc+entropyppe+entropypph+entropyppi+entropyppk+entropyppl+entropyppn+entropyppo+entropyppp+entropyppr+entropypps+entropyppt+entropyppu+entropyppy+entropyppdot+entropyppcomma+entropyppvacuum
                               +entropypqi+entropypqu+entropypqdot+entropypqcomma+entropypqvacuum
                               +entropypra+entropyprb+entropyprc+entropyprd+entropypre+entropyprf+entropyprg+entropyprh+entropypri+entropyprj+entropyprk+entropyprl+entropyprm+entropyprn+entropypro+entropyprp+entropyprq+entropyprr+entropyprs+entropyprt+entropypru+entropyprv+entropyprw+entropypry+entropyprz+entropyprdot+entropyprcomma+entropyprvacuum
                               +entropypsa+entropypsb+entropypsc+entropypsd+entropypse+entropypsf+entropypsg+entropypsh+entropypsi+entropypsj+entropypsk+entropypsl+entropypsm+entropypsn+entropypso+entropypsp+entropypsq+entropypsr+entropypss+entropypst+entropypsu+entropypsv+entropypsw+entropypsy+entropypsdot+entropypscomma+entropypsvacuum
                               +entropypta+entropyptb+entropyptc+entropypte+entropypth+entropypti+entropyptj+entropyptk+entropyptl+entropyptm+entropyptn+entropypto+entropyptr+entropypts+entropyptt+entropyptu+entropyptv+entropyptw+entropypty+entropyptz+entropyptdot+entropyptcomma+entropyptvacuum
                               +entropypua+entropypub+entropypuc+entropypud+entropypue+entropypuf+entropypug+entropypuh+entropypui+entropypuj+entropypuk+entropypul+entropypum+entropypun+entropypuo+entropypup+entropypuq+entropypur+entropypus+entropyput+entropypuv+entropypux+entropypuy+entropypuz+entropypudot+entropypucomma+entropypuvacuum
                               +entropypva+entropypvd+entropypve+entropypvg+entropypvi+entropypvl+entropypvo+entropypvr+entropypvu+entropypvdot+entropypvcomma+entropypvvacuum
                               +entropypwa+entropypwb+entropypwd+entropypwe+entropypwh+entropypwi+entropypwl+entropypwn+entropypwo+entropypwdot+entropypwcomma+entropypwvacuum
                               +entropypxa+entropypxc+entropypxe+entropypxh+entropypxi+entropypxo+entropypxp+entropypxq+entropypxt+entropypxu+entropypxy+entropypxdot+entropypxcomma+entropypxvacuum
                               +entropypya+entropypyb+entropypyc+entropypyd+entropypye+entropypyg+entropypyj+entropypyl+entropypym+entropypyn+entropypyo+entropypyp+entropypyr+entropypys+entropypyt+entropypyu+entropypyv+entropypyx+entropypydot+entropypycomma+entropypyvacuum
                               +entropypza+entropypze+entropypzh+entropypzi+entropypzl+entropypzo+entropypzu+entropypzy+entropypzz+entropypzdot+entropypzcomma+entropypzvacuum
                               +entropypdotdot+entropypdotcomma+entropypdotvacuum+entropypcommavacuum
                               +entropypvacuuma+entropypvacuumb+entropypvacuumc+entropypvacuumd+entropypvacuume+entropypvacuumf+entropypvacuumg+entropypvacuumh+entropypvacuumi+entropypvacuumj+entropypvacuumk+entropypvacuuml+entropypvacuumm+entropypvacuumn+entropypvacuumo+entropypvacuump+entropypvacuumq+entropypvacuumr+entropypvacuums+entropypvacuumt+entropypvacuumu+entropypvacuumv+entropypvacuumw+entropypvacuumx+entropypvacuumy+entropypvacuumz+entropypvacuumdot+entropypvacuumcomma+entropypvacuumvacuum;                   
            
            System.out.println("\nP(aa)*log(1/P(aa)) = " + entropypaa );
            System.out.println("\nP(ab)*log(1/P(ab)) = " + entropypab );
            System.out.println("\nP(ac)*log(1/P(ac)) = " + entropypac );
            System.out.println("\nP(ad)*log(1/P(ad)) = " + entropypad );
            System.out.println("\nP(ae)*log(1/P(ae)) = " + entropypae );
            System.out.println("\nP(af)*log(1/P(af)) = " + entropypaf );
            System.out.println("\nP(ag)*log(1/P(ag)) = " + entropypag );
            System.out.println("\nP(ah)*log(1/P(ah)) = " + entropypah );
            System.out.println("\nP(ai)*log(1/P(ai)) = " + entropypai );
            System.out.println("\nP(aj)*log(1/P(aj)) = " + entropypaj );
            System.out.println("\nP(ak)*log(1/P(ak)) = " + entropypak );
            System.out.println("\nP(al)*log(1/P(al)) = " + entropypal );
            System.out.println("\nP(am)*log(1/P(am)) = " + entropypam );
            System.out.println("\nP(an)*log(1/P(an)) = " + entropypan );
            System.out.println("\nP(ao)*log(1/P(ao)) = " + entropypao );
            System.out.println("\nP(ap)*log(1/P(ap)) = " + entropypap );
            System.out.println("\nP(aq)*log(1/P(aq)) = " + entropypaq );
            System.out.println("\nP(ar)*log(1/P(ar)) = " + entropypar );
            System.out.println("\nP(as)*log(1/P(as)) = " + entropypas );
            System.out.println("\nP(at)*log(1/P(at)) = " + entropypat );
            System.out.println("\nP(au)*log(1/P(au)) = " + entropypau );
            System.out.println("\nP(av)*log(1/P(av)) = " + entropypav );
            System.out.println("\nP(aw)*log(1/P(aw)) = " + entropypaw );
            System.out.println("\nP(ax)*log(1/P(ax)) = " + entropypax );
            System.out.println("\nP(ay)*log(1/P(ay)) = " + entropypay );
            System.out.println("\nP(az)*log(1/P(az)) = " + entropypaz );
            System.out.println("\nP(a.)*log(1/P(a.)) = " + entropypadot );
            System.out.println("\nP(a,)*log(1/P(a,)) = " + entropypacomma );
            System.out.println("\nP(avacuum)*log(1/P(avacuum)) = " + entropypavacuum );
            System.out.println("\nP(ba)*log(1/P(ba)) = " + entropypba );
            System.out.println("\nP(bb)*log(1/P(bb)) = " + entropypbb );
            System.out.println("\nP(bc)*log(1/P(bc)) = " + entropypbc );
            System.out.println("\nP(bd)*log(1/P(bd)) = " + entropypbd );
            System.out.println("\nP(be)*log(1/P(be)) = " + entropypbe );
            System.out.println("\nP(bi)*log(1/P(bi)) = " + entropypbi );
            System.out.println("\nP(bj)*log(1/P(bj)) = " + entropypbj );
            System.out.println("\nP(bl)*log(1/P(bl)) = " + entropypbl );
            System.out.println("\nP(bm)*log(1/P(bm)) = " + entropypbm );
            System.out.println("\nP(bo)*log(1/P(bo)) = " + entropypbo );
            System.out.println("\nP(br)*log(1/P(br)) = " + entropypbr );
            System.out.println("\nP(bs)*log(1/P(bs)) = " + entropypbs );
            System.out.println("\nP(bt)*log(1/P(bt)) = " + entropypbt );
            System.out.println("\nP(bu)*log(1/P(bu)) = " + entropypbu );
            System.out.println("\nP(by)*log(1/P(by)) = " + entropypby );
            System.out.println("\nP(b.)*log(1/P(b.)) = " + entropypbdot );
            System.out.println("\nP(b,)*log(1/P(b,)) = " + entropypbcomma );
            System.out.println("\nP(bvacuum)*log(1/P(bvacuum)) = " + entropypbvacuum );
            System.out.println("\nP(ca)*log(1/P(ca)) = " + entropypca );
            System.out.println("\nP(cc)*log(1/P(cc)) = " + entropypcc );
            System.out.println("\nP(cd)*log(1/P(cd)) = " + entropypcd );
            System.out.println("\nP(ce)*log(1/P(ce)) = " + entropypce );
            System.out.println("\nP(ch)*log(1/P(ch)) = " + entropypch );
            System.out.println("\nP(ci)*log(1/P(ci)) = " + entropypci );
            System.out.println("\nP(ck)*log(1/P(ck)) = " + entropypck );
            System.out.println("\nP(cl)*log(1/P(cl)) = " + entropypcl );
            System.out.println("\nP(cm)*log(1/P(cm)) = " + entropypcm );
            System.out.println("\nP(co)*log(1/P(co)) = " + entropypco );
            System.out.println("\nP(cq)*log(1/P(cq)) = " + entropypcq );
            System.out.println("\nP(cr)*log(1/P(cr)) = " + entropypcr );
            System.out.println("\nP(cs)*log(1/P(cs)) = " + entropypcs );
            System.out.println("\nP(ct)*log(1/P(ct)) = " + entropypct );
            System.out.println("\nP(cu)*log(1/P(cu)) = " + entropypcu );
            System.out.println("\nP(cv)*log(1/P(cv)) = " + entropypcv );
            System.out.println("\nP(cy)*log(1/P(cy)) = " + entropypcy );
            System.out.println("\nP(c.)*log(1/P(c.)) = " + entropypcdot );
            System.out.println("\nP(c,)*log(1/P(c,)) = " + entropypccomma );
            System.out.println("\nP(cvacuum)*log(1/P(cvacuum)) = " + entropypcvacuum );
            System.out.println("\nP(da)*log(1/P(da)) = " + entropypda );
            System.out.println("\nP(db)*log(1/P(db)) = " + entropypdb );
            System.out.println("\nP(dc)*log(1/P(dc)) = " + entropypdc );
            System.out.println("\nP(dd)*log(1/P(dd)) = " + entropypdd );
            System.out.println("\nP(de)*log(1/P(de)) = " + entropypde );
            System.out.println("\nP(dg)*log(1/P(dg)) = " + entropypdg );
            System.out.println("\nP(dh)*log(1/P(dh)) = " + entropypdh );
            System.out.println("\nP(di)*log(1/P(di)) = " + entropypdi );
            System.out.println("\nP(dj)*log(1/P(dj)) = " + entropypdj );
            System.out.println("\nP(dk)*log(1/P(dk)) = " + entropypdk );
            System.out.println("\nP(dl)*log(1/P(dl)) = " + entropypdl );
            System.out.println("\nP(dm)*log(1/P(dm)) = " + entropypdm );
            System.out.println("\nP(dn)*log(1/P(dn)) = " + entropypdn );
            System.out.println("\nP(do)*log(1/P(do)) = " + entropypdo );
            System.out.println("\nP(dr)*log(1/P(dr)) = " + entropypdr );
            System.out.println("\nP(ds)*log(1/P(ds)) = " + entropypds );
            System.out.println("\nP(dt)*log(1/P(dt)) = " + entropypdt );
            System.out.println("\nP(du)*log(1/P(du)) = " + entropypdu );
            System.out.println("\nP(dv)*log(1/P(dv)) = " + entropypdv );
            System.out.println("\nP(dw)*log(1/P(dw)) = " + entropypdw );
            System.out.println("\nP(dy)*log(1/P(dy)) = " + entropypdy );
            System.out.println("\nP(d.)*log(1/P(d.)) = " + entropypddot );
            System.out.println("\nP(d,)*log(1/P(d,)) = " + entropypdcomma );
            System.out.println("\nP(dvacuum)*log(1/P(dvacuum)) = " + entropypdvacuum ); 
            System.out.println("\nP(ea)*log(1/P(ea)) = " + entropypea );
            System.out.println("\nP(eb)*log(1/P(eb)) = " + entropypeb );
            System.out.println("\nP(ec)*log(1/P(ec)) = " + entropypec );
            System.out.println("\nP(ed)*log(1/P(ed)) = " + entropyped );
            System.out.println("\nP(ee)*log(1/P(ee)) = " + entropypee );
            System.out.println("\nP(ef)*log(1/P(ef)) = " + entropypef );
            System.out.println("\nP(eg)*log(1/P(eg)) = " + entropypeg );
            System.out.println("\nP(eh)*log(1/P(eh)) = " + entropypeh );
            System.out.println("\nP(ei)*log(1/P(ei)) = " + entropypei );
            System.out.println("\nP(ej)*log(1/P(ej)) = " + entropypej );
            System.out.println("\nP(ek)*log(1/P(ek)) = " + entropypek );
            System.out.println("\nP(el)*log(1/P(el)) = " + entropypel );
            System.out.println("\nP(em)*log(1/P(em)) = " + entropypem );
            System.out.println("\nP(en)*log(1/P(en)) = " + entropypen );
            System.out.println("\nP(eo)*log(1/P(eo)) = " + entropypeo );
            System.out.println("\nP(ep)*log(1/P(ep)) = " + entropypep );
            System.out.println("\nP(eq)*log(1/P(eq)) = " + entropypeq );
            System.out.println("\nP(er)*log(1/P(er)) = " + entropyper );
            System.out.println("\nP(es)*log(1/P(es)) = " + entropypes );
            System.out.println("\nP(et)*log(1/P(et)) = " + entropypet );
            System.out.println("\nP(eu)*log(1/P(eu)) = " + entropypeu );
            System.out.println("\nP(ev)*log(1/P(ev)) = " + entropypev );
            System.out.println("\nP(ew)*log(1/P(ew)) = " + entropypew );
            System.out.println("\nP(ex)*log(1/P(ex)) = " + entropypex );
            System.out.println("\nP(ey)*log(1/P(ey)) = " + entropypey );
            System.out.println("\nP(ez)*log(1/P(ez)) = " + entropypez );
            System.out.println("\nP(e.)*log(1/P(e.)) = " + entropypedot );
            System.out.println("\nP(e,)*log(1/P(e,)) = " + entropypecomma );
            System.out.println("\nP(evacuum)*log(1/P(evacuum)) = " + entropypevacuum );
            System.out.println("\nP(fa)*log(1/P(fa)) = " + entropypfa );
            System.out.println("\nP(fb)*log(1/P(fb)) = " + entropypfb );
            System.out.println("\nP(fe)*log(1/P(fe)) = " + entropypfe );
            System.out.println("\nP(ff)*log(1/P(ff)) = " + entropypff );
            System.out.println("\nP(fh)*log(1/P(fh)) = " + entropypfh );
            System.out.println("\nP(fi)*log(1/P(fi)) = " + entropypfi );
            System.out.println("\nP(fj)*log(1/P(fj)) = " + entropypfj );
            System.out.println("\nP(fl)*log(1/P(fl)) = " + entropypfl );
            System.out.println("\nP(fo)*log(1/P(fo)) = " + entropypfo );
            System.out.println("\nP(fr)*log(1/P(fr)) = " + entropypfr );
            System.out.println("\nP(fs)*log(1/P(fs)) = " + entropypfs );
            System.out.println("\nP(ft)*log(1/P(ft)) = " + entropypft );
            System.out.println("\nP(fu)*log(1/P(fu)) = " + entropypfu );
            System.out.println("\nP(f.)*log(1/P(f.)) = " + entropypfdot );
            System.out.println("\nP(f,)*log(1/P(f,)) = " + entropypfcomma );
            System.out.println("\nP(fvacuum)*log(1/P(fvacuum)) = " + entropypfvacuum );
            System.out.println("\nP(ga)*log(1/P(ga)) = " + entropypga );
            System.out.println("\nP(gb)*log(1/P(gb)) = " + entropypgb );
            System.out.println("\nP(gd)*log(1/P(gd)) = " + entropypgd );
            System.out.println("\nP(ge)*log(1/P(ge)) = " + entropypge );
            System.out.println("\nP(gg)*log(1/P(gg)) = " + entropypgg );
            System.out.println("\nP(gh)*log(1/P(gh)) = " + entropypgh );
            System.out.println("\nP(gi)*log(1/P(gi)) = " + entropypgi );
            System.out.println("\nP(gj)*log(1/P(gj)) = " + entropypgj );
            System.out.println("\nP(gl)*log(1/P(gl)) = " + entropypgl );
            System.out.println("\nP(gm)*log(1/P(gm)) = " + entropypgm );
            System.out.println("\nP(gn)*log(1/P(gn)) = " + entropypgn );
            System.out.println("\nP(go)*log(1/P(go)) = " + entropypgo );
            System.out.println("\nP(gr)*log(1/P(gr)) = " + entropypgr );
            System.out.println("\nP(gs)*log(1/P(gs)) = " + entropypgs );
            System.out.println("\nP(gt)*log(1/P(gt)) = " + entropypgt );
            System.out.println("\nP(gu)*log(1/P(gu)) = " + entropypgu );
            System.out.println("\nP(gv)*log(1/P(gv)) = " + entropypgv );
            System.out.println("\nP(gy)*log(1/P(gy)) = " + entropypgy );
            System.out.println("\nP(gz)*log(1/P(gz)) = " + entropypgz );
            System.out.println("\nP(g.)*log(1/P(g.)) = " + entropypgdot );
            System.out.println("\nP(g,)*log(1/P(g,)) = " + entropypgcomma );
            System.out.println("\nP(gvacuum)*log(1/P(gvacuum)) = " + entropypgvacuum );
            System.out.println("\nP(ha)*log(1/P(ha)) = " + entropypha );
            System.out.println("\nP(he)*log(1/P(he)) = " + entropyphe );
            System.out.println("\nP(hi)*log(1/P(hi)) = " + entropyphi );
            System.out.println("\nP(hl)*log(1/P(hl)) = " + entropyphl );
            System.out.println("\nP(hm)*log(1/P(hm)) = " + entropyphm );
            System.out.println("\nP(hn)*log(1/P(hn)) = " + entropyphn );
            System.out.println("\nP(ho)*log(1/P(ho)) = " + entropypho );
            System.out.println("\nP(hr)*log(1/P(hr)) = " + entropyphr );
            System.out.println("\nP(ht)*log(1/P(ht)) = " + entropypht );
            System.out.println("\nP(hu)*log(1/P(hu)) = " + entropyphu );
            System.out.println("\nP(hv)*log(1/P(hv)) = " + entropyphv );
            System.out.println("\nP(hy)*log(1/P(hy)) = " + entropyphy );
            System.out.println("\nP(h.)*log(1/P(h.)) = " + entropyphdot );
            System.out.println("\nP(h,)*log(1/P(h,)) = " + entropyphcomma );
            System.out.println("\nP(hvacuum)*log(1/P(hvacuum)) = " + entropyphvacuum );
            System.out.println("\nP(ia)*log(1/P(ia)) = " + entropypia );
            System.out.println("\nP(ib)*log(1/P(ib)) = " + entropypib );
            System.out.println("\nP(ic)*log(1/P(ic)) = " + entropypic );
            System.out.println("\nP(id)*log(1/P(id)) = " + entropypid );
            System.out.println("\nP(ie)*log(1/P(ie)) = " + entropypie );
            System.out.println("\nP(if)*log(1/P(if)) = " + entropypif );
            System.out.println("\nP(ig)*log(1/P(ig)) = " + entropypig );
            System.out.println("\nP(ih)*log(1/P(ih)) = " + entropypih );
            System.out.println("\nP(ii)*log(1/P(ii)) = " + entropypii );
            System.out.println("\nP(ij)*log(1/P(ij)) = " + entropypij );
            System.out.println("\nP(ik)*log(1/P(ik)) = " + entropypik );
            System.out.println("\nP(il)*log(1/P(il)) = " + entropypil );
            System.out.println("\nP(im)*log(1/P(im)) = " + entropypim );
            System.out.println("\nP(in)*log(1/P(in)) = " + entropypin );
            System.out.println("\nP(io)*log(1/P(io)) = " + entropypio );
            System.out.println("\nP(ip)*log(1/P(ip)) = " + entropypip );
            System.out.println("\nP(iq)*log(1/P(iq)) = " + entropypiq );
            System.out.println("\nP(ir)*log(1/P(ir)) = " + entropypir );
            System.out.println("\nP(is)*log(1/P(is)) = " + entropypis );
            System.out.println("\nP(it)*log(1/P(it)) = " + entropypit );
            System.out.println("\nP(iu)*log(1/P(iu)) = " + entropypiu );
            System.out.println("\nP(iv)*log(1/P(iv)) = " + entropypiv );
            System.out.println("\nP(ix)*log(1/P(ix)) = " + entropypix );
            System.out.println("\nP(iz)*log(1/P(iz)) = " + entropypiz );
            System.out.println("\nP(i.)*log(1/P(i.)) = " + entropypidot );
            System.out.println("\nP(i,)*log(1/P(i,)) = " + entropypicomma );
            System.out.println("\nP(ivacuum)*log(1/P(ivacuum)) = " + entropypivacuum );
            System.out.println("\nP(ja)*log(1/P(ja)) = " + entropypja );
            System.out.println("\nP(je)*log(1/P(je)) = " + entropypje );
            System.out.println("\nP(ji)*log(1/P(ji)) = " + entropypji );
            System.out.println("\nP(jo)*log(1/P(jo)) = " + entropypjo );
            System.out.println("\nP(ju)*log(1/P(ju)) = " + entropypju );
            System.out.println("\nP(j.)*log(1/P(j.)) = " + entropypjdot );
            System.out.println("\nP(jvacuum)*log(1/P(jvacuum)) = " + entropypjvacuum );
            System.out.println("\nP(ka)*log(1/P(ka)) = " + entropypka );
            System.out.println("\nP(ke)*log(1/P(ke)) = " + entropypke );
            System.out.println("\nP(kh)*log(1/P(kh)) = " + entropypkh );
            System.out.println("\nP(ki)*log(1/P(ki)) = " + entropypki );
            System.out.println("\nP(kj)*log(1/P(kj)) = " + entropypkj );
            System.out.println("\nP(kk)*log(1/P(kk)) = " + entropypkk );
            System.out.println("\nP(kl)*log(1/P(kl)) = " + entropypkl );
            System.out.println("\nP(km)*log(1/P(km)) = " + entropypkm );
            System.out.println("\nP(kn)*log(1/P(kn)) = " + entropypkn );
            System.out.println("\nP(ko)*log(1/P(ko)) = " + entropypko );
            System.out.println("\nP(kp)*log(1/P(kp)) = " + entropypkp );
            System.out.println("\nP(kr)*log(1/P(kr)) = " + entropypkr );
            System.out.println("\nP(ks)*log(1/P(ks)) = " + entropypks );
            System.out.println("\nP(kt)*log(1/P(kt)) = " + entropypkt );
            System.out.println("\nP(ku)*log(1/P(ku)) = " + entropypku );
            System.out.println("\nP(kv)*log(1/P(kv)) = " + entropypkv );
            System.out.println("\nP(ky)*log(1/P(ky)) = " + entropypky );
            System.out.println("\nP(k.)*log(1/P(k.)) = " + entropypkdot );
            System.out.println("\nP(k,)*log(1/P(k,)) = " + entropypkcomma );
            System.out.println("\nP(avacuum)*log(1/P(kvacuum)) = " + entropypkvacuum );
            System.out.println("\nP(la)*log(1/P(la)) = " + entropypla );
            System.out.println("\nP(lb)*log(1/P(lb)) = " + entropyplb );
            System.out.println("\nP(lc)*log(1/P(lc)) = " + entropyplc );
            System.out.println("\nP(ld)*log(1/P(ld)) = " + entropypld );
            System.out.println("\nP(le)*log(1/P(le)) = " + entropyple );
            System.out.println("\nP(lf)*log(1/P(lf)) = " + entropyplf );
            System.out.println("\nP(lg)*log(1/P(lg)) = " + entropyplg );
            System.out.println("\nP(lh)*log(1/P(lh)) = " + entropyplh );
            System.out.println("\nP(li)*log(1/P(li)) = " + entropypli );
            System.out.println("\nP(lj)*log(1/P(lj)) = " + entropyplj );
            System.out.println("\nP(lk)*log(1/P(lk)) = " + entropyplk );
            System.out.println("\nP(ll)*log(1/P(ll)) = " + entropypll );
            System.out.println("\nP(lm)*log(1/P(lm)) = " + entropyplm );
            System.out.println("\nP(ln)*log(1/P(ln)) = " + entropypln );
            System.out.println("\nP(lo)*log(1/P(lo)) = " + entropyplo );
            System.out.println("\nP(lp)*log(1/P(lp)) = " + entropyplp );
            System.out.println("\nP(lq)*log(1/P(lq)) = " + entropyplq );
            System.out.println("\nP(lr)*log(1/P(lr)) = " + entropyplr );
            System.out.println("\nP(ls)*log(1/P(ls)) = " + entropypls );
            System.out.println("\nP(lt)*log(1/P(lt)) = " + entropyplt );
            System.out.println("\nP(lu)*log(1/P(lu)) = " + entropyplu );
            System.out.println("\nP(lv)*log(1/P(lv)) = " + entropyplv );
            System.out.println("\nP(ly)*log(1/P(ly)) = " + entropyply );
            System.out.println("\nP(lz)*log(1/P(lz)) = " + entropyplz );
            System.out.println("\nP(l.)*log(1/P(l.)) = " + entropypldot );
            System.out.println("\nP(l,)*log(1/P(l,)) = " + entropyplcomma );
            System.out.println("\nP(lvacuum)*log(1/P(lvacuum)) = " + entropyplvacuum );
            System.out.println("\nP(ma)*log(1/P(ma)) = " + entropypma );
            System.out.println("\nP(mb)*log(1/P(mb)) = " + entropypmb );
            System.out.println("\nP(md)*log(1/P(md)) = " + entropypmd );
            System.out.println("\nP(me)*log(1/P(me)) = " + entropypme );
            System.out.println("\nP(mi)*log(1/P(mi)) = " + entropypmi );
            System.out.println("\nP(ml)*log(1/P(ml)) = " + entropypml );
            System.out.println("\nP(mm)*log(1/P(mm)) = " + entropypmm );
            System.out.println("\nP(mn)*log(1/P(mn)) = " + entropypmn );
            System.out.println("\nP(mo)*log(1/P(mo)) = " + entropypmo );
            System.out.println("\nP(mp)*log(1/P(mp)) = " + entropypmp );
            System.out.println("\nP(ms)*log(1/P(ms)) = " + entropypms );
            System.out.println("\nP(mu)*log(1/P(mu)) = " + entropypmu );
            System.out.println("\nP(mw)*log(1/P(mw)) = " + entropypmw );
            System.out.println("\nP(my)*log(1/P(my)) = " + entropypmy );
            System.out.println("\nP(m.)*log(1/P(m.)) = " + entropypmdot );
            System.out.println("\nP(m,)*log(1/P(m,)) = " + entropypmcomma );
            System.out.println("\nP(mvacuum)*log(1/P(mvacuum)) = " + entropypmvacuum );
            System.out.println("\nP(na)*log(1/P(na)) = " + entropypna );
            System.out.println("\nP(nb)*log(1/P(nb)) = " + entropypnb );
            System.out.println("\nP(nc)*log(1/P(nc)) = " + entropypnc );
            System.out.println("\nP(nd)*log(1/P(nd)) = " + entropypnd );
            System.out.println("\nP(ne)*log(1/P(ne)) = " + entropypne );
            System.out.println("\nP(nf)*log(1/P(nf)) = " + entropypnf );
            System.out.println("\nP(ng)*log(1/P(ng)) = " + entropypng );
            System.out.println("\nP(nh)*log(1/P(nh)) = " + entropypnh );
            System.out.println("\nP(ni)*log(1/P(ni)) = " + entropypni );
            System.out.println("\nP(nj)*log(1/P(nj)) = " + entropypnj );
            System.out.println("\nP(nk)*log(1/P(nk)) = " + entropypnk );
            System.out.println("\nP(nl)*log(1/P(nl)) = " + entropypnl );
            System.out.println("\nP(nm)*log(1/P(nm)) = " + entropypnm );
            System.out.println("\nP(nn)*log(1/P(nn)) = " + entropypnn );
            System.out.println("\nP(no)*log(1/P(no)) = " + entropypno );
            System.out.println("\nP(np)*log(1/P(np)) = " + entropypnp );
            System.out.println("\nP(nq)*log(1/P(nq)) = " + entropypnq );
            System.out.println("\nP(nr)*log(1/P(nr)) = " + entropypnr );
            System.out.println("\nP(ns)*log(1/P(ns)) = " + entropypns );
            System.out.println("\nP(nt)*log(1/P(nt)) = " + entropypnt );
            System.out.println("\nP(nu)*log(1/P(nu)) = " + entropypnu );
            System.out.println("\nP(nv)*log(1/P(nv)) = " + entropypnv );
            System.out.println("\nP(nx)*log(1/P(nx)) = " + entropypnx );
            System.out.println("\nP(ny)*log(1/P(ny)) = " + entropypny );
            System.out.println("\nP(nz)*log(1/P(nz)) = " + entropypnz );
            System.out.println("\nP(n.)*log(1/P(n.)) = " + entropypndot );
            System.out.println("\nP(n,)*log(1/P(n,)) = " + entropypncomma );
            System.out.println("\nP(nvacuum)*log(1/P(nvacuum)) = " + entropypnvacuum );
            System.out.println("\nP(oa)*log(1/P(oa)) = " + entropypoa );
            System.out.println("\nP(ob)*log(1/P(ob)) = " + entropypob );
            System.out.println("\nP(oc)*log(1/P(oc)) = " + entropypoc );
            System.out.println("\nP(od)*log(1/P(od)) = " + entropypod );
            System.out.println("\nP(oe)*log(1/P(oe)) = " + entropypoe );
            System.out.println("\nP(of)*log(1/P(of)) = " + entropypof );
            System.out.println("\nP(og)*log(1/P(og)) = " + entropypog );
            System.out.println("\nP(oh)*log(1/P(oh)) = " + entropypoh );
            System.out.println("\nP(oi)*log(1/P(oi)) = " + entropypoi );
            System.out.println("\nP(oj)*log(1/P(oj)) = " + entropypoj );
            System.out.println("\nP(ok)*log(1/P(ok)) = " + entropypok );
            System.out.println("\nP(ol)*log(1/P(ol)) = " + entropypol );
            System.out.println("\nP(om)*log(1/P(om)) = " + entropypom );
            System.out.println("\nP(on)*log(1/P(on)) = " + entropypon );
            System.out.println("\nP(oo)*log(1/P(oo)) = " + entropypoo );
            System.out.println("\nP(op)*log(1/P(op)) = " + entropypop );
            System.out.println("\nP(oq)*log(1/P(oq)) = " + entropypoq );
            System.out.println("\nP(or)*log(1/P(or)) = " + entropypor );
            System.out.println("\nP(os)*log(1/P(os)) = " + entropypos );
            System.out.println("\nP(ot)*log(1/P(ot)) = " + entropypot );
            System.out.println("\nP(ou)*log(1/P(ou)) = " + entropypou );
            System.out.println("\nP(ov)*log(1/P(ov)) = " + entropypov );
            System.out.println("\nP(ow)*log(1/P(ow)) = " + entropypow );
            System.out.println("\nP(ox)*log(1/P(ox)) = " + entropypox );
            System.out.println("\nP(oy)*log(1/P(oy)) = " + entropypoy );
            System.out.println("\nP(o.)*log(1/P(o.)) = " + entropypodot );
            System.out.println("\nP(o,)*log(1/P(o,)) = " + entropypocomma );
            System.out.println("\nP(ovacuum)*log(1/P(ovacuum)) = " + entropypovacuum );
            System.out.println("\nP(pa)*log(1/P(pa)) = " + entropyppa );
            System.out.println("\nP(pc)*log(1/P(pc)) = " + entropyppc );
            System.out.println("\nP(pe)*log(1/P(pe)) = " + entropyppe );
            System.out.println("\nP(ph)*log(1/P(ph)) = " + entropypph );
            System.out.println("\nP(pi)*log(1/P(pi)) = " + entropyppi );
            System.out.println("\nP(pk)*log(1/P(pk)) = " + entropyppk );
            System.out.println("\nP(pl)*log(1/P(pl)) = " + entropyppl );
            System.out.println("\nP(pn)*log(1/P(pn)) = " + entropyppn );
            System.out.println("\nP(po)*log(1/P(po)) = " + entropyppo );
            System.out.println("\nP(pp)*log(1/P(pp)) = " + entropyppp );
            System.out.println("\nP(pr)*log(1/P(pr)) = " + entropyppr );
            System.out.println("\nP(ps)*log(1/P(ps)) = " + entropypps );
            System.out.println("\nP(pt)*log(1/P(pt)) = " + entropyppt );
            System.out.println("\nP(pu)*log(1/P(pu)) = " + entropyppu );
            System.out.println("\nP(py)*log(1/P(py)) = " + entropyppy );
            System.out.println("\nP(p.)*log(1/P(p.)) = " + entropyppdot );
            System.out.println("\nP(p,)*log(1/P(p,)) = " + entropyppcomma );
            System.out.println("\nP(pvacuum)*log(1/P(pvacuum)) = " + entropyppvacuum );
            System.out.println("\nP(qi)*log(1/P(qi)) = " + entropypqi );
            System.out.println("\nP(qu)*log(1/P(qu)) = " + entropypqu );
            System.out.println("\nP(q.)*log(1/P(q.)) = " + entropypqdot );
            System.out.println("\nP(q,)*log(1/P(q,)) = " + entropypqcomma );
            System.out.println("\nP(qvacuum)*log(1/P(qvacuum)) = " + entropypqvacuum );
            System.out.println("\nP(ra)*log(1/P(ra)) = " + entropypra );
            System.out.println("\nP(rb)*log(1/P(rb)) = " + entropyprb );
            System.out.println("\nP(rc)*log(1/P(rc)) = " + entropyprc );
            System.out.println("\nP(rd)*log(1/P(rd)) = " + entropyprd );
            System.out.println("\nP(re)*log(1/P(re)) = " + entropypre );
            System.out.println("\nP(rf)*log(1/P(rf)) = " + entropyprf );
            System.out.println("\nP(rg)*log(1/P(rg)) = " + entropyprg );
            System.out.println("\nP(rh)*log(1/P(rh)) = " + entropyprh );
            System.out.println("\nP(ri)*log(1/P(ri)) = " + entropypri );
            System.out.println("\nP(rj)*log(1/P(rj)) = " + entropyprj );
            System.out.println("\nP(rk)*log(1/P(rk)) = " + entropyprk );
            System.out.println("\nP(rl)*log(1/P(rl)) = " + entropyprl );
            System.out.println("\nP(rm)*log(1/P(rm)) = " + entropyprm );
            System.out.println("\nP(rn)*log(1/P(rn)) = " + entropyprn );
            System.out.println("\nP(ro)*log(1/P(ro)) = " + entropypro );
            System.out.println("\nP(rp)*log(1/P(rp)) = " + entropyprp );
            System.out.println("\nP(rq)*log(1/P(rq)) = " + entropyprq );
            System.out.println("\nP(rr)*log(1/P(rr)) = " + entropyprr );
            System.out.println("\nP(rs)*log(1/P(rs)) = " + entropyprs );
            System.out.println("\nP(rt)*log(1/P(rt)) = " + entropyprt );
            System.out.println("\nP(ru)*log(1/P(ru)) = " + entropypru );
            System.out.println("\nP(rv)*log(1/P(rv)) = " + entropyprv );
            System.out.println("\nP(rw)*log(1/P(rw)) = " + entropyprw );
            System.out.println("\nP(ry)*log(1/P(ry)) = " + entropypry );
            System.out.println("\nP(rz)*log(1/P(rz)) = " + entropyprz );
            System.out.println("\nP(r.)*log(1/P(r.)) = " + entropyprdot );
            System.out.println("\nP(r,)*log(1/P(r,)) = " + entropyprcomma );
            System.out.println("\nP(rvacuum)*log(1/P(rvacuum)) = " + entropyprvacuum );
            System.out.println("\nP(sa)*log(1/P(sa)) = " + entropypsa );
            System.out.println("\nP(sb)*log(1/P(sb)) = " + entropypsb );
            System.out.println("\nP(sc)*log(1/P(sc)) = " + entropypsc );
            System.out.println("\nP(sd)*log(1/P(sd)) = " + entropypsd );
            System.out.println("\nP(se)*log(1/P(se)) = " + entropypse );
            System.out.println("\nP(sf)*log(1/P(sf)) = " + entropypsf );
            System.out.println("\nP(sg)*log(1/P(sg)) = " + entropypsg );
            System.out.println("\nP(sh)*log(1/P(sh)) = " + entropypsh );
            System.out.println("\nP(si)*log(1/P(si)) = " + entropypsi );
            System.out.println("\nP(sj)*log(1/P(sj)) = " + entropypsj );
            System.out.println("\nP(sk)*log(1/P(sk)) = " + entropypsk );
            System.out.println("\nP(sl)*log(1/P(sl)) = " + entropypsl );
            System.out.println("\nP(sm)*log(1/P(sm)) = " + entropypsm );
            System.out.println("\nP(sn)*log(1/P(sn)) = " + entropypsn );
            System.out.println("\nP(so)*log(1/P(so)) = " + entropypso );
            System.out.println("\nP(sp)*log(1/P(sp)) = " + entropypsp );
            System.out.println("\nP(sq)*log(1/P(sq)) = " + entropypsq );
            System.out.println("\nP(sr)*log(1/P(sr)) = " + entropypsr );
            System.out.println("\nP(ss)*log(1/P(ss)) = " + entropypss );
            System.out.println("\nP(st)*log(1/P(st)) = " + entropypst );
            System.out.println("\nP(su)*log(1/P(su)) = " + entropypsu );
            System.out.println("\nP(sv)*log(1/P(sv)) = " + entropypsv );
            System.out.println("\nP(sw)*log(1/P(sw)) = " + entropypsw );
            System.out.println("\nP(sy)*log(1/P(sy)) = " + entropypsy );
            System.out.println("\nP(s.)*log(1/P(s.)) = " + entropypsdot );
            System.out.println("\nP(s,)*log(1/P(s,)) = " + entropypscomma );
            System.out.println("\nP(svacuum)*log(1/P(svacuum)) = " + entropypsvacuum );
            System.out.println("\nP(ta)*log(1/P(ta)) = " + entropypta );
            System.out.println("\nP(tb)*log(1/P(tb)) = " + entropyptb );
            System.out.println("\nP(tc)*log(1/P(tc)) = " + entropyptc );
            System.out.println("\nP(te)*log(1/P(te)) = " + entropypte );
            System.out.println("\nP(th)*log(1/P(th)) = " + entropypth );
            System.out.println("\nP(ti)*log(1/P(ti)) = " + entropypti );
            System.out.println("\nP(tj)*log(1/P(tj)) = " + entropyptj );
            System.out.println("\nP(tk)*log(1/P(tk)) = " + entropyptk );
            System.out.println("\nP(tl)*log(1/P(tl)) = " + entropyptl );
            System.out.println("\nP(tm)*log(1/P(tm)) = " + entropyptm );
            System.out.println("\nP(tn)*log(1/P(tn)) = " + entropyptn );
            System.out.println("\nP(to)*log(1/P(to)) = " + entropypto );
            System.out.println("\nP(tr)*log(1/P(tr)) = " + entropyptr );
            System.out.println("\nP(ts)*log(1/P(ts)) = " + entropypts );
            System.out.println("\nP(tt)*log(1/P(tt)) = " + entropyptt );
            System.out.println("\nP(tu)*log(1/P(tu)) = " + entropyptu );
            System.out.println("\nP(tv)*log(1/P(tv)) = " + entropyptv );
            System.out.println("\nP(tw)*log(1/P(tw)) = " + entropyptw );
            System.out.println("\nP(ty)*log(1/P(ty)) = " + entropypty );
            System.out.println("\nP(tz)*log(1/P(tz)) = " + entropyptz );
            System.out.println("\nP(t.)*log(1/P(t.)) = " + entropyptdot );
            System.out.println("\nP(t,)*log(1/P(t,)) = " + entropyptcomma );
            System.out.println("\nP(tvacuum)*log(1/P(tvacuum)) = " + entropyptvacuum );
            System.out.println("\nP(ua)*log(1/P(ua)) = " + entropypua );
            System.out.println("\nP(ub)*log(1/P(ub)) = " + entropypub );
            System.out.println("\nP(uc)*log(1/P(uc)) = " + entropypuc );
            System.out.println("\nP(ud)*log(1/P(ud)) = " + entropypud );
            System.out.println("\nP(ue)*log(1/P(ue)) = " + entropypue );
            System.out.println("\nP(uf)*log(1/P(uf)) = " + entropypuf );
            System.out.println("\nP(ug)*log(1/P(ug)) = " + entropypug );
            System.out.println("\nP(uh)*log(1/P(uh)) = " + entropypuh );
            System.out.println("\nP(ui)*log(1/P(ui)) = " + entropypui );
            System.out.println("\nP(uj)*log(1/P(uj)) = " + entropypuj );
            System.out.println("\nP(uk)*log(1/P(uk)) = " + entropypuk );
            System.out.println("\nP(ul)*log(1/P(ul)) = " + entropypul );
            System.out.println("\nP(um)*log(1/P(um)) = " + entropypum );
            System.out.println("\nP(un)*log(1/P(un)) = " + entropypun );
            System.out.println("\nP(uo)*log(1/P(uo)) = " + entropypuo );
            System.out.println("\nP(up)*log(1/P(up)) = " + entropypup );
            System.out.println("\nP(uq)*log(1/P(uq)) = " + entropypuq );
            System.out.println("\nP(ur)*log(1/P(ur)) = " + entropypur );
            System.out.println("\nP(us)*log(1/P(us)) = " + entropypus );
            System.out.println("\nP(ut)*log(1/P(ut)) = " + entropyput );
            System.out.println("\nP(uv)*log(1/P(uv)) = " + entropypuv );
            System.out.println("\nP(ux)*log(1/P(ux)) = " + entropypux );
            System.out.println("\nP(uy)*log(1/P(uy)) = " + entropypuy );
            System.out.println("\nP(uz)*log(1/P(uz)) = " + entropypuz );
            System.out.println("\nP(u.)*log(1/P(u.)) = " + entropypudot );
            System.out.println("\nP(u,)*log(1/P(u,)) = " + entropypucomma );
            System.out.println("\nP(uvacuum)*log(1/P(uvacuum)) = " + entropypuvacuum );
            System.out.println("\nP(va)*log(1/P(va)) = " + entropypva );
            System.out.println("\nP(vd)*log(1/P(vd)) = " + entropypvd );
            System.out.println("\nP(ve)*log(1/P(ve)) = " + entropypve );
            System.out.println("\nP(vg)*log(1/P(vg)) = " + entropypvg );
            System.out.println("\nP(vi)*log(1/P(vi)) = " + entropypvi );
            System.out.println("\nP(vl)*log(1/P(vl)) = " + entropypvl );
            System.out.println("\nP(vo)*log(1/P(vo)) = " + entropypvo );
            System.out.println("\nP(vr)*log(1/P(vr)) = " + entropypvr );
            System.out.println("\nP(vu)*log(1/P(vu)) = " + entropypvu );
            System.out.println("\nP(v.)*log(1/P(v.)) = " + entropypvdot );
            System.out.println("\nP(v,)*log(1/P(v,)) = " + entropypvcomma );
            System.out.println("\nP(vvacuum)*log(1/P(vvacuum)) = " + entropypvvacuum );
            System.out.println("\nP(wa)*log(1/P(wa)) = " + entropypwa );
            System.out.println("\nP(wb)*log(1/P(wb)) = " + entropypwb );
            System.out.println("\nP(wd)*log(1/P(wd)) = " + entropypwd );
            System.out.println("\nP(we)*log(1/P(we)) = " + entropypwe );
            System.out.println("\nP(wh)*log(1/P(wh)) = " + entropypwh );
            System.out.println("\nP(wi)*log(1/P(wi)) = " + entropypwi );
            System.out.println("\nP(wl)*log(1/P(wl)) = " + entropypwl );
            System.out.println("\nP(wn)*log(1/P(wn)) = " + entropypwn );
            System.out.println("\nP(wo)*log(1/P(wo)) = " + entropypwo );
            System.out.println("\nP(w.)*log(1/P(w.)) = " + entropypwdot );
            System.out.println("\nP(w,)*log(1/P(w,)) = " + entropypwcomma );
            System.out.println("\nP(wvacuum)*log(1/P(wvacuum)) = " + entropypwvacuum );
            System.out.println("\nP(xa)*log(1/P(xa)) = " + entropypxa );
            System.out.println("\nP(xc)*log(1/P(xc)) = " + entropypxc );
            System.out.println("\nP(xe)*log(1/P(xe)) = " + entropypxe );
            System.out.println("\nP(xh)*log(1/P(xh)) = " + entropypxh );
            System.out.println("\nP(xi)*log(1/P(xi)) = " + entropypxi );
            System.out.println("\nP(xo)*log(1/P(xo)) = " + entropypxo );
            System.out.println("\nP(xp)*log(1/P(xp)) = " + entropypxp );
            System.out.println("\nP(xq)*log(1/P(xq)) = " + entropypxq );
            System.out.println("\nP(xt)*log(1/P(xt)) = " + entropypxt );
            System.out.println("\nP(xu)*log(1/P(xu)) = " + entropypxu );
            System.out.println("\nP(xy)*log(1/P(xy)) = " + entropypxy );
            System.out.println("\nP(x.)*log(1/P(x.)) = " + entropypxdot );
            System.out.println("\nP(x,)*log(1/P(x,)) = " + entropypxcomma );
            System.out.println("\nP(xvacuum)*log(1/P(xvacuum)) = " + entropypxvacuum );
            System.out.println("\nP(ya)*log(1/P(ya)) = " + entropypya );
            System.out.println("\nP(yb)*log(1/P(yb)) = " + entropypyb );
            System.out.println("\nP(yc)*log(1/P(yc)) = " + entropypyc );
            System.out.println("\nP(yd)*log(1/P(yd)) = " + entropypyd );
            System.out.println("\nP(ye)*log(1/P(ye)) = " + entropypye );
            System.out.println("\nP(yg)*log(1/P(yg)) = " + entropypyg );
            System.out.println("\nP(yj)*log(1/P(yj)) = " + entropypyj );
            System.out.println("\nP(yl)*log(1/P(yl)) = " + entropypyl );
            System.out.println("\nP(ym)*log(1/P(ym)) = " + entropypym );
            System.out.println("\nP(yn)*log(1/P(yn)) = " + entropypyn );
            System.out.println("\nP(yo)*log(1/P(yo)) = " + entropypyo );
            System.out.println("\nP(yp)*log(1/P(yp)) = " + entropypyp );
            System.out.println("\nP(yr)*log(1/P(yr)) = " + entropypyr );
            System.out.println("\nP(ys)*log(1/P(ys)) = " + entropypys );
            System.out.println("\nP(yt)*log(1/P(yt)) = " + entropypyt );
            System.out.println("\nP(yu)*log(1/P(yu)) = " + entropypyu );
            System.out.println("\nP(yv)*log(1/P(yv)) = " + entropypyv );
            System.out.println("\nP(yx)*log(1/P(yx)) = " + entropypyx );
            System.out.println("\nP(y.)*log(1/P(y.)) = " + entropypydot );
            System.out.println("\nP(y,)*log(1/P(y,)) = " + entropypycomma );
            System.out.println("\nP(yvacuum)*log(1/P(yvacuum)) = " + entropypyvacuum );
            System.out.println("\nP(za)*log(1/P(za)) = " + entropypza );
            System.out.println("\nP(ze)*log(1/P(ze)) = " + entropypze );
            System.out.println("\nP(zh)*log(1/P(zh)) = " + entropypzh );
            System.out.println("\nP(zi)*log(1/P(zi)) = " + entropypzi );
            System.out.println("\nP(zl)*log(1/P(zl)) = " + entropypzl );
            System.out.println("\nP(zo)*log(1/P(zo)) = " + entropypzo );
            System.out.println("\nP(zu)*log(1/P(zu)) = " + entropypzu );
            System.out.println("\nP(zy)*log(1/P(zy)) = " + entropypzy );
            System.out.println("\nP(zz)*log(1/P(zz)) = " + entropypzz );
            System.out.println("\nP(z.)*log(1/P(z.)) = " + entropypzdot );
            System.out.println("\nP(z,)*log(1/P(z,)) = " + entropypzcomma );
            System.out.println("\nP(zvacuum)*log(1/P(zvacuum)) = " + entropypzvacuum );
            System.out.println("\nP(..)*log(1/P(..)) = " + entropypdotdot );
            System.out.println("\nP(.,)*log(1/P(.,)) = " + entropypdotcomma );
            System.out.println("\nP(.vacuum)*log(1/P(.vacuum)) = " + entropypdotvacuum );
            System.out.println("\nP(,vacuum)*log(1/P(,vacuum)) = " + entropypcommavacuum );
            System.out.println("\nP(vacuuma)*log(1/P(vacuuma)) = " + entropypvacuuma );
            System.out.println("\nP(vacuumb)*log(1/P(vacuumb)) = " + entropypvacuumb  );
            System.out.println("\nP(vacuumc)*log(1/P(vacuumc)) = " + entropypvacuumc  );
            System.out.println("\nP(vacuumd)*log(1/P(vacuumd)) = " + entropypvacuumd  );
            System.out.println("\nP(vacuume)*log(1/P(vacuume)) = " + entropypvacuume  );
            System.out.println("\nP(vacuumf)*log(1/P(vacuumf)) = " + entropypvacuumf  );
            System.out.println("\nP(vacuumg)*log(1/P(vacuumg)) = " + entropypvacuumg  );
            System.out.println("\nP(vacuumh)*log(1/P(vacuumh)) = " + entropypvacuumh  );
            System.out.println("\nP(vacuumi)*log(1/P(vacuumi)) = " + entropypvacuumi  );
            System.out.println("\nP(vacuumj)*log(1/P(vacuumj)) = " + entropypvacuumj  );
            System.out.println("\nP(vacuumk)*log(1/P(vacuumk)) = " + entropypvacuumk  );
            System.out.println("\nP(vacuuml)*log(1/P(vacuuml)) = " + entropypvacuuml  );
            System.out.println("\nP(vacuumm)*log(1/P(vacuumm)) = " + entropypvacuumm  );
            System.out.println("\nP(vacuumn)*log(1/P(vacuumn)) = " + entropypvacuumn  );
            System.out.println("\nP(vacuumo)*log(1/P(vacuumo)) = " + entropypvacuumo  );
            System.out.println("\nP(vacuump)*log(1/P(vacuump)) = " + entropypvacuump  );
            System.out.println("\nP(vacuumq)*log(1/P(vacuumq)) = " + entropypvacuumq  );
            System.out.println("\nP(vacuumr)*log(1/P(vacuumr)) = " + entropypvacuumr  );
            System.out.println("\nP(vacuums)*log(1/P(vacuums)) = " + entropypvacuums  );
            System.out.println("\nP(vacuumt)*log(1/P(vacuumt)) = " + entropypvacuumt  );
            System.out.println("\nP(vacuumu)*log(1/P(vacuumu)) = " + entropypvacuumu  );
            System.out.println("\nP(vacuumv)*log(1/P(vacuumv)) = " + entropypvacuumv  );
            System.out.println("\nP(vacuumw)*log(1/P(vacuumw)) = " + entropypvacuumw  );
            System.out.println("\nP(vacuumx)*log(1/P(vacuumx)) = " + entropypvacuumx  );
            System.out.println("\nP(vacuumy)*log(1/P(vacuumy)) = " + entropypvacuumy  );
            System.out.println("\nP(vacuumz)*log(1/P(vacuumz)) = " + entropypvacuumz  );
            System.out.println("\nP(vacuum.)*log(1/P(vacuum.)) = " + entropypvacuumdot  );
            System.out.println("\nP(vacuum,)*log(1/P(vacuum,)) = " + entropypvacuumcomma  );
            System.out.println("\nP(vacuumvacuum)*log(1/P(vacuumvacuum)) = " + entropypvacuumvacuum  );
            System.out.println("\nThe sum of the H(s) is = " + sumentropy ); 
            System.out.println("\nThe entropy H(Xn)+H(Xn+1)<H(Xn,Xn+1) = 3.263157716877365<5.453422181934593"); 
                              
            }

            private static void calculatetheconditionalentropy1() 
                    
            {
                
            double pa = 4869.0/100811.0;  
            double pb = 2578.0/100811.0;
            double pc = 4129.0/100811.0;
            double pd = 4066.0/100811.0;
            double pe = 5004.0/100811.0;
            double pf = 2424.0/100811.0;
            double pg = 2556.0/100811.0;
            double ph = 3209.0/100811.0;
            double pi = 4807.0/100811.0;
            double pj = 1949.0/100811.0;  
            double pk = 994.0/100811.0;
            double pl = 4456.0/100811.0;
            double pm = 3829.0/100811.0;
            double pn = 4606.0/100811.0;
            double po = 4681.0/100811.0;
            double pp = 3961.0/100811.0;
            double pq = 3026.0/100811.0;
            double pr = 4733.0/100811.0;
            double ps = 4654.0/100811.0;  
            double pt = 4724.0/100811.0;
            double pu = 4645.0/100811.0;
            double pv = 3388.0/100811.0;
            double pw = 82.0/100811.0;
            double px = 1605.0/100811.0;
            double py = 2214.0/100811.0;
            double pz = 666.0/100811.0;
            double pdot = 4532.0/100811.0;
            double pcomma = 3239.0/100811.0;
            double pvacuum = 5185.0/100811.0;
            
            double paa = 16.0/383163.0;
            double pab = 549.0/383163.0;
            double pac = 1026.0/383163.0;
            double pad = 360.0/383163.0;
            double pae = 12.0/383163.0;
            double paf = 354.0/383163.0;
            double pag = 878.0/383163.0;
            double pah = 84.0/383163.0;
            double pai = 3136.0/383163.0;
            double paj = 50.0/383163.0;
            double pak = 153.0/383163.0;
            double pal = 1386.0/383163.0;
            double pam = 696.0/383163.0;
            double pan = 2653.0/383163.0;
            double pao = 11.0/383163.0;
            double pap = 956.0/383163.0;
            double paq = 205.0/383163.0;
            double par = 2816.0/383163.0;
            double pas = 2115.0/383163.0;
            double pat = 1566.0/383163.0;
            double pau = 1933.0/383163.0;
            double pav = 1804.0/383163.0;
            double paw = 1.0/383163.0;
            double pax = 28.0/383163.0;
            double pay = 212.0/383163.0;
            double paz = 56.0/383163.0;
            double padot = 374.0/383163.0;
            double pacomma = 325.0/383163.0;
            double pavacuum = 3687.0/383163.0;
            double pba = 580.0/383163.0;
            double pbb = 16.0/383163.0;
            double pbc = 1.0/383163.0;
            double pbd = 2.0/383163.0;
            double pbe = 611.0/383163.0;
            double pbi = 683.0/383163.0;
            double pbj = 101.0/383163.0;
            double pbl = 800.0/383163.0;
            double pbm = 3.0/383163.0;
            double pbo = 923.0/383163.0;
            double pbr = 653.0/383163.0;
            double pbs = 129.0/383163.0;
            double pbt = 34.0/383163.0;
            double pbu = 197.0/383163.0;
            double pby = 24.0/383163.0;
            double pbdot = 3.0/383163.0;
            double pbcomma = 3.0/383163.0;
            double pbvacuum = 31.0/383163.0;
            double pca = 1293.0/383163.0;
            double pcc = 283.0/383163.0;
            double pcd = 6.0/383163.0;
            double pce = 2081.0/383163.0;
            double pch = 1732.0/383163.0;
            double pci = 973.0/383163.0;
            double pck = 136.0/383163.0;
            double pcl = 526.0/383163.0;
            double pcm = 1.0/383163.0;
            double pco = 2265.0/383163.0;
            double pcq = 30.0/383163.0;
            double pcr = 717.0/383163.0;
            double pcs = 43.0/383163.0;
            double pct = 586.0/383163.0;
            double pcu = 611.0/383163.0;
            double pcv = 2.0/383163.0;
            double pcy = 12.0/383163.0;
            double pcdot = 53.0/383163.0;
            double pccomma = 53.0/383163.0;
            double pcvacuum = 1233.0/383163.0;
            double pda = 1631.0/383163.0;
            double pdb = 1.0/383163.0;
            double pdc = 4.0/383163.0;
            double pdd = 16.0/383163.0;
            double pde = 3270.0/383163.0;
            double pdg = 2.0/383163.0;
            double pdh = 5.0/383163.0;
            double pdi = 1628.0/383163.0;
            double pdj = 3.0/383163.0;
            double pdk = 3.0/383163.0;
            double pdl = 7.0/383163.0;
            double pdm = 13.0/383163.0;
            double pdn = 17.0/383163.0;
            double pdo = 783.0/383163.0;
            double pdr = 643.0/383163.0;
            double pds = 207.0/383163.0;
            double pdt = 2.0/383163.0;
            double pdu = 948.0/383163.0;
            double pdv = 20.0/383163.0;
            double pdw = 2.0/383163.0;
            double pdy = 14.0/383163.0;
            double pddot = 139.0/383163.0;
            double pdcomma = 135.0/383163.0;
            double pdvacuum = 1484.0/383163.0;
            double pea = 749.0/383163.0;
            double peb = 207.0/383163.0;
            double pec = 1687.0/383163.0;
            double ped = 427.0/383163.0;
            double pee = 851.0/383163.0;
            double pef = 369.0/383163.0;
            double peg = 788.0/383163.0;
            double peh = 73.0/383163.0;
            double pei = 765.0/383163.0;
            double pej = 159.0/383163.0;
            double pek = 14.0/383163.0;
            double pel = 2079.0/383163.0;
            double pem = 1987.0/383163.0;
            double pen = 3527.0/383163.0;
            double peo = 58.0/383163.0;
            double pep = 1083.0/383163.0;
            double peq = 93.0/383163.0;
            double per = 2982.0/383163.0;
            double pes = 3254.0/383163.0;
            double pet = 2975.0/383163.0;
            double peu = 2153.0/383163.0;
            double pev = 980.0/383163.0;
            double pew = 3.0/383163.0;
            double pex = 512.0/383163.0;
            double pey = 15.0/383163.0;
            double pez = 550.0/383163.0;
            double pedot = 2328.0/383163.0;
            double pecomma = 1578.0/383163.0;
            double pevacuum = 4445.0/383163.0;
            double pfa = 1100.0/383163.0;
            double pfb = 5.0/383163.0;
            double pfe = 677.0/383163.0;
            double pff = 493.0/383163.0;
            double pfh = 1.0/383163.0;
            double pfi = 838.0/383163.0;
            double pfj = 18.0/383163.0;
            double pfl = 226.0/383163.0;
            double pfo = 536.0/383163.0;
            double pfr = 318.0/383163.0;
            double pfs = 29.0/383163.0;
            double pft = 126.0/383163.0;
            double pfu = 207.0/383163.0;
            double pfdot = 29.0/383163.0;
            double pfcomma = 26.0/383163.0;
            double pfvacuum = 184.0/383163.0;
            double pga = 839.0/383163.0;
            double pgb = 4.0/383163.0;
            double pgd = 29.0/383163.0;
            double pge = 1487.0/383163.0;
            double pgg = 33.0/383163.0;
            double pgh = 23.0/383163.0;
            double pgi = 292.0/383163.0;
            double pgj = 2.0/383163.0;
            double pgl = 185.0/383163.0;
            double pgm = 11.0/383163.0;
            double pgn = 457.0/383163.0;
            double pgo = 157.0/383163.0;
            double pgr = 528.0/383163.0;
            double pgs = 25.0/383163.0;
            double pgt = 170.0/383163.0;
            double pgu = 322.0/383163.0;
            double pgv = 17.0/383163.0;
            double pgy = 14.0/383163.0;
            double pgz = 1.0/383163.0;
            double pgdot = 58.0/383163.0;
            double pgcomma = 42.0/383163.0;
            double pgvacuum = 188.0/383163.0; 
            double pha = 2016.0/383163.0;
            double phe = 1233.0/383163.0;
            double phi = 469.0/383163.0;
            double phl = 5.0/383163.0;
            double phm = 7.0/383163.0;
            double phn = 44.0/383163.0;
            double pho = 1181.0/383163.0;
            double phr = 38.0/383163.0;
            double pht = 12.0/383163.0;
            double phu = 154.0/383163.0;
            double phv = 1.0/383163.0;
            double phy = 30.0/383163.0;
            double phdot = 3.0/383163.0;
            double phcomma = 17.0/383163.0;
            double phvacuum = 93.0/383163.0;
            double pia = 614.0/383163.0;
            double pib = 271.0/383163.0;
            double pic = 781.0/383163.0;
            double pid = 672.0/383163.0;
            double pie = 2246.0/383163.0;
            double pif = 279.0/383163.0;
            double pig = 779.0/383163.0;
            double pih = 12.0/383163.0;
            double pii = 3.0/383163.0;
            double pij = 4.0/383163.0;
            double pik = 109.0/383163.0;
            double pil = 2455.0/383163.0;
            double pim = 727.0/383163.0;
            double pin = 2280.0/383163.0;
            double pio = 1000.0/383163.0;
            double pip = 185.0/383163.0;
            double piq = 543.0/383163.0;
            double pir = 1980.0/383163.0;
            double pis = 2597.0/383163.0;
            double pit = 3046.0/383163.0;
            double piu = 38.0/383163.0;
            double piv = 533.0/383163.0;
            double pix = 293.0/383163.0;
            double piz = 18.0/383163.0;
            double pidot = 352.0/383163.0;
            double picomma = 356.0/383163.0;
            double pivacuum = 2124.0/383163.0;   
            double pja = 337.0/383163.0;
            double pje = 959.0/383163.0;
            double pji = 9.0/383163.0;
            double pjo = 661.0/383163.0;
            double pju = 351.0/383163.0;
            double pjdot = 1.0/383163.0;
            double pjvacuum = 302.0/383163.0;
            double pka = 440.0/383163.0;
            double pke = 298.0/383163.0;
            double pkh = 2.0/383163.0;
            double pki = 54.0/383163.0;
            double pkj = 28.0/383163.0;
            double pkk = 21.0/383163.0;
            double pkl = 2.0/383163.0;
            double pkm = 1.0/383163.0;
            double pkn = 16.0/383163.0;
            double pko = 66.0/383163.0;
            double pkp = 1.0/383163.0;
            double pkr = 26.0/383163.0;
            double pks = 23.0/383163.0;
            double pkt = 4.0/383163.0;
            double pku = 8.0/383163.0;
            double pkv = 17.0/383163.0;
            double pky = 3.0/383163.0;
            double pkdot = 30.0/383163.0;
            double pkcomma = 38.0/383163.0;
            double pkvacuum = 93.0/383163.0; 
            double pla = 2685.0/383163.0;
            double plb = 13.0/383163.0;
            double plc = 52.0/383163.0;
            double pld = 38.0/383163.0;
            double ple = 3562.0/383163.0;
            double plf = 38.0/383163.0;
            double plg = 67.0/383163.0;
            double plh = 32.0/383163.0;
            double pli = 1271.0/383163.0;
            double plj = 2.0/383163.0;
            double plk = 17.0/383163.0;
            double pll = 1940.0/383163.0;
            double plm = 193.0/383163.0;
            double pln = 1.0/383163.0;
            double plo = 994.0/383163.0;
            double plp = 19.0/383163.0;
            double plq = 370.0/383163.0;
            double plr = 9.0/383163.0;
            double pls = 510.0/383163.0;
            double plt = 116.0/383163.0;
            double plu = 1301.0/383163.0;
            double plv = 146.0/383163.0;
            double ply = 64.0/383163.0;
            double plz = 1.0/383163.0;
            double pldot = 299.0/383163.0;
            double plcomma = 181.0/383163.0;
            double plvacuum = 2546.0/383163.0; 
            double pma = 2071.0/383163.0;
            double pmb = 541.0/383163.0;
            double pmd = 1.0/383163.0;
            double pme = 2605.0/383163.0;
            double pmi = 915.0/383163.0;
            double pml = 2.0/383163.0;
            double pmm = 1281.0/383163.0;
            double pmn = 26.0/383163.0;
            double pmo = 1050.0/383163.0;
            double pmp = 985.0/383163.0;
            double pms = 27.0/383163.0;
            double pmu = 308.0/383163.0;
            double pmw = 3.0/383163.0;
            double pmy = 11.0/383163.0;
            double pmdot = 150.0/383163.0;
            double pmcomma = 52.0/383163.0;
            double pmvacuum = 303.0/383163.0; 
            double pna = 1109.0/383163.0;
            double pnb = 1.0/383163.0;
            double pnc = 1181.0/383163.0;
            double pnd = 1906.0/383163.0;
            double pne = 2633.0/383163.0;
            double pnf = 320.0/383163.0;
            double png = 682.0/383163.0;
            double pnh = 159.0/383163.0;
            double pni = 731.0/383163.0;
            double pnj = 45.0/383163.0;
            double pnk = 23.0/383163.0;
            double pnl = 41.0/383163.0;
            double pnm = 9.0/383163.0;
            double pnn = 975.0/383163.0;
            double pno = 1120.0/383163.0;
            double pnp = 1.0/383163.0;
            double pnq = 226.0/383163.0;
            double pnr = 122.0/383163.0;
            double pns = 2027.0/383163.0;
            double pnt = 3026.0/383163.0;
            double pnu = 453.0/383163.0;
            double pnv = 253.0/383163.0;
            double pnx = 3.0/383163.0;
            double pny = 36.0/383163.0;
            double pnz = 26.0/383163.0;
            double pndot = 739.0/383163.0;
            double pncomma = 549.0/383163.0;
            double pnvacuum = 3277.0/383163.0; 
            double poa = 11.0/383163.0;
            double pob = 357.0/383163.0;
            double poc = 454.0/383163.0;
            double pod = 206.0/383163.0;
            double poe = 194.0/383163.0;
            double pof = 159.0/383163.0;
            double pog = 140.0/383163.0;
            double poh = 44.0/383163.0;
            double poi = 2140.0/383163.0;
            double poj = 13.0/383163.0;
            double pok = 57.0/383163.0;
            double pol = 1041.0/383163.0;
            double pom = 1594.0/383163.0;
            double pon = 3145.0/383163.0;
            double poo = 72.0/383163.0;
            double pop = 520.0/383163.0;
            double poq = 81.0/383163.0;
            double por = 1589.0/383163.0;
            double pos = 972.0/383163.0;
            double pot = 847.0/383163.0;
            double pou = 3281.0/383163.0;
            double pov = 100.0/383163.0;
            double pow = 26.0/383163.0;
            double pox = 39.0/383163.0;
            double poy = 281.0/383163.0;
            double podot = 99.0/383163.0;
            double pocomma = 59.0/383163.0;
            double povacuum = 283.0/383163.0;
            double ppa = 2253.0/383163.0;
            double ppc = 22.0/383163.0;
            double ppe = 1765.0/383163.0;
            double pph = 264.0/383163.0;
            double ppi = 669.0/383163.0;
            double ppk = 6.0/383163.0;
            double ppl = 1069.0/383163.0;
            double ppn = 10.0/383163.0;
            double ppo = 2046.0/383163.0;
            double ppp = 617.0/383163.0;
            double ppr = 1513.0/383163.0;
            double pps = 386.0/383163.0;
            double ppt = 195.0/383163.0;
            double ppu = 544.0/383163.0;
            double ppy = 4.0/383163.0;
            double ppdot = 77.0/383163.0;
            double ppcomma = 41.0/383163.0;
            double ppvacuum = 403.0/383163.0;
            double pqi = 1.0/383163.0;
            double pqu = 3014.0/383163.0;
            double pqdot= 3.0/383163.0;
            double pqcomma = 1.0/383163.0;
            double pqvacuum = 36.0/383163.0;
            double pra = 2094.0/383163.0;
            double prb = 63.0/383163.0;
            double prc = 582.0/383163.0;
            double prd = 932.0/383163.0;
            double pre = 3586.0/383163.0;
            double prf = 79.0/383163.0;
            double prg = 298.0/383163.0;
            double prh = 11.0/383163.0;
            double pri = 2073.0/383163.0;
            double prj = 1.0/383163.0;
            double prk = 28.0/383163.0;
            double prl = 202.0/383163.0;
            double prm = 551.0/383163.0;
            double prn = 511.0/383163.0;
            double pro = 1672.0/383163.0;
            double prp = 156.0/383163.0;
            double prq = 244.0/383163.0;
            double prr = 1960.0/383163.0;
            double prs = 1343.0/383163.0;
            double prt = 1241.0/383163.0;
            double pru = 502.0/383163.0;
            double prv = 414.0/383163.0;
            double prw = 2.0/383163.0;
            double pry = 1376.0/383163.0;
            double prz = 2.0/383163.0;
            double prdot = 806.0/383163.0;
            double prcomma = 569.0/383163.0;
            double prvacuum = 2751.0/383163.0;
            double psa = 1977.0/383163.0;
            double psb = 10.0/383163.0;
            double psc = 432.0/383163.0;
            double psd = 2.0/383163.0;
            double pse = 2630.0/383163.0;
            double psf = 31.0/383163.0;
            double psg = 8.0/383163.0;
            double psh = 54.0/383163.0;
            double psi = 1478.0/383163.0;
            double psj = 4.0/383163.0;
            double psk = 208.0/383163.0;
            double psl = 87.0/383163.0;
            double psm = 72.0/383163.0;
            double psn = 8.0/383163.0;
            double pso = 1887.0/383163.0;
            double psp = 599.0/383163.0;
            double psq = 407.0/383163.0;
            double psr = 1.0/383163.0;
            double pss = 1782.0/383163.0;
            double pst = 1833.0/383163.0;
            double psu = 1516.0/383163.0;
            double psv = 58.0/383163.0;
            double psw = 4.0/383163.0;
            double psy = 153.0/383163.0;
            double psdot = 1300.0/383163.0;
            double pscomma = 1041.0/383163.0;
            double psvacuum = 3863.0/383163.0;
            double pta = 2061.0/383163.0;
            double ptb = 6.0/383163.0;
            double ptc = 11.0/383163.0;
            double pte = 2934.0/383163.0;
            double pth = 313.0/383163.0;
            double pti = 1665.0/383163.0;
            double ptj = 3.0/383163.0;
            double ptk = 8.0/383163.0;
            double ptl = 152.0/383163.0;
            double ptm = 3.0/383163.0;
            double ptn = 7.0/383163.0;
            double pto = 1667.0/383163.0;
            double ptr = 2220.0/383163.0;
            double pts = 588.0/383163.0;
            double ptt = 1060.0/3383163.0;
            double ptu = 1046.0/383163.0;
            double ptv = 17.0/383163.0;
            double ptw = 2.0/383163.0;
            double pty = 74.0/383163.0;
            double ptz = 1.0/383163.0;
            double ptdot = 1022.0/383163.0;
            double ptcomma = 761.0/383163.0;
            double ptvacuum = 3997.0/383163.0;  
            double pua = 723.0/383163.0;
            double pub = 198.0/383163.0;
            double puc = 517.0/383163.0;
            double pud = 265.0/383163.0;
            double pue = 2387.0/383163.0;
            double puf = 197.0/383163.0;
            double pug = 149.0/383163.0;
            double puh = 20.0/383163.0;
            double pui = 1994.0/383163.0;
            double puj = 188.0/383163.0;
            double puk = 14.0/383163.0;
            double pul = 1009.0/383163.0;
            double pum = 375.0/383163.0;
            double pun = 2208.0/383163.0;
            double puo = 266.0/383163.0;
            double pup = 553.0/383163.0;
            double puq = 27.0/383163.0;
            double pur = 2748.0/383163.0;
            double pus = 1875.0/383163.0;
            double put = 1804.0/383163.0;
            double puv = 916.0/383163.0;
            double pux = 1095.0/383163.0;
            double puy = 81.0/383163.0;
            double puz = 21.0/383163.0;
            double pudot = 181.0/383163.0;
            double pucomma = 165.0/383163.0;
            double puvacuum = 2620.0/383163.0; 
            double pva = 1636.0/383163.0;
            double pvd = 5.0/383163.0;
            double pve = 2089.0/383163.0;
            double pvg = 2.0/383163.0;
            double pvi = 1205.0/383163.0;
            double pvl = 1.0/383163.0;
            double pvo = 1549.0/383163.0;
            double pvr = 449.0/383163.0;
            double pvu = 179.0/383163.0;
            double pvdot = 7.0/383163.0;
            double pvcomma = 1.0/383163.0;
            double pvvacuum = 11.0/383163.0;  
            double pwa = 13.0/383163.0;
            double pwb = 1.0/383163.0;
            double pwd = 1.0/383163.0;
            double pwe = 22.0/383163.0;
            double pwh = 7.0/383163.0;
            double pwi = 10.0/383163.0;
            double pwl = 1.0/383163.0;
            double pwn = 3.0/383163.0;
            double pwo = 10.0/383163.0;
            double pwdot = 4.0/383163.0;
            double pwcomma = 4.0/383163.0;
            double pwvacuum = 9.0/383163.0;
            double pxa = 105.0/383163.0;
            double pxc = 90.0/383163.0;
            double pxe = 72.0/383163.0;
            double pxh = 7.0/383163.0;
            double pxi = 81.0/383163.0;
            double pxo = 6.0/383163.0;
            double pxp = 205.0/383163.0;
            double pxq = 12.0/383163.0;
            double pxt = 76.0/383163.0;
            double pxu = 7.0/383163.0;
            double pxy = 15.0/383163.0;
            double pxdot = 193.0/383163.0;
            double pxcomma = 153.0/383163.0;
            double pxvacuum = 1080.0/383163.0;
            double pya = 282.0/383163.0;
            double pyb = 2.0/383163.0;
            double pyc = 34.0/383163.0;
            double pyd = 13.0/383163.0;
            double pye = 428.0/383163.0;
            double pyg = 61.0/383163.0;
            double pyj = 2.0/383163.0;
            double pyl = 86.0/383163.0;
            double pym = 35.0/383163.0;
            double pyn = 45.0/383163.0;
            double pyo = 37.0/383163.0;
            double pyp = 59.0/383163.0;
            double pyr = 13.0/383163.0;
            double pys = 110.0/383163.0;
            double pyt = 15.0/383163.0;
            double pyu = 2.0/383163.0;
            double pyv = 5.0/383163.0;
            double pyx = 1.0/383163.0;
            double pydot = 324.0/383163.0;
            double pycomma = 101.0/383163.0;
            double pyvacuum = 1339.0/383163.0;
            double pza = 24.0/383163.0;
            double pze = 60.0/383163.0;
            double pzh = 1.0/383163.0;
            double pzi = 23.0/383163.0;
            double pzl = 3.0/383163.0;
            double pzo = 27.0/383163.0;
            double pzu = 1.0/383163.0;
            double pzy = 1.0/383163.0;
            double pzz = 6.0/383163.0;
            double pzdot = 26.0/383163.0;
            double pzcomma = 36.0/383163.0;
            double pzvacuum = 523.0/383163.0;
            double pdotdot = 1.0/383163.0;
            double pdotcomma = 1.0/383163.0;
            double pdotvacuum = 523.0/383163.0;
            double pcommavacuum = 3239.0/383163.0;
            double pvacuuma = 3545.0/383163.0;
            double pvacuumb = 1949.0/383163.0;
            double pvacuumc = 3322.0/383163.0;
            double pvacuumd = 3656.0/383163.0;
            double pvacuume = 3725.0/383163.0;
            double pvacuumf = 1874.0/383163.0;
            double pvacuumg = 1047.0/383163.0;
            double pvacuumh = 1869.0/383163.0;
            double pvacuumi = 2355.0/383163.0;
            double pvacuumj = 1593.0/383163.0;
            double pvacuumk = 328.0/383163.0;
            double pvacuuml = 3593.0/383163.0;
            double pvacuumm = 2651.0/383163.0;
            double pvacuumn = 2177.0/383163.0;
            double pvacuumo = 1670.0/383163.0;
            double pvacuump = 3377.0/383163.0;
            double pvacuumq = 2645.0/383163.0;
            double pvacuumr = 2498.0/383163.0;
            double pvacuums = 3427.0/383163.0;
            double pvacuumt = 2799.0/383163.0;
            double pvacuumu = 2094.0/383163.0;
            double pvacuumv = 2285.0/383163.0;
            double pvacuumw = 41.0/383163.0;
            double pvacuumx = 4.0/383163.0;
            double pvacuumy = 620.0/383163.0;
            double pvacuumz = 28.0/383163.0;
            double pvacuumdot = 108.0/383163.0;
            double pvacuumcomma = 278.0/383163.0;  
            double pvacuumvacuum = 3793.0/383163.0;  
            
            double conditionalentropypaa = paa*(Math.log(pa/paa));
            double conditionalentropypab = pab*(Math.log(pb/pab));
            double conditionalentropypac = pac*(Math.log(pc/pac));
            double conditionalentropypad = pad*(Math.log(pd/pad));
            double conditionalentropypae = pae*(Math.log(pe/pae));
            double conditionalentropypaf = paf*(Math.log(pf/paf));
            double conditionalentropypag = pag*(Math.log(pg/pag));
            double conditionalentropypah = pah*(Math.log(ph/pah));
            double conditionalentropypai = pai*(Math.log(pi/pai));
            double conditionalentropypaj = paj*(Math.log(pj/paj));
            double conditionalentropypak = pak*(Math.log(pk/pak));
            double conditionalentropypal = pal*(Math.log(pl/pal));
            double conditionalentropypam = pam*(Math.log(pm/pam));
            double conditionalentropypan = pan*(Math.log(pn/pan));
            double conditionalentropypao = pao*(Math.log(po/pao));
            double conditionalentropypap = pap*(Math.log(pp/pap));
            double conditionalentropypaq = paq*(Math.log(pq/paq));
            double conditionalentropypar = par*(Math.log(pr/par));
            double conditionalentropypas = pas*(Math.log(ps/pas));
            double conditionalentropypat = pat*(Math.log(pt/pat));
            double conditionalentropypau = pau*(Math.log(pu/pau));
            double conditionalentropypav = pav*(Math.log(pv/pav));
            double conditionalentropypaw = paw*(Math.log(pw/paw));
            double conditionalentropypax = pax*(Math.log(px/pax));
            double conditionalentropypay = pay*(Math.log(py/pay));
            double conditionalentropypaz = paz*(Math.log(pz/paz));
            double conditionalentropypadot = padot*(Math.log(pdot/padot));
            double conditionalentropypacomma = pacomma*(Math.log(pcomma/pacomma));
            double conditionalentropypavacuum = pavacuum*(Math.log(pvacuum/pavacuum));
            double conditionalentropypba = pba*(Math.log(pa/pba));
            double conditionalentropypbb = pbb*(Math.log(pb/pbb));
            double conditionalentropypbc = pbc*(Math.log(pc/pbc));
            double conditionalentropypbd = pbd*(Math.log(pd/pbd));
            double conditionalentropypbe = pbe*(Math.log(pe/pbe));
            double conditionalentropypbi = pbi*(Math.log(pi/pbi));
            double conditionalentropypbj = pbj*(Math.log(pj/pbj));
            double conditionalentropypbl = pbl*(Math.log(pl/pbl));
            double conditionalentropypbm = pbm*(Math.log(pm/pbm));
            double conditionalentropypbo = pbo*(Math.log(po/pbo));
            double conditionalentropypbr = pbr*(Math.log(pr/pbr));
            double conditionalentropypbs = pbs*(Math.log(ps/pbs));
            double conditionalentropypbt = pbt*(Math.log(pt/pbt));
            double conditionalentropypbu = pbu*(Math.log(pu/pbu));
            double conditionalentropypby = pby*(Math.log(py/pby));
            double conditionalentropypbdot = pbdot*(Math.log(pdot/pbdot));
            double conditionalentropypbcomma = pbcomma*(Math.log(pcomma/pbcomma));
            double conditionalentropypbvacuum = pbvacuum*(Math.log(pvacuum/pbvacuum));
            double conditionalentropypca = pca*(Math.log(pa/pca));
            double conditionalentropypcc = pcc*(Math.log(pc/pcc));
            double conditionalentropypcd = pcd*(Math.log(pd/pcd));
            double conditionalentropypce = pce*(Math.log(pe/pce));
            double conditionalentropypch = pch*(Math.log(ph/pch));
            double conditionalentropypci = pci*(Math.log(pi/pci));
            double conditionalentropypck = pck*(Math.log(pk/pck));
            double conditionalentropypcl = pcl*(Math.log(pl/pcl));
            double conditionalentropypcm = pcm*(Math.log(pm/pcm));
            double conditionalentropypco = pco*(Math.log(po/pco));
            double conditionalentropypcq = pcq*(Math.log(pq/pcq));
            double conditionalentropypcr = pcr*(Math.log(pr/pcr));
            double conditionalentropypcs = pcs*(Math.log(ps/pcs));
            double conditionalentropypct = pct*(Math.log(pt/pct));
            double conditionalentropypcu = pcu*(Math.log(pu/pcu));
            double conditionalentropypcv = pcv*(Math.log(pv/pcv));
            double conditionalentropypcy = pcy*(Math.log(py/pcy));
            double conditionalentropypcdot = pcdot*(Math.log(pdot/pcdot));
            double conditionalentropypccomma = pccomma*(Math.log(pcomma/pccomma));
            double conditionalentropypcvacuum = pcvacuum*(Math.log(pvacuum/pcvacuum));
            double conditionalentropypda = pda*(Math.log(pa/pda));
            double conditionalentropypdb = pdb*(Math.log(pb/pdb));
            double conditionalentropypdc = pdc*(Math.log(pc/pdc));
            double conditionalentropypdd = pdd*(Math.log(pd/pdd));
            double conditionalentropypde = pde*(Math.log(pe/pde));
            double conditionalentropypdg = pdg*(Math.log(pg/pdg));
            double conditionalentropypdh = pdh*(Math.log(ph/pdh));
            double conditionalentropypdi = pdi*(Math.log(pi/pdi));
            double conditionalentropypdj = pdj*(Math.log(pj/pdj));
            double conditionalentropypdk = pdk*(Math.log(pk/pdk));
            double conditionalentropypdl = pdl*(Math.log(pl/pdl));
            double conditionalentropypdm = pdm*(Math.log(pm/pdm));
            double conditionalentropypdn = pdn*(Math.log(pn/pdn));
            double conditionalentropypdo = pdo*(Math.log(po/pdo));
            double conditionalentropypdr = pdr*(Math.log(pr/pdr));
            double conditionalentropypds = pds*(Math.log(ps/pds));
            double conditionalentropypdt = pdt*(Math.log(pt/pdt));
            double conditionalentropypdu = pdu*(Math.log(pu/pdu));
            double conditionalentropypdv = pdv*(Math.log(pv/pdv));
            double conditionalentropypdw = pdw*(Math.log(pw/pdw));
            double conditionalentropypdy = pdy*(Math.log(py/pdy));
            double conditionalentropypddot = pddot*(Math.log(pdot/pddot));
            double conditionalentropypdcomma = pdcomma*(Math.log(pcomma/pdcomma));
            double conditionalentropypdvacuum = pdvacuum*(Math.log(pvacuum/pdvacuum));
            double conditionalentropypea = pea*(Math.log(pa/pea));
            double conditionalentropypeb = peb*(Math.log(pb/peb));
            double conditionalentropypec = pec*(Math.log(pc/pec));
            double conditionalentropyped = ped*(Math.log(pd/ped));
            double conditionalentropypee = pee*(Math.log(pe/pee));
            double conditionalentropypef = pef*(Math.log(pf/pef));
            double conditionalentropypeg = peg*(Math.log(pg/peg));
            double conditionalentropypeh = peh*(Math.log(ph/peh));
            double conditionalentropypei = pei*(Math.log(pi/pei));
            double conditionalentropypej = pej*(Math.log(pj/pej));
            double conditionalentropypek = pek*(Math.log(pk/pek));
            double conditionalentropypel = pel*(Math.log(pl/pel));
            double conditionalentropypem = pem*(Math.log(pm/pem));
            double conditionalentropypen = pen*(Math.log(pn/pen));
            double conditionalentropypeo = peo*(Math.log(po/peo));
            double conditionalentropypep = pep*(Math.log(pp/pep));
            double conditionalentropypeq = peq*(Math.log(pq/peq));
            double conditionalentropyper = per*(Math.log(pr/per));
            double conditionalentropypes = pes*(Math.log(ps/pes));
            double conditionalentropypet = pet*(Math.log(pt/pet));
            double conditionalentropypeu = peu*(Math.log(pu/peu));
            double conditionalentropypev = pev*(Math.log(pv/pev));
            double conditionalentropypew = pew*(Math.log(pw/pew));
            double conditionalentropypex = pex*(Math.log(px/pex));
            double conditionalentropypey = pey*(Math.log(py/pey));
            double conditionalentropypez = pez*(Math.log(pz/pez));
            double conditionalentropypedot = pedot*(Math.log(pdot/pedot));
            double conditionalentropypecomma = pecomma*(Math.log(pcomma/pecomma));
            double conditionalentropypevacuum = pevacuum*(Math.log(pvacuum/pevacuum));
            double conditionalentropypfa = pfa*(Math.log(pa/pfa));
            double conditionalentropypfb = pfb*(Math.log(pb/pfb));
            double conditionalentropypfe = pfe*(Math.log(pe/pfe));
            double conditionalentropypff = pff*(Math.log(pf/pff));
            double conditionalentropypfh = pfh*(Math.log(ph/pfh));
            double conditionalentropypfi = pfi*(Math.log(pi/pfi));
            double conditionalentropypfj = pfj*(Math.log(pj/pfj));
            double conditionalentropypfl = pfl*(Math.log(pl/pfl));
            double conditionalentropypfo = pfo*(Math.log(po/pfo));
            double conditionalentropypfr = pfr*(Math.log(pr/pfr));
            double conditionalentropypfs = pfs*(Math.log(ps/pfs));
            double conditionalentropypft = pft*(Math.log(pt/pft));
            double conditionalentropypfu = pfu*(Math.log(pu/pfu));
            double conditionalentropypfdot = pfdot*(Math.log(pdot/pfdot));
            double conditionalentropypfcomma = pfcomma*(Math.log(pcomma/pfcomma));
            double conditionalentropypfvacuum = pfvacuum*(Math.log(pvacuum/pfvacuum)); 
            double conditionalentropypga = pga*(Math.log(pa/pga));
            double conditionalentropypgb = pgb*(Math.log(pb/pgb));
            double conditionalentropypgd = pgd*(Math.log(pd/pgd));
            double conditionalentropypge = pge*(Math.log(pe/pge));
            double conditionalentropypgg = pgg*(Math.log(pg/pgg));
            double conditionalentropypgh = pgh*(Math.log(ph/pgh));
            double conditionalentropypgi = pgi*(Math.log(pi/pgi));
            double conditionalentropypgj = pgj*(Math.log(pj/pgj));
            double conditionalentropypgl = pgl*(Math.log(pl/pgl));
            double conditionalentropypgm = pgm*(Math.log(pm/pgm));
            double conditionalentropypgn = pgn*(Math.log(pn/pgn));
            double conditionalentropypgo = pgo*(Math.log(po/pgo));
            double conditionalentropypgr = pgr*(Math.log(pr/pgr));
            double conditionalentropypgs = pgs*(Math.log(ps/pgs));
            double conditionalentropypgt = pgt*(Math.log(pt/pgt));
            double conditionalentropypgu = pgu*(Math.log(pu/pgu));
            double conditionalentropypgv = pgv*(Math.log(pv/pgv));
            double conditionalentropypgy = pgy*(Math.log(py/pgy));
            double conditionalentropypgz = pgz*(Math.log(pz/pgz));
            double conditionalentropypgdot = pgdot*(Math.log(pdot/pgdot));
            double conditionalentropypgcomma = pgcomma*(Math.log(pcomma/pgcomma));
            double conditionalentropypgvacuum = pgvacuum*(Math.log(pvacuum/pgvacuum));
            double conditionalentropypha = pha*(Math.log(pa/pha));
            double conditionalentropyphe = phe*(Math.log(pe/phe));
            double conditionalentropyphi = phi*(Math.log(pi/phi));
            double conditionalentropyphl = phl*(Math.log(pl/phl));
            double conditionalentropyphm = phm*(Math.log(pm/phm));
            double conditionalentropyphn = phn*(Math.log(pn/phn));
            double conditionalentropypho = pho*(Math.log(po/pho));
            double conditionalentropyphr = phr*(Math.log(pr/phr));
            double conditionalentropypht = pht*(Math.log(pt/pht));
            double conditionalentropyphu = phu*(Math.log(pu/phu));
            double conditionalentropyphv = phv*(Math.log(pv/phv));
            double conditionalentropyphy = phy*(Math.log(py/phy));
            double conditionalentropyphdot = phdot*(Math.log(pdot/phdot));
            double conditionalentropyphcomma = phcomma*(Math.log(pcomma/phcomma));
            double conditionalentropyphvacuum = phvacuum*(Math.log(pvacuum/phvacuum));
            double conditionalentropypia = pia*(Math.log(pa/pia));
            double conditionalentropypib = pib*(Math.log(pb/pib));
            double conditionalentropypic = pic*(Math.log(pc/pic));
            double conditionalentropypid = pid*(Math.log(pd/pid));
            double conditionalentropypie = pie*(Math.log(pe/pie));
            double conditionalentropypif = pif*(Math.log(pf/pif));
            double conditionalentropypig = pig*(Math.log(pg/pig));
            double conditionalentropypih = pih*(Math.log(ph/pih));
            double conditionalentropypii = pii*(Math.log(pi/pii));
            double conditionalentropypij = pij*(Math.log(pj/pij));
            double conditionalentropypik = pik*(Math.log(pk/pik));
            double conditionalentropypil = pil*(Math.log(pl/pil));
            double conditionalentropypim = pim*(Math.log(pm/pim));
            double conditionalentropypin = pin*(Math.log(pn/pin));
            double conditionalentropypio = pio*(Math.log(po/pio));
            double conditionalentropypip = pip*(Math.log(pp/pip));
            double conditionalentropypiq = piq*(Math.log(pq/piq));
            double conditionalentropypir = pir*(Math.log(pr/pir));
            double conditionalentropypis = pis*(Math.log(ps/pis));
            double conditionalentropypit = pit*(Math.log(pt/pit));
            double conditionalentropypiu = piu*(Math.log(pu/piu));
            double conditionalentropypiv = piv*(Math.log(pv/piv));
            double conditionalentropypix = pix*(Math.log(px/pix));
            double conditionalentropypiz = piz*(Math.log(pz/piz));
            double conditionalentropypidot = pidot*(Math.log(pdot/pidot));
            double conditionalentropypicomma = picomma*(Math.log(pcomma/picomma));
            double conditionalentropypivacuum = pivacuum*(Math.log(pvacuum/pivacuum));
            double conditionalentropypja = pja*(Math.log(pa/pja));
            double conditionalentropypje = pje*(Math.log(pe/pje));
            double conditionalentropypji = pji*(Math.log(pi/pji));
            double conditionalentropypjo = pjo*(Math.log(po/pjo));
            double conditionalentropypju = pju*(Math.log(pu/pju));
            double conditionalentropypjdot = pjdot*(Math.log(pdot/pjdot));
            double conditionalentropypjvacuum = pjvacuum*(Math.log(pvacuum/pjvacuum));
            double conditionalentropypka = pka*(Math.log(pa/pka));
            double conditionalentropypke = pke*(Math.log(pe/pke));
            double conditionalentropypkh = pkh*(Math.log(ph/pkh));
            double conditionalentropypki = pki*(Math.log(pi/pki));
            double conditionalentropypkj = pkj*(Math.log(pj/pkj));
            double conditionalentropypkk = pkk*(Math.log(pk/pkk));
            double conditionalentropypkl = pkl*(Math.log(pl/pkl));
            double conditionalentropypkm = pkm*(Math.log(pm/pkm));
            double conditionalentropypkn = pkn*(Math.log(pn/pkn));
            double conditionalentropypko = pko*(Math.log(po/pko));
            double conditionalentropypkp = pkp*(Math.log(pp/pkp));
            double conditionalentropypkr = pkr*(Math.log(pr/pkr));
            double conditionalentropypks = pks*(Math.log(ps/pks));
            double conditionalentropypkt = pkt*(Math.log(pt/pkt));
            double conditionalentropypku = pku*(Math.log(pu/pku));
            double conditionalentropypkv = pkv*(Math.log(pv/pkv));
            double conditionalentropypky = pky*(Math.log(py/pky));
            double conditionalentropypkdot = pkdot*(Math.log(pdot/pkdot));
            double conditionalentropypkcomma = pkcomma*(Math.log(pcomma/pkcomma));
            double conditionalentropypkvacuum = pkvacuum*(Math.log(pvacuum/pkvacuum));
            double conditionalentropypla = pla*(Math.log(pa/pla));
            double conditionalentropyplb = plb*(Math.log(pb/plb));
            double conditionalentropyplc = plc*(Math.log(pc/plc));
            double conditionalentropypld = pld*(Math.log(pd/pld));
            double conditionalentropyple = ple*(Math.log(pe/ple));
            double conditionalentropyplf = plf*(Math.log(pf/plf));
            double conditionalentropyplg = plg*(Math.log(pg/plg));
            double conditionalentropyplh = plh*(Math.log(ph/plh));
            double conditionalentropypli = pli*(Math.log(pi/pli));
            double conditionalentropyplj = plj*(Math.log(pj/plj));
            double conditionalentropyplk = plk*(Math.log(pk/plk));
            double conditionalentropypll = pll*(Math.log(pl/pll));
            double conditionalentropyplm = plm*(Math.log(pm/plm));
            double conditionalentropypln = pln*(Math.log(pn/pln));
            double conditionalentropyplo = plo*(Math.log(po/plo));
            double conditionalentropyplp = plp*(Math.log(pp/plp));
            double conditionalentropyplq = plq*(Math.log(pq/plq));
            double conditionalentropyplr = plr*(Math.log(pr/plr));
            double conditionalentropypls = pls*(Math.log(ps/pls));
            double conditionalentropyplt = plt*(Math.log(pt/plt));
            double conditionalentropyplu = plu*(Math.log(pu/plu));
            double conditionalentropyplv = plv*(Math.log(pv/plv));
            double conditionalentropyply = ply*(Math.log(py/ply));
            double conditionalentropyplz = plz*(Math.log(pz/plz));
            double conditionalentropypldot = pldot*(Math.log(pdot/pldot));
            double conditionalentropyplcomma = plcomma*(Math.log(pcomma/plcomma));
            double conditionalentropyplvacuum = plvacuum*(Math.log(pvacuum/plvacuum));
            double conditionalentropypma = pma*(Math.log(pa/pma));
            double conditionalentropypmb = pmb*(Math.log(pb/pmb));
            double conditionalentropypmd = pmd*(Math.log(pd/pmd));
            double conditionalentropypme = pme*(Math.log(pe/pme));
            double conditionalentropypmi = pmi*(Math.log(pi/pmi));
            double conditionalentropypml = pml*(Math.log(pl/pml));
            double conditionalentropypmm = pmm*(Math.log(pm/pmm));
            double conditionalentropypmn = pmn*(Math.log(pn/pmn));
            double conditionalentropypmo = pmo*(Math.log(po/pmo));
            double conditionalentropypmp = pmp*(Math.log(pp/pmp));
            double conditionalentropypms = pms*(Math.log(ps/pms));
            double conditionalentropypmu = pmu*(Math.log(pu/pmu));
            double conditionalentropypmw = pmw*(Math.log(pw/pmw));
            double conditionalentropypmy = pmy*(Math.log(py/pmy));
            double conditionalentropypmdot = pmdot*(Math.log(pdot/pmdot));
            double conditionalentropypmcomma = pmcomma*(Math.log(pcomma/pmcomma));
            double conditionalentropypmvacuum = pmvacuum*(Math.log(pvacuum/pmvacuum));
            double conditionalentropypna = pna*(Math.log(pa/pna));
            double conditionalentropypnb = pnb*(Math.log(pb/pnb));
            double conditionalentropypnc = pnc*(Math.log(pc/pnc));
            double conditionalentropypnd = pnd*(Math.log(pd/pnd));
            double conditionalentropypne = pne*(Math.log(pe/pne));
            double conditionalentropypnf = pnf*(Math.log(pf/pnf));
            double conditionalentropypng = png*(Math.log(pg/png));
            double conditionalentropypnh = pnh*(Math.log(ph/pnh));
            double conditionalentropypni = pni*(Math.log(pi/pni));
            double conditionalentropypnj = pnj*(Math.log(pj/pnj));
            double conditionalentropypnk = pnk*(Math.log(pk/pnk));
            double conditionalentropypnl = pnl*(Math.log(pl/pnl));
            double conditionalentropypnm = pnm*(Math.log(pm/pnm));
            double conditionalentropypnn = pnn*(Math.log(pn/pnn));
            double conditionalentropypno = pno*(Math.log(po/pno));
            double conditionalentropypnp = pnp*(Math.log(pp/pnp));
            double conditionalentropypnq = pnq*(Math.log(pq/pnq));
            double conditionalentropypnr = pnr*(Math.log(pr/pnr));
            double conditionalentropypns = pns*(Math.log(ps/pns));
            double conditionalentropypnt = pnt*(Math.log(pt/pnt));
            double conditionalentropypnu = pnu*(Math.log(pu/pnu));
            double conditionalentropypnv = pnv*(Math.log(pv/pnv));
            double conditionalentropypnx = pnx*(Math.log(px/pnx));
            double conditionalentropypny = pny*(Math.log(py/pny));
            double conditionalentropypnz = pnz*(Math.log(pz/pnz));
            double conditionalentropypndot = pndot*(Math.log(pdot/pndot));
            double conditionalentropypncomma = pncomma*(Math.log(pcomma/pncomma));
            double conditionalentropypnvacuum = pnvacuum*(Math.log(pvacuum/pnvacuum));
            double conditionalentropypoa = poa*(Math.log(pa/poa));
            double conditionalentropypob = pob*(Math.log(pb/pob));
            double conditionalentropypoc = poc*(Math.log(pc/poc));
            double conditionalentropypod = pod*(Math.log(pd/pod));
            double conditionalentropypoe = poe*(Math.log(pe/poe));
            double conditionalentropypof = pof*(Math.log(pf/pof));
            double conditionalentropypog = pog*(Math.log(pg/pog));
            double conditionalentropypoh = poh*(Math.log(ph/poh));
            double conditionalentropypoi = poi*(Math.log(pi/poi));
            double conditionalentropypoj = poj*(Math.log(pj/poj));
            double conditionalentropypok = pok*(Math.log(pk/pok));
            double conditionalentropypol = pol*(Math.log(pl/pol));
            double conditionalentropypom = pom*(Math.log(pm/pom));
            double conditionalentropypon = pon*(Math.log(pn/pon));
            double conditionalentropypoo = poo*(Math.log(po/poo));
            double conditionalentropypop = pop*(Math.log(pp/pop));
            double conditionalentropypoq = poq*(Math.log(pq/poq));
            double conditionalentropypor = por*(Math.log(pr/por));
            double conditionalentropypos = pos*(Math.log(ps/pos));
            double conditionalentropypot = pot*(Math.log(pt/pot));
            double conditionalentropypou = pou*(Math.log(pu/pou));
            double conditionalentropypov = pov*(Math.log(pv/pov));
            double conditionalentropypow = pow*(Math.log(pw/pow));
            double conditionalentropypox = pox*(Math.log(px/pox));
            double conditionalentropypoy = poy*(Math.log(py/poy));
            double conditionalentropypodot = podot*(Math.log(pdot/podot));
            double conditionalentropypocomma = pocomma*(Math.log(pcomma/pocomma));
            double conditionalentropypovacuum = povacuum*(Math.log(pvacuum/povacuum));
            double conditionalentropyppa = ppa*(Math.log(pa/ppa));
            double conditionalentropyppc = ppc*(Math.log(pc/ppc));
            double conditionalentropyppe = ppe*(Math.log(pe/ppe));
            double conditionalentropypph = pph*(Math.log(ph/pph));
            double conditionalentropyppi = ppi*(Math.log(pi/ppi));
            double conditionalentropyppk = ppk*(Math.log(pk/ppk));
            double conditionalentropyppl = ppl*(Math.log(pl/ppl));
            double conditionalentropyppn = ppn*(Math.log(pn/ppn));
            double conditionalentropyppo = ppo*(Math.log(po/ppo));
            double conditionalentropyppp = ppp*(Math.log(pp/ppp));
            double conditionalentropyppr = ppr*(Math.log(pr/ppr));
            double conditionalentropypps = pps*(Math.log(ps/pps));
            double conditionalentropyppt = ppt*(Math.log(pt/ppt));
            double conditionalentropyppu = ppu*(Math.log(pu/ppu));
            double conditionalentropyppy = ppy*(Math.log(py/ppy));
            double conditionalentropyppdot = ppdot*(Math.log(pdot/ppdot));
            double conditionalentropyppcomma = ppcomma*(Math.log(pcomma/ppcomma));
            double conditionalentropyppvacuum = ppvacuum*(Math.log(pvacuum/ppvacuum));
            double conditionalentropypqi = pqi*(Math.log(pi/pqi));
            double conditionalentropypqu = pqu*(Math.log(pu/pqu));
            double conditionalentropypqdot = pqdot*(Math.log(pdot/pqdot));
            double conditionalentropypqcomma = pqcomma*(Math.log(pcomma/pqcomma));
            double conditionalentropypqvacuum = pqvacuum*(Math.log(pvacuum/pqvacuum));
            double conditionalentropypra = pra*(Math.log(pa/pra));
            double conditionalentropyprb = prb*(Math.log(pb/prb));
            double conditionalentropyprc = prc*(Math.log(pc/prc));
            double conditionalentropyprd = prd*(Math.log(pd/prd));
            double conditionalentropypre = pre*(Math.log(pe/pre));
            double conditionalentropyprf = prf*(Math.log(pf/prf));
            double conditionalentropyprg = prg*(Math.log(pg/prg));
            double conditionalentropyprh = prh*(Math.log(ph/prh));
            double conditionalentropypri = pri*(Math.log(pi/pri));
            double conditionalentropyprj = prj*(Math.log(pj/prj));
            double conditionalentropyprk = prk*(Math.log(pk/prk));
            double conditionalentropyprl = prl*(Math.log(pl/prl));
            double conditionalentropyprm = prm*(Math.log(pm/prm));
            double conditionalentropyprn = prn*(Math.log(pn/prn));
            double conditionalentropypro = pro*(Math.log(po/pro));
            double conditionalentropyprp = prp*(Math.log(pp/prp));
            double conditionalentropyprq = prq*(Math.log(pq/prq));
            double conditionalentropyprr = prr*(Math.log(pr/prr));
            double conditionalentropyprs = prs*(Math.log(ps/prs));
            double conditionalentropyprt = prt*(Math.log(pt/prt));
            double conditionalentropypru = pru*(Math.log(pu/pru));
            double conditionalentropyprv = prv*(Math.log(pv/prv));
            double conditionalentropyprw = prw*(Math.log(pw/prw));
            double conditionalentropypry = pry*(Math.log(py/pry));
            double conditionalentropyprz = prz*(Math.log(pz/prz));
            double conditionalentropyprdot = prdot*(Math.log(pdot/prdot));
            double conditionalentropyprcomma = prcomma*(Math.log(pcomma/prcomma));
            double conditionalentropyprvacuum = prvacuum*(Math.log(pvacuum/prvacuum));
            double conditionalentropypsa = psa*(Math.log(pa/psa));
            double conditionalentropypsb = psb*(Math.log(pb/psb));
            double conditionalentropypsc = psc*(Math.log(pc/psc));
            double conditionalentropypsd = psd*(Math.log(pd/psd));
            double conditionalentropypse = pse*(Math.log(pe/pse));
            double conditionalentropypsf = psf*(Math.log(pf/psf));
            double conditionalentropypsg = psg*(Math.log(pg/psg));
            double conditionalentropypsh = psh*(Math.log(ph/psh));
            double conditionalentropypsi = psi*(Math.log(pi/psi));
            double conditionalentropypsj = psj*(Math.log(pj/psj));
            double conditionalentropypsk = psk*(Math.log(pk/psk));
            double conditionalentropypsl = psl*(Math.log(pl/psl));
            double conditionalentropypsm = psm*(Math.log(pm/psm));
            double conditionalentropypsn = psn*(Math.log(pn/psn));
            double conditionalentropypso = pso*(Math.log(po/pso));
            double conditionalentropypsp = psp*(Math.log(pp/psp));
            double conditionalentropypsq = psq*(Math.log(pq/psq));
            double conditionalentropypsr = psr*(Math.log(pr/psr));
            double conditionalentropypss = pss*(Math.log(ps/pss));
            double conditionalentropypst = pst*(Math.log(pt/pst));
            double conditionalentropypsu = psu*(Math.log(pu/psu));
            double conditionalentropypsv = psv*(Math.log(pv/psv));
            double conditionalentropypsw = psw*(Math.log(pw/psw));
            double conditionalentropypsy = psy*(Math.log(py/psy));
            double conditionalentropypsdot = psdot*(Math.log(pdot/psdot));
            double conditionalentropypscomma = pscomma*(Math.log(pcomma/pscomma));
            double conditionalentropypsvacuum = psvacuum*(Math.log(pvacuum/psvacuum));
            double conditionalentropypta = pta*(Math.log(pa/pta));
            double conditionalentropyptb = ptb*(Math.log(pb/ptb));
            double conditionalentropyptc = ptc*(Math.log(pc/ptc));
            double conditionalentropypte = pte*(Math.log(pe/pte));
            double conditionalentropypth = pth*(Math.log(ph/pth));
            double conditionalentropypti = pti*(Math.log(pi/pti));
            double conditionalentropyptj = ptj*(Math.log(pj/ptj));
            double conditionalentropyptk = ptk*(Math.log(pk/ptk));
            double conditionalentropyptl = ptl*(Math.log(pl/ptl));
            double conditionalentropyptm = ptm*(Math.log(pm/ptm));
            double conditionalentropyptn = ptn*(Math.log(pn/ptn));
            double conditionalentropypto = pto*(Math.log(po/pto));
            double conditionalentropyptr = ptr*(Math.log(pr/ptr));
            double conditionalentropypts = pts*(Math.log(ps/pts));
            double conditionalentropyptt = ptt*(Math.log(pt/ptt));
            double conditionalentropyptu = ptu*(Math.log(pu/ptu));
            double conditionalentropyptv = ptv*(Math.log(pv/ptv));
            double conditionalentropyptw = ptw*(Math.log(pw/ptw));
            double conditionalentropypty = pty*(Math.log(py/pty));
            double conditionalentropyptz = ptz*(Math.log(pz/ptz));
            double conditionalentropyptdot = ptdot*(Math.log(pdot/ptdot));
            double conditionalentropyptcomma = ptcomma*(Math.log(pcomma/ptcomma));
            double conditionalentropyptvacuum = ptvacuum*(Math.log(pvacuum/ptvacuum));
            double conditionalentropypua = pua*(Math.log(pa/pua));
            double conditionalentropypub = pub*(Math.log(pb/pub));
            double conditionalentropypuc = puc*(Math.log(pc/puc));
            double conditionalentropypud = pud*(Math.log(pd/pud));
            double conditionalentropypue = pue*(Math.log(pe/pue));
            double conditionalentropypuf = puf*(Math.log(pf/puf));
            double conditionalentropypug = pug*(Math.log(pg/pug));
            double conditionalentropypuh = puh*(Math.log(ph/puh));
            double conditionalentropypui = pai*(Math.log(pi/pui));
            double conditionalentropypuj = puj*(Math.log(pj/puj));
            double conditionalentropypuk = puk*(Math.log(pk/puk));
            double conditionalentropypul = pul*(Math.log(pl/pul));
            double conditionalentropypum = pum*(Math.log(pm/pum));
            double conditionalentropypun = pun*(Math.log(pn/pun));
            double conditionalentropypuo = puo*(Math.log(po/puo));
            double conditionalentropypup = pup*(Math.log(pp/pup));
            double conditionalentropypuq = puq*(Math.log(pq/puq));
            double conditionalentropypur = pur*(Math.log(pr/pur));
            double conditionalentropypus = pus*(Math.log(ps/pus));
            double conditionalentropyput = put*(Math.log(pt/put));
            double conditionalentropypuv = puv*(Math.log(pv/puv));
            double conditionalentropypux = pux*(Math.log(px/pux));
            double conditionalentropypuy = puy*(Math.log(py/puy));
            double conditionalentropypuz = puz*(Math.log(pz/puz));
            double conditionalentropypudot = pudot*(Math.log(pdot/pudot));
            double conditionalentropypucomma = pucomma*(Math.log(pcomma/pucomma));
            double conditionalentropypuvacuum = puvacuum*(Math.log(pvacuum/puvacuum));
            double conditionalentropypva = pva*(Math.log(pa/pva));
            double conditionalentropypvd = pvd*(Math.log(pd/pvd));
            double conditionalentropypve = pve*(Math.log(pe/pve));
            double conditionalentropypvg = pvg*(Math.log(pg/pvg));
            double conditionalentropypvi = pvi*(Math.log(pi/pvi));
            double conditionalentropypvl = pvl*(Math.log(pl/pvl));
            double conditionalentropypvo = pvo*(Math.log(po/pvo));
            double conditionalentropypvr = pvr*(Math.log(pr/pvr));
            double conditionalentropypvu = pvu*(Math.log(pu/pvu));
            double conditionalentropypvdot = pvdot*(Math.log(pdot/pvdot));
            double conditionalentropypvcomma = pvcomma*(Math.log(pcomma/pvcomma));
            double conditionalentropypvvacuum = pvvacuum*(Math.log(pvacuum/pvvacuum));
            double conditionalentropypwa = pwa*(Math.log(pa/pwa));
            double conditionalentropypwb = pwb*(Math.log(pb/pwb));
            double conditionalentropypwd = pwd*(Math.log(pd/pwd));
            double conditionalentropypwe = pwe*(Math.log(pe/pwe));
            double conditionalentropypwh = pwh*(Math.log(ph/pwh));
            double conditionalentropypwi = pwi*(Math.log(pi/pwi));
            double conditionalentropypwl = pwl*(Math.log(pl/pwl));
            double conditionalentropypwn = pwn*(Math.log(pn/pwn));
            double conditionalentropypwo = pwo*(Math.log(po/pwo));
            double conditionalentropypwdot = pwdot*(Math.log(pdot/pwdot));
            double conditionalentropypwcomma = pwcomma*(Math.log(pcomma/pwcomma));
            double conditionalentropypwvacuum = pwvacuum*(Math.log(pvacuum/pwvacuum));
            double conditionalentropypxa = pxa*(Math.log(pa/pxa));
            double conditionalentropypxc = pxc*(Math.log(pc/pxc));
            double conditionalentropypxe = pxe*(Math.log(pe/pxe));
            double conditionalentropypxh = pxh*(Math.log(ph/pxh));
            double conditionalentropypxi = pxi*(Math.log(pi/pxi));
            double conditionalentropypxo = pxo*(Math.log(po/pxo));
            double conditionalentropypxp = pxp*(Math.log(pp/pxp));
            double conditionalentropypxq = pxq*(Math.log(pq/pxq));
            double conditionalentropypxt = pxt*(Math.log(pt/pxt));
            double conditionalentropypxu = pxu*(Math.log(pu/pxu));
            double conditionalentropypxy = pxy*(Math.log(py/pxy));
            double conditionalentropypxdot = pxdot*(Math.log(pdot/pxdot));
            double conditionalentropypxcomma = pxcomma*(Math.log(pcomma/pxcomma));
            double conditionalentropypxvacuum = pxvacuum*(Math.log(pvacuum/pxvacuum));
            double conditionalentropypya = pya*(Math.log(pa/pya));
            double conditionalentropypyb = pyb*(Math.log(pb/pyb));
            double conditionalentropypyc = pyc*(Math.log(pc/pyc));
            double conditionalentropypyd = pyd*(Math.log(pd/pyd));
            double conditionalentropypye = pye*(Math.log(pe/pye));
            double conditionalentropypyg = pyg*(Math.log(pg/pyg));
            double conditionalentropypyj = pyj*(Math.log(pj/pyj));
            double conditionalentropypyl = pyl*(Math.log(pl/pyl));
            double conditionalentropypym = pym*(Math.log(pm/pym));
            double conditionalentropypyn = pyn*(Math.log(pn/pyn));
            double conditionalentropypyo = pyo*(Math.log(po/pyo));
            double conditionalentropypyp = pyp*(Math.log(pp/pyp));
            double conditionalentropypyr = pyr*(Math.log(pr/pyr));
            double conditionalentropypys = pys*(Math.log(ps/pys));
            double conditionalentropypyt = pyt*(Math.log(pt/pyt));
            double conditionalentropypyu = pyu*(Math.log(pu/pyu));
            double conditionalentropypyv = pyv*(Math.log(pv/pyv));
            double conditionalentropypyx = pyx*(Math.log(px/pyx));
            double conditionalentropypydot = pydot*(Math.log(pdot/pydot));
            double conditionalentropypycomma = pycomma*(Math.log(pcomma/pycomma));
            double conditionalentropypyvacuum = pyvacuum*(Math.log(pvacuum/pyvacuum));
            double conditionalentropypza = pza*(Math.log(pa/pza));
            double conditionalentropypze = pze*(Math.log(pe/pze));
            double conditionalentropypzh = pzh*(Math.log(ph/pzh));
            double conditionalentropypzi = pzi*(Math.log(pi/pzi));
            double conditionalentropypzl = pzl*(Math.log(pl/pzl));
            double conditionalentropypzo = pzo*(Math.log(po/pzo));
            double conditionalentropypzu = pzu*(Math.log(pu/pzu));
            double conditionalentropypzy = pzy*(Math.log(py/pzy));
            double conditionalentropypzz = pzz*(Math.log(pz/pzz));
            double conditionalentropypzdot = pzdot*(Math.log(pdot/pzdot));
            double conditionalentropypzcomma = pzcomma*(Math.log(pcomma/pzcomma));
            double conditionalentropypzvacuum = pzvacuum*(Math.log(pvacuum/pzvacuum));
            double conditionalentropypdotdot = pdotdot*(Math.log(pdot/pdotdot));
            double conditionalentropypdotcomma = pdotcomma*(Math.log(pcomma/pdotcomma));
            double conditionalentropypdotvacuum = pdotvacuum*(Math.log(pvacuum/pdotvacuum));
            double conditionalentropypcommavacuum = pcommavacuum*(Math.log(pvacuum/pcommavacuum));
            double conditionalentropypvacuuma = pvacuuma*(Math.log(pa/pvacuuma));
            double conditionalentropypvacuumb = pvacuumb*(Math.log(pb/pvacuumb));
            double conditionalentropypvacuumc = pvacuumc*(Math.log(pc/pvacuumc));
            double conditionalentropypvacuumd = pvacuumd*(Math.log(pd/pvacuumd));
            double conditionalentropypvacuume = pvacuume*(Math.log(pe/pvacuume));
            double conditionalentropypvacuumf = pvacuumf*(Math.log(pf/pvacuumf));
            double conditionalentropypvacuumg = pvacuumg*(Math.log(pg/pvacuumg));
            double conditionalentropypvacuumh = pvacuumh*(Math.log(ph/pvacuumh));
            double conditionalentropypvacuumi = pvacuumi*(Math.log(pi/pvacuumi));
            double conditionalentropypvacuumj = pvacuumj*(Math.log(pj/pvacuumj));
            double conditionalentropypvacuumk = pvacuumk*(Math.log(pk/pvacuumk));
            double conditionalentropypvacuuml = pvacuuml*(Math.log(pl/pvacuuml));
            double conditionalentropypvacuumm = pvacuumm*(Math.log(pm/pvacuumm));
            double conditionalentropypvacuumn = pvacuumn*(Math.log(pn/pvacuumn));
            double conditionalentropypvacuumo = pvacuumo*(Math.log(po/pvacuumo));
            double conditionalentropypvacuump = pvacuump*(Math.log(pp/pvacuump));
            double conditionalentropypvacuumq = pvacuumq*(Math.log(pq/pvacuumq));
            double conditionalentropypvacuumr = pvacuumr*(Math.log(pr/pvacuumr));
            double conditionalentropypvacuums = pvacuums*(Math.log(ps/pvacuums));
            double conditionalentropypvacuumt = pvacuumt*(Math.log(pt/pvacuumt));
            double conditionalentropypvacuumu = pvacuumu*(Math.log(pu/pvacuumu));
            double conditionalentropypvacuumv = pvacuumv*(Math.log(pv/pvacuumv));
            double conditionalentropypvacuumw = pvacuumw*(Math.log(pw/pvacuumw));
            double conditionalentropypvacuumx = pvacuumx*(Math.log(px/pvacuumx));
            double conditionalentropypvacuumy = pvacuumy*(Math.log(py/pvacuumy));
            double conditionalentropypvacuumz = pvacuumz*(Math.log(pz/pvacuumz));
            double conditionalentropypvacuumdot = pvacuumdot*(Math.log(pdot/pvacuumdot));
            double conditionalentropypvacuumcomma = pvacuumcomma*(Math.log(pcomma/pvacuumcomma));
            double conditionalentropypvacuumvacuum = pvacuumvacuum*(Math.log(pvacuum/pvacuumvacuum));
            
            double sumconditionalentropy = conditionalentropypaa+conditionalentropypab+conditionalentropypac+conditionalentropypad+conditionalentropypae+conditionalentropypaf+conditionalentropypag+conditionalentropypah+conditionalentropypai+conditionalentropypaj+conditionalentropypak+conditionalentropypal+conditionalentropypam+conditionalentropypan+conditionalentropypao+conditionalentropypap+conditionalentropypaq+conditionalentropypar+conditionalentropypas+conditionalentropypat+conditionalentropypau+conditionalentropypav+conditionalentropypaw+conditionalentropypax+conditionalentropypay+conditionalentropypaz+conditionalentropypadot+conditionalentropypacomma+conditionalentropypavacuum
                               +conditionalentropypba+conditionalentropypbb+conditionalentropypbc+conditionalentropypbd+conditionalentropypbe+conditionalentropypbi+conditionalentropypbj+conditionalentropypbl+conditionalentropypbm+conditionalentropypbo+conditionalentropypbr+conditionalentropypbs+conditionalentropypbt+conditionalentropypbu+conditionalentropypby+conditionalentropypbdot+conditionalentropypbcomma+conditionalentropypbvacuum
                               +conditionalentropypca+conditionalentropypcc+conditionalentropypcd+conditionalentropypce+conditionalentropypch+conditionalentropypci+conditionalentropypck+conditionalentropypcl+conditionalentropypcm+conditionalentropypco+conditionalentropypcq+conditionalentropypcr+conditionalentropypcs+conditionalentropypct+conditionalentropypcu+conditionalentropypcv+conditionalentropypcy+conditionalentropypcdot+conditionalentropypccomma+conditionalentropypcvacuum
                               +conditionalentropypda+conditionalentropypdb+conditionalentropypdc+conditionalentropypdd+conditionalentropypde+conditionalentropypdg+conditionalentropypdh+conditionalentropypdi+conditionalentropypdj+conditionalentropypdk+conditionalentropypdl+conditionalentropypdm+conditionalentropypdn+conditionalentropypdo+conditionalentropypdr+conditionalentropypds+conditionalentropypdt+conditionalentropypdu+conditionalentropypdv+conditionalentropypdw+conditionalentropypdy+conditionalentropypddot+conditionalentropypdcomma+conditionalentropypdvacuum
                               +conditionalentropypea+conditionalentropypeb+conditionalentropypec+conditionalentropyped+conditionalentropypee+conditionalentropypef+conditionalentropypeg+conditionalentropypeh+conditionalentropypei+conditionalentropypej+conditionalentropypek+conditionalentropypel+conditionalentropypem+conditionalentropypen+conditionalentropypeo+conditionalentropypep+conditionalentropypeq+conditionalentropyper+conditionalentropypes+conditionalentropypet+conditionalentropypeu+conditionalentropypev+conditionalentropypew+conditionalentropypex+conditionalentropypey+conditionalentropypez+conditionalentropypedot+conditionalentropypecomma+conditionalentropypevacuum
                               +conditionalentropypfa+conditionalentropypfb+conditionalentropypfe+conditionalentropypff+conditionalentropypfh+conditionalentropypfi+conditionalentropypfj+conditionalentropypfl+conditionalentropypfo+conditionalentropypfr+conditionalentropypfs+conditionalentropypft+conditionalentropypfu+conditionalentropypfdot+conditionalentropypfcomma+conditionalentropypfvacuum
                               +conditionalentropypga+conditionalentropypgb+conditionalentropypgd+conditionalentropypge+conditionalentropypgg+conditionalentropypgh+conditionalentropypgi+conditionalentropypgj+conditionalentropypgl+conditionalentropypgm+conditionalentropypgn+conditionalentropypgo+conditionalentropypgr+conditionalentropypgs+conditionalentropypgt+conditionalentropypgu+conditionalentropypgv+conditionalentropypgy+conditionalentropypgz+conditionalentropypgdot+conditionalentropypgcomma+conditionalentropypgvacuum
                               +conditionalentropypha+conditionalentropyphe+conditionalentropyphi+conditionalentropyphl+conditionalentropyphm+conditionalentropyphn+conditionalentropypho+conditionalentropyphr+conditionalentropypht+conditionalentropyphu+conditionalentropyphv+conditionalentropyphy+conditionalentropyphdot+conditionalentropyphcomma+conditionalentropyphvacuum
                               +conditionalentropypia+conditionalentropypib+conditionalentropypic+conditionalentropypid+conditionalentropypie+conditionalentropypif+conditionalentropypig+conditionalentropypih+conditionalentropypii+conditionalentropypij+conditionalentropypik+conditionalentropypil+conditionalentropypim+conditionalentropypin+conditionalentropypio+conditionalentropypip+conditionalentropypiq+conditionalentropypir+conditionalentropypis+conditionalentropypit+conditionalentropypiu+conditionalentropypiv+conditionalentropypix+conditionalentropypiz+conditionalentropypidot+conditionalentropypicomma+conditionalentropypivacuum
                               +conditionalentropypja+conditionalentropypje+conditionalentropypji+conditionalentropypjo+conditionalentropypju+conditionalentropypjdot+conditionalentropypjvacuum
                               +conditionalentropypka+conditionalentropypke+conditionalentropypkh+conditionalentropypki+conditionalentropypkj+conditionalentropypkk+conditionalentropypkl+conditionalentropypkm+conditionalentropypkn+conditionalentropypko+conditionalentropypkp+conditionalentropypkr+conditionalentropypks+conditionalentropypkt+conditionalentropypku+conditionalentropypkv+conditionalentropypky+conditionalentropypkdot+conditionalentropypkcomma+conditionalentropypkvacuum
                               +conditionalentropypla+conditionalentropyplb+conditionalentropyplc+conditionalentropypld+conditionalentropyple+conditionalentropyplf+conditionalentropyplg+conditionalentropyplh+conditionalentropypli+conditionalentropyplj+conditionalentropyplk+conditionalentropypll+conditionalentropyplm+conditionalentropypln+conditionalentropyplo+conditionalentropyplp+conditionalentropyplq+conditionalentropyplr+conditionalentropypls+conditionalentropyplt+conditionalentropyplu+conditionalentropyplv+conditionalentropyply+conditionalentropyplz+conditionalentropypldot+conditionalentropyplcomma+conditionalentropyplvacuum
                               +conditionalentropypma+conditionalentropypmb+conditionalentropypmd+conditionalentropypme+conditionalentropypmi+conditionalentropypml+conditionalentropypmm+conditionalentropypmn+conditionalentropypmo+conditionalentropypmp+conditionalentropypms+conditionalentropypmu+conditionalentropypmw+conditionalentropypmy+conditionalentropypmdot+conditionalentropypmcomma+conditionalentropypmvacuum
                               +conditionalentropypna+conditionalentropypnb+conditionalentropypnc+conditionalentropypnd+conditionalentropypne+conditionalentropypnf+conditionalentropypng+conditionalentropypnh+conditionalentropypni+conditionalentropypnj+conditionalentropypnk+conditionalentropypnl+conditionalentropypnm+conditionalentropypnn+conditionalentropypno+conditionalentropypnp+conditionalentropypnq+conditionalentropypnr+conditionalentropypns+conditionalentropypnt+conditionalentropypnu+conditionalentropypnv+conditionalentropypnx+conditionalentropypny+conditionalentropypnz+conditionalentropypndot+conditionalentropypncomma+conditionalentropypnvacuum
                               +conditionalentropypoa+conditionalentropypob+conditionalentropypoc+conditionalentropypod+conditionalentropypoe+conditionalentropypof+conditionalentropypog+conditionalentropypoh+conditionalentropypoi+conditionalentropypoj+conditionalentropypok+conditionalentropypol+conditionalentropypom+conditionalentropypon+conditionalentropypoo+conditionalentropypop+conditionalentropypoq+conditionalentropypor+conditionalentropypos+conditionalentropypot+conditionalentropypou+conditionalentropypov+conditionalentropypow+conditionalentropypox+conditionalentropypoy+conditionalentropypodot+conditionalentropypocomma+conditionalentropypovacuum
                               +conditionalentropyppa+conditionalentropyppc+conditionalentropyppe+conditionalentropypph+conditionalentropyppi+conditionalentropyppk+conditionalentropyppl+conditionalentropyppn+conditionalentropyppo+conditionalentropyppp+conditionalentropyppr+conditionalentropypps+conditionalentropyppt+conditionalentropyppu+conditionalentropyppy+conditionalentropyppdot+conditionalentropyppcomma+conditionalentropyppvacuum
                               +conditionalentropypqi+conditionalentropypqu+conditionalentropypqdot+conditionalentropypqcomma+conditionalentropypqvacuum
                               +conditionalentropypra+conditionalentropyprb+conditionalentropyprc+conditionalentropyprd+conditionalentropypre+conditionalentropyprf+conditionalentropyprg+conditionalentropyprh+conditionalentropypri+conditionalentropyprj+conditionalentropyprk+conditionalentropyprl+conditionalentropyprm+conditionalentropyprn+conditionalentropypro+conditionalentropyprp+conditionalentropyprq+conditionalentropyprr+conditionalentropyprs+conditionalentropyprt+conditionalentropypru+conditionalentropyprv+conditionalentropyprw+conditionalentropypry+conditionalentropyprz+conditionalentropyprdot+conditionalentropyprcomma+conditionalentropyprvacuum
                               +conditionalentropypsa+conditionalentropypsb+conditionalentropypsc+conditionalentropypsd+conditionalentropypse+conditionalentropypsf+conditionalentropypsg+conditionalentropypsh+conditionalentropypsi+conditionalentropypsj+conditionalentropypsk+conditionalentropypsl+conditionalentropypsm+conditionalentropypsn+conditionalentropypso+conditionalentropypsp+conditionalentropypsq+conditionalentropypsr+conditionalentropypss+conditionalentropypst+conditionalentropypsu+conditionalentropypsv+conditionalentropypsw+conditionalentropypsy+conditionalentropypsdot+conditionalentropypscomma+conditionalentropypsvacuum
                               +conditionalentropypta+conditionalentropyptb+conditionalentropyptc+conditionalentropypte+conditionalentropypth+conditionalentropypti+conditionalentropyptj+conditionalentropyptk+conditionalentropyptl+conditionalentropyptm+conditionalentropyptn+conditionalentropypto+conditionalentropyptr+conditionalentropypts+conditionalentropyptt+conditionalentropyptu+conditionalentropyptv+conditionalentropyptw+conditionalentropypty+conditionalentropyptz+conditionalentropyptdot+conditionalentropyptcomma+conditionalentropyptvacuum
                               +conditionalentropypua+conditionalentropypub+conditionalentropypuc+conditionalentropypud+conditionalentropypue+conditionalentropypuf+conditionalentropypug+conditionalentropypuh+conditionalentropypui+conditionalentropypuj+conditionalentropypuk+conditionalentropypul+conditionalentropypum+conditionalentropypun+conditionalentropypuo+conditionalentropypup+conditionalentropypuq+conditionalentropypur+conditionalentropypus+conditionalentropyput+conditionalentropypuv+conditionalentropypux+conditionalentropypuy+conditionalentropypuz+conditionalentropypudot+conditionalentropypucomma+conditionalentropypuvacuum
                               +conditionalentropypva+conditionalentropypvd+conditionalentropypve+conditionalentropypvg+conditionalentropypvi+conditionalentropypvl+conditionalentropypvo+conditionalentropypvr+conditionalentropypvu+conditionalentropypvdot+conditionalentropypvcomma+conditionalentropypvvacuum
                               +conditionalentropypwa+conditionalentropypwb+conditionalentropypwd+conditionalentropypwe+conditionalentropypwh+conditionalentropypwi+conditionalentropypwl+conditionalentropypwn+conditionalentropypwo+conditionalentropypwdot+conditionalentropypwcomma+conditionalentropypwvacuum
                               +conditionalentropypxa+conditionalentropypxc+conditionalentropypxe+conditionalentropypxh+conditionalentropypxi+conditionalentropypxo+conditionalentropypxp+conditionalentropypxq+conditionalentropypxt+conditionalentropypxu+conditionalentropypxy+conditionalentropypxdot+conditionalentropypxcomma+conditionalentropypxvacuum
                               +conditionalentropypya+conditionalentropypyb+conditionalentropypyc+conditionalentropypyd+conditionalentropypye+conditionalentropypyg+conditionalentropypyj+conditionalentropypyl+conditionalentropypym+conditionalentropypyn+conditionalentropypyo+conditionalentropypyp+conditionalentropypyr+conditionalentropypys+conditionalentropypyt+conditionalentropypyu+conditionalentropypyv+conditionalentropypyx+conditionalentropypydot+conditionalentropypycomma+conditionalentropypyvacuum
                               +conditionalentropypza+conditionalentropypze+conditionalentropypzh+conditionalentropypzi+conditionalentropypzl+conditionalentropypzo+conditionalentropypzu+conditionalentropypzy+conditionalentropypzz+conditionalentropypzdot+conditionalentropypzcomma+conditionalentropypzvacuum
                               +conditionalentropypdotdot+conditionalentropypdotcomma+conditionalentropypdotvacuum+conditionalentropypcommavacuum
                               +conditionalentropypvacuuma+conditionalentropypvacuumb+conditionalentropypvacuumc+conditionalentropypvacuumd+conditionalentropypvacuume+conditionalentropypvacuumf+conditionalentropypvacuumg+conditionalentropypvacuumh+conditionalentropypvacuumi+conditionalentropypvacuumj+conditionalentropypvacuumk+conditionalentropypvacuuml+conditionalentropypvacuumm+conditionalentropypvacuumn+conditionalentropypvacuumo+conditionalentropypvacuump+conditionalentropypvacuumq+conditionalentropypvacuumr+conditionalentropypvacuums+conditionalentropypvacuumt+conditionalentropypvacuumu+conditionalentropypvacuumv+conditionalentropypvacuumw+conditionalentropypvacuumx+conditionalentropypvacuumy+conditionalentropypvacuumz+conditionalentropypvacuumdot+conditionalentropypvacuumcomma+conditionalentropypvacuumvacuum;                   
            
            System.out.println("\nP(aa)*log(P(a)/P(aa)) = " + conditionalentropypaa );
            System.out.println("\nP(ab)*log(P(b)/P(ab)) = " + conditionalentropypab );
            System.out.println("\nP(ac)*log(P(c)/P(ac)) = " + conditionalentropypac );
            System.out.println("\nP(ad)*log(P(d)/P(ad)) = " + conditionalentropypad );
            System.out.println("\nP(ae)*log(P(e)/P(ae)) = " + conditionalentropypae );
            System.out.println("\nP(af)*log(P(f)/P(af)) = " + conditionalentropypaf );
            System.out.println("\nP(ag)*log(P(g)/P(ag)) = " + conditionalentropypag );
            System.out.println("\nP(ah)*log(P(h)/P(ah)) = " + conditionalentropypah );
            System.out.println("\nP(ai)*log(P(i)/P(ai)) = " + conditionalentropypai );
            System.out.println("\nP(aj)*log(P(j)/P(aj)) = " + conditionalentropypaj );
            System.out.println("\nP(ak)*log(P(k)/P(ak)) = " + conditionalentropypak );
            System.out.println("\nP(al)*log(P(l)/P(al)) = " + conditionalentropypal );
            System.out.println("\nP(am)*log(P(m)/P(am)) = " + conditionalentropypam );
            System.out.println("\nP(an)*log(P(n)/P(an)) = " + conditionalentropypan );
            System.out.println("\nP(ao)*log(P(o)/P(ao)) = " + conditionalentropypao );
            System.out.println("\nP(ap)*log(P(p)/P(ap)) = " + conditionalentropypap );
            System.out.println("\nP(aq)*log(P(q)/P(aq)) = " + conditionalentropypaq );
            System.out.println("\nP(ar)*log(P(r)/P(ar)) = " + conditionalentropypar );
            System.out.println("\nP(as)*log(P(s)/P(as)) = " + conditionalentropypas );
            System.out.println("\nP(at)*log(P(t)/P(at)) = " + conditionalentropypat );
            System.out.println("\nP(au)*log(P(u)/P(au)) = " + conditionalentropypau );
            System.out.println("\nP(av)*log(P(v)/P(av)) = " + conditionalentropypav );
            System.out.println("\nP(aw)*log(P(w)/P(aw)) = " + conditionalentropypaw );
            System.out.println("\nP(ax)*log(P(x)/P(ax)) = " + conditionalentropypax );
            System.out.println("\nP(ay)*log(P(y)/P(ay)) = " + conditionalentropypay );
            System.out.println("\nP(az)*log(P(z)/P(az)) = " + conditionalentropypaz );
            System.out.println("\nP(a.)*log(P(.)/P(a.)) = " + conditionalentropypadot );
            System.out.println("\nP(a,)*log(P(,)/P(a,)) = " + conditionalentropypacomma );
            System.out.println("\nP(avacuum)*log(P(vacuum)/P(avacuum)) = " + conditionalentropypavacuum );
            System.out.println("\nP(ba)*log(P(a)/P(ba)) = " + conditionalentropypba );
            System.out.println("\nP(bb)*log(P(b)/P(bb)) = " + conditionalentropypbb );
            System.out.println("\nP(bc)*log(P(c)/P(bc)) = " + conditionalentropypbc );
            System.out.println("\nP(bd)*log(P(d)/P(bd)) = " + conditionalentropypbd );
            System.out.println("\nP(be)*log(P(e)/P(be)) = " + conditionalentropypbe );
            System.out.println("\nP(bi)*log(P(i)/P(bi)) = " + conditionalentropypbi );
            System.out.println("\nP(bj)*log(P(j)/P(bj)) = " + conditionalentropypbj );
            System.out.println("\nP(bl)*log(P(l)/P(bl)) = " + conditionalentropypbl );
            System.out.println("\nP(bm)*log(P(m)/P(bm)) = " + conditionalentropypbm );
            System.out.println("\nP(bo)*log(P(o)/P(bo)) = " + conditionalentropypbo );
            System.out.println("\nP(br)*log(P(r)/P(br)) = " + conditionalentropypbr );
            System.out.println("\nP(bs)*log(P(s)/P(bs)) = " + conditionalentropypbs );
            System.out.println("\nP(bt)*log(P(t)/P(bt)) = " + conditionalentropypbt );
            System.out.println("\nP(bu)*log(P(u)/P(bu)) = " + conditionalentropypbu );
            System.out.println("\nP(by)*log(P(y)/P(by)) = " + conditionalentropypby );
            System.out.println("\nP(b.)*log(P(.)/P(b.)) = " + conditionalentropypbdot );
            System.out.println("\nP(b,)*log(P(,)/P(b,)) = " + conditionalentropypbcomma );
            System.out.println("\nP(bvacuum)*log(P(vacuum)/P(bvacuum)) = " + conditionalentropypbvacuum );
            System.out.println("\nP(ca)*log(P(a)/P(ca)) = " + conditionalentropypca );
            System.out.println("\nP(cc)*log(P(c)/P(cc)) = " + conditionalentropypcc );
            System.out.println("\nP(cd)*log(P(d)/P(cd)) = " + conditionalentropypcd );
            System.out.println("\nP(ce)*log(P(e)/P(ce)) = " + conditionalentropypce );
            System.out.println("\nP(ch)*log(P(h)/P(ch)) = " + conditionalentropypch );
            System.out.println("\nP(ci)*log(P(i)/P(ci)) = " + conditionalentropypci );
            System.out.println("\nP(ck)*log(P(k)/P(ck)) = " + conditionalentropypck );
            System.out.println("\nP(cl)*log(P(l)/P(cl)) = " + conditionalentropypcl );
            System.out.println("\nP(cm)*log(P(m)/P(cm)) = " + conditionalentropypcm );
            System.out.println("\nP(co)*log(P(o)/P(co)) = " + conditionalentropypco );
            System.out.println("\nP(cq)*log(P(q)/P(cq)) = " + conditionalentropypcq );
            System.out.println("\nP(cr)*log(P(r)/P(cr)) = " + conditionalentropypcr );
            System.out.println("\nP(cs)*log(P(s)/P(cs)) = " + conditionalentropypcs );
            System.out.println("\nP(ct)*log(P(t)/P(ct)) = " + conditionalentropypct );
            System.out.println("\nP(cu)*log(P(u)/P(cu)) = " + conditionalentropypcu );
            System.out.println("\nP(cv)*log(P(v)/P(cv)) = " + conditionalentropypcv );
            System.out.println("\nP(cy)*log(P(y)/P(cy)) = " + conditionalentropypcy );
            System.out.println("\nP(c.)*log(P(.)/P(c.)) = " + conditionalentropypcdot );
            System.out.println("\nP(c,)*log(P(,)/P(c,)) = " + conditionalentropypccomma );
            System.out.println("\nP(cvacuum)*log(P(vacuum)/P(cvacuum)) = " + conditionalentropypcvacuum );
            System.out.println("\nP(da)*log(P(a)/P(da)) = " + conditionalentropypda );
            System.out.println("\nP(db)*log(P(b)/P(db)) = " + conditionalentropypdb );
            System.out.println("\nP(dc)*log(P(c)/P(dc)) = " + conditionalentropypdc );
            System.out.println("\nP(dd)*log(P(d)/P(dd)) = " + conditionalentropypdd );
            System.out.println("\nP(de)*log(P(e)/P(de)) = " + conditionalentropypde );
            System.out.println("\nP(dg)*log(P(g)/P(dg)) = " + conditionalentropypdg );
            System.out.println("\nP(dh)*log(P(h)/P(dh)) = " + conditionalentropypdh );
            System.out.println("\nP(di)*log(P(i)/P(di)) = " + conditionalentropypdi );
            System.out.println("\nP(dj)*log(P(j)/P(dj)) = " + conditionalentropypdj );
            System.out.println("\nP(dk)*log(P(k)/P(dk)) = " + conditionalentropypdk );
            System.out.println("\nP(dl)*log(P(l)/P(dl)) = " + conditionalentropypdl );
            System.out.println("\nP(dm)*log(P(m)/P(dm)) = " + conditionalentropypdm );
            System.out.println("\nP(dn)*log(P(n)/P(dn)) = " + conditionalentropypdn );
            System.out.println("\nP(do)*log(P(o)/P(do)) = " + conditionalentropypdo );
            System.out.println("\nP(dr)*log(P(r)/P(dr)) = " + conditionalentropypdr );
            System.out.println("\nP(ds)*log(P(s)/P(ds)) = " + conditionalentropypds );
            System.out.println("\nP(dt)*log(P(t)/P(dt)) = " + conditionalentropypdt );
            System.out.println("\nP(du)*log(P(u)/P(du)) = " + conditionalentropypdu );
            System.out.println("\nP(dv)*log(P(v)/P(dv)) = " + conditionalentropypdv );
            System.out.println("\nP(dw)*log(P(w)/P(dw)) = " + conditionalentropypdw );
            System.out.println("\nP(dy)*log(P(y)/P(dy)) = " + conditionalentropypdy );
            System.out.println("\nP(d.)*log(P(.)/P(d.)) = " + conditionalentropypddot );
            System.out.println("\nP(d,)*log(P(,)/P(d,)) = " + conditionalentropypdcomma );
            System.out.println("\nP(dvacuum)*log(P(vacuum)/P(dvacuum)) = " + conditionalentropypdvacuum ); 
            System.out.println("\nP(ea)*log(P(a)/P(ea)) = " + conditionalentropypea );
            System.out.println("\nP(eb)*log(P(b)/P(eb)) = " + conditionalentropypeb );
            System.out.println("\nP(ec)*log(P(c)/P(ec)) = " + conditionalentropypec );
            System.out.println("\nP(ed)*log(P(d)/P(ed)) = " + conditionalentropyped );
            System.out.println("\nP(ee)*log(P(e)/P(ee)) = " + conditionalentropypee );
            System.out.println("\nP(ef)*log(P(f)/P(ef)) = " + conditionalentropypef );
            System.out.println("\nP(eg)*log(P(g)/P(eg)) = " + conditionalentropypeg );
            System.out.println("\nP(eh)*log(P(h)/P(eh)) = " + conditionalentropypeh );
            System.out.println("\nP(ei)*log(P(i)/P(ei)) = " + conditionalentropypei );
            System.out.println("\nP(ej)*log(P(j)/P(ej)) = " + conditionalentropypej );
            System.out.println("\nP(ek)*log(P(k)/P(ek)) = " + conditionalentropypek );
            System.out.println("\nP(el)*log(P(l)/P(el)) = " + conditionalentropypel );
            System.out.println("\nP(em)*log(P(m)/P(em)) = " + conditionalentropypem );
            System.out.println("\nP(en)*log(P(n)/P(en)) = " + conditionalentropypen );
            System.out.println("\nP(eo)*log(P(o)/P(eo)) = " + conditionalentropypeo );
            System.out.println("\nP(ep)*log(P(p)/P(ep)) = " + conditionalentropypep );
            System.out.println("\nP(eq)*log(P(q)/P(eq)) = " + conditionalentropypeq );
            System.out.println("\nP(er)*log(P(r)/P(er)) = " + conditionalentropyper );
            System.out.println("\nP(es)*log(P(s)/P(es)) = " + conditionalentropypes );
            System.out.println("\nP(et)*log(P(t)/P(et)) = " + conditionalentropypet );
            System.out.println("\nP(eu)*log(P(u)/P(eu)) = " + conditionalentropypeu );
            System.out.println("\nP(ev)*log(P(v)/P(ev)) = " + conditionalentropypev );
            System.out.println("\nP(ew)*log(P(w)/P(ew)) = " + conditionalentropypew );
            System.out.println("\nP(ex)*log(P(x)/P(ex)) = " + conditionalentropypex );
            System.out.println("\nP(ey)*log(P(y)/P(ey)) = " + conditionalentropypey );
            System.out.println("\nP(ez)*log(P(z)/P(ez)) = " + conditionalentropypez );
            System.out.println("\nP(e.)*log(P(.)/P(e.)) = " + conditionalentropypedot );
            System.out.println("\nP(e,)*log(P(,)/P(e,)) = " + conditionalentropypecomma );
            System.out.println("\nP(evacuum)*log(P(vacuum)/P(evacuum)) = " + conditionalentropypevacuum );
            System.out.println("\nP(fa)*log(P(a)/P(fa)) = " + conditionalentropypfa );
            System.out.println("\nP(fb)*log(P(b)/P(fb)) = " + conditionalentropypfb );
            System.out.println("\nP(fe)*log(P(e)/P(fe)) = " + conditionalentropypfe );
            System.out.println("\nP(ff)*log(P(f)/P(ff)) = " + conditionalentropypff );
            System.out.println("\nP(fh)*log(P(h)/P(fh)) = " + conditionalentropypfh );
            System.out.println("\nP(fi)*log(P(i)/P(fi)) = " + conditionalentropypfi );
            System.out.println("\nP(fj)*log(P(j)/P(fj)) = " + conditionalentropypfj );
            System.out.println("\nP(fl)*log(P(l)/P(fl)) = " + conditionalentropypfl );
            System.out.println("\nP(fo)*log(P(o)/P(fo)) = " + conditionalentropypfo );
            System.out.println("\nP(fr)*log(P(r)/P(fr)) = " + conditionalentropypfr );
            System.out.println("\nP(fs)*log(P(s)/P(fs)) = " + conditionalentropypfs );
            System.out.println("\nP(ft)*log(P(t)/P(ft)) = " + conditionalentropypft );
            System.out.println("\nP(fu)*log(P(u)/P(fu)) = " + conditionalentropypfu );
            System.out.println("\nP(f.)*log(P(.)/P(f.)) = " + conditionalentropypfdot );
            System.out.println("\nP(f,)*log(P(,)/P(f,)) = " + conditionalentropypfcomma );
            System.out.println("\nP(fvacuum)*log(P(vacuum)/P(fvacuum)) = " + conditionalentropypfvacuum );
            System.out.println("\nP(ga)*log(P(a)/P(ga)) = " + conditionalentropypga );
            System.out.println("\nP(gb)*log(P(b)/P(gb)) = " + conditionalentropypgb );
            System.out.println("\nP(gd)*log(P(d)/P(gd)) = " + conditionalentropypgd );
            System.out.println("\nP(ge)*log(P(e)/P(ge)) = " + conditionalentropypge );
            System.out.println("\nP(gg)*log(P(g)/P(gg)) = " + conditionalentropypgg );
            System.out.println("\nP(gh)*log(P(h)/P(gh)) = " + conditionalentropypgh );
            System.out.println("\nP(gi)*log(P(i)/P(gi)) = " + conditionalentropypgi );
            System.out.println("\nP(gj)*log(P(j)/P(gj)) = " + conditionalentropypgj );
            System.out.println("\nP(gl)*log(P(l)/P(gl)) = " + conditionalentropypgl );
            System.out.println("\nP(gm)*log(P(m)/P(gm)) = " + conditionalentropypgm );
            System.out.println("\nP(gn)*log(P(n)/P(gn)) = " + conditionalentropypgn );
            System.out.println("\nP(go)*log(P(o)/P(go)) = " + conditionalentropypgo );
            System.out.println("\nP(gr)*log(P(r)/P(gr)) = " + conditionalentropypgr );
            System.out.println("\nP(gs)*log(P(s)/P(gs)) = " + conditionalentropypgs );
            System.out.println("\nP(gt)*log(P(t)/P(gt)) = " + conditionalentropypgt );
            System.out.println("\nP(gu)*log(P(u)/P(gu)) = " + conditionalentropypgu );
            System.out.println("\nP(gv)*log(P(v)/P(gv)) = " + conditionalentropypgv );
            System.out.println("\nP(gy)*log(P(y)/P(gy)) = " + conditionalentropypgy );
            System.out.println("\nP(gz)*log(P(z)/P(gz)) = " + conditionalentropypgz );
            System.out.println("\nP(g.)*log(P(.)/P(g.)) = " + conditionalentropypgdot );
            System.out.println("\nP(g,)*log(P(,)/P(g,)) = " + conditionalentropypgcomma );
            System.out.println("\nP(gvacuum)*log(P(vacuum)/P(gvacuum)) = " + conditionalentropypgvacuum );
            System.out.println("\nP(ha)*log(P(a)/P(ha)) = " + conditionalentropypha );
            System.out.println("\nP(he)*log(P(e)/P(he)) = " + conditionalentropyphe );
            System.out.println("\nP(hi)*log(P(i)/P(hi)) = " + conditionalentropyphi );
            System.out.println("\nP(hl)*log(P(l)/P(hl)) = " + conditionalentropyphl );
            System.out.println("\nP(hm)*log(P(m)/P(hm)) = " + conditionalentropyphm );
            System.out.println("\nP(hn)*log(P(n)/P(hn)) = " + conditionalentropyphn );
            System.out.println("\nP(ho)*log(P(o)/P(ho)) = " + conditionalentropypho );
            System.out.println("\nP(hr)*log(P(r)/P(hr)) = " + conditionalentropyphr );
            System.out.println("\nP(ht)*log(P(t)/P(ht)) = " + conditionalentropypht );
            System.out.println("\nP(hu)*log(P(u)/P(hu)) = " + conditionalentropyphu );
            System.out.println("\nP(hv)*log(P(v)/P(hv)) = " + conditionalentropyphv );
            System.out.println("\nP(hy)*log(P(y)/P(hy)) = " + conditionalentropyphy );
            System.out.println("\nP(h.)*log(P(.)/P(h.)) = " + conditionalentropyphdot );
            System.out.println("\nP(h,)*log(P(,)/P(h,)) = " + conditionalentropyphcomma );
            System.out.println("\nP(hvacuum)*log(P(vacuum)/P(hvacuum)) = " + conditionalentropyphvacuum );
            System.out.println("\nP(ia)*log(P(a)/P(ia)) = " + conditionalentropypia );
            System.out.println("\nP(ib)*log(P(b)/P(ib)) = " + conditionalentropypib );
            System.out.println("\nP(ic)*log(P(c)/P(ic)) = " + conditionalentropypic );
            System.out.println("\nP(id)*log(P(d)/P(id)) = " + conditionalentropypid );
            System.out.println("\nP(ie)*log(P(e)/P(ie)) = " + conditionalentropypie );
            System.out.println("\nP(if)*log(P(f)/P(if)) = " + conditionalentropypif );
            System.out.println("\nP(ig)*log(P(g)/P(ig)) = " + conditionalentropypig );
            System.out.println("\nP(ih)*log(P(h)/P(ih)) = " + conditionalentropypih );
            System.out.println("\nP(ii)*log(P(i)/P(ii)) = " + conditionalentropypii );
            System.out.println("\nP(ij)*log(P(j)/P(ij)) = " + conditionalentropypij );
            System.out.println("\nP(ik)*log(P(k)/P(ik)) = " + conditionalentropypik );
            System.out.println("\nP(il)*log(P(l)/P(il)) = " + conditionalentropypil );
            System.out.println("\nP(im)*log(P(m)/P(im)) = " + conditionalentropypim );
            System.out.println("\nP(in)*log(P(n)/P(in)) = " + conditionalentropypin );
            System.out.println("\nP(io)*log(P(o)/P(io)) = " + conditionalentropypio );
            System.out.println("\nP(ip)*log(P(p)/P(ip)) = " + conditionalentropypip );
            System.out.println("\nP(iq)*log(P(q)/P(iq)) = " + conditionalentropypiq );
            System.out.println("\nP(ir)*log(P(r)/P(ir)) = " + conditionalentropypir );
            System.out.println("\nP(is)*log(P(s)/P(is)) = " + conditionalentropypis );
            System.out.println("\nP(it)*log(P(t)/P(it)) = " + conditionalentropypit );
            System.out.println("\nP(iu)*log(P(u)/P(iu)) = " + conditionalentropypiu );
            System.out.println("\nP(iv)*log(P(v)/P(iv)) = " + conditionalentropypiv );
            System.out.println("\nP(ix)*log(P(x)/P(ix)) = " + conditionalentropypix );
            System.out.println("\nP(iz)*log(P(z)/P(iz)) = " + conditionalentropypiz );
            System.out.println("\nP(i.)*log(P(.)/P(i.)) = " + conditionalentropypidot );
            System.out.println("\nP(i,)*log(P(,)/P(i,)) = " + conditionalentropypicomma );
            System.out.println("\nP(ivacuum)*log(P(vacuum)/P(ivacuum)) = " + conditionalentropypivacuum );
            System.out.println("\nP(ja)*log(P(a)/P(ja)) = " + conditionalentropypja );
            System.out.println("\nP(je)*log(P(e)/P(je)) = " + conditionalentropypje );
            System.out.println("\nP(ji)*log(P(i)/P(ji)) = " + conditionalentropypji );
            System.out.println("\nP(jo)*log(P(o)/P(jo)) = " + conditionalentropypjo );
            System.out.println("\nP(ju)*log(P(u)/P(ju)) = " + conditionalentropypju );
            System.out.println("\nP(j.)*log(P(.)/P(j.)) = " + conditionalentropypjdot );
            System.out.println("\nP(jvacuum)*log(P(vacuum)/P(jvacuum)) = " + conditionalentropypjvacuum );
            System.out.println("\nP(ka)*log(P(a)/P(ka)) = " + conditionalentropypka );
            System.out.println("\nP(ke)*log(P(e)/P(ke)) = " + conditionalentropypke );
            System.out.println("\nP(kh)*log(P(h)/P(kh)) = " + conditionalentropypkh );
            System.out.println("\nP(ki)*log(P(i)/P(ki)) = " + conditionalentropypki );
            System.out.println("\nP(kj)*log(P(j)/P(kj)) = " + conditionalentropypkj );
            System.out.println("\nP(kk)*log(P(k)/P(kk)) = " + conditionalentropypkk );
            System.out.println("\nP(kl)*log(P(l)/P(kl)) = " + conditionalentropypkl );
            System.out.println("\nP(km)*log(P(m)/P(km)) = " + conditionalentropypkm );
            System.out.println("\nP(kn)*log(P(n)/P(kn)) = " + conditionalentropypkn );
            System.out.println("\nP(ko)*log(P(o)/P(ko)) = " + conditionalentropypko );
            System.out.println("\nP(kp)*log(P(p)/P(kp)) = " + conditionalentropypkp );
            System.out.println("\nP(kr)*log(P(r)/P(kr)) = " + conditionalentropypkr );
            System.out.println("\nP(ks)*log(P(s)/P(ks)) = " + conditionalentropypks );
            System.out.println("\nP(kt)*log(P(t)/P(kt)) = " + conditionalentropypkt );
            System.out.println("\nP(ku)*log(P(u)/P(ku)) = " + conditionalentropypku );
            System.out.println("\nP(kv)*log(P(v)/P(kv)) = " + conditionalentropypkv );
            System.out.println("\nP(ky)*log(P(y)/P(ky)) = " + conditionalentropypky );
            System.out.println("\nP(k.)*log(P(.)/P(k.)) = " + conditionalentropypkdot );
            System.out.println("\nP(k,)*log(P(,)/P(k,)) = " + conditionalentropypkcomma );
            System.out.println("\nP(avacuum)*log(P(vacuum)/P(kvacuum)) = " + conditionalentropypkvacuum );
            System.out.println("\nP(la)*log(P(a)/P(la)) = " + conditionalentropypla );
            System.out.println("\nP(lb)*log(P(b)/P(lb)) = " + conditionalentropyplb );
            System.out.println("\nP(lc)*log(P(c)/P(lc)) = " + conditionalentropyplc );
            System.out.println("\nP(ld)*log(P(d)/P(ld)) = " + conditionalentropypld );
            System.out.println("\nP(le)*log(P(e)/P(le)) = " + conditionalentropyple );
            System.out.println("\nP(lf)*log(P(f)/P(lf)) = " + conditionalentropyplf );
            System.out.println("\nP(lg)*log(P(g)/P(lg)) = " + conditionalentropyplg );
            System.out.println("\nP(lh)*log(P(h)/P(lh)) = " + conditionalentropyplh );
            System.out.println("\nP(li)*log(P(i)/P(li)) = " + conditionalentropypli );
            System.out.println("\nP(lj)*log(P(j)/P(lj)) = " + conditionalentropyplj );
            System.out.println("\nP(lk)*log(P(k)/P(lk)) = " + conditionalentropyplk );
            System.out.println("\nP(ll)*log(P(l)/P(ll)) = " + conditionalentropypll );
            System.out.println("\nP(lm)*log(P(m)/P(lm)) = " + conditionalentropyplm );
            System.out.println("\nP(ln)*log(P(n)/P(ln)) = " + conditionalentropypln );
            System.out.println("\nP(lo)*log(P(o)/P(lo)) = " + conditionalentropyplo );
            System.out.println("\nP(lp)*log(P(p)/P(lp)) = " + conditionalentropyplp );
            System.out.println("\nP(lq)*log(P(q)/P(lq)) = " + conditionalentropyplq );
            System.out.println("\nP(lr)*log(P(r)/P(lr)) = " + conditionalentropyplr );
            System.out.println("\nP(ls)*log(P(s)/P(ls)) = " + conditionalentropypls );
            System.out.println("\nP(lt)*log(P(t)/P(lt)) = " + conditionalentropyplt );
            System.out.println("\nP(lu)*log(P(u)/P(lu)) = " + conditionalentropyplu );
            System.out.println("\nP(lv)*log(P(v)/P(lv)) = " + conditionalentropyplv );
            System.out.println("\nP(ly)*log(P(y)/P(ly)) = " + conditionalentropyply );
            System.out.println("\nP(lz)*log(P(z)/P(lz)) = " + conditionalentropyplz );
            System.out.println("\nP(l.)*log(P(.)/P(l.)) = " + conditionalentropypldot );
            System.out.println("\nP(l,)*log(P(,)/P(l,)) = " + conditionalentropyplcomma );
            System.out.println("\nP(lvacuum)*log(P(vacuum)/P(lvacuum)) = " + conditionalentropyplvacuum );
            System.out.println("\nP(ma)*log(P(a)/P(ma)) = " + conditionalentropypma );
            System.out.println("\nP(mb)*log(P(b)/P(mb)) = " + conditionalentropypmb );
            System.out.println("\nP(md)*log(P(d)/P(md)) = " + conditionalentropypmd );
            System.out.println("\nP(me)*log(P(e)/P(me)) = " + conditionalentropypme );
            System.out.println("\nP(mi)*log(P(i)/P(mi)) = " + conditionalentropypmi );
            System.out.println("\nP(ml)*log(P(l)/P(ml)) = " + conditionalentropypml );
            System.out.println("\nP(mm)*log(P(m)/P(mm)) = " + conditionalentropypmm );
            System.out.println("\nP(mn)*log(P(n)/P(mn)) = " + conditionalentropypmn );
            System.out.println("\nP(mo)*log(P(o)/P(mo)) = " + conditionalentropypmo );
            System.out.println("\nP(mp)*log(P(p)/P(mp)) = " + conditionalentropypmp );
            System.out.println("\nP(ms)*log(P(s)/P(ms)) = " + conditionalentropypms );
            System.out.println("\nP(mu)*log(P(u)/P(mu)) = " + conditionalentropypmu );
            System.out.println("\nP(mw)*log(P(w)/P(mw)) = " + conditionalentropypmw );
            System.out.println("\nP(my)*log(P(y)/P(my)) = " + conditionalentropypmy );
            System.out.println("\nP(m.)*log(P(.)/P(m.)) = " + conditionalentropypmdot );
            System.out.println("\nP(m,)*log(P(,)/P(m,)) = " + conditionalentropypmcomma );
            System.out.println("\nP(mvacuum)*log(P(vacuum)/P(mvacuum)) = " + conditionalentropypmvacuum );
            System.out.println("\nP(na)*log(P(a)/P(na)) = " + conditionalentropypna );
            System.out.println("\nP(nb)*log(P(b)/P(nb)) = " + conditionalentropypnb );
            System.out.println("\nP(nc)*log(P(c)/P(nc)) = " + conditionalentropypnc );
            System.out.println("\nP(nd)*log(P(d)/P(nd)) = " + conditionalentropypnd );
            System.out.println("\nP(ne)*log(P(e)/P(ne)) = " + conditionalentropypne );
            System.out.println("\nP(nf)*log(P(f)/P(nf)) = " + conditionalentropypnf );
            System.out.println("\nP(ng)*log(P(g)/P(ng)) = " + conditionalentropypng );
            System.out.println("\nP(nh)*log(P(h)/P(nh)) = " + conditionalentropypnh );
            System.out.println("\nP(ni)*log(P(i)/P(ni)) = " + conditionalentropypni );
            System.out.println("\nP(nj)*log(P(j)/P(nj)) = " + conditionalentropypnj );
            System.out.println("\nP(nk)*log(P(k)/P(nk)) = " + conditionalentropypnk );
            System.out.println("\nP(nl)*log(P(l)/P(nl)) = " + conditionalentropypnl );
            System.out.println("\nP(nm)*log(P(m)/P(nm)) = " + conditionalentropypnm );
            System.out.println("\nP(nn)*log(P(n)/P(nn)) = " + conditionalentropypnn );
            System.out.println("\nP(no)*log(P(o)/P(no)) = " + conditionalentropypno );
            System.out.println("\nP(np)*log(P(p)/P(np)) = " + conditionalentropypnp );
            System.out.println("\nP(nq)*log(P(q)/P(nq)) = " + conditionalentropypnq );
            System.out.println("\nP(nr)*log(P(r)/P(nr)) = " + conditionalentropypnr );
            System.out.println("\nP(ns)*log(P(s)/P(ns)) = " + conditionalentropypns );
            System.out.println("\nP(nt)*log(P(t)/P(nt)) = " + conditionalentropypnt );
            System.out.println("\nP(nu)*log(P(u)/P(nu)) = " + conditionalentropypnu );
            System.out.println("\nP(nv)*log(P(v)/P(nv)) = " + conditionalentropypnv );
            System.out.println("\nP(nx)*log(P(x)/P(nx)) = " + conditionalentropypnx );
            System.out.println("\nP(ny)*log(P(y)/P(ny)) = " + conditionalentropypny );
            System.out.println("\nP(nz)*log(P(z)/P(nz)) = " + conditionalentropypnz );
            System.out.println("\nP(n.)*log(P(.)/P(n.)) = " + conditionalentropypndot );
            System.out.println("\nP(n,)*log(P(,)/P(n,)) = " + conditionalentropypncomma );
            System.out.println("\nP(nvacuum)*log(P(vacuum)/P(nvacuum)) = " + conditionalentropypnvacuum );
            System.out.println("\nP(oa)*log(P(a)/P(oa)) = " + conditionalentropypoa );
            System.out.println("\nP(ob)*log(P(b)/P(ob)) = " + conditionalentropypob );
            System.out.println("\nP(oc)*log(P(c)/P(oc)) = " + conditionalentropypoc );
            System.out.println("\nP(od)*log(P(d)/P(od)) = " + conditionalentropypod );
            System.out.println("\nP(oe)*log(P(e)/P(oe)) = " + conditionalentropypoe );
            System.out.println("\nP(of)*log(P(f)/P(of)) = " + conditionalentropypof );
            System.out.println("\nP(og)*log(P(g)/P(og)) = " + conditionalentropypog );
            System.out.println("\nP(oh)*log(P(h)/P(oh)) = " + conditionalentropypoh );
            System.out.println("\nP(oi)*log(P(i)/P(oi)) = " + conditionalentropypoi );
            System.out.println("\nP(oj)*log(P(j)/P(oj)) = " + conditionalentropypoj );
            System.out.println("\nP(ok)*log(P(k)/P(ok)) = " + conditionalentropypok );
            System.out.println("\nP(ol)*log(P(l)/P(ol)) = " + conditionalentropypol );
            System.out.println("\nP(om)*log(P(m)/P(om)) = " + conditionalentropypom );
            System.out.println("\nP(on)*log(P(n)/P(on)) = " + conditionalentropypon );
            System.out.println("\nP(oo)*log(P(o)/P(oo)) = " + conditionalentropypoo );
            System.out.println("\nP(op)*log(P(p)/P(op)) = " + conditionalentropypop );
            System.out.println("\nP(oq)*log(P(q)/P(oq)) = " + conditionalentropypoq );
            System.out.println("\nP(or)*log(P(r)/P(or)) = " + conditionalentropypor );
            System.out.println("\nP(os)*log(P(s)/P(os)) = " + conditionalentropypos );
            System.out.println("\nP(ot)*log(P(t)/P(ot)) = " + conditionalentropypot );
            System.out.println("\nP(ou)*log(P(u)/P(ou)) = " + conditionalentropypou );
            System.out.println("\nP(ov)*log(P(v)/P(ov)) = " + conditionalentropypov );
            System.out.println("\nP(ow)*log(P(w)/P(ow)) = " + conditionalentropypow );
            System.out.println("\nP(ox)*log(P(x)/P(ox)) = " + conditionalentropypox );
            System.out.println("\nP(oy)*log(P(y)/P(oy)) = " + conditionalentropypoy );
            System.out.println("\nP(o.)*log(P(.)/P(o.)) = " + conditionalentropypodot );
            System.out.println("\nP(o,)*log(P(,)/P(o,)) = " + conditionalentropypocomma );
            System.out.println("\nP(ovacuum)*log(P(vacuum)/P(ovacuum)) = " + conditionalentropypovacuum );
            System.out.println("\nP(pa)*log(P(a)/P(pa)) = " + conditionalentropyppa );
            System.out.println("\nP(pc)*log(P(c)/P(pc)) = " + conditionalentropyppc );
            System.out.println("\nP(pe)*log(P(e)/P(pe)) = " + conditionalentropyppe );
            System.out.println("\nP(ph)*log(P(h)/P(ph)) = " + conditionalentropypph );
            System.out.println("\nP(pi)*log(P(i)/P(pi)) = " + conditionalentropyppi );
            System.out.println("\nP(pk)*log(P(k)/P(pk)) = " + conditionalentropyppk );
            System.out.println("\nP(pl)*log(P(l)/P(pl)) = " + conditionalentropyppl );
            System.out.println("\nP(pn)*log(P(n)/P(pn)) = " + conditionalentropyppn );
            System.out.println("\nP(po)*log(P(o)/P(po)) = " + conditionalentropyppo );
            System.out.println("\nP(pp)*log(P(p)/P(pp)) = " + conditionalentropyppp );
            System.out.println("\nP(pr)*log(P(r)/P(pr)) = " + conditionalentropyppr );
            System.out.println("\nP(ps)*log(P(s)/P(ps)) = " + conditionalentropypps );
            System.out.println("\nP(pt)*log(P(t)/P(pt)) = " + conditionalentropyppt );
            System.out.println("\nP(pu)*log(P(u)/P(pu)) = " + conditionalentropyppu );
            System.out.println("\nP(py)*log(P(y)/P(py)) = " + conditionalentropyppy );
            System.out.println("\nP(p.)*log(P(.)/P(p.)) = " + conditionalentropyppdot );
            System.out.println("\nP(p,)*log(P(,)/P(p,)) = " + conditionalentropyppcomma );
            System.out.println("\nP(pvacuum)*log(P(vacuum)/P(pvacuum)) = " + conditionalentropyppvacuum );
            System.out.println("\nP(qi)*log(P(i)/P(qi)) = " + conditionalentropypqi );
            System.out.println("\nP(qu)*log(P(u)/P(qu)) = " + conditionalentropypqu );
            System.out.println("\nP(q.)*log(P(.)/P(q.)) = " + conditionalentropypqdot );
            System.out.println("\nP(q,)*log(P(,)/P(q,)) = " + conditionalentropypqcomma );
            System.out.println("\nP(qvacuum)*log(P(vacuum)/P(qvacuum)) = " + conditionalentropypqvacuum );
            System.out.println("\nP(ra)*log(P(a)/P(ra)) = " + conditionalentropypra );
            System.out.println("\nP(rb)*log(P(b)/P(rb)) = " + conditionalentropyprb );
            System.out.println("\nP(rc)*log(P(c)/P(rc)) = " + conditionalentropyprc );
            System.out.println("\nP(rd)*log(P(d)/P(rd)) = " + conditionalentropyprd );
            System.out.println("\nP(re)*log(P(e)/P(re)) = " + conditionalentropypre );
            System.out.println("\nP(rf)*log(P(f)/P(rf)) = " + conditionalentropyprf );
            System.out.println("\nP(rg)*log(P(g)/P(rg)) = " + conditionalentropyprg );
            System.out.println("\nP(rh)*log(P(h)/P(rh)) = " + conditionalentropyprh );
            System.out.println("\nP(ri)*log(P(i)/P(ri)) = " + conditionalentropypri );
            System.out.println("\nP(rj)*log(P(j)/P(rj)) = " + conditionalentropyprj );
            System.out.println("\nP(rk)*log(P(k)/P(rk)) = " + conditionalentropyprk );
            System.out.println("\nP(rl)*log(P(l)/P(rl)) = " + conditionalentropyprl );
            System.out.println("\nP(rm)*log(P(m)/P(rm)) = " + conditionalentropyprm );
            System.out.println("\nP(rn)*log(P(n)/P(rn)) = " + conditionalentropyprn );
            System.out.println("\nP(ro)*log(P(o)/P(ro)) = " + conditionalentropypro );
            System.out.println("\nP(rp)*log(P(p)/P(rp)) = " + conditionalentropyprp );
            System.out.println("\nP(rq)*log(P(q)/P(rq)) = " + conditionalentropyprq );
            System.out.println("\nP(rr)*log(P(r)/P(rr)) = " + conditionalentropyprr );
            System.out.println("\nP(rs)*log(P(s)/P(rs)) = " + conditionalentropyprs );
            System.out.println("\nP(rt)*log(P(t)/P(rt)) = " + conditionalentropyprt );
            System.out.println("\nP(ru)*log(P(u)/P(ru)) = " + conditionalentropypru );
            System.out.println("\nP(rv)*log(P(v)/P(rv)) = " + conditionalentropyprv );
            System.out.println("\nP(rw)*log(P(w)/P(rw)) = " + conditionalentropyprw );
            System.out.println("\nP(ry)*log(P(y)/P(ry)) = " + conditionalentropypry );
            System.out.println("\nP(rz)*log(P(z)/P(rz)) = " + conditionalentropyprz );
            System.out.println("\nP(r.)*log(P(.)/P(r.)) = " + conditionalentropyprdot );
            System.out.println("\nP(r,)*log(P(,)/P(r,)) = " + conditionalentropyprcomma );
            System.out.println("\nP(rvacuum)*log(P(vacuum)/P(rvacuum)) = " + conditionalentropyprvacuum );
            System.out.println("\nP(sa)*log(P(a)/P(sa)) = " + conditionalentropypsa );
            System.out.println("\nP(sb)*log(P(b)/P(sb)) = " + conditionalentropypsb );
            System.out.println("\nP(sc)*log(P(c)/P(sc)) = " + conditionalentropypsc );
            System.out.println("\nP(sd)*log(P(d)/P(sd)) = " + conditionalentropypsd );
            System.out.println("\nP(se)*log(P(e)/P(se)) = " + conditionalentropypse );
            System.out.println("\nP(sf)*log(P(f)/P(sf)) = " + conditionalentropypsf );
            System.out.println("\nP(sg)*log(P(g)/P(sg)) = " + conditionalentropypsg );
            System.out.println("\nP(sh)*log(P(h)/P(sh)) = " + conditionalentropypsh );
            System.out.println("\nP(si)*log(P(i)/P(si)) = " + conditionalentropypsi );
            System.out.println("\nP(sj)*log(P(j)/P(sj)) = " + conditionalentropypsj );
            System.out.println("\nP(sk)*log(P(k)/P(sk)) = " + conditionalentropypsk );
            System.out.println("\nP(sl)*log(P(l)/P(sl)) = " + conditionalentropypsl );
            System.out.println("\nP(sm)*log(P(m)/P(sm)) = " + conditionalentropypsm );
            System.out.println("\nP(sn)*log(P(n)/P(sn)) = " + conditionalentropypsn );
            System.out.println("\nP(so)*log(P(o)/P(so)) = " + conditionalentropypso );
            System.out.println("\nP(sp)*log(P(p)/P(sp)) = " + conditionalentropypsp );
            System.out.println("\nP(sq)*log(P(q)/P(sq)) = " + conditionalentropypsq );
            System.out.println("\nP(sr)*log(P(r)/P(sr)) = " + conditionalentropypsr );
            System.out.println("\nP(ss)*log(P(s)/P(ss)) = " + conditionalentropypss );
            System.out.println("\nP(st)*log(P(t)/P(st)) = " + conditionalentropypst );
            System.out.println("\nP(su)*log(P(u)/P(su)) = " + conditionalentropypsu );
            System.out.println("\nP(sv)*log(P(v)/P(sv)) = " + conditionalentropypsv );
            System.out.println("\nP(sw)*log(P(w)/P(sw)) = " + conditionalentropypsw );
            System.out.println("\nP(sy)*log(P(y)/P(sy)) = " + conditionalentropypsy );
            System.out.println("\nP(s.)*log(P(.)/P(s.)) = " + conditionalentropypsdot );
            System.out.println("\nP(s,)*log(P(,)/P(s,)) = " + conditionalentropypscomma );
            System.out.println("\nP(svacuum)*log(P(vacuum)/P(svacuum)) = " + conditionalentropypsvacuum );
            System.out.println("\nP(ta)*log(P(a)/P(ta)) = " + conditionalentropypta );
            System.out.println("\nP(tb)*log(P(b)/P(tb)) = " + conditionalentropyptb );
            System.out.println("\nP(tc)*log(P(c)/P(tc)) = " + conditionalentropyptc );
            System.out.println("\nP(te)*log(P(e)/P(te)) = " + conditionalentropypte );
            System.out.println("\nP(th)*log(P(h)/P(th)) = " + conditionalentropypth );
            System.out.println("\nP(ti)*log(P(i)/P(ti)) = " + conditionalentropypti );
            System.out.println("\nP(tj)*log(P(j)/P(tj)) = " + conditionalentropyptj );
            System.out.println("\nP(tk)*log(P(k)/P(tk)) = " + conditionalentropyptk );
            System.out.println("\nP(tl)*log(P(l)/P(tl)) = " + conditionalentropyptl );
            System.out.println("\nP(tm)*log(P(m)/P(tm)) = " + conditionalentropyptm );
            System.out.println("\nP(tn)*log(P(n)/P(tn)) = " + conditionalentropyptn );
            System.out.println("\nP(to)*log(P(o)/P(to)) = " + conditionalentropypto );
            System.out.println("\nP(tr)*log(P(r)/P(tr)) = " + conditionalentropyptr );
            System.out.println("\nP(ts)*log(P(s)/P(ts)) = " + conditionalentropypts );
            System.out.println("\nP(tt)*log(P(t)/P(tt)) = " + conditionalentropyptt );
            System.out.println("\nP(tu)*log(P(u)/P(tu)) = " + conditionalentropyptu );
            System.out.println("\nP(tv)*log(P(v)/P(tv)) = " + conditionalentropyptv );
            System.out.println("\nP(tw)*log(P(w)/P(tw)) = " + conditionalentropyptw );
            System.out.println("\nP(ty)*log(P(y)/P(ty)) = " + conditionalentropypty );
            System.out.println("\nP(tz)*log(P(z)/P(tz)) = " + conditionalentropyptz );
            System.out.println("\nP(t.)*log(P(.)/P(t.)) = " + conditionalentropyptdot );
            System.out.println("\nP(t,)*log(P(,)/P(t,)) = " + conditionalentropyptcomma );
            System.out.println("\nP(tvacuum)*log(P(vacuum)/P(tvacuum)) = " + conditionalentropyptvacuum );
            System.out.println("\nP(ua)*log(P(a)/P(ua)) = " + conditionalentropypua );
            System.out.println("\nP(ub)*log(P(b)/P(ub)) = " + conditionalentropypub );
            System.out.println("\nP(uc)*log(P(c)/P(uc)) = " + conditionalentropypuc );
            System.out.println("\nP(ud)*log(P(d)/P(ud)) = " + conditionalentropypud );
            System.out.println("\nP(ue)*log(P(e)/P(ue)) = " + conditionalentropypue );
            System.out.println("\nP(uf)*log(P(f)/P(uf)) = " + conditionalentropypuf );
            System.out.println("\nP(ug)*log(P(g)/P(ug)) = " + conditionalentropypug );
            System.out.println("\nP(uh)*log(P(h)/P(uh)) = " + conditionalentropypuh );
            System.out.println("\nP(ui)*log(P(i)/P(ui)) = " + conditionalentropypui );
            System.out.println("\nP(uj)*log(P(j)/P(uj)) = " + conditionalentropypuj );
            System.out.println("\nP(uk)*log(P(k)/P(uk)) = " + conditionalentropypuk );
            System.out.println("\nP(ul)*log(P(l)/P(ul)) = " + conditionalentropypul );
            System.out.println("\nP(um)*log(P(m)/P(um)) = " + conditionalentropypum );
            System.out.println("\nP(un)*log(P(n)/P(un)) = " + conditionalentropypun );
            System.out.println("\nP(uo)*log(P(o)/P(uo)) = " + conditionalentropypuo );
            System.out.println("\nP(up)*log(P(p)/P(up)) = " + conditionalentropypup );
            System.out.println("\nP(uq)*log(P(q)/P(uq)) = " + conditionalentropypuq );
            System.out.println("\nP(ur)*log(P(r)/P(ur)) = " + conditionalentropypur );
            System.out.println("\nP(us)*log(P(s)/P(us)) = " + conditionalentropypus );
            System.out.println("\nP(ut)*log(P(t)/P(ut)) = " + conditionalentropyput );
            System.out.println("\nP(uv)*log(P(v)/P(uv)) = " + conditionalentropypuv );
            System.out.println("\nP(ux)*log(P(x)/P(ux)) = " + conditionalentropypux );
            System.out.println("\nP(uy)*log(P(y)/P(uy)) = " + conditionalentropypuy );
            System.out.println("\nP(uz)*log(P(z)/P(uz)) = " + conditionalentropypuz );
            System.out.println("\nP(u.)*log(P(.)/P(u.)) = " + conditionalentropypudot );
            System.out.println("\nP(u,)*log(P(,)/P(u,)) = " + conditionalentropypucomma );
            System.out.println("\nP(uvacuum)*log(P(vacuum)/P(uvacuum)) = " + conditionalentropypuvacuum );
            System.out.println("\nP(va)*log(P(a)/P(va)) = " + conditionalentropypva );
            System.out.println("\nP(vd)*log(P(d)/P(vd)) = " + conditionalentropypvd );
            System.out.println("\nP(ve)*log(P(e)/P(ve)) = " + conditionalentropypve );
            System.out.println("\nP(vg)*log(P(g)/P(vg)) = " + conditionalentropypvg );
            System.out.println("\nP(vi)*log(P(i)/P(vi)) = " + conditionalentropypvi );
            System.out.println("\nP(vl)*log(P(l)/P(vl)) = " + conditionalentropypvl );
            System.out.println("\nP(vo)*log(P(o)/P(vo)) = " + conditionalentropypvo );
            System.out.println("\nP(vr)*log(P(r)/P(vr)) = " + conditionalentropypvr );
            System.out.println("\nP(vu)*log(P(u)/P(vu)) = " + conditionalentropypvu );
            System.out.println("\nP(v.)*log(P(.)/P(v.)) = " + conditionalentropypvdot );
            System.out.println("\nP(v,)*log(P(,)/P(v,)) = " + conditionalentropypvcomma );
            System.out.println("\nP(vvacuum)*log(P(vacuum)/P(vvacuum)) = " + conditionalentropypvvacuum );
            System.out.println("\nP(wa)*log(P(a)/P(wa)) = " + conditionalentropypwa );
            System.out.println("\nP(wb)*log(P(b)/P(wb)) = " + conditionalentropypwb );
            System.out.println("\nP(wd)*log(P(d)/P(wd)) = " + conditionalentropypwd );
            System.out.println("\nP(we)*log(P(e)/P(we)) = " + conditionalentropypwe );
            System.out.println("\nP(wh)*log(P(h)/P(wh)) = " + conditionalentropypwh );
            System.out.println("\nP(wi)*log(P(i)/P(wi)) = " + conditionalentropypwi );
            System.out.println("\nP(wl)*log(P(l)/P(wl)) = " + conditionalentropypwl );
            System.out.println("\nP(wn)*log(P(n)/P(wn)) = " + conditionalentropypwn );
            System.out.println("\nP(wo)*log(P(o)/P(wo)) = " + conditionalentropypwo );
            System.out.println("\nP(w.)*log(P(.)/P(w.)) = " + conditionalentropypwdot );
            System.out.println("\nP(w,)*log(P(,)/P(w,)) = " + conditionalentropypwcomma );
            System.out.println("\nP(wvacuum)*log(P(vacuum)/P(wvacuum)) = " + conditionalentropypwvacuum );
            System.out.println("\nP(xa)*log(P(a)/P(xa)) = " + conditionalentropypxa );
            System.out.println("\nP(xc)*log(P(c)/P(xc)) = " + conditionalentropypxc );
            System.out.println("\nP(xe)*log(P(e)/P(xe)) = " + conditionalentropypxe );
            System.out.println("\nP(xh)*log(P(h)/P(xh)) = " + conditionalentropypxh );
            System.out.println("\nP(xi)*log(P(i)/P(xi)) = " + conditionalentropypxi );
            System.out.println("\nP(xo)*log(P(o)/P(xo)) = " + conditionalentropypxo );
            System.out.println("\nP(xp)*log(P(p)/P(xp)) = " + conditionalentropypxp );
            System.out.println("\nP(xq)*log(P(q)/P(xq)) = " + conditionalentropypxq );
            System.out.println("\nP(xt)*log(P(t)/P(xt)) = " + conditionalentropypxt );
            System.out.println("\nP(xu)*log(P(u)/P(xu)) = " + conditionalentropypxu );
            System.out.println("\nP(xy)*log(P(y)/P(xy)) = " + conditionalentropypxy );
            System.out.println("\nP(x.)*log(P(.)/P(x.)) = " + conditionalentropypxdot );
            System.out.println("\nP(x,)*log(P(,)/P(x,)) = " + conditionalentropypxcomma );
            System.out.println("\nP(xvacuum)*log(P(vacuum)/P(xvacuum)) = " + conditionalentropypxvacuum );
            System.out.println("\nP(ya)*log(P(a)/P(ya)) = " + conditionalentropypya );
            System.out.println("\nP(yb)*log(P(b)/P(yb)) = " + conditionalentropypyb );
            System.out.println("\nP(yc)*log(P(c)/P(yc)) = " + conditionalentropypyc );
            System.out.println("\nP(yd)*log(P(d)/P(yd)) = " + conditionalentropypyd );
            System.out.println("\nP(ye)*log(P(e)/P(ye)) = " + conditionalentropypye );
            System.out.println("\nP(yg)*log(P(g)/P(yg)) = " + conditionalentropypyg );
            System.out.println("\nP(yj)*log(P(j)/P(yj)) = " + conditionalentropypyj );
            System.out.println("\nP(yl)*log(P(l)/P(yl)) = " + conditionalentropypyl );
            System.out.println("\nP(ym)*log(P(m)/P(ym)) = " + conditionalentropypym );
            System.out.println("\nP(yn)*log(P(n)/P(yn)) = " + conditionalentropypyn );
            System.out.println("\nP(yo)*log(P(o)/P(yo)) = " + conditionalentropypyo );
            System.out.println("\nP(yp)*log(P(p)/P(yp)) = " + conditionalentropypyp );
            System.out.println("\nP(yr)*log(P(r)/P(yr)) = " + conditionalentropypyr );
            System.out.println("\nP(ys)*log(P(s)/P(ys)) = " + conditionalentropypys );
            System.out.println("\nP(yt)*log(P(t)/P(yt)) = " + conditionalentropypyt );
            System.out.println("\nP(yu)*log(P(u)/P(yu)) = " + conditionalentropypyu );
            System.out.println("\nP(yv)*log(P(v)/P(yv)) = " + conditionalentropypyv );
            System.out.println("\nP(yx)*log(P(x)/P(yx)) = " + conditionalentropypyx );
            System.out.println("\nP(y.)*log(P(.)/P(y.)) = " + conditionalentropypydot );
            System.out.println("\nP(y,)*log(P(,)/P(y,)) = " + conditionalentropypycomma );
            System.out.println("\nP(yvacuum)*log(P(vacuum)/P(yvacuum)) = " + conditionalentropypyvacuum );
            System.out.println("\nP(za)*log(P(a)/P(za)) = " + conditionalentropypza );
            System.out.println("\nP(ze)*log(P(e)/P(ze)) = " + conditionalentropypze );
            System.out.println("\nP(zh)*log(P(h)/P(zh)) = " + conditionalentropypzh );
            System.out.println("\nP(zi)*log(P(i)/P(zi)) = " + conditionalentropypzi );
            System.out.println("\nP(zl)*log(P(l)/P(zl)) = " + conditionalentropypzl );
            System.out.println("\nP(zo)*log(P(o)/P(zo)) = " + conditionalentropypzo );
            System.out.println("\nP(zu)*log(P(u)/P(zu)) = " + conditionalentropypzu );
            System.out.println("\nP(zy)*log(P(y)/P(zy)) = " + conditionalentropypzy );
            System.out.println("\nP(zz)*log(P(z)/P(zz)) = " + conditionalentropypzz );
            System.out.println("\nP(z.)*log(P(.)/P(z.)) = " + conditionalentropypzdot );
            System.out.println("\nP(z,)*log(P(,)/P(z,)) = " + conditionalentropypzcomma );
            System.out.println("\nP(zvacuum)*log(P(vacuum)/P(zvacuum)) = " + conditionalentropypzvacuum );
            System.out.println("\nP(..)*log(P(.)/P(..)) = " + conditionalentropypdotdot );
            System.out.println("\nP(.,)*log(P(,)/P(.,)) = " + conditionalentropypdotcomma );
            System.out.println("\nP(.vacuum)*log(P(vacuum)/P(.vacuum)) = " + conditionalentropypdotvacuum );
            System.out.println("\nP(,vacuum)*log(P(vacuum)/P(,vacuum)) = " + conditionalentropypcommavacuum );
            System.out.println("\nP(vacuuma)*log(P(a)/P(vacuuma)) = " + conditionalentropypvacuuma );
            System.out.println("\nP(vacuumb)*log(P(b)/P(vacuumb)) = " + conditionalentropypvacuumb  );
            System.out.println("\nP(vacuumc)*log(P(c)/P(vacuumc)) = " + conditionalentropypvacuumc  );
            System.out.println("\nP(vacuumd)*log(P(d)/P(vacuumd)) = " + conditionalentropypvacuumd  );
            System.out.println("\nP(vacuume)*log(P(e)/P(vacuume)) = " + conditionalentropypvacuume  );
            System.out.println("\nP(vacuumf)*log(P(f)/P(vacuumf)) = " + conditionalentropypvacuumf  );
            System.out.println("\nP(vacuumg)*log(P(g)/P(vacuumg)) = " + conditionalentropypvacuumg  );
            System.out.println("\nP(vacuumh)*log(P(h)/P(vacuumh)) = " + conditionalentropypvacuumh  );
            System.out.println("\nP(vacuumi)*log(P(i)/P(vacuumi)) = " + conditionalentropypvacuumi  );
            System.out.println("\nP(vacuumj)*log(P(j)/P(vacuumj)) = " + conditionalentropypvacuumj  );
            System.out.println("\nP(vacuumk)*log(P(k)/P(vacuumk)) = " + conditionalentropypvacuumk  );
            System.out.println("\nP(vacuuml)*log(P(l)/P(vacuuml)) = " + conditionalentropypvacuuml  );
            System.out.println("\nP(vacuumm)*log(P(m)/P(vacuumm)) = " + conditionalentropypvacuumm  );
            System.out.println("\nP(vacuumn)*log(P(n)/P(vacuumn)) = " + conditionalentropypvacuumn  );
            System.out.println("\nP(vacuumo)*log(P(o)/P(vacuumo)) = " + conditionalentropypvacuumo  );
            System.out.println("\nP(vacuump)*log(P(p)/P(vacuump)) = " + conditionalentropypvacuump  );
            System.out.println("\nP(vacuumq)*log(P(q)/P(vacuumq)) = " + conditionalentropypvacuumq  );
            System.out.println("\nP(vacuumr)*log(P(r)/P(vacuumr)) = " + conditionalentropypvacuumr  );
            System.out.println("\nP(vacuums)*log(P(s)/P(vacuums)) = " + conditionalentropypvacuums  );
            System.out.println("\nP(vacuumt)*log(P(t)/P(vacuumt)) = " + conditionalentropypvacuumt  );
            System.out.println("\nP(vacuumu)*log(P(u)/P(vacuumu)) = " + conditionalentropypvacuumu  );
            System.out.println("\nP(vacuumv)*log(P(v)/P(vacuumv)) = " + conditionalentropypvacuumv  );
            System.out.println("\nP(vacuumw)*log(P(w)/P(vacuumw)) = " + conditionalentropypvacuumw  );
            System.out.println("\nP(vacuumx)*log(P(x)/P(vacuumx)) = " + conditionalentropypvacuumx  );
            System.out.println("\nP(vacuumy)*log(P(y)/P(vacuumy)) = " + conditionalentropypvacuumy  );
            System.out.println("\nP(vacuumz)*log(P(z)/P(vacuumz)) = " + conditionalentropypvacuumz  );
            System.out.println("\nP(vacuum.)*log(P(.)/P(vacuum.)) = " + conditionalentropypvacuumdot  );
            System.out.println("\nP(vacuum,)*log(P(,)/P(vacuum,)) = " + conditionalentropypvacuumcomma  );
            System.out.println("\nP(vacuumvacuum)*log(P(vacuum)/P(vacuumvacuum)) = " + conditionalentropypvacuumvacuum  );
            System.out.println("\nThe sum of the conditional H(s) is = " + sumconditionalentropy ); 
  
            }

            private static void readoffile2() 
    
            {
                
            if(dataofenglishfile.isEmpty())    
             
            {    
                
            try    
        
            {

            File file = new File("The-Snowman-by-Jo-Nesbo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+'–’‘:©«»—”“/?…!();&-]" , " ").replace("]" , " ").replace("[", " ").replaceAll("Ø" , "O").replaceAll("[ÌÍÎÏ]" , "I").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("Ç" , "C").replaceAll("ç" , "c").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[ìíîï]", "i").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u").replaceAll("œ" , "oe"); 
            
            readLine = readLine.toLowerCase();
          
            System.out.println(readLine);
            
            dataofenglishfile.add(readLine);
   
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");
        
            }
        
            }

            private static void calculationofcharacters2()
                    
            {
             
            double countforcharactersa = 0.0;    
            double countforcharactersb = 0.0;  
            double countforcharactersc = 0.0;
            double countforcharactersd = 0.0;  
            double countforcharacterse = 0.0;  
            double countforcharactersf = 0.0;  
            double countforcharactersg = 0.0;  
            double countforcharactersh = 0.0;  
            double countforcharactersi = 0.0;  
            double countforcharactersj = 0.0;  
            double countforcharactersk = 0.0;  
            double countforcharactersl = 0.0;  
            double countforcharactersm = 0.0;  
            double countforcharactersn = 0.0;  
            double countforcharacterso = 0.0; 
            double countforcharactersp = 0.0;  
            double countforcharactersq = 0.0;  
            double countforcharactersr = 0.0;  
            double countforcharacterss = 0.0;  
            double countforcharacterst = 0.0;  
            double countforcharactersu = 0.0;
            double countforcharactersv = 0.0;  
            double countforcharactersw = 0.0;  
            double countforcharactersx = 0.0;  
            double countforcharactersy = 0.0;  
            double countforcharactersz = 0.0;  
            double countforcharactersdot = 0.0;    
            double countforcharacterscomma = 0.0;  
            double countforcharactersvacuum = 0.0; 
            
            for(String data : dataofenglishfile)
            
            {
                
            if(data.contains("a"))
            
            {
                
            countforcharactersa = countforcharactersa+1.0;    
                
            }   
            
            if(data.contains("b"))
            
            {
                
            countforcharactersb = countforcharactersb+1.0;    
                
            }   
            
            if(data.contains("c"))
            
            {
                
            countforcharactersc = countforcharactersc+1.0;    
                
            }   
            
            if(data.contains("d"))
            
            {
                
            countforcharactersd = countforcharactersd+1.0;    
                
            }   
            
            if(data.contains("e"))
            
            {
                
            countforcharacterse = countforcharacterse+1.0;    
                
            }  
            
            if(data.contains("f"))
            
            {
                
            countforcharactersf = countforcharactersf+1.0;    
                
            }  
            
            if(data.contains("g"))
            
            {
                
            countforcharactersg = countforcharactersg+1.0;    
                
            }  
            
            if(data.contains("h"))
            
            {
                
            countforcharactersh = countforcharactersh+1.0;    
                
            }  
             
            if(data.contains("i"))
            
            {
                
            countforcharactersi = countforcharactersi+1.0;    
                
            }  
             
            if(data.contains("j"))
            
            {
                
            countforcharactersj = countforcharactersj+1.0;    
                
            }  
             
            if(data.contains("k"))
            
            {
                
            countforcharactersk = countforcharactersk+1.0;    
                
            }  
             
            if(data.contains("l"))
            
            {
                
            countforcharactersl = countforcharactersl+1.0;    
                
            }  
             
            if(data.contains("m"))
            
            {
                
            countforcharactersm = countforcharactersm+1.0;    
                
            }  
             
            if(data.contains("n"))
            
            {
                
            countforcharactersn = countforcharactersn+1.0;    
                
            }  
             
            if(data.contains("o"))
            
            {
                
            countforcharacterso = countforcharacterso+1.0;    
                
            }  
             
            if(data.contains("p"))
            
            {
                
            countforcharactersp = countforcharactersp+1.0;    
                
            }  
             
            if(data.contains("q"))
            
            {
                
            countforcharactersq = countforcharactersq+1.0;    
                
            }  
             
            if(data.contains("r"))
            
            {
                
            countforcharactersr = countforcharactersr+1.0;    
                
            }  
             
            if(data.contains("s"))
            
            {
                
            countforcharacterss = countforcharacterss+1.0;    
                
            }  
             
            if(data.contains("t"))
            
            {
                
            countforcharacterst = countforcharacterst+1.0;    
                
            }  
             
            if(data.contains("u"))
            
            {
                
            countforcharactersu = countforcharactersu+1.0;    
                
            }    
             
            if(data.contains("v"))
            
            {
                
            countforcharactersv = countforcharactersv+1.0;    
                
            }   
            
            if(data.contains("w"))
            
            {
                
            countforcharactersw = countforcharactersw+1.0;    
                
            }
            
            if(data.contains("x"))
            
            {
                
            countforcharactersx = countforcharactersx+1.0;    
                
            }
             
            if(data.contains("y"))
            
            {
                
            countforcharactersy = countforcharactersy+1.0;    
                
            }
             
            if(data.contains("z"))
            
            {
                
            countforcharactersz = countforcharactersz+1.0;    
                
            } 
           
            if(data.contains("."))
            
            {
                
            countforcharactersdot = countforcharactersdot+1.0;    
                
            }   
            
            if(data.contains(","))
            
            {
                
            countforcharacterscomma = countforcharacterscomma+1.0;    
                
            }  
             
            if(data.contains(" "))
            
            {
                
            countforcharactersvacuum = countforcharactersvacuum+1.0;    
                
            }   
                
            } 
            
            System.out.println("\nThe number of characters a is = " + countforcharactersa );
            System.out.println("\nThe number of characters b is = " + countforcharactersb );
            System.out.println("\nThe number of characters c is = " + countforcharactersc );
            System.out.println("\nThe number of characters d is = " + countforcharactersd );
            System.out.println("\nThe number of characters e is = " + countforcharacterse );
            System.out.println("\nThe number of characters f is = " + countforcharactersf );
            System.out.println("\nThe number of characters g is = " + countforcharactersg );
            System.out.println("\nThe number of characters h is = " + countforcharactersh );
            System.out.println("\nThe number of characters i is = " + countforcharactersi );
            System.out.println("\nThe number of characters j is = " + countforcharactersj );
            System.out.println("\nThe number of characters k is = " + countforcharactersk );
            System.out.println("\nThe number of characters l is = " + countforcharactersl );
            System.out.println("\nThe number of characters m is = " + countforcharactersm );
            System.out.println("\nThe number of characters n is = " + countforcharactersn );
            System.out.println("\nThe number of characters o is = " + countforcharacterso );
            System.out.println("\nThe number of characters p is = " + countforcharactersp );
            System.out.println("\nThe number of characters q is = " + countforcharactersq );
            System.out.println("\nThe number of characters r is = " + countforcharactersr );
            System.out.println("\nThe number of characters s is = " + countforcharacterss );
            System.out.println("\nThe number of characters t is = " + countforcharacterst );
            System.out.println("\nThe number of characters u is = " + countforcharactersu );
            System.out.println("\nThe number of characters v is = " + countforcharactersv );
            System.out.println("\nThe number of characters w is = " + countforcharactersw );
            System.out.println("\nThe number of characters x is = " + countforcharactersx );
            System.out.println("\nThe number of characters y is = " + countforcharactersy );
            System.out.println("\nThe number of characters z is = " + countforcharactersz );
            System.out.println("\nThe number of characters . is = " + countforcharactersdot );
            System.out.println("\nThe number of characters , is = " + countforcharacterscomma );
            System.out.println("\nThe number of characters vacuum is = " + countforcharactersvacuum );
            System.out.println("\nThe sum of all the characters is = " + (countforcharactersa+countforcharactersb+countforcharactersc+countforcharactersd+countforcharacterse+countforcharactersf+countforcharactersg+countforcharactersh
                                                                       + countforcharactersi+countforcharactersj+countforcharactersk+countforcharactersl+countforcharactersm+countforcharactersn+countforcharacterso+countforcharactersp
                                                                       + countforcharactersq+countforcharactersr+countforcharacterss+countforcharacterst+countforcharactersu+countforcharactersv+countforcharactersw+countforcharactersx
                                                                       + countforcharactersy+countforcharactersz+countforcharactersdot+countforcharacterscomma+countforcharactersvacuum));
                    
             
            }

            private static void estimatetheprobabilitydistribution2() 
    
            {
                
            double pa = 4689.0/99499.0;  
            double pb = 2964.0/99499.0;
            double pc = 3342.0/99499.0;
            double pd = 4364.0/99499.0;
            double pe = 4714.0/99499.0;
            double pf = 3024.0/99499.0;
            double pg = 3446.0/99499.0;
            double ph = 4624.0/99499.0;
            double pi = 4468.0/99499.0;
            double pj = 777.0/99499.0;  
            double pk = 3014.0/99499.0;
            double pl = 3865.0/99499.0;
            double pm = 3456.0/99499.0;
            double pn = 4481.0/99499.0;
            double po = 4603.0/99499.0;
            double pp = 2946.0/99499.0;
            double pq = 424.0/99499.0;  
            double pr = 4360.0/99499.0;
            double ps = 4521.0/99499.0;
            double pt = 4573.0/99499.0;
            double pu = 3768.0/99499.0;
            double pv = 2322.0/99499.0;
            double pw = 3733.0/99499.0;
            double px = 577.0/99499.0;  
            double py = 3786.0/99499.0;
            double pz = 218.0/99499.0;
            double pdot = 4527.0/99499.0;
            double pcomma = 2897.0/99499.0;
            double pvacuum = 5016.0/99499.0;
            double sumprobability = pa+pb+pc+pd+pe+pf+pg+ph+pi+pg+pk+pl+pm+pn+po+pp+pq+pr+ps+pt+pu+pv+pw+px+py+pz+pdot+pcomma+pvacuum;
                
            System.out.println("\nP(a) = 4689.0/99499.0 = " + pa );
            System.out.println("\nP(b) = 2964.0/99499.0 = " + pb );
            System.out.println("\nP(c) = 3342.0/99499.0 = " + pc );
            System.out.println("\nP(d) = 4364.0/99499.0 = " + pd );
            System.out.println("\nP(e) = 4714.0/99499.0 = " + pe );
            System.out.println("\nP(f) = 3024.0/99499.0 = " + pf );
            System.out.println("\nP(g) = 3446.0/99499.0 = " + pg );
            System.out.println("\nP(h) = 4624.0/99499.0 = " + ph );
            System.out.println("\nP(i) = 4468.0/99499.0 = " + pi );
            System.out.println("\nP(j) = 777.0/99499.0 = " + pj );
            System.out.println("\nP(k) = 3014.0/99499.0 = " + pk );
            System.out.println("\nP(l) = 3865.0/99499.0 = " + pl );
            System.out.println("\nP(m) = 3456.0/99499.0 = " + pm );
            System.out.println("\nP(n) = 4481.0/99499.0 = " + pn );
            System.out.println("\nP(o) = 4603.0/99499.0 = " + po );
            System.out.println("\nP(p) = 2946.0/99499.0 = " + pp );
            System.out.println("\nP(q) = 424.0/99499.0 = " + pq );
            System.out.println("\nP(r) = 4360.0/99499.0 = " + pr );
            System.out.println("\nP(s) = 4521.0/99499.0 = " + ps );
            System.out.println("\nP(t) = 4573.0/99499.0 = " + pt );
            System.out.println("\nP(u) = 3768.0/99499.0 = " + pu );
            System.out.println("\nP(v) = 2322.0/99499.0 = " + pv );
            System.out.println("\nP(w) = 3733.0/99499.0 = " + pw );
            System.out.println("\nP(x) = 577.0/99499.0 = " + px );
            System.out.println("\nP(y) = 3786.0/99499.0 = " + py );
            System.out.println("\nP(z) = 218.0/99499.0 = " + pz );
            System.out.println("\nP(.) = 4527.0/99499.0 = " + pdot );
            System.out.println("\nP(,) = 2897.0/99499.0 = " + pcomma );
            System.out.println("\nP(vacuum) = 5016.0/99499.0 = " + pvacuum );
            System.out.println("\nThe sum of the probability is = " + sumprobability );    
        
            }

            private static void calculatetheentropyofthedistribution2() 
                    
            {
                
            double pa = 4689.0/99499.0;  
            double pb = 2964.0/99499.0;
            double pc = 3342.0/99499.0;
            double pd = 4364.0/99499.0;
            double pe = 4714.0/99499.0;
            double pf = 3024.0/99499.0;
            double pg = 3446.0/99499.0;
            double ph = 4624.0/99499.0;
            double pi = 4468.0/99499.0;
            double pj = 777.0/99499.0;  
            double pk = 3014.0/99499.0;
            double pl = 3865.0/99499.0;
            double pm = 3456.0/99499.0;
            double pn = 4481.0/99499.0;
            double po = 4603.0/99499.0;
            double pp = 2946.0/99499.0;
            double pq = 424.0/99499.0;  
            double pr = 4360.0/99499.0;
            double ps = 4521.0/99499.0;
            double pt = 4573.0/99499.0;
            double pu = 3768.0/99499.0;
            double pv = 2322.0/99499.0;
            double pw = 3733.0/99499.0;
            double px = 577.0/99499.0;  
            double py = 3786.0/99499.0;
            double pz = 218.0/99499.0;
            double pdot = 4527.0/99499.0;
            double pcomma = 2897.0/99499.0;
            double pvacuum = 5016.0/99499.0;    
                
            double entropypa = pa*(Math.log(1/pa));
            double entropypb = pb*(Math.log(1/pb));
            double entropypc = pc*(Math.log(1/pc));
            double entropypd = pd*(Math.log(1/pd));
            double entropype = pe*(Math.log(1/pe));
            double entropypf = pf*(Math.log(1/pf));
            double entropypg = pg*(Math.log(1/pg));
            double entropyph = ph*(Math.log(1/ph));
            double entropypi = pi*(Math.log(1/pi));
            double entropypj = pj*(Math.log(1/pj));
            double entropypk = pk*(Math.log(1/pk));
            double entropypl = pl*(Math.log(1/pl));
            double entropypm = pm*(Math.log(1/pm));
            double entropypn = pn*(Math.log(1/pn));
            double entropypo = po*(Math.log(1/po));
            double entropypp = pp*(Math.log(1/pp));
            double entropypq = pq*(Math.log(1/pq));
            double entropypr = pr*(Math.log(1/pr));
            double entropyps = ps*(Math.log(1/ps));
            double entropypt = pt*(Math.log(1/pt));
            double entropypu = pu*(Math.log(1/pu));
            double entropypv = pv*(Math.log(1/pv));
            double entropypw = pw*(Math.log(1/pw));
            double entropypx = px*(Math.log(1/px));
            double entropypy = py*(Math.log(1/py));
            double entropypz = pz*(Math.log(1/pz));
            double entropypdot = pdot*(Math.log(1/pdot));
            double entropypcomma = pcomma*(Math.log(1/pcomma));
            double entropypvacuum = pvacuum*(Math.log(1/pvacuum));
            double sumentropy = entropypa+entropypb+entropypc+entropypd+entropype+entropypf+entropypg+entropyph
                                +entropypi+entropypj+entropypk+entropypl+entropypm+entropypn+entropypo+entropypp
                                +entropypq+entropypr+entropyps+entropypt+entropypu+entropypv+entropypw+entropypx
                                +entropypy+entropypz+entropypdot+entropypcomma+entropypvacuum;
            
            System.out.println("\nP(a)*log(1/P(a)) = " + entropypa );
            System.out.println("\nP(b)*log(1/P(b)) = " + entropypb );
            System.out.println("\nP(c)*log(1/P(c)) = " + entropypc );
            System.out.println("\nP(d)*log(1/P(d)) = " + entropypd ); 
            System.out.println("\nP(e)*log(1/P(e)) = " + entropype ); 
            System.out.println("\nP(f)*log(1/P(f)) = " + entropypf );
            System.out.println("\nP(g)*log(1/P(g)) = " + entropypg );
            System.out.println("\nP(h)*log(1/P(h)) = " + entropyph );
            System.out.println("\nP(i)*log(1/P(i)) = " + entropypi );
            System.out.println("\nP(j)*log(1/P(j)) = " + entropypj );
            System.out.println("\nP(k)*log(1/P(k)) = " + entropypk ); 
            System.out.println("\nP(l)*log(1/P(l)) = " + entropypl ); 
            System.out.println("\nP(m)*log(1/P(m)) = " + entropypm );
            System.out.println("\nP(n)*log(1/P(n)) = " + entropypn );
            System.out.println("\nP(o)*log(1/P(o)) = " + entropypo );
            System.out.println("\nP(p)*log(1/P(p)) = " + entropypp );
            System.out.println("\nP(q)*log(1/P(q)) = " + entropypq );
            System.out.println("\nP(r)*log(1/P(r)) = " + entropypr ); 
            System.out.println("\nP(s)*log(1/P(s)) = " + entropyps ); 
            System.out.println("\nP(t)*log(1/P(t)) = " + entropypt );
            System.out.println("\nP(u)*log(1/P(u)) = " + entropypu );
            System.out.println("\nP(v)*log(1/P(v)) = " + entropypv );
            System.out.println("\nP(w)*log(1/P(w)) = " + entropypw );
            System.out.println("\nP(x)*log(1/P(x)) = " + entropypx );
            System.out.println("\nP(y)*log(1/P(y)) = " + entropypy ); 
            System.out.println("\nP(z)*log(1/P(z)) = " + entropypz ); 
            System.out.println("\nP(dot)*log(1/P(dot)) = " + entropypdot );
            System.out.println("\nP(comma)*log(1/P(comma)) = " + entropypcomma );
            System.out.println("\nP(vacuum)*log(1/P(vacuum)) = " + entropypvacuum );
            System.out.println("\nThe sum of the H(s) is = " + sumentropy );    
      
            }

            private static void countthenumberofpairsthatresulted2() 
    
            {
                
            double countforcharactersa1 = 0.0;   
            double countforcharactersa2 = 0.0;  
            double countforcharactersa3 = 0.0;  
            double countforcharactersa4 = 0.0; 
            double countforcharactersa5 = 0.0; 
            double countforcharactersa6 = 0.0; 
            double countforcharactersa7 = 0.0; 
            double countforcharactersa8 = 0.0;   
            double countforcharactersa9 = 0.0;  
            double countforcharactersa10 = 0.0;  
            double countforcharactersa11 = 0.0; 
            double countforcharactersa12 = 0.0; 
            double countforcharactersa13 = 0.0; 
            double countforcharactersa14 = 0.0; 
            double countforcharactersa15 = 0.0;   
            double countforcharactersa16 = 0.0;  
            double countforcharactersa17 = 0.0;  
            double countforcharactersa18 = 0.0; 
            double countforcharactersa19 = 0.0; 
            double countforcharactersa20 = 0.0; 
            double countforcharactersa21 = 0.0; 
            double countforcharactersa22 = 0.0;   
            double countforcharactersa23 = 0.0;  
            double countforcharactersa24 = 0.0;  
            double countforcharactersa25 = 0.0; 
            double countforcharactersa26 = 0.0; 
            double countforcharactersa27 = 0.0; 
            double countforcharactersa28 = 0.0; 
            double countforcharactersa29 = 0.0; 
            double countforcharactersb1 = 0.0;   
            double countforcharactersb2 = 0.0;  
            double countforcharactersb3 = 0.0;  
            double countforcharactersb4 = 0.0; 
            double countforcharactersb5 = 0.0; 
            double countforcharactersb6 = 0.0; 
            double countforcharactersb7 = 0.0; 
            double countforcharactersb8 = 0.0;   
            double countforcharactersb9 = 0.0;  
            double countforcharactersb10 = 0.0;  
            double countforcharactersb11 = 0.0; 
            double countforcharactersb12 = 0.0; 
            double countforcharactersb13 = 0.0; 
            double countforcharactersb14 = 0.0; 
            double countforcharactersb15 = 0.0;   
            double countforcharactersb16 = 0.0;  
            double countforcharactersb17 = 0.0;  
            double countforcharactersb18 = 0.0; 
            double countforcharactersb19 = 0.0; 
            double countforcharactersb20 = 0.0; 
            double countforcharactersb21 = 0.0; 
            double countforcharactersb22 = 0.0;   
            double countforcharactersb23 = 0.0;  
            double countforcharactersb24 = 0.0;  
            double countforcharactersb25 = 0.0; 
            double countforcharactersb26 = 0.0; 
            double countforcharactersb27 = 0.0; 
            double countforcharactersb28 = 0.0; 
            double countforcharactersb29 = 0.0; 
            double countforcharactersc1 = 0.0;   
            double countforcharactersc2 = 0.0;  
            double countforcharactersc3 = 0.0;  
            double countforcharactersc4 = 0.0; 
            double countforcharactersc5 = 0.0; 
            double countforcharactersc6 = 0.0; 
            double countforcharactersc7 = 0.0; 
            double countforcharactersc8 = 0.0;   
            double countforcharactersc9 = 0.0;  
            double countforcharactersc10 = 0.0;  
            double countforcharactersc11 = 0.0; 
            double countforcharactersc12 = 0.0; 
            double countforcharactersc13 = 0.0; 
            double countforcharactersc14 = 0.0; 
            double countforcharactersc15 = 0.0;   
            double countforcharactersc16 = 0.0;  
            double countforcharactersc17 = 0.0;  
            double countforcharactersc18 = 0.0; 
            double countforcharactersc19 = 0.0; 
            double countforcharactersc20 = 0.0; 
            double countforcharactersc21 = 0.0; 
            double countforcharactersc22 = 0.0;   
            double countforcharactersc23 = 0.0;  
            double countforcharactersc24 = 0.0;  
            double countforcharactersc25 = 0.0; 
            double countforcharactersc26 = 0.0; 
            double countforcharactersc27 = 0.0; 
            double countforcharactersc28 = 0.0; 
            double countforcharactersc29 = 0.0; 
            double countforcharactersd1 = 0.0;   
            double countforcharactersd2 = 0.0;  
            double countforcharactersd3 = 0.0;  
            double countforcharactersd4 = 0.0; 
            double countforcharactersd5 = 0.0; 
            double countforcharactersd6 = 0.0; 
            double countforcharactersd7 = 0.0; 
            double countforcharactersd8 = 0.0;   
            double countforcharactersd9 = 0.0;  
            double countforcharactersd10 = 0.0;  
            double countforcharactersd11 = 0.0; 
            double countforcharactersd12 = 0.0; 
            double countforcharactersd13 = 0.0; 
            double countforcharactersd14 = 0.0; 
            double countforcharactersd15 = 0.0;   
            double countforcharactersd16 = 0.0;  
            double countforcharactersd17 = 0.0;  
            double countforcharactersd18 = 0.0; 
            double countforcharactersd19 = 0.0; 
            double countforcharactersd20 = 0.0; 
            double countforcharactersd21 = 0.0; 
            double countforcharactersd22 = 0.0;   
            double countforcharactersd23 = 0.0;  
            double countforcharactersd24 = 0.0;  
            double countforcharactersd25 = 0.0; 
            double countforcharactersd26 = 0.0; 
            double countforcharactersd27 = 0.0; 
            double countforcharactersd28 = 0.0; 
            double countforcharactersd29 = 0.0; 
            double countforcharacterse1 = 0.0;   
            double countforcharacterse2 = 0.0;  
            double countforcharacterse3 = 0.0;  
            double countforcharacterse4 = 0.0; 
            double countforcharacterse5 = 0.0; 
            double countforcharacterse6 = 0.0; 
            double countforcharacterse7 = 0.0; 
            double countforcharacterse8 = 0.0;   
            double countforcharacterse9 = 0.0;  
            double countforcharacterse10 = 0.0;  
            double countforcharacterse11 = 0.0; 
            double countforcharacterse12 = 0.0; 
            double countforcharacterse13 = 0.0; 
            double countforcharacterse14 = 0.0; 
            double countforcharacterse15 = 0.0;   
            double countforcharacterse16 = 0.0;  
            double countforcharacterse17 = 0.0;  
            double countforcharacterse18 = 0.0; 
            double countforcharacterse19 = 0.0; 
            double countforcharacterse20 = 0.0; 
            double countforcharacterse21 = 0.0; 
            double countforcharacterse22 = 0.0;   
            double countforcharacterse23 = 0.0;  
            double countforcharacterse24 = 0.0;  
            double countforcharacterse25 = 0.0; 
            double countforcharacterse26 = 0.0; 
            double countforcharacterse27 = 0.0; 
            double countforcharacterse28 = 0.0; 
            double countforcharacterse29 = 0.0; 
            double countforcharactersf1 = 0.0;   
            double countforcharactersf2 = 0.0;  
            double countforcharactersf3 = 0.0;  
            double countforcharactersf4 = 0.0; 
            double countforcharactersf5 = 0.0; 
            double countforcharactersf6 = 0.0; 
            double countforcharactersf7 = 0.0; 
            double countforcharactersf8 = 0.0;   
            double countforcharactersf9 = 0.0;  
            double countforcharactersf10 = 0.0;  
            double countforcharactersf11 = 0.0; 
            double countforcharactersf12 = 0.0; 
            double countforcharactersf13 = 0.0; 
            double countforcharactersf14 = 0.0; 
            double countforcharactersf15 = 0.0;   
            double countforcharactersf16 = 0.0;  
            double countforcharactersf17 = 0.0;  
            double countforcharactersf18 = 0.0; 
            double countforcharactersf19 = 0.0; 
            double countforcharactersf20 = 0.0; 
            double countforcharactersf21 = 0.0; 
            double countforcharactersf22 = 0.0;   
            double countforcharactersf23 = 0.0;  
            double countforcharactersf24 = 0.0;  
            double countforcharactersf25 = 0.0; 
            double countforcharactersf26 = 0.0; 
            double countforcharactersf27 = 0.0; 
            double countforcharactersf28 = 0.0; 
            double countforcharactersf29 = 0.0; 
            double countforcharactersg1 = 0.0;   
            double countforcharactersg2 = 0.0;  
            double countforcharactersg3 = 0.0;  
            double countforcharactersg4 = 0.0; 
            double countforcharactersg5 = 0.0; 
            double countforcharactersg6 = 0.0; 
            double countforcharactersg7 = 0.0; 
            double countforcharactersg8 = 0.0;   
            double countforcharactersg9 = 0.0;  
            double countforcharactersg10 = 0.0;  
            double countforcharactersg11 = 0.0; 
            double countforcharactersg12 = 0.0; 
            double countforcharactersg13 = 0.0; 
            double countforcharactersg14 = 0.0; 
            double countforcharactersg15 = 0.0;   
            double countforcharactersg16 = 0.0;  
            double countforcharactersg17 = 0.0;  
            double countforcharactersg18 = 0.0; 
            double countforcharactersg19 = 0.0; 
            double countforcharactersg20 = 0.0; 
            double countforcharactersg21 = 0.0; 
            double countforcharactersg22 = 0.0;   
            double countforcharactersg23 = 0.0;  
            double countforcharactersg24 = 0.0;  
            double countforcharactersg25 = 0.0; 
            double countforcharactersg26 = 0.0; 
            double countforcharactersg27 = 0.0; 
            double countforcharactersg28 = 0.0; 
            double countforcharactersg29 = 0.0; 
            double countforcharactersh1 = 0.0;   
            double countforcharactersh2 = 0.0;  
            double countforcharactersh3 = 0.0;  
            double countforcharactersh4 = 0.0; 
            double countforcharactersh5 = 0.0; 
            double countforcharactersh6 = 0.0; 
            double countforcharactersh7 = 0.0; 
            double countforcharactersh8 = 0.0;   
            double countforcharactersh9 = 0.0;  
            double countforcharactersh10 = 0.0;  
            double countforcharactersh11 = 0.0; 
            double countforcharactersh12 = 0.0; 
            double countforcharactersh13 = 0.0; 
            double countforcharactersh14 = 0.0; 
            double countforcharactersh15 = 0.0;   
            double countforcharactersh16 = 0.0;  
            double countforcharactersh17 = 0.0;  
            double countforcharactersh18 = 0.0; 
            double countforcharactersh19 = 0.0; 
            double countforcharactersh20 = 0.0; 
            double countforcharactersh21 = 0.0; 
            double countforcharactersh22 = 0.0;   
            double countforcharactersh23 = 0.0;  
            double countforcharactersh24 = 0.0;  
            double countforcharactersh25 = 0.0; 
            double countforcharactersh26 = 0.0; 
            double countforcharactersh27 = 0.0; 
            double countforcharactersh28 = 0.0; 
            double countforcharactersh29 = 0.0; 
            double countforcharactersi1 = 0.0;   
            double countforcharactersi2 = 0.0;  
            double countforcharactersi3 = 0.0;  
            double countforcharactersi4 = 0.0; 
            double countforcharactersi5 = 0.0; 
            double countforcharactersi6 = 0.0; 
            double countforcharactersi7 = 0.0; 
            double countforcharactersi8 = 0.0;   
            double countforcharactersi9 = 0.0;  
            double countforcharactersi10 = 0.0;  
            double countforcharactersi11 = 0.0; 
            double countforcharactersi12 = 0.0; 
            double countforcharactersi13 = 0.0; 
            double countforcharactersi14 = 0.0; 
            double countforcharactersi15 = 0.0;   
            double countforcharactersi16 = 0.0;  
            double countforcharactersi17 = 0.0;  
            double countforcharactersi18 = 0.0; 
            double countforcharactersi19 = 0.0; 
            double countforcharactersi20 = 0.0; 
            double countforcharactersi21 = 0.0; 
            double countforcharactersi22 = 0.0;   
            double countforcharactersi23 = 0.0;  
            double countforcharactersi24 = 0.0;  
            double countforcharactersi25 = 0.0; 
            double countforcharactersi26 = 0.0; 
            double countforcharactersi27 = 0.0; 
            double countforcharactersi28 = 0.0; 
            double countforcharactersi29 = 0.0; 
            double countforcharactersj1 = 0.0;   
            double countforcharactersj2 = 0.0;  
            double countforcharactersj3 = 0.0;  
            double countforcharactersj4 = 0.0; 
            double countforcharactersj5 = 0.0; 
            double countforcharactersj6 = 0.0; 
            double countforcharactersj7 = 0.0; 
            double countforcharactersj8 = 0.0;   
            double countforcharactersj9 = 0.0;  
            double countforcharactersj10 = 0.0;  
            double countforcharactersj11 = 0.0; 
            double countforcharactersj12 = 0.0; 
            double countforcharactersj13 = 0.0; 
            double countforcharactersj14 = 0.0; 
            double countforcharactersj15 = 0.0;   
            double countforcharactersj16 = 0.0;  
            double countforcharactersj17 = 0.0;  
            double countforcharactersj18 = 0.0; 
            double countforcharactersj19 = 0.0; 
            double countforcharactersj20 = 0.0; 
            double countforcharactersj21 = 0.0; 
            double countforcharactersj22 = 0.0;   
            double countforcharactersj23 = 0.0;  
            double countforcharactersj24 = 0.0;  
            double countforcharactersj25 = 0.0; 
            double countforcharactersj26 = 0.0; 
            double countforcharactersj27 = 0.0; 
            double countforcharactersj28 = 0.0; 
            double countforcharactersj29 = 0.0; 
            double countforcharactersk1 = 0.0;   
            double countforcharactersk2 = 0.0;  
            double countforcharactersk3 = 0.0;  
            double countforcharactersk4 = 0.0; 
            double countforcharactersk5 = 0.0; 
            double countforcharactersk6 = 0.0; 
            double countforcharactersk7 = 0.0; 
            double countforcharactersk8 = 0.0;   
            double countforcharactersk9 = 0.0;  
            double countforcharactersk10 = 0.0;  
            double countforcharactersk11 = 0.0; 
            double countforcharactersk12 = 0.0; 
            double countforcharactersk13 = 0.0; 
            double countforcharactersk14 = 0.0; 
            double countforcharactersk15 = 0.0;   
            double countforcharactersk16 = 0.0;  
            double countforcharactersk17 = 0.0;  
            double countforcharactersk18 = 0.0; 
            double countforcharactersk19 = 0.0; 
            double countforcharactersk20 = 0.0; 
            double countforcharactersk21 = 0.0; 
            double countforcharactersk22 = 0.0;   
            double countforcharactersk23 = 0.0;  
            double countforcharactersk24 = 0.0;  
            double countforcharactersk25 = 0.0; 
            double countforcharactersk26 = 0.0; 
            double countforcharactersk27 = 0.0; 
            double countforcharactersk28 = 0.0; 
            double countforcharactersk29 = 0.0; 
            double countforcharactersl1 = 0.0;   
            double countforcharactersl2 = 0.0;  
            double countforcharactersl3 = 0.0;  
            double countforcharactersl4 = 0.0; 
            double countforcharactersl5 = 0.0; 
            double countforcharactersl6 = 0.0; 
            double countforcharactersl7 = 0.0; 
            double countforcharactersl8 = 0.0;   
            double countforcharactersl9 = 0.0;  
            double countforcharactersl10 = 0.0;  
            double countforcharactersl11 = 0.0; 
            double countforcharactersl12 = 0.0; 
            double countforcharactersl13 = 0.0; 
            double countforcharactersl14 = 0.0; 
            double countforcharactersl15 = 0.0;   
            double countforcharactersl16 = 0.0;  
            double countforcharactersl17 = 0.0;  
            double countforcharactersl18 = 0.0; 
            double countforcharactersl19 = 0.0; 
            double countforcharactersl20 = 0.0; 
            double countforcharactersl21 = 0.0; 
            double countforcharactersl22 = 0.0;   
            double countforcharactersl23 = 0.0;  
            double countforcharactersl24 = 0.0;  
            double countforcharactersl25 = 0.0; 
            double countforcharactersl26 = 0.0; 
            double countforcharactersl27 = 0.0; 
            double countforcharactersl28 = 0.0; 
            double countforcharactersl29 = 0.0; 
            double countforcharactersm1 = 0.0;   
            double countforcharactersm2 = 0.0;  
            double countforcharactersm3 = 0.0;  
            double countforcharactersm4 = 0.0; 
            double countforcharactersm5 = 0.0; 
            double countforcharactersm6 = 0.0; 
            double countforcharactersm7 = 0.0; 
            double countforcharactersm8 = 0.0;   
            double countforcharactersm9 = 0.0;  
            double countforcharactersm10 = 0.0;  
            double countforcharactersm11 = 0.0; 
            double countforcharactersm12 = 0.0; 
            double countforcharactersm13 = 0.0; 
            double countforcharactersm14 = 0.0; 
            double countforcharactersm15 = 0.0;   
            double countforcharactersm16 = 0.0;  
            double countforcharactersm17 = 0.0;  
            double countforcharactersm18 = 0.0; 
            double countforcharactersm19 = 0.0; 
            double countforcharactersm20 = 0.0; 
            double countforcharactersm21 = 0.0; 
            double countforcharactersm22 = 0.0;   
            double countforcharactersm23 = 0.0;  
            double countforcharactersm24 = 0.0;  
            double countforcharactersm25 = 0.0; 
            double countforcharactersm26 = 0.0; 
            double countforcharactersm27 = 0.0; 
            double countforcharactersm28 = 0.0; 
            double countforcharactersm29 = 0.0; 
            double countforcharactersn1 = 0.0;   
            double countforcharactersn2 = 0.0;  
            double countforcharactersn3 = 0.0;  
            double countforcharactersn4 = 0.0; 
            double countforcharactersn5 = 0.0; 
            double countforcharactersn6 = 0.0; 
            double countforcharactersn7 = 0.0; 
            double countforcharactersn8 = 0.0;   
            double countforcharactersn9 = 0.0;  
            double countforcharactersn10 = 0.0;  
            double countforcharactersn11 = 0.0; 
            double countforcharactersn12 = 0.0; 
            double countforcharactersn13 = 0.0; 
            double countforcharactersn14 = 0.0; 
            double countforcharactersn15 = 0.0;   
            double countforcharactersn16 = 0.0;  
            double countforcharactersn17 = 0.0;  
            double countforcharactersn18 = 0.0; 
            double countforcharactersn19 = 0.0; 
            double countforcharactersn20 = 0.0; 
            double countforcharactersn21 = 0.0; 
            double countforcharactersn22 = 0.0;   
            double countforcharactersn23 = 0.0;  
            double countforcharactersn24 = 0.0;  
            double countforcharactersn25 = 0.0; 
            double countforcharactersn26 = 0.0; 
            double countforcharactersn27 = 0.0; 
            double countforcharactersn28 = 0.0; 
            double countforcharactersn29 = 0.0; 
            double countforcharacterso1 = 0.0;   
            double countforcharacterso2 = 0.0;  
            double countforcharacterso3 = 0.0;  
            double countforcharacterso4 = 0.0; 
            double countforcharacterso5 = 0.0; 
            double countforcharacterso6 = 0.0; 
            double countforcharacterso7 = 0.0; 
            double countforcharacterso8 = 0.0;   
            double countforcharacterso9 = 0.0;  
            double countforcharacterso10 = 0.0;  
            double countforcharacterso11 = 0.0; 
            double countforcharacterso12 = 0.0; 
            double countforcharacterso13 = 0.0; 
            double countforcharacterso14 = 0.0; 
            double countforcharacterso15 = 0.0;   
            double countforcharacterso16 = 0.0;  
            double countforcharacterso17 = 0.0;  
            double countforcharacterso18 = 0.0; 
            double countforcharacterso19 = 0.0; 
            double countforcharacterso20 = 0.0; 
            double countforcharacterso21 = 0.0; 
            double countforcharacterso22 = 0.0;   
            double countforcharacterso23 = 0.0;  
            double countforcharacterso24 = 0.0;  
            double countforcharacterso25 = 0.0; 
            double countforcharacterso26 = 0.0; 
            double countforcharacterso27 = 0.0; 
            double countforcharacterso28 = 0.0; 
            double countforcharacterso29 = 0.0; 
            double countforcharactersp1 = 0.0;   
            double countforcharactersp2 = 0.0;  
            double countforcharactersp3 = 0.0;  
            double countforcharactersp4 = 0.0; 
            double countforcharactersp5 = 0.0; 
            double countforcharactersp6 = 0.0; 
            double countforcharactersp7 = 0.0; 
            double countforcharactersp8 = 0.0;   
            double countforcharactersp9 = 0.0;  
            double countforcharactersp10 = 0.0;  
            double countforcharactersp11 = 0.0; 
            double countforcharactersp12 = 0.0; 
            double countforcharactersp13 = 0.0; 
            double countforcharactersp14 = 0.0; 
            double countforcharactersp15 = 0.0;   
            double countforcharactersp16 = 0.0;  
            double countforcharactersp17 = 0.0;  
            double countforcharactersp18 = 0.0; 
            double countforcharactersp19 = 0.0; 
            double countforcharactersp20 = 0.0; 
            double countforcharactersp21 = 0.0; 
            double countforcharactersp22 = 0.0;   
            double countforcharactersp23 = 0.0;  
            double countforcharactersp24 = 0.0;  
            double countforcharactersp25 = 0.0; 
            double countforcharactersp26 = 0.0; 
            double countforcharactersp27 = 0.0; 
            double countforcharactersp28 = 0.0; 
            double countforcharactersp29 = 0.0; 
            double countforcharactersq1 = 0.0;   
            double countforcharactersq2 = 0.0;  
            double countforcharactersq3 = 0.0;  
            double countforcharactersq4 = 0.0; 
            double countforcharactersq5 = 0.0; 
            double countforcharactersq6 = 0.0; 
            double countforcharactersq7 = 0.0; 
            double countforcharactersq8 = 0.0;   
            double countforcharactersq9 = 0.0;  
            double countforcharactersq10 = 0.0;  
            double countforcharactersq11 = 0.0; 
            double countforcharactersq12 = 0.0; 
            double countforcharactersq13 = 0.0; 
            double countforcharactersq14 = 0.0; 
            double countforcharactersq15 = 0.0;   
            double countforcharactersq16 = 0.0;  
            double countforcharactersq17 = 0.0;  
            double countforcharactersq18 = 0.0; 
            double countforcharactersq19 = 0.0; 
            double countforcharactersq20 = 0.0; 
            double countforcharactersq21 = 0.0; 
            double countforcharactersq22 = 0.0;   
            double countforcharactersq23 = 0.0;  
            double countforcharactersq24 = 0.0;  
            double countforcharactersq25 = 0.0; 
            double countforcharactersq26 = 0.0; 
            double countforcharactersq27 = 0.0; 
            double countforcharactersq28 = 0.0; 
            double countforcharactersq29 = 0.0; 
            double countforcharactersr1 = 0.0;   
            double countforcharactersr2 = 0.0;  
            double countforcharactersr3 = 0.0;  
            double countforcharactersr4 = 0.0; 
            double countforcharactersr5 = 0.0; 
            double countforcharactersr6 = 0.0; 
            double countforcharactersr7 = 0.0; 
            double countforcharactersr8 = 0.0;   
            double countforcharactersr9 = 0.0;  
            double countforcharactersr10 = 0.0;  
            double countforcharactersr11 = 0.0; 
            double countforcharactersr12 = 0.0; 
            double countforcharactersr13 = 0.0; 
            double countforcharactersr14 = 0.0; 
            double countforcharactersr15 = 0.0;   
            double countforcharactersr16 = 0.0;  
            double countforcharactersr17 = 0.0;  
            double countforcharactersr18 = 0.0; 
            double countforcharactersr19 = 0.0; 
            double countforcharactersr20 = 0.0; 
            double countforcharactersr21 = 0.0; 
            double countforcharactersr22 = 0.0;   
            double countforcharactersr23 = 0.0;  
            double countforcharactersr24 = 0.0;  
            double countforcharactersr25 = 0.0; 
            double countforcharactersr26 = 0.0; 
            double countforcharactersr27 = 0.0; 
            double countforcharactersr28 = 0.0; 
            double countforcharactersr29 = 0.0; 
            double countforcharacterss1 = 0.0;   
            double countforcharacterss2 = 0.0;  
            double countforcharacterss3 = 0.0;  
            double countforcharacterss4 = 0.0; 
            double countforcharacterss5 = 0.0; 
            double countforcharacterss6 = 0.0; 
            double countforcharacterss7 = 0.0; 
            double countforcharacterss8 = 0.0;   
            double countforcharacterss9 = 0.0;  
            double countforcharacterss10 = 0.0;  
            double countforcharacterss11 = 0.0; 
            double countforcharacterss12 = 0.0; 
            double countforcharacterss13 = 0.0; 
            double countforcharacterss14 = 0.0; 
            double countforcharacterss15 = 0.0;   
            double countforcharacterss16 = 0.0;  
            double countforcharacterss17 = 0.0;  
            double countforcharacterss18 = 0.0; 
            double countforcharacterss19 = 0.0; 
            double countforcharacterss20 = 0.0; 
            double countforcharacterss21 = 0.0; 
            double countforcharacterss22 = 0.0;   
            double countforcharacterss23 = 0.0;  
            double countforcharacterss24 = 0.0;  
            double countforcharacterss25 = 0.0; 
            double countforcharacterss26 = 0.0; 
            double countforcharacterss27 = 0.0; 
            double countforcharacterss28 = 0.0; 
            double countforcharacterss29 = 0.0; 
            double countforcharacterst1 = 0.0;   
            double countforcharacterst2 = 0.0;  
            double countforcharacterst3 = 0.0;  
            double countforcharacterst4 = 0.0; 
            double countforcharacterst5 = 0.0; 
            double countforcharacterst6 = 0.0; 
            double countforcharacterst7 = 0.0; 
            double countforcharacterst8 = 0.0;   
            double countforcharacterst9 = 0.0;  
            double countforcharacterst10 = 0.0;  
            double countforcharacterst11 = 0.0; 
            double countforcharacterst12 = 0.0; 
            double countforcharacterst13 = 0.0; 
            double countforcharacterst14 = 0.0; 
            double countforcharacterst15 = 0.0;   
            double countforcharacterst16 = 0.0;  
            double countforcharacterst17 = 0.0;  
            double countforcharacterst18 = 0.0; 
            double countforcharacterst19 = 0.0; 
            double countforcharacterst20 = 0.0; 
            double countforcharacterst21 = 0.0; 
            double countforcharacterst22 = 0.0;   
            double countforcharacterst23 = 0.0;  
            double countforcharacterst24 = 0.0;  
            double countforcharacterst25 = 0.0; 
            double countforcharacterst26 = 0.0; 
            double countforcharacterst27 = 0.0; 
            double countforcharacterst28 = 0.0; 
            double countforcharacterst29 = 0.0; 
            double countforcharactersu1 = 0.0;   
            double countforcharactersu2 = 0.0;  
            double countforcharactersu3 = 0.0;  
            double countforcharactersu4 = 0.0; 
            double countforcharactersu5 = 0.0; 
            double countforcharactersu6 = 0.0; 
            double countforcharactersu7 = 0.0; 
            double countforcharactersu8 = 0.0;   
            double countforcharactersu9 = 0.0;  
            double countforcharactersu10 = 0.0;  
            double countforcharactersu11 = 0.0; 
            double countforcharactersu12 = 0.0; 
            double countforcharactersu13 = 0.0; 
            double countforcharactersu14 = 0.0; 
            double countforcharactersu15 = 0.0;   
            double countforcharactersu16 = 0.0;  
            double countforcharactersu17 = 0.0;  
            double countforcharactersu18 = 0.0; 
            double countforcharactersu19 = 0.0; 
            double countforcharactersu20 = 0.0; 
            double countforcharactersu21 = 0.0; 
            double countforcharactersu22 = 0.0;   
            double countforcharactersu23 = 0.0;  
            double countforcharactersu24 = 0.0;  
            double countforcharactersu25 = 0.0; 
            double countforcharactersu26 = 0.0; 
            double countforcharactersu27 = 0.0; 
            double countforcharactersu28 = 0.0; 
            double countforcharactersu29 = 0.0; 
            double countforcharactersv1 = 0.0;   
            double countforcharactersv2 = 0.0;  
            double countforcharactersv3 = 0.0;  
            double countforcharactersv4 = 0.0; 
            double countforcharactersv5 = 0.0; 
            double countforcharactersv6 = 0.0; 
            double countforcharactersv7 = 0.0; 
            double countforcharactersv8 = 0.0;   
            double countforcharactersv9 = 0.0;  
            double countforcharactersv10 = 0.0;  
            double countforcharactersv11 = 0.0; 
            double countforcharactersv12 = 0.0; 
            double countforcharactersv13 = 0.0; 
            double countforcharactersv14 = 0.0; 
            double countforcharactersv15 = 0.0;   
            double countforcharactersv16 = 0.0;  
            double countforcharactersv17 = 0.0;  
            double countforcharactersv18 = 0.0; 
            double countforcharactersv19 = 0.0; 
            double countforcharactersv20 = 0.0; 
            double countforcharactersv21 = 0.0; 
            double countforcharactersv22 = 0.0;   
            double countforcharactersv23 = 0.0;  
            double countforcharactersv24 = 0.0;  
            double countforcharactersv25 = 0.0; 
            double countforcharactersv26 = 0.0; 
            double countforcharactersv27 = 0.0; 
            double countforcharactersv28 = 0.0; 
            double countforcharactersv29 = 0.0; 
            double countforcharactersw1 = 0.0;   
            double countforcharactersw2 = 0.0;  
            double countforcharactersw3 = 0.0;  
            double countforcharactersw4 = 0.0; 
            double countforcharactersw5 = 0.0; 
            double countforcharactersw6 = 0.0; 
            double countforcharactersw7 = 0.0; 
            double countforcharactersw8 = 0.0;   
            double countforcharactersw9 = 0.0;  
            double countforcharactersw10 = 0.0;  
            double countforcharactersw11 = 0.0; 
            double countforcharactersw12 = 0.0; 
            double countforcharactersw13 = 0.0; 
            double countforcharactersw14 = 0.0; 
            double countforcharactersw15 = 0.0;   
            double countforcharactersw16 = 0.0;  
            double countforcharactersw17 = 0.0;  
            double countforcharactersw18 = 0.0; 
            double countforcharactersw19 = 0.0; 
            double countforcharactersw20 = 0.0; 
            double countforcharactersw21 = 0.0; 
            double countforcharactersw22 = 0.0;   
            double countforcharactersw23 = 0.0;  
            double countforcharactersw24 = 0.0;  
            double countforcharactersw25 = 0.0; 
            double countforcharactersw26 = 0.0; 
            double countforcharactersw27 = 0.0; 
            double countforcharactersw28 = 0.0; 
            double countforcharactersw29 = 0.0; 
            double countforcharactersx1 = 0.0;   
            double countforcharactersx2 = 0.0;  
            double countforcharactersx3 = 0.0;  
            double countforcharactersx4 = 0.0; 
            double countforcharactersx5 = 0.0; 
            double countforcharactersx6 = 0.0; 
            double countforcharactersx7 = 0.0; 
            double countforcharactersx8 = 0.0;   
            double countforcharactersx9 = 0.0;  
            double countforcharactersx10 = 0.0;  
            double countforcharactersx11 = 0.0; 
            double countforcharactersx12 = 0.0; 
            double countforcharactersx13 = 0.0; 
            double countforcharactersx14 = 0.0; 
            double countforcharactersx15 = 0.0;   
            double countforcharactersx16 = 0.0;  
            double countforcharactersx17 = 0.0;  
            double countforcharactersx18 = 0.0; 
            double countforcharactersx19 = 0.0; 
            double countforcharactersx20 = 0.0; 
            double countforcharactersx21 = 0.0; 
            double countforcharactersx22 = 0.0;   
            double countforcharactersx23 = 0.0;  
            double countforcharactersx24 = 0.0;  
            double countforcharactersx25 = 0.0; 
            double countforcharactersx26 = 0.0; 
            double countforcharactersx27 = 0.0; 
            double countforcharactersx28 = 0.0; 
            double countforcharactersx29 = 0.0; 
            double countforcharactersy1 = 0.0;   
            double countforcharactersy2 = 0.0;  
            double countforcharactersy3 = 0.0;  
            double countforcharactersy4 = 0.0; 
            double countforcharactersy5 = 0.0; 
            double countforcharactersy6 = 0.0; 
            double countforcharactersy7 = 0.0; 
            double countforcharactersy8 = 0.0;   
            double countforcharactersy9 = 0.0;  
            double countforcharactersy10 = 0.0;  
            double countforcharactersy11 = 0.0; 
            double countforcharactersy12 = 0.0; 
            double countforcharactersy13 = 0.0; 
            double countforcharactersy14 = 0.0; 
            double countforcharactersy15 = 0.0;   
            double countforcharactersy16 = 0.0;  
            double countforcharactersy17 = 0.0;  
            double countforcharactersy18 = 0.0; 
            double countforcharactersy19 = 0.0; 
            double countforcharactersy20 = 0.0; 
            double countforcharactersy21 = 0.0; 
            double countforcharactersy22 = 0.0;   
            double countforcharactersy23 = 0.0;  
            double countforcharactersy24 = 0.0;  
            double countforcharactersy25 = 0.0; 
            double countforcharactersy26 = 0.0; 
            double countforcharactersy27 = 0.0; 
            double countforcharactersy28 = 0.0; 
            double countforcharactersy29 = 0.0; 
            double countforcharactersz1 = 0.0;   
            double countforcharactersz2 = 0.0;  
            double countforcharactersz3 = 0.0;  
            double countforcharactersz4 = 0.0; 
            double countforcharactersz5 = 0.0; 
            double countforcharactersz6 = 0.0; 
            double countforcharactersz7 = 0.0; 
            double countforcharactersz8 = 0.0;   
            double countforcharactersz9 = 0.0;  
            double countforcharactersz10 = 0.0;  
            double countforcharactersz11 = 0.0; 
            double countforcharactersz12 = 0.0; 
            double countforcharactersz13 = 0.0; 
            double countforcharactersz14 = 0.0; 
            double countforcharactersz15 = 0.0;   
            double countforcharactersz16 = 0.0;  
            double countforcharactersz17 = 0.0;  
            double countforcharactersz18 = 0.0; 
            double countforcharactersz19 = 0.0; 
            double countforcharactersz20 = 0.0; 
            double countforcharactersz21 = 0.0; 
            double countforcharactersz22 = 0.0;   
            double countforcharactersz23 = 0.0;  
            double countforcharactersz24 = 0.0;  
            double countforcharactersz25 = 0.0; 
            double countforcharactersz26 = 0.0; 
            double countforcharactersz27 = 0.0; 
            double countforcharactersz28 = 0.0; 
            double countforcharactersz29 = 0.0; 
            double countforcharactersdot1 = 0.0;   
            double countforcharactersdot2 = 0.0;  
            double countforcharactersdot3 = 0.0;  
            double countforcharactersdot4 = 0.0; 
            double countforcharactersdot5 = 0.0; 
            double countforcharactersdot6 = 0.0; 
            double countforcharactersdot7 = 0.0; 
            double countforcharactersdot8 = 0.0;   
            double countforcharactersdot9 = 0.0;  
            double countforcharactersdot10 = 0.0;  
            double countforcharactersdot11 = 0.0; 
            double countforcharactersdot12 = 0.0; 
            double countforcharactersdot13 = 0.0; 
            double countforcharactersdot14 = 0.0; 
            double countforcharactersdot15 = 0.0;   
            double countforcharactersdot16 = 0.0;  
            double countforcharactersdot17 = 0.0;  
            double countforcharactersdot18 = 0.0; 
            double countforcharactersdot19 = 0.0; 
            double countforcharactersdot20 = 0.0; 
            double countforcharactersdot21 = 0.0; 
            double countforcharactersdot22 = 0.0;   
            double countforcharactersdot23 = 0.0;  
            double countforcharactersdot24 = 0.0;  
            double countforcharactersdot25 = 0.0; 
            double countforcharactersdot26 = 0.0; 
            double countforcharactersdot27 = 0.0; 
            double countforcharactersdot28 = 0.0; 
            double countforcharactersdot29 = 0.0; 
            double countforcharacterscomma1 = 0.0;   
            double countforcharacterscomma2 = 0.0;  
            double countforcharacterscomma3 = 0.0;  
            double countforcharacterscomma4 = 0.0; 
            double countforcharacterscomma5 = 0.0; 
            double countforcharacterscomma6 = 0.0; 
            double countforcharacterscomma7 = 0.0; 
            double countforcharacterscomma8 = 0.0;   
            double countforcharacterscomma9 = 0.0;  
            double countforcharacterscomma10 = 0.0;  
            double countforcharacterscomma11 = 0.0; 
            double countforcharacterscomma12 = 0.0; 
            double countforcharacterscomma13 = 0.0; 
            double countforcharacterscomma14 = 0.0; 
            double countforcharacterscomma15 = 0.0;   
            double countforcharacterscomma16 = 0.0;  
            double countforcharacterscomma17 = 0.0;  
            double countforcharacterscomma18 = 0.0; 
            double countforcharacterscomma19 = 0.0; 
            double countforcharacterscomma20 = 0.0; 
            double countforcharacterscomma21 = 0.0; 
            double countforcharacterscomma22 = 0.0;   
            double countforcharacterscomma23 = 0.0;  
            double countforcharacterscomma24 = 0.0;  
            double countforcharacterscomma25 = 0.0; 
            double countforcharacterscomma26 = 0.0; 
            double countforcharacterscomma27 = 0.0; 
            double countforcharacterscomma28 = 0.0; 
            double countforcharacterscomma29 = 0.0; 
            double countforcharactersvacuum1 = 0.0;   
            double countforcharactersvacuum2 = 0.0;  
            double countforcharactersvacuum3 = 0.0;  
            double countforcharactersvacuum4 = 0.0; 
            double countforcharactersvacuum5 = 0.0; 
            double countforcharactersvacuum6 = 0.0; 
            double countforcharactersvacuum7 = 0.0; 
            double countforcharactersvacuum8 = 0.0;   
            double countforcharactersvacuum9 = 0.0;  
            double countforcharactersvacuum10 = 0.0;  
            double countforcharactersvacuum11 = 0.0; 
            double countforcharactersvacuum12 = 0.0; 
            double countforcharactersvacuum13 = 0.0; 
            double countforcharactersvacuum14 = 0.0; 
            double countforcharactersvacuum15 = 0.0;   
            double countforcharactersvacuum16 = 0.0;  
            double countforcharactersvacuum17 = 0.0;  
            double countforcharactersvacuum18 = 0.0; 
            double countforcharactersvacuum19 = 0.0; 
            double countforcharactersvacuum20 = 0.0; 
            double countforcharactersvacuum21 = 0.0; 
            double countforcharactersvacuum22 = 0.0;   
            double countforcharactersvacuum23 = 0.0;  
            double countforcharactersvacuum24 = 0.0;  
            double countforcharactersvacuum25 = 0.0; 
            double countforcharactersvacuum26 = 0.0; 
            double countforcharactersvacuum27 = 0.0; 
            double countforcharactersvacuum28 = 0.0; 
            double countforcharactersvacuum29 = 0.0; 
            
            for(String data : dataofenglishfile)
            
            {
                
            if(data.contains("aa"))
            
            {
                
            countforcharactersa1 = countforcharactersa1+1.0;    
                
            }  
            
            if(data.contains("ab"))
            
            {
                
            countforcharactersa2 = countforcharactersa2+1.0;    
                
            }  
            
            if(data.contains("ac"))
            
            {
                
            countforcharactersa3 = countforcharactersa3+1.0;    
                
            }  
            
            if(data.contains("ad"))
            
            {
                
            countforcharactersa4 = countforcharactersa4+1.0;    
                
            }  
            
            if(data.contains("ae"))
            
            {
                
            countforcharactersa5 = countforcharactersa5+1.0;    
                
            }  
            
            if(data.contains("af"))
            
            {
                
            countforcharactersa6 = countforcharactersa6+1.0;    
                
            }  
            
            if(data.contains("ag"))
            
            {
                
            countforcharactersa7 = countforcharactersa7+1.0;    
                
            }  
            
            if(data.contains("ah"))
            
            {
                
            countforcharactersa8 = countforcharactersa8+1.0;    
                
            }  
            
            if(data.contains("ai"))
            
            {
                
            countforcharactersa9 = countforcharactersa9+1.0;    
                
            }  
            
            if(data.contains("aj"))
            
            {
                
            countforcharactersa10 = countforcharactersa10+1.0;    
                
            }  
            
            if(data.contains("ak"))
            
            {
                
            countforcharactersa11 = countforcharactersa11+1.0;    
                
            }  
            
            if(data.contains("al"))
            
            {
                
            countforcharactersa12 = countforcharactersa12+1.0;    
                
            }  
            
            if(data.contains("am"))
            
            {
                
            countforcharactersa13 = countforcharactersa13+1.0;    
                
            }  
            
            if(data.contains("an"))
            
            {
                
            countforcharactersa14 = countforcharactersa14+1.0;    
                
            }  
             
            if(data.contains("ao"))
            
            {
                
            countforcharactersa15 = countforcharactersa15+1.0;    
                
            }  
            
            if(data.contains("ap"))
            
            {
                
            countforcharactersa16 = countforcharactersa16+1.0;    
                
            }  
            
            if(data.contains("aq"))
            
            {
                
            countforcharactersa17 = countforcharactersa17+1.0;    
                
            }  
            
            if(data.contains("ar"))
            
            {
                
            countforcharactersa18 = countforcharactersa18+1.0;    
                
            }  
            
            if(data.contains("as"))
            
            {
                
            countforcharactersa19 = countforcharactersa19+1.0;    
                
            }  
            
            if(data.contains("at"))
            
            {
                
            countforcharactersa20 = countforcharactersa20+1.0;    
                
            }  
            
            if(data.contains("au"))
            
            {
                
            countforcharactersa21 = countforcharactersa21+1.0;    
                
            }  
            
            if(data.contains("av"))
            
            {
                
            countforcharactersa22 = countforcharactersa22+1.0;    
                
            }  
            
            if(data.contains("aw"))
            
            {
                
            countforcharactersa23 = countforcharactersa23+1.0;    
                
            }  
            
            if(data.contains("ax"))
            
            {
                
            countforcharactersa24 = countforcharactersa24+1.0;    
                
            }  
            
            if(data.contains("ay"))
            
            {
                
            countforcharactersa25 = countforcharactersa25+1.0;    
                
            }  
            
            if(data.contains("az"))
            
            {
                
            countforcharactersa26 = countforcharactersa26+1.0;    
                
            }  
            
            if(data.contains("a."))
            
            {
                
            countforcharactersa27 = countforcharactersa27+1.0;    
                
            }  
            
            if(data.contains("a,"))
            
            {
                
            countforcharactersa28 = countforcharactersa28+1.0;    
                
            }  
            
            if(data.contains("a "))
            
            {
                
            countforcharactersa29 = countforcharactersa29+1.0;    
                
            }  
            
            if(data.contains("ba"))
            
            {
                
            countforcharactersb1 = countforcharactersb1+1.0;    
                
            }  
            
            if(data.contains("bb"))
            
            {
                
            countforcharactersb2 = countforcharactersb2+1.0;    
                
            }  
            
            if(data.contains("bc"))
            
            {
                
            countforcharactersb3 = countforcharactersb3+1.0;    
                
            }  
            
            if(data.contains("bd"))
            
            {
                
            countforcharactersb4 = countforcharactersb4+1.0;    
                
            }  
            
            if(data.contains("be"))
            
            {
                
            countforcharactersb5 = countforcharactersb5+1.0;    
                
            }  
            
            if(data.contains("bf"))
            
            {
                
            countforcharactersb6 = countforcharactersb6+1.0;    
                
            }  
            
            if(data.contains("bg"))
            
            {
                
            countforcharactersb7 = countforcharactersb7+1.0;    
                
            }  
            
            if(data.contains("bh"))
            
            {
                
            countforcharactersb8 = countforcharactersb8+1.0;    
                
            }  
            
            if(data.contains("bi"))
            
            {
                
            countforcharactersb9 = countforcharactersb9+1.0;    
                
            }  
            
            if(data.contains("bj"))
            
            {
                
            countforcharactersb10 = countforcharactersb10+1.0;    
                
            }  
            
            if(data.contains("bk"))
            
            {
                
            countforcharactersb11 = countforcharactersb11+1.0;    
                
            }  
            
            if(data.contains("bl"))
            
            {
                
            countforcharactersb12 = countforcharactersb12+1.0;    
                
            }  
            
            if(data.contains("bm"))
            
            {
                
            countforcharactersb13 = countforcharactersb13+1.0;    
                
            }  
            
            if(data.contains("bn"))
            
            {
                
            countforcharactersb14 = countforcharactersb14+1.0;    
                
            }  
             
            if(data.contains("bo"))
            
            {
                
            countforcharactersb15 = countforcharactersb15+1.0;    
                
            }  
            
            if(data.contains("bp"))
            
            {
                
            countforcharactersb16 = countforcharactersb16+1.0;    
                
            }  
            
            if(data.contains("bq"))
            
            {
                
            countforcharactersb17 = countforcharactersb17+1.0;    
                
            }  
            
            if(data.contains("br"))
            
            {
                
            countforcharactersb18 = countforcharactersb18+1.0;    
                
            }  
            
            if(data.contains("bs"))
            
            {
                
            countforcharactersb19 = countforcharactersb19+1.0;    
                
            }  
            
            if(data.contains("bt"))
            
            {
                
            countforcharactersb20 = countforcharactersb20+1.0;    
                
            }  
            
            if(data.contains("bu"))
            
            {
                
            countforcharactersb21 = countforcharactersb21+1.0;    
                
            }  
            
            if(data.contains("bv"))
            
            {
                
            countforcharactersb22 = countforcharactersb22+1.0;    
                
            }  
            
            if(data.contains("bw"))
            
            {
                
            countforcharactersb23 = countforcharactersb23+1.0;    
                
            }  
            
            if(data.contains("bx"))
            
            {
                
            countforcharactersb24 = countforcharactersb24+1.0;    
                
            }  
            
            if(data.contains("by"))
            
            {
                
            countforcharactersb25 = countforcharactersb25+1.0;    
                
            }  
            
            if(data.contains("bz"))
            
            {
                
            countforcharactersb26 = countforcharactersb26+1.0;    
                
            }  
            
            if(data.contains("b."))
            
            {
                
            countforcharactersb27 = countforcharactersb27+1.0;    
                
            }  
            
            if(data.contains("b,"))
            
            {
                
            countforcharactersb28 = countforcharactersb28+1.0;    
                
            }  
            
            if(data.contains("b "))
            
            {
                
            countforcharactersb29 = countforcharactersb29+1.0;    
                
            }  
            
            if(data.contains("ca"))
            
            {
                
            countforcharactersc1 = countforcharactersc1+1.0;    
                
            }  
            
            if(data.contains("cb"))
            
            {
                
            countforcharactersc2 = countforcharactersc2+1.0;    
                
            }  
            
            if(data.contains("cc"))
            
            {
                
            countforcharactersc3 = countforcharactersc3+1.0;    
                
            }  
            
            if(data.contains("cd"))
            
            {
                
            countforcharactersc4 = countforcharactersc4+1.0;    
                
            }  
            
            if(data.contains("ce"))
            
            {
                
            countforcharactersc5 = countforcharactersc5+1.0;    
                
            }  
            
            if(data.contains("cf"))
            
            {
                
            countforcharactersc6 = countforcharactersc6+1.0;    
                
            }  
            
            if(data.contains("cg"))
            
            {
                
            countforcharactersc7 = countforcharactersc7+1.0;    
                
            }  
            
            if(data.contains("ch"))
            
            {
                
            countforcharactersc8 = countforcharactersc8+1.0;    
                
            }  
            
            if(data.contains("ci"))
            
            {
                
            countforcharactersc9 = countforcharactersc9+1.0;    
                
            }  
            
            if(data.contains("cj"))
            
            {
                
            countforcharactersc10 = countforcharactersc10+1.0;    
                
            }  
            
            if(data.contains("ck"))
            
            {
                
            countforcharactersc11 = countforcharactersc11+1.0;    
                
            }  
            
            if(data.contains("cl"))
            
            {
                
            countforcharactersc12 = countforcharactersc12+1.0;    
                
            }  
            
            if(data.contains("cm"))
            
            {
                
            countforcharactersc13 = countforcharactersc13+1.0;    
                
            }  
            
            if(data.contains("cn"))
            
            {
                
            countforcharactersc14 = countforcharactersc14+1.0;    
                
            }  
             
            if(data.contains("co"))
            
            {
                
            countforcharactersc15 = countforcharactersc15+1.0;    
                
            }  
            
            if(data.contains("cp"))
            
            {
                
            countforcharactersc16 = countforcharactersc16+1.0;    
                
            }  
            
            if(data.contains("cq"))
            
            {
                
            countforcharactersc17 = countforcharactersc17+1.0;    
                
            }  
            
            if(data.contains("cr"))
            
            {
                
            countforcharactersc18 = countforcharactersc18+1.0;    
                
            }  
            
            if(data.contains("cs"))
            
            {
                
            countforcharactersc19 = countforcharactersc19+1.0;    
                
            }  
            
            if(data.contains("ct"))
            
            {
                
            countforcharactersc20 = countforcharactersc20+1.0;    
                
            }  
            
            if(data.contains("cu"))
            
            {
                
            countforcharactersc21 = countforcharactersc21+1.0;    
                
            }  
            
            if(data.contains("cv"))
            
            {
                
            countforcharactersc22 = countforcharactersc22+1.0;    
                
            }  
            
            if(data.contains("cw"))
            
            {
                
            countforcharactersc23 = countforcharactersc23+1.0;    
                
            }  
            
            if(data.contains("cx"))
            
            {
                
            countforcharactersc24 = countforcharactersc24+1.0;    
                
            }  
            
            if(data.contains("cy"))
            
            {
                
            countforcharactersc25 = countforcharactersc25+1.0;    
                
            }  
            
            if(data.contains("cz"))
            
            {
                
            countforcharactersc26 = countforcharactersc26+1.0;    
                
            }  
            
            if(data.contains("c."))
            
            {
                
            countforcharactersc27 = countforcharactersc27+1.0;    
                
            }  
            
            if(data.contains("c,"))
            
            {
                
            countforcharactersc28 = countforcharactersc28+1.0;    
                
            }  
            
            if(data.contains("c "))
            
            {
                
            countforcharactersc29 = countforcharactersc29+1.0;    
                
            } 
            
            if(data.contains("da"))
            
            {
                
            countforcharactersd1 = countforcharactersd1+1.0;    
                
            }  
            
            if(data.contains("db"))
            
            {
                
            countforcharactersd2 = countforcharactersd2+1.0;    
                
            }  
            
            if(data.contains("dc"))
            
            {
                
            countforcharactersd3 = countforcharactersd3+1.0;    
                
            }  
            
            if(data.contains("dd"))
            
            {
                
            countforcharactersd4 = countforcharactersd4+1.0;    
                
            }  
            
            if(data.contains("de"))
            
            {
                
            countforcharactersd5 = countforcharactersd5+1.0;    
                
            }  
            
            if(data.contains("df"))
            
            {
                
            countforcharactersd6 = countforcharactersd6+1.0;    
                
            }  
            
            if(data.contains("dg"))
            
            {
                
            countforcharactersd7 = countforcharactersd7+1.0;    
                
            }  
            
            if(data.contains("dh"))
            
            {
                
            countforcharactersd8 = countforcharactersd8+1.0;    
                
            }  
            
            if(data.contains("di"))
            
            {
                
            countforcharactersd9 = countforcharactersd9+1.0;    
                
            }  
            
            if(data.contains("dj"))
            
            {
                
            countforcharactersd10 = countforcharactersd10+1.0;    
                
            }  
            
            if(data.contains("dk"))
            
            {
                
            countforcharactersd11 = countforcharactersd11+1.0;    
                
            }  
            
            if(data.contains("dl"))
            
            {
                
            countforcharactersd12 = countforcharactersd12+1.0;    
                
            }  
            
            if(data.contains("dm"))
            
            {
                
            countforcharactersd13 = countforcharactersd13+1.0;    
                
            }  
            
            if(data.contains("dn"))
            
            {
                
            countforcharactersd14 = countforcharactersd14+1.0;    
                
            }  
             
            if(data.contains("do"))
            
            {
                
            countforcharactersd15 = countforcharactersd15+1.0;    
                
            }  
            
            if(data.contains("dp"))
            
            {
                
            countforcharactersd16 = countforcharactersd16+1.0;    
                
            }  
            
            if(data.contains("dq"))
            
            {
                
            countforcharactersd17 = countforcharactersd17+1.0;    
                
            }  
            
            if(data.contains("dr"))
            
            {
                
            countforcharactersd18 = countforcharactersd18+1.0;    
                
            }  
            
            if(data.contains("ds"))
            
            {
                
            countforcharactersd19 = countforcharactersd19+1.0;    
                
            }  
            
            if(data.contains("dt"))
            
            {
                
            countforcharactersd20 = countforcharactersd20+1.0;    
                
            }  
            
            if(data.contains("du"))
            
            {
                
            countforcharactersd21 = countforcharactersd21+1.0;    
                
            }  
            
            if(data.contains("dv"))
            
            {
                
            countforcharactersd22 = countforcharactersd22+1.0;    
                
            }  
            
            if(data.contains("dw"))
            
            {
                
            countforcharactersd23 = countforcharactersd23+1.0;    
                
            }  
            
            if(data.contains("dx"))
            
            {
                
            countforcharactersd24 = countforcharactersd24+1.0;    
                
            }  
            
            if(data.contains("dy"))
            
            {
                
            countforcharactersd25 = countforcharactersd25+1.0;    
                
            }  
            
            if(data.contains("dz"))
            
            {
                
            countforcharactersd26 = countforcharactersd26+1.0;    
                
            }  
            
            if(data.contains("d."))
            
            {
                
            countforcharactersd27 = countforcharactersd27+1.0;    
                
            }  
            
            if(data.contains("d,"))
            
            {
                
            countforcharactersd28 = countforcharactersd28+1.0;    
                
            }  
            
            if(data.contains("d "))
            
            {
                
            countforcharactersd29 = countforcharactersd29+1.0;    
                
            }  
            
            if(data.contains("ea"))
            
            {
                
            countforcharacterse1 = countforcharacterse1+1.0;    
                
            }  
            
            if(data.contains("eb"))
            
            {
                
            countforcharacterse2 = countforcharacterse2+1.0;    
                
            }  
            
            if(data.contains("ec"))
            
            {
                
            countforcharacterse3 = countforcharacterse3+1.0;    
                
            }  
            
            if(data.contains("ed"))
            
            {
                
            countforcharacterse4 = countforcharacterse4+1.0;    
                
            }  
            
            if(data.contains("ee"))
            
            {
                
            countforcharacterse5 = countforcharacterse5+1.0;    
                
            }  
            
            if(data.contains("ef"))
            
            {
                
            countforcharacterse6 = countforcharacterse6+1.0;    
                
            }  
            
            if(data.contains("eg"))
            
            {
                
            countforcharacterse7 = countforcharacterse7+1.0;    
                
            }  
            
            if(data.contains("eh"))
            
            {
                
            countforcharacterse8 = countforcharacterse8+1.0;    
                
            }  
            
            if(data.contains("ei"))
            
            {
                
            countforcharacterse9 = countforcharacterse9+1.0;    
                
            }  
            
            if(data.contains("ej"))
            
            {
                
            countforcharacterse10 = countforcharacterse10+1.0;    
                
            }  
            
            if(data.contains("ek"))
            
            {
                
            countforcharacterse11 = countforcharacterse11+1.0;    
                
            }  
            
            if(data.contains("el"))
            
            {
                
            countforcharacterse12 = countforcharacterse12+1.0;    
                
            }  
            
            if(data.contains("em"))
            
            {
                
            countforcharacterse13 = countforcharacterse13+1.0;    
                
            }  
            
            if(data.contains("en"))
            
            {
                
            countforcharacterse14 = countforcharacterse14+1.0;    
                
            }  
             
            if(data.contains("eo"))
            
            {
                
            countforcharacterse15 = countforcharacterse15+1.0;    
                
            }  
            
            if(data.contains("ep"))
            
            {
                
            countforcharacterse16 = countforcharacterse16+1.0;    
                
            }  
            
            if(data.contains("eq"))
            
            {
                
            countforcharacterse17 = countforcharacterse17+1.0;    
                
            }  
            
            if(data.contains("er"))
            
            {
                
            countforcharacterse18 = countforcharacterse18+1.0;    
                
            }  
            
            if(data.contains("es"))
            
            {
                
            countforcharacterse19 = countforcharacterse19+1.0;    
                
            }  
            
            if(data.contains("et"))
            
            {
                
            countforcharacterse20 = countforcharacterse20+1.0;    
                
            }  
            
            if(data.contains("eu"))
            
            {
                
            countforcharacterse21 = countforcharacterse21+1.0;    
                
            }  
            
            if(data.contains("ev"))
            
            {
                
            countforcharacterse22 = countforcharacterse22+1.0;    
                
            }  
            
            if(data.contains("ew"))
            
            {
                
            countforcharacterse23 = countforcharacterse23+1.0;    
                
            }  
            
            if(data.contains("ex"))
            
            {
                
            countforcharacterse24 = countforcharacterse24+1.0;    
                
            }  
            
            if(data.contains("ey"))
            
            {
                
            countforcharacterse25 = countforcharacterse25+1.0;    
                
            }  
            
            if(data.contains("ez"))
            
            {
                
            countforcharacterse26 = countforcharacterse26+1.0;    
                
            }  
            
            if(data.contains("e."))
            
            {
                
            countforcharacterse27 = countforcharacterse27+1.0;    
                
            }  
            
            if(data.contains("e,"))
            
            {
                
            countforcharacterse28 = countforcharacterse28+1.0;    
                
            }  
            
            if(data.contains("e "))
            
            {
                
            countforcharacterse29 = countforcharacterse29+1.0;    
                
            }  
            
            if(data.contains("fa"))
            
            {
                
            countforcharactersf1 = countforcharactersf1+1.0;    
                
            }  
            
            if(data.contains("fb"))
            
            {
                
            countforcharactersf2 = countforcharactersf2+1.0;    
                
            }  
            
            if(data.contains("fc"))
            
            {
                
            countforcharactersf3 = countforcharactersf3+1.0;    
                
            }  
            
            if(data.contains("fd"))
            
            {
                
            countforcharactersf4 = countforcharactersf4+1.0;    
                
            }  
            
            if(data.contains("fe"))
            
            {
                
            countforcharactersf5 = countforcharactersf5+1.0;    
                
            }  
            
            if(data.contains("ff"))
            
            {
                
            countforcharactersf6 = countforcharactersf6+1.0;    
                
            }  
            
            if(data.contains("fg"))
            
            {
                
            countforcharactersf7 = countforcharactersf7+1.0;    
                
            }  
            
            if(data.contains("fh"))
            
            {
                
            countforcharactersf8 = countforcharactersf8+1.0;    
                
            }  
            
            if(data.contains("fi"))
            
            {
                
            countforcharactersf9 = countforcharactersf9+1.0;    
                
            }  
            
            if(data.contains("fj"))
            
            {
                
            countforcharactersf10 = countforcharactersf10+1.0;    
                
            }  
            
            if(data.contains("fk"))
            
            {
                
            countforcharactersf11 = countforcharactersf11+1.0;    
                
            }  
            
            if(data.contains("fl"))
            
            {
                
            countforcharactersf12 = countforcharactersf12+1.0;    
                
            }  
            
            if(data.contains("fm"))
            
            {
                
            countforcharactersf13 = countforcharactersf13+1.0;    
                
            }  
            
            if(data.contains("fn"))
            
            {
                
            countforcharactersf14 = countforcharactersf14+1.0;    
                
            }  
             
            if(data.contains("fo"))
            
            {
                
            countforcharactersf15 = countforcharactersf15+1.0;    
                
            }  
            
            if(data.contains("fp"))
            
            {
                
            countforcharactersf16 = countforcharactersf16+1.0;    
                
            }  
            
            if(data.contains("fq"))
            
            {
                
            countforcharactersf17 = countforcharactersf17+1.0;    
                
            }  
            
            if(data.contains("fr"))
            
            {
                
            countforcharactersf18 = countforcharactersf18+1.0;    
                
            }  
            
            if(data.contains("fs"))
            
            {
                
            countforcharactersf19 = countforcharactersf19+1.0;    
                
            }  
            
            if(data.contains("ft"))
            
            {
                
            countforcharactersf20 = countforcharactersf20+1.0;    
                
            }  
            
            if(data.contains("fu"))
            
            {
                
            countforcharactersf21 = countforcharactersf21+1.0;    
                
            }  
            
            if(data.contains("fv"))
            
            {
                
            countforcharactersf22 = countforcharactersf22+1.0;    
                
            }  
            
            if(data.contains("fw"))
            
            {
                
            countforcharactersf23 = countforcharactersf23+1.0;    
                
            }  
            
            if(data.contains("fx"))
            
            {
                
            countforcharactersf24 = countforcharactersf24+1.0;    
                
            }  
            
            if(data.contains("fy"))
            
            {
                
            countforcharactersf25 = countforcharactersf25+1.0;    
                
            }  
            
            if(data.contains("fz"))
            
            {
                
            countforcharactersf26 = countforcharactersf26+1.0;    
                
            }  
            
            if(data.contains("f."))
            
            {
                
            countforcharactersf27 = countforcharactersf27+1.0;    
                
            }  
            
            if(data.contains("f,"))
            
            {
                
            countforcharactersf28 = countforcharactersf28+1.0;    
                
            }  
            
            if(data.contains("f "))
            
            {
                
            countforcharactersf29 = countforcharactersf29+1.0;    
                
            } 
            
            if(data.contains("ga"))
            
            {
                
            countforcharactersg1 = countforcharactersg1+1.0;    
                
            }  
            
            if(data.contains("gb"))
            
            {
                
            countforcharactersg2 = countforcharactersg2+1.0;    
                
            }  
            
            if(data.contains("gc"))
            
            {
                
            countforcharactersg3 = countforcharactersg3+1.0;    
                
            }  
            
            if(data.contains("gd"))
            
            {
                
            countforcharactersg4 = countforcharactersg4+1.0;    
                
            }  
            
            if(data.contains("ge"))
            
            {
                
            countforcharactersg5 = countforcharactersg5+1.0;    
                
            }  
            
            if(data.contains("gf"))
            
            {
                
            countforcharactersg6 = countforcharactersg6+1.0;    
                
            }  
            
            if(data.contains("gg"))
            
            {
                
            countforcharactersg7 = countforcharactersg7+1.0;    
                
            }  
            
            if(data.contains("gh"))
            
            {
                
            countforcharactersg8 = countforcharactersg8+1.0;    
                
            }  
            
            if(data.contains("gi"))
            
            {
                
            countforcharactersg9 = countforcharactersg9+1.0;    
                
            }  
            
            if(data.contains("gj"))
            
            {
                
            countforcharactersg10 = countforcharactersg10+1.0;    
                
            }  
            
            if(data.contains("gk"))
            
            {
                
            countforcharactersg11 = countforcharactersg11+1.0;    
                
            }  
            
            if(data.contains("gl"))
            
            {
                
            countforcharactersg12 = countforcharactersg12+1.0;    
                
            }  
            
            if(data.contains("gm"))
            
            {
                
            countforcharactersg13 = countforcharactersg13+1.0;    
                
            }  
            
            if(data.contains("gn"))
            
            {
                
            countforcharactersg14 = countforcharactersg14+1.0;    
                
            }  
             
            if(data.contains("go"))
            
            {
                
            countforcharactersg15 = countforcharactersg15+1.0;    
                
            }  
            
            if(data.contains("gp"))
            
            {
                
            countforcharactersg16 = countforcharactersg16+1.0;    
                
            }  
            
            if(data.contains("gq"))
            
            {
                
            countforcharactersg17 = countforcharactersg17+1.0;    
                
            }  
            
            if(data.contains("gr"))
            
            {
                
            countforcharactersg18 = countforcharactersg18+1.0;    
                
            }  
            
            if(data.contains("gs"))
            
            {
                
            countforcharactersg19 = countforcharactersg19+1.0;    
                
            }  
            
            if(data.contains("gt"))
            
            {
                
            countforcharactersg20 = countforcharactersg20+1.0;    
                
            }  
            
            if(data.contains("gu"))
            
            {
                
            countforcharactersg21 = countforcharactersg21+1.0;    
                
            }  
            
            if(data.contains("gv"))
            
            {
                
            countforcharactersg22 = countforcharactersg22+1.0;    
                
            }  
            
            if(data.contains("gw"))
            
            {
                
            countforcharactersg23 = countforcharactersg23+1.0;    
                
            }  
            
            if(data.contains("gx"))
            
            {
                
            countforcharactersg24 = countforcharactersg24+1.0;    
                
            }  
            
            if(data.contains("gy"))
            
            {
                
            countforcharactersg25 = countforcharactersg25+1.0;    
                
            }  
            
            if(data.contains("gz"))
            
            {
                
            countforcharactersg26 = countforcharactersg26+1.0;    
                
            }  
            
            if(data.contains("g."))
            
            {
                
            countforcharactersg27 = countforcharactersg27+1.0;    
                
            }  
            
            if(data.contains("g,"))
            
            {
                
            countforcharactersg28 = countforcharactersg28+1.0;    
                
            }  
            
            if(data.contains("g "))
            
            {
                
            countforcharactersg29 = countforcharactersg29+1.0;    
                
            }  
            
            if(data.contains("ha"))
            
            {
                
            countforcharactersh1 = countforcharactersh1+1.0;    
                
            }  
            
            if(data.contains("hb"))
            
            {
                
            countforcharactersh2 = countforcharactersh2+1.0;    
                
            }  
            
            if(data.contains("hc"))
            
            {
                
            countforcharactersh3 = countforcharactersh3+1.0;    
                
            }  
            
            if(data.contains("hd"))
            
            {
                
            countforcharactersh4 = countforcharactersh4+1.0;    
                
            }  
            
            if(data.contains("he"))
            
            {
                
            countforcharactersh5 = countforcharactersh5+1.0;    
                
            }  
            
            if(data.contains("hf"))
            
            {
                
            countforcharactersh6 = countforcharactersh6+1.0;    
                
            }  
            
            if(data.contains("hg"))
            
            {
                
            countforcharactersh7 = countforcharactersh7+1.0;    
                
            }  
            
            if(data.contains("hh"))
            
            {
                
            countforcharactersh8 = countforcharactersh8+1.0;    
                
            }  
            
            if(data.contains("hi"))
            
            {
                
            countforcharactersh9 = countforcharactersh9+1.0;    
                
            }  
            
            if(data.contains("hj"))
            
            {
                
            countforcharactersh10 = countforcharactersh10+1.0;    
                
            }  
            
            if(data.contains("hk"))
            
            {
                
            countforcharactersh11 = countforcharactersh11+1.0;    
                
            }  
            
            if(data.contains("hl"))
            
            {
                
            countforcharactersh12 = countforcharactersh12+1.0;    
                
            }  
            
            if(data.contains("hm"))
            
            {
                
            countforcharactersh13 = countforcharactersh13+1.0;    
                
            }  
            
            if(data.contains("hn"))
            
            {
                
            countforcharactersh14 = countforcharactersh14+1.0;    
                
            }  
             
            if(data.contains("ho"))
            
            {
                
            countforcharactersh15 = countforcharactersh15+1.0;    
                
            }  
            
            if(data.contains("hp"))
            
            {
                
            countforcharactersh16 = countforcharactersh16+1.0;    
                
            }  
            
            if(data.contains("hq"))
            
            {
                
            countforcharactersh17 = countforcharactersh17+1.0;    
                
            }  
            
            if(data.contains("hr"))
            
            {
                
            countforcharactersh18 = countforcharactersh18+1.0;    
                
            }  
            
            if(data.contains("hs"))
            
            {
                
            countforcharactersh19 = countforcharactersh19+1.0;    
                
            }  
            
            if(data.contains("ht"))
            
            {
                
            countforcharactersh20 = countforcharactersh20+1.0;    
                
            }  
            
            if(data.contains("hu"))
            
            {
                
            countforcharactersh21 = countforcharactersh21+1.0;    
                
            }  
            
            if(data.contains("hv"))
            
            {
                
            countforcharactersh22 = countforcharactersh22+1.0;    
                
            }  
            
            if(data.contains("hw"))
            
            {
                
            countforcharactersh23 = countforcharactersh23+1.0;    
                
            }  
            
            if(data.contains("hx"))
            
            {
                
            countforcharactersh24 = countforcharactersh24+1.0;    
                
            }  
            
            if(data.contains("hy"))
            
            {
                
            countforcharactersh25 = countforcharactersh25+1.0;    
                
            }  
            
            if(data.contains("hz"))
            
            {
                
            countforcharactersh26 = countforcharactersh26+1.0;    
                
            }  
            
            if(data.contains("h."))
            
            {
                
            countforcharactersh27 = countforcharactersh27+1.0;    
                
            }  
            
            if(data.contains("h,"))
            
            {
                
            countforcharactersh28 = countforcharactersh28+1.0;    
                
            }  
            
            if(data.contains("h "))
            
            {
                
            countforcharactersh29 = countforcharactersh29+1.0;    
                
            }  
            
            if(data.contains("ia"))
            
            {
                
            countforcharactersi1 = countforcharactersi1+1.0;    
                
            }  
            
            if(data.contains("ib"))
            
            {
                
            countforcharactersi2 = countforcharactersi2+1.0;    
                
            }  
            
            if(data.contains("ic"))
            
            {
                
            countforcharactersi3 = countforcharactersi3+1.0;    
                
            }  
            
            if(data.contains("id"))
            
            {
                
            countforcharactersi4 = countforcharactersi4+1.0;    
                
            }  
            
            if(data.contains("ie"))
            
            {
                
            countforcharactersi5 = countforcharactersi5+1.0;    
                
            }  
            
            if(data.contains("if"))
            
            {
                
            countforcharactersi6 = countforcharactersi6+1.0;    
                
            }  
            
            if(data.contains("ig"))
            
            {
                
            countforcharactersi7 = countforcharactersi7+1.0;    
                
            }  
            
            if(data.contains("ih"))
            
            {
                
            countforcharactersi8 = countforcharactersi8+1.0;    
                
            }  
            
            if(data.contains("ii"))
            
            {
                
            countforcharactersi9 = countforcharactersi9+1.0;    
                
            }  
            
            if(data.contains("ij"))
            
            {
                
            countforcharactersi10 = countforcharactersi10+1.0;    
                
            }  
            
            if(data.contains("ik"))
            
            {
                
            countforcharactersi11 = countforcharactersi11+1.0;    
                
            }  
            
            if(data.contains("il"))
            
            {
                
            countforcharactersi12 = countforcharactersi12+1.0;    
                
            }  
            
            if(data.contains("im"))
            
            {
                
            countforcharactersi13 = countforcharactersi13+1.0;    
                
            }  
            
            if(data.contains("in"))
            
            {
                
            countforcharactersi14 = countforcharactersi14+1.0;    
                
            }  
             
            if(data.contains("io"))
            
            {
                
            countforcharactersi15 = countforcharactersi15+1.0;    
                
            }  
            
            if(data.contains("ip"))
            
            {
                
            countforcharactersi16 = countforcharactersi16+1.0;    
                
            }  
            
            if(data.contains("iq"))
            
            {
                
            countforcharactersi17 = countforcharactersi17+1.0;    
                
            }  
            
            if(data.contains("ir"))
            
            {
                
            countforcharactersi18 = countforcharactersi18+1.0;    
                
            }  
            
            if(data.contains("is"))
            
            {
                
            countforcharactersi19 = countforcharactersi19+1.0;    
                
            }  
            
            if(data.contains("it"))
            
            {
                
            countforcharactersi20 = countforcharactersi20+1.0;    
                
            }  
            
            if(data.contains("iu"))
            
            {
                
            countforcharactersi21 = countforcharactersi21+1.0;    
                
            }  
            
            if(data.contains("iv"))
            
            {
                
            countforcharactersi22 = countforcharactersi22+1.0;    
                
            }  
            
            if(data.contains("iw"))
            
            {
                
            countforcharactersi23 = countforcharactersi23+1.0;    
                
            }  
            
            if(data.contains("ix"))
            
            {
                
            countforcharactersi24 = countforcharactersi24+1.0;    
                
            }  
            
            if(data.contains("iy"))
            
            {
                
            countforcharactersi25 = countforcharactersi25+1.0;    
                
            }  
            
            if(data.contains("iz"))
            
            {
                
            countforcharactersi26 = countforcharactersi26+1.0;    
                
            }  
            
            if(data.contains("i."))
            
            {
                
            countforcharactersi27 = countforcharactersi27+1.0;    
                
            }  
            
            if(data.contains("i,"))
            
            {
                
            countforcharactersi28 = countforcharactersi28+1.0;    
                
            }  
            
            if(data.contains("i "))
            
            {
                
            countforcharactersi29 = countforcharactersi29+1.0;    
                
            } 
            
            if(data.contains("ja"))
            
            {
                
            countforcharactersj1 = countforcharactersj1+1.0;    
                
            }  
            
            if(data.contains("jb"))
            
            {
                
            countforcharactersj2 = countforcharactersj2+1.0;    
                
            }  
            
            if(data.contains("jc"))
            
            {
                
            countforcharactersj3 = countforcharactersj3+1.0;    
                
            }  
            
            if(data.contains("jd"))
            
            {
                
            countforcharactersj4 = countforcharactersj4+1.0;    
                
            }  
            
            if(data.contains("je"))
            
            {
                
            countforcharactersj5 = countforcharactersj5+1.0;    
                
            }  
            
            if(data.contains("jf"))
            
            {
                
            countforcharactersj6 = countforcharactersj6+1.0;    
                
            }  
            
            if(data.contains("jg"))
            
            {
                
            countforcharactersj7 = countforcharactersj7+1.0;    
                
            }  
            
            if(data.contains("jh"))
            
            {
                
            countforcharactersj8 = countforcharactersj8+1.0;    
                
            }  
            
            if(data.contains("ji"))
            
            {
                
            countforcharactersj9 = countforcharactersj9+1.0;    
                
            }  
            
            if(data.contains("jj"))
            
            {
                
            countforcharactersj10 = countforcharactersj10+1.0;    
                
            }  
            
            if(data.contains("jk"))
            
            {
                
            countforcharactersj11 = countforcharactersj11+1.0;    
                
            }  
            
            if(data.contains("jl"))
            
            {
                
            countforcharactersj12 = countforcharactersj12+1.0;    
                
            }  
            
            if(data.contains("jm"))
            
            {
                
            countforcharactersj13 = countforcharactersj13+1.0;    
                
            }  
            
            if(data.contains("jn"))
            
            {
                
            countforcharactersj14 = countforcharactersj14+1.0;    
                
            }  
             
            if(data.contains("jo"))
            
            {
                
            countforcharactersj15 = countforcharactersj15+1.0;    
                
            }  
            
            if(data.contains("jp"))
            
            {
                
            countforcharactersj16 = countforcharactersj16+1.0;    
                
            }  
            
            if(data.contains("jq"))
            
            {
                
            countforcharactersj17 = countforcharactersj17+1.0;    
                
            }  
            
            if(data.contains("jr"))
            
            {
                
            countforcharactersj18 = countforcharactersj18+1.0;    
                
            }  
            
            if(data.contains("js"))
            
            {
                
            countforcharactersj19 = countforcharactersj19+1.0;    
                
            }  
            
            if(data.contains("jt"))
            
            {
                
            countforcharactersj20 = countforcharactersj20+1.0;    
                
            }  
            
            if(data.contains("ju"))
            
            {
                
            countforcharactersj21 = countforcharactersj21+1.0;    
                
            }  
            
            if(data.contains("jv"))
            
            {
                
            countforcharactersj22 = countforcharactersj22+1.0;    
                
            }  
            
            if(data.contains("jw"))
            
            {
                
            countforcharactersj23 = countforcharactersj23+1.0;    
                
            }  
            
            if(data.contains("jx"))
            
            {
                
            countforcharactersj24 = countforcharactersj24+1.0;    
                
            }  
            
            if(data.contains("jy"))
            
            {
                
            countforcharactersj25 = countforcharactersj25+1.0;    
                
            }  
            
            if(data.contains("jz"))
            
            {
                
            countforcharactersj26 = countforcharactersj26+1.0;    
                
            }  
            
            if(data.contains("j."))
            
            {
                
            countforcharactersj27 = countforcharactersj27+1.0;    
                
            }  
            
            if(data.contains("j,"))
            
            {
                
            countforcharactersj28 = countforcharactersj28+1.0;    
                
            }  
            
            if(data.contains("j "))
            
            {
                
            countforcharactersj29 = countforcharactersj29+1.0;    
                
            }  
            
            if(data.contains("ka"))
            
            {
                
            countforcharactersk1 = countforcharactersk1+1.0;    
                
            }  
            
            if(data.contains("kb"))
            
            {
                
            countforcharactersk2 = countforcharactersk2+1.0;    
                
            }  
            
            if(data.contains("kc"))
            
            {
                
            countforcharactersk3 = countforcharactersk3+1.0;    
                
            }  
            
            if(data.contains("kd"))
            
            {
                
            countforcharactersk4 = countforcharactersk4+1.0;    
                
            }  
            
            if(data.contains("ke"))
            
            {
                
            countforcharactersk5 = countforcharactersk5+1.0;    
                
            }  
            
            if(data.contains("kf"))
            
            {
                
            countforcharactersk6 = countforcharactersk6+1.0;    
                
            }  
            
            if(data.contains("kg"))
            
            {
                
            countforcharactersk7 = countforcharactersk7+1.0;    
                
            }  
            
            if(data.contains("kh"))
            
            {
                
            countforcharactersk8 = countforcharactersk8+1.0;    
                
            }  
            
            if(data.contains("ki"))
            
            {
                
            countforcharactersk9 = countforcharactersk9+1.0;    
                
            }  
            
            if(data.contains("kj"))
            
            {
                
            countforcharactersk10 = countforcharactersk10+1.0;    
                
            }  
            
            if(data.contains("kk"))
            
            {
                
            countforcharactersk11 = countforcharactersk11+1.0;    
                
            }  
            
            if(data.contains("kl"))
            
            {
                
            countforcharactersk12 = countforcharactersk12+1.0;    
                
            }  
            
            if(data.contains("km"))
            
            {
                
            countforcharactersk13 = countforcharactersk13+1.0;    
                
            }  
            
            if(data.contains("kn"))
            
            {
                
            countforcharactersk14 = countforcharactersk14+1.0;    
                
            }  
             
            if(data.contains("ko"))
            
            {
                
            countforcharactersk15 = countforcharactersk15+1.0;    
                
            }  
            
            if(data.contains("kp"))
            
            {
                
            countforcharactersk16 = countforcharactersk16+1.0;    
                
            }  
            
            if(data.contains("kq"))
            
            {
                
            countforcharactersk17 = countforcharactersk17+1.0;    
                
            }  
            
            if(data.contains("kr"))
            
            {
                
            countforcharactersk18 = countforcharactersk18+1.0;    
                
            }  
            
            if(data.contains("ks"))
            
            {
                
            countforcharactersk19 = countforcharactersk19+1.0;    
                
            }  
            
            if(data.contains("kt"))
            
            {
                
            countforcharactersk20 = countforcharactersk20+1.0;    
                
            }  
            
            if(data.contains("ku"))
            
            {
                
            countforcharactersk21 = countforcharactersk21+1.0;    
                
            }  
            
            if(data.contains("kv"))
            
            {
                
            countforcharactersk22 = countforcharactersk22+1.0;    
                
            }  
            
            if(data.contains("kw"))
            
            {
                
            countforcharactersk23 = countforcharactersk23+1.0;    
                
            }  
            
            if(data.contains("kx"))
            
            {
                
            countforcharactersk24 = countforcharactersk24+1.0;    
                
            }  
            
            if(data.contains("ky"))
            
            {
                
            countforcharactersk25 = countforcharactersk25+1.0;    
                
            }  
            
            if(data.contains("kz"))
            
            {
                
            countforcharactersk26 = countforcharactersk26+1.0;    
                
            }  
            
            if(data.contains("k."))
            
            {
                
            countforcharactersk27 = countforcharactersk27+1.0;    
                
            }  
            
            if(data.contains("k,"))
            
            {
                
            countforcharactersk28 = countforcharactersk28+1.0;    
                
            }  
            
            if(data.contains("k "))
            
            {
                
            countforcharactersk29 = countforcharactersk29+1.0;    
                
            }  
            
            if(data.contains("la"))
            
            {
                
            countforcharactersl1 = countforcharactersl1+1.0;    
                
            }  
            
            if(data.contains("lb"))
            
            {
                
            countforcharactersl2 = countforcharactersl2+1.0;    
                
            }  
            
            if(data.contains("lc"))
            
            {
                
            countforcharactersl3 = countforcharactersl3+1.0;    
                
            }  
            
            if(data.contains("ld"))
            
            {
                
            countforcharactersl4 = countforcharactersl4+1.0;    
                
            }  
            
            if(data.contains("le"))
            
            {
                
            countforcharactersl5 = countforcharactersl5+1.0;    
                
            }  
            
            if(data.contains("lf"))
            
            {
                
            countforcharactersl6 = countforcharactersl6+1.0;    
                
            }  
            
            if(data.contains("lg"))
            
            {
                
            countforcharactersl7 = countforcharactersl7+1.0;    
                
            }  
            
            if(data.contains("lh"))
            
            {
                
            countforcharactersl8 = countforcharactersl8+1.0;    
                
            }  
            
            if(data.contains("li"))
            
            {
                
            countforcharactersl9 = countforcharactersl9+1.0;    
                
            }  
            
            if(data.contains("lj"))
            
            {
                
            countforcharactersl10 = countforcharactersl10+1.0;    
                
            }  
            
            if(data.contains("lk"))
            
            {
                
            countforcharactersl11 = countforcharactersl11+1.0;    
                
            }  
            
            if(data.contains("ll"))
            
            {
                
            countforcharactersl12 = countforcharactersl12+1.0;    
                
            }  
            
            if(data.contains("lm"))
            
            {
                
            countforcharactersl13 = countforcharactersl13+1.0;    
                
            }  
            
            if(data.contains("ln"))
            
            {
                
            countforcharactersl14 = countforcharactersl14+1.0;    
                
            }  
             
            if(data.contains("lo"))
            
            {
                
            countforcharactersl15 = countforcharactersl15+1.0;    
                
            }  
            
            if(data.contains("lp"))
            
            {
                
            countforcharactersl16 = countforcharactersl16+1.0;    
                
            }  
            
            if(data.contains("lq"))
            
            {
                
            countforcharactersl17 = countforcharactersl17+1.0;    
                
            }  
            
            if(data.contains("lr"))
            
            {
                
            countforcharactersl18 = countforcharactersl18+1.0;    
                
            }  
            
            if(data.contains("ls"))
            
            {
                
            countforcharactersl19 = countforcharactersl19+1.0;    
                
            }  
            
            if(data.contains("lt"))
            
            {
                
            countforcharactersl20 = countforcharactersl20+1.0;    
                
            }  
            
            if(data.contains("lu"))
            
            {
                
            countforcharactersl21 = countforcharactersl21+1.0;    
                
            }  
            
            if(data.contains("lv"))
            
            {
                
            countforcharactersl22 = countforcharactersl22+1.0;    
                
            }  
            
            if(data.contains("lw"))
            
            {
                
            countforcharactersl23 = countforcharactersl23+1.0;    
                
            }  
            
            if(data.contains("lx"))
            
            {
                
            countforcharactersl24 = countforcharactersl24+1.0;    
                
            }  
            
            if(data.contains("ly"))
            
            {
                
            countforcharactersl25 = countforcharactersl25+1.0;    
                
            }  
            
            if(data.contains("lz"))
            
            {
                
            countforcharactersl26 = countforcharactersl26+1.0;    
                
            }  
            
            if(data.contains("l."))
            
            {
                
            countforcharactersl27 = countforcharactersl27+1.0;    
                
            }  
            
            if(data.contains("l,"))
            
            {
                
            countforcharactersl28 = countforcharactersl28+1.0;    
                
            }  
            
            if(data.contains("l "))
            
            {
                
            countforcharactersl29 = countforcharactersl29+1.0;    
                
            }  
          
            if(data.contains("ma"))
            
            {
                
            countforcharactersm1 = countforcharactersm1+1.0;    
                
            }  
            
            if(data.contains("mb"))
            
            {
                
            countforcharactersm2 = countforcharactersm2+1.0;    
                
            }  
            
            if(data.contains("mc"))
            
            {
                
            countforcharactersm3 = countforcharactersm3+1.0;    
                
            }  
            
            if(data.contains("md"))
            
            {
                
            countforcharactersm4 = countforcharactersm4+1.0;    
                
            }  
            
            if(data.contains("me"))
            
            {
                
            countforcharactersm5 = countforcharactersm5+1.0;    
                
            }  
            
            if(data.contains("mf"))
            
            {
                
            countforcharactersm6 = countforcharactersm6+1.0;    
                
            }  
            
            if(data.contains("mg"))
            
            {
                
            countforcharactersm7 = countforcharactersm7+1.0;    
                
            }  
            
            if(data.contains("mh"))
            
            {
                
            countforcharactersm8 = countforcharactersm8+1.0;    
                
            }  
            
            if(data.contains("mi"))
            
            {
                
            countforcharactersm9 = countforcharactersm9+1.0;    
                
            }  
            
            if(data.contains("mj"))
            
            {
                
            countforcharactersm10 = countforcharactersm10+1.0;    
                
            }  
            
            if(data.contains("mk"))
            
            {
                
            countforcharactersm11 = countforcharactersm11+1.0;    
                
            }  
            
            if(data.contains("ml"))
            
            {
                
            countforcharactersm12 = countforcharactersm12+1.0;    
                
            }  
            
            if(data.contains("mm"))
            
            {
                
            countforcharactersm13 = countforcharactersm13+1.0;    
                
            }  
            
            if(data.contains("mn"))
            
            {
                
            countforcharactersm14 = countforcharactersm14+1.0;    
                
            }  
             
            if(data.contains("mo"))
            
            {
                
            countforcharactersm15 = countforcharactersm15+1.0;    
                
            }  
            
            if(data.contains("mp"))
            
            {
                
            countforcharactersm16 = countforcharactersm16+1.0;    
                
            }  
            
            if(data.contains("mq"))
            
            {
                
            countforcharactersm17 = countforcharactersm17+1.0;    
                
            }  
            
            if(data.contains("mr"))
            
            {
                
            countforcharactersm18 = countforcharactersm18+1.0;    
                
            }  
            
            if(data.contains("ms"))
            
            {
                
            countforcharactersm19 = countforcharactersm19+1.0;    
                
            }  
            
            if(data.contains("mt"))
            
            {
                
            countforcharactersm20 = countforcharactersm20+1.0;    
                
            }  
            
            if(data.contains("mu"))
            
            {
                
            countforcharactersm21 = countforcharactersm21+1.0;    
                
            }  
            
            if(data.contains("mv"))
            
            {
                
            countforcharactersm22 = countforcharactersm22+1.0;    
                
            }  
            
            if(data.contains("mw"))
            
            {
                
            countforcharactersm23 = countforcharactersm23+1.0;    
                
            }  
            
            if(data.contains("mx"))
            
            {
                
            countforcharactersm24 = countforcharactersm24+1.0;    
                
            }  
            
            if(data.contains("my"))
            
            {
                
            countforcharactersm25 = countforcharactersm25+1.0;    
                
            }  
            
            if(data.contains("mz"))
            
            {
                
            countforcharactersm26 = countforcharactersm26+1.0;    
                
            }  
            
            if(data.contains("m."))
            
            {
                
            countforcharactersm27 = countforcharactersm27+1.0;    
                
            }  
            
            if(data.contains("m,"))
            
            {
                
            countforcharactersm28 = countforcharactersm28+1.0;    
                
            }  
            
            if(data.contains("m "))
            
            {
                
            countforcharactersm29 = countforcharactersm29+1.0;    
                
            }  
            
            if(data.contains("na"))
            
            {
                
            countforcharactersn1 = countforcharactersn1+1.0;    
                
            }  
            
            if(data.contains("nb"))
            
            {
                
            countforcharactersn2 = countforcharactersn2+1.0;    
                
            }  
            
            if(data.contains("nc"))
            
            {
                
            countforcharactersn3 = countforcharactersn3+1.0;    
                
            }  
            
            if(data.contains("nd"))
            
            {
                
            countforcharactersn4 = countforcharactersn4+1.0;    
                
            }  
            
            if(data.contains("ne"))
            
            {
                
            countforcharactersn5 = countforcharactersn5+1.0;    
                
            }  
            
            if(data.contains("nf"))
            
            {
                
            countforcharactersn6 = countforcharactersn6+1.0;    
                
            }  
            
            if(data.contains("ng"))
            
            {
                
            countforcharactersn7 = countforcharactersn7+1.0;    
                
            }  
            
            if(data.contains("nh"))
            
            {
                
            countforcharactersn8 = countforcharactersn8+1.0;    
                
            }  
            
            if(data.contains("ni"))
            
            {
                
            countforcharactersn9 = countforcharactersn9+1.0;    
                
            }  
            
            if(data.contains("nj"))
            
            {
                
            countforcharactersn10 = countforcharactersn10+1.0;    
                
            }  
            
            if(data.contains("nk"))
            
            {
                
            countforcharactersn11 = countforcharactersn11+1.0;    
                
            }  
            
            if(data.contains("nl"))
            
            {
                
            countforcharactersn12 = countforcharactersn12+1.0;    
                
            }  
            
            if(data.contains("nm"))
            
            {
                
            countforcharactersn13 = countforcharactersn13+1.0;    
                
            }  
            
            if(data.contains("nn"))
            
            {
                
            countforcharactersn14 = countforcharactersn14+1.0;    
                
            }  
             
            if(data.contains("no"))
            
            {
                
            countforcharactersn15 = countforcharactersn15+1.0;    
                
            }  
            
            if(data.contains("np"))
            
            {
                
            countforcharactersn16 = countforcharactersn16+1.0;    
                
            }  
            
            if(data.contains("nq"))
            
            {
                
            countforcharactersn17 = countforcharactersn17+1.0;    
                
            }  
            
            if(data.contains("nr"))
            
            {
                
            countforcharactersn18 = countforcharactersn18+1.0;    
                
            }  
            
            if(data.contains("ns"))
            
            {
                
            countforcharactersn19 = countforcharactersn19+1.0;    
                
            }  
            
            if(data.contains("nt"))
            
            {
                
            countforcharactersn20 = countforcharactersn20+1.0;    
                
            }  
            
            if(data.contains("nu"))
            
            {
                
            countforcharactersn21 = countforcharactersn21+1.0;    
                
            }  
            
            if(data.contains("nv"))
            
            {
                
            countforcharactersn22 = countforcharactersn22+1.0;    
                
            }  
            
            if(data.contains("nw"))
            
            {
                
            countforcharactersn23 = countforcharactersn23+1.0;    
                
            }  
            
            if(data.contains("nx"))
            
            {
                
            countforcharactersn24 = countforcharactersn24+1.0;    
                
            }  
            
            if(data.contains("ny"))
            
            {
                
            countforcharactersn25 = countforcharactersn25+1.0;    
                
            }  
            
            if(data.contains("nz"))
            
            {
                
            countforcharactersn26 = countforcharactersn26+1.0;    
                
            }  
            
            if(data.contains("n."))
            
            {
                
            countforcharactersn27 = countforcharactersn27+1.0;    
                
            }  
            
            if(data.contains("n,"))
            
            {
                
            countforcharactersn28 = countforcharactersn28+1.0;    
                
            }  
            
            if(data.contains("n "))
            
            {
                
            countforcharactersn29 = countforcharactersn29+1.0;    
                
            }  
            
            if(data.contains("oa"))
            
            {
                
            countforcharacterso1 = countforcharacterso1+1.0;    
                
            }  
            
            if(data.contains("ob"))
            
            {
                
            countforcharacterso2 = countforcharacterso2+1.0;    
                
            }  
            
            if(data.contains("oc"))
            
            {
                
            countforcharacterso3 = countforcharacterso3+1.0;    
                
            }  
            
            if(data.contains("od"))
            
            {
                
            countforcharacterso4 = countforcharacterso4+1.0;    
                
            }  
            
            if(data.contains("oe"))
            
            {
                
            countforcharacterso5 = countforcharacterso5+1.0;    
                
            }  
            
            if(data.contains("of"))
            
            {
                
            countforcharacterso6 = countforcharacterso6+1.0;    
                
            }  
            
            if(data.contains("og"))
            
            {
                
            countforcharacterso7 = countforcharacterso7+1.0;    
                
            }  
            
            if(data.contains("oh"))
            
            {
                
            countforcharacterso8 = countforcharacterso8+1.0;    
                
            }  
            
            if(data.contains("oi"))
            
            {
                
            countforcharacterso9 = countforcharacterso9+1.0;    
                
            }  
            
            if(data.contains("oj"))
            
            {
                
            countforcharacterso10 = countforcharacterso10+1.0;    
                
            }  
            
            if(data.contains("ok"))
            
            {
                
            countforcharacterso11 = countforcharacterso11+1.0;    
                
            }  
            
            if(data.contains("ol"))
            
            {
                
            countforcharacterso12 = countforcharacterso12+1.0;    
                
            }  
            
            if(data.contains("om"))
            
            {
                
            countforcharacterso13 = countforcharacterso13+1.0;    
                
            }  
            
            if(data.contains("on"))
            
            {
                
            countforcharacterso14 = countforcharacterso14+1.0;    
                
            }  
             
            if(data.contains("oo"))
            
            {
                
            countforcharacterso15 = countforcharacterso15+1.0;    
                
            }  
            
            if(data.contains("op"))
            
            {
                
            countforcharacterso16 = countforcharacterso16+1.0;    
                
            }  
            
            if(data.contains("oq"))
            
            {
                
            countforcharacterso17 = countforcharacterso17+1.0;    
                
            }  
            
            if(data.contains("or"))
            
            {
                
            countforcharacterso18 = countforcharacterso18+1.0;    
                
            }  
            
            if(data.contains("os"))
            
            {
                
            countforcharacterso19 = countforcharacterso19+1.0;    
                
            }  
            
            if(data.contains("ot"))
            
            {
                
            countforcharacterso20 = countforcharacterso20+1.0;    
                
            }  
            
            if(data.contains("ou"))
            
            {
                
            countforcharacterso21 = countforcharacterso21+1.0;    
                
            }  
            
            if(data.contains("ov"))
            
            {
                
            countforcharacterso22 = countforcharacterso22+1.0;    
                
            }  
            
            if(data.contains("ow"))
            
            {
                
            countforcharacterso23 = countforcharacterso23+1.0;    
                
            }  
            
            if(data.contains("ox"))
            
            {
                
            countforcharacterso24 = countforcharacterso24+1.0;    
                
            }  
            
            if(data.contains("oy"))
            
            {
                
            countforcharacterso25 = countforcharacterso25+1.0;    
                
            }  
            
            if(data.contains("oz"))
            
            {
                
            countforcharacterso26 = countforcharacterso26+1.0;    
                
            }  
            
            if(data.contains("o."))
            
            {
                
            countforcharacterso27 = countforcharacterso27+1.0;    
                
            }  
            
            if(data.contains("o,"))
            
            {
                
            countforcharacterso28 = countforcharacterso28+1.0;    
                
            }  
            
            if(data.contains("o "))
            
            {
                
            countforcharacterso29 = countforcharacterso29+1.0;    
                
            } 
            
            if(data.contains("pa"))
            
            {
                
            countforcharactersp1 = countforcharactersp1+1.0;    
                
            }  
            
            if(data.contains("pb"))
            
            {
                
            countforcharactersp2 = countforcharactersp2+1.0;    
                
            }  
            
            if(data.contains("pc"))
            
            {
                
            countforcharactersp3 = countforcharactersp3+1.0;    
                
            }  
            
            if(data.contains("pd"))
            
            {
                
            countforcharactersp4 = countforcharactersp4+1.0;    
                
            }  
            
            if(data.contains("pe"))
            
            {
                
            countforcharactersp5 = countforcharactersp5+1.0;    
                
            }  
            
            if(data.contains("pf"))
            
            {
                
            countforcharactersp6 = countforcharactersp6+1.0;    
                
            }  
            
            if(data.contains("pg"))
            
            {
                
            countforcharactersp7 = countforcharactersp7+1.0;    
                
            }  
            
            if(data.contains("ph"))
            
            {
                
            countforcharactersp8 = countforcharactersp8+1.0;    
                
            }  
            
            if(data.contains("pi"))
            
            {
                
            countforcharactersp9 = countforcharactersp9+1.0;    
                
            }  
            
            if(data.contains("pj"))
            
            {
                
            countforcharactersp10 = countforcharactersp10+1.0;    
                
            }  
            
            if(data.contains("pk"))
            
            {
                
            countforcharactersp11 = countforcharactersp11+1.0;    
                
            }  
            
            if(data.contains("pl"))
            
            {
                
            countforcharactersp12 = countforcharactersp12+1.0;    
                
            }  
            
            if(data.contains("pm"))
            
            {
                
            countforcharactersp13 = countforcharactersp13+1.0;    
                
            }  
            
            if(data.contains("pn"))
            
            {
                
            countforcharactersp14 = countforcharactersp14+1.0;    
                
            }  
             
            if(data.contains("po"))
            
            {
                
            countforcharactersp15 = countforcharactersp15+1.0;    
                
            }  
            
            if(data.contains("pp"))
            
            {
                
            countforcharactersp16 = countforcharactersp16+1.0;    
                
            }  
            
            if(data.contains("pq"))
            
            {
                
            countforcharactersp17 = countforcharactersp17+1.0;    
                
            }  
            
            if(data.contains("pr"))
            
            {
                
            countforcharactersp18 = countforcharactersp18+1.0;    
                
            }  
            
            if(data.contains("ps"))
            
            {
                
            countforcharactersp19 = countforcharactersp19+1.0;    
                
            }  
            
            if(data.contains("pt"))
            
            {
                
            countforcharactersp20 = countforcharactersp20+1.0;    
                
            }  
            
            if(data.contains("pu"))
            
            {
                
            countforcharactersp21 = countforcharactersp21+1.0;    
                
            }  
            
            if(data.contains("pv"))
            
            {
                
            countforcharactersp22 = countforcharactersp22+1.0;    
                
            }  
            
            if(data.contains("pw"))
            
            {
                
            countforcharactersp23 = countforcharactersp23+1.0;    
                
            }  
            
            if(data.contains("px"))
            
            {
                
            countforcharactersp24 = countforcharactersp24+1.0;    
                
            }  
            
            if(data.contains("py"))
            
            {
                
            countforcharactersp25 = countforcharactersp25+1.0;    
                
            }  
            
            if(data.contains("pz"))
            
            {
                
            countforcharactersp26 = countforcharactersp26+1.0;    
                
            }  
            
            if(data.contains("p."))
            
            {
                
            countforcharactersp27 = countforcharactersp27+1.0;    
                
            }  
            
            if(data.contains("p,"))
            
            {
                
            countforcharactersp28 = countforcharactersp28+1.0;    
                
            }  
            
            if(data.contains("p "))
            
            {
                
            countforcharactersp29 = countforcharactersp29+1.0;    
                
            }  
            
            if(data.contains("qa"))
            
            {
                
            countforcharactersq1 = countforcharactersq1+1.0;    
                
            }  
            
            if(data.contains("qb"))
            
            {
                
            countforcharactersq2 = countforcharactersq2+1.0;    
                
            }  
            
            if(data.contains("qc"))
            
            {
                
            countforcharactersq3 = countforcharactersq3+1.0;    
                
            }  
            
            if(data.contains("qd"))
            
            {
                
            countforcharactersq4 = countforcharactersq4+1.0;    
                
            }  
            
            if(data.contains("qe"))
            
            {
                
            countforcharactersq5 = countforcharactersq5+1.0;    
                
            }  
            
            if(data.contains("qf"))
            
            {
                
            countforcharactersq6 = countforcharactersq6+1.0;    
                
            }  
            
            if(data.contains("qg"))
            
            {
                
            countforcharactersq7 = countforcharactersq7+1.0;    
                
            }  
            
            if(data.contains("qh"))
            
            {
                
            countforcharactersq8 = countforcharactersq8+1.0;    
                
            }  
            
            if(data.contains("qi"))
            
            {
                
            countforcharactersq9 = countforcharactersq9+1.0;    
                
            }  
            
            if(data.contains("qj"))
            
            {
                
            countforcharactersq10 = countforcharactersq10+1.0;    
                
            }  
            
            if(data.contains("qk"))
            
            {
                
            countforcharactersq11 = countforcharactersq11+1.0;    
                
            }  
            
            if(data.contains("ql"))
            
            {
                
            countforcharactersq12 = countforcharactersq12+1.0;    
                
            }  
            
            if(data.contains("qm"))
            
            {
                
            countforcharactersq13 = countforcharactersq13+1.0;    
                
            }  
            
            if(data.contains("qn"))
            
            {
                
            countforcharactersq14 = countforcharactersq14+1.0;    
                
            }  
             
            if(data.contains("qo"))
            
            {
                
            countforcharactersq15 = countforcharactersq15+1.0;    
                
            }  
            
            if(data.contains("qp"))
            
            {
                
            countforcharactersq16 = countforcharactersq16+1.0;    
                
            }  
            
            if(data.contains("qq"))
            
            {
                
            countforcharactersq17 = countforcharactersq17+1.0;    
                
            }  
            
            if(data.contains("qr"))
            
            {
                
            countforcharactersq18 = countforcharactersq18+1.0;    
                
            }  
            
            if(data.contains("qs"))
            
            {
                
            countforcharactersq19 = countforcharactersq19+1.0;    
                
            }  
            
            if(data.contains("qt"))
            
            {
                
            countforcharactersq20 = countforcharactersq20+1.0;    
                
            }  
            
            if(data.contains("qu"))
            
            {
                
            countforcharactersq21 = countforcharactersq21+1.0;    
                
            }  
            
            if(data.contains("qv"))
            
            {
                
            countforcharactersq22 = countforcharactersq22+1.0;    
                
            }  
            
            if(data.contains("qw"))
            
            {
                
            countforcharactersq23 = countforcharactersq23+1.0;    
                
            }  
            
            if(data.contains("qx"))
            
            {
                
            countforcharactersq24 = countforcharactersq24+1.0;    
                
            }  
            
            if(data.contains("qy"))
            
            {
                
            countforcharactersq25 = countforcharactersq25+1.0;    
                
            }  
            
            if(data.contains("qz"))
            
            {
                
            countforcharactersq26 = countforcharactersq26+1.0;    
                
            }  
            
            if(data.contains("q."))
            
            {
                
            countforcharactersq27 = countforcharactersq27+1.0;    
                
            }  
            
            if(data.contains("q,"))
            
            {
                
            countforcharactersq28 = countforcharactersq28+1.0;    
                
            }  
            
            if(data.contains("q "))
            
            {
                
            countforcharactersq29 = countforcharactersq29+1.0;    
                
            }  
            
            if(data.contains("ra"))
            
            {
                
            countforcharactersr1 = countforcharactersr1+1.0;    
                
            }  
            
            if(data.contains("rb"))
            
            {
                
            countforcharactersr2 = countforcharactersr2+1.0;    
                
            }  
            
            if(data.contains("rc"))
            
            {
                
            countforcharactersr3 = countforcharactersr3+1.0;    
                
            }  
            
            if(data.contains("rd"))
            
            {
                
            countforcharactersr4 = countforcharactersr4+1.0;    
                
            }  
            
            if(data.contains("re"))
            
            {
                
            countforcharactersr5 = countforcharactersr5+1.0;    
                
            }  
            
            if(data.contains("rf"))
            
            {
                
            countforcharactersr6 = countforcharactersr6+1.0;    
                
            }  
            
            if(data.contains("rg"))
            
            {
                
            countforcharactersr7 = countforcharactersr7+1.0;    
                
            }  
            
            if(data.contains("rh"))
            
            {
                
            countforcharactersr8 = countforcharactersr8+1.0;    
                
            }  
            
            if(data.contains("ri"))
            
            {
                
            countforcharactersr9 = countforcharactersr9+1.0;    
                
            }  
            
            if(data.contains("rj"))
            
            {
                
            countforcharactersr10 = countforcharactersr10+1.0;    
                
            }  
            
            if(data.contains("rk"))
            
            {
                
            countforcharactersr11 = countforcharactersr11+1.0;    
                
            }  
            
            if(data.contains("rl"))
            
            {
                
            countforcharactersr12 = countforcharactersr12+1.0;    
                
            }  
            
            if(data.contains("rm"))
            
            {
                
            countforcharactersr13 = countforcharactersr13+1.0;    
                
            }  
            
            if(data.contains("rn"))
            
            {
                
            countforcharactersr14 = countforcharactersr14+1.0;    
                
            }  
             
            if(data.contains("ro"))
            
            {
                
            countforcharactersr15 = countforcharactersr15+1.0;    
                
            }  
            
            if(data.contains("rp"))
            
            {
                
            countforcharactersr16 = countforcharactersr16+1.0;    
                
            }  
            
            if(data.contains("rq"))
            
            {
                
            countforcharactersr17 = countforcharactersr17+1.0;    
                
            }  
            
            if(data.contains("rr"))
            
            {
                
            countforcharactersr18 = countforcharactersr18+1.0;    
                
            }  
            
            if(data.contains("rs"))
            
            {
                
            countforcharactersr19 = countforcharactersr19+1.0;    
                
            }  
            
            if(data.contains("rt"))
            
            {
                
            countforcharactersr20 = countforcharactersr20+1.0;    
                
            }  
            
            if(data.contains("ru"))
            
            {
                
            countforcharactersr21 = countforcharactersr21+1.0;    
                
            }  
            
            if(data.contains("rv"))
            
            {
                
            countforcharactersr22 = countforcharactersr22+1.0;    
                
            }  
            
            if(data.contains("rw"))
            
            {
                
            countforcharactersr23 = countforcharactersr23+1.0;    
                
            }  
            
            if(data.contains("rx"))
            
            {
                
            countforcharactersr24 = countforcharactersr24+1.0;    
                
            }  
            
            if(data.contains("ry"))
            
            {
                
            countforcharactersr25 = countforcharactersr25+1.0;    
                
            }  
            
            if(data.contains("rz"))
            
            {
                
            countforcharactersr26 = countforcharactersr26+1.0;    
                
            }  
            
            if(data.contains("r."))
            
            {
                
            countforcharactersr27 = countforcharactersr27+1.0;    
                
            }  
            
            if(data.contains("r,"))
            
            {
                
            countforcharactersr28 = countforcharactersr28+1.0;    
                
            }  
            
            if(data.contains("r "))
            
            {
                
            countforcharactersr29 = countforcharactersr29+1.0;    
                
            }  
            
            if(data.contains("sa"))
            
            {
                
            countforcharacterss1 = countforcharacterss1+1.0;    
                
            }  
            
            if(data.contains("sb"))
            
            {
                
            countforcharacterss2 = countforcharacterss2+1.0;    
                
            }  
            
            if(data.contains("sc"))
            
            {
                
            countforcharacterss3 = countforcharacterss3+1.0;    
                
            }  
            
            if(data.contains("sd"))
            
            {
                
            countforcharacterss4 = countforcharacterss4+1.0;    
                
            }  
            
            if(data.contains("se"))
            
            {
                
            countforcharacterss5 = countforcharacterss5+1.0;    
                
            }  
            
            if(data.contains("sf"))
            
            {
                
            countforcharacterss6 = countforcharacterss6+1.0;    
                
            }  
            
            if(data.contains("sg"))
            
            {
                
            countforcharacterss7 = countforcharacterss7+1.0;    
                
            }  
            
            if(data.contains("sh"))
            
            {
                
            countforcharacterss8 = countforcharacterss8+1.0;    
                
            }  
            
            if(data.contains("si"))
            
            {
                
            countforcharacterss9 = countforcharacterss9+1.0;    
                
            }  
            
            if(data.contains("sj"))
            
            {
                
            countforcharacterss10 = countforcharacterss10+1.0;    
                
            }  
            
            if(data.contains("sk"))
            
            {
                
            countforcharacterss11 = countforcharacterss11+1.0;    
                
            }  
            
            if(data.contains("sl"))
            
            {
                
            countforcharacterss12 = countforcharacterss12+1.0;    
                
            }  
            
            if(data.contains("sm"))
            
            {
                
            countforcharacterss13 = countforcharacterss13+1.0;    
                
            }  
            
            if(data.contains("sn"))
            
            {
                
            countforcharacterss14 = countforcharacterss14+1.0;    
                
            }  
             
            if(data.contains("so"))
            
            {
                
            countforcharacterss15 = countforcharacterss15+1.0;    
                
            }  
            
            if(data.contains("sp"))
            
            {
                
            countforcharacterss16 = countforcharacterss16+1.0;    
                
            }  
            
            if(data.contains("sq"))
            
            {
                
            countforcharacterss17 = countforcharacterss17+1.0;    
                
            }  
            
            if(data.contains("sr"))
            
            {
                
            countforcharacterss18 = countforcharacterss18+1.0;    
                
            }  
            
            if(data.contains("ss"))
            
            {
                
            countforcharacterss19 = countforcharacterss19+1.0;    
                
            }  
            
            if(data.contains("st"))
            
            {
                
            countforcharacterss20 = countforcharacterss20+1.0;    
                
            }  
            
            if(data.contains("su"))
            
            {
                
            countforcharacterss21 = countforcharacterss21+1.0;    
                
            }  
            
            if(data.contains("sv"))
            
            {
                
            countforcharacterss22 = countforcharacterss22+1.0;    
                
            }  
            
            if(data.contains("sw"))
            
            {
                
            countforcharacterss23 = countforcharacterss23+1.0;    
                
            }  
            
            if(data.contains("sx"))
            
            {
                
            countforcharacterss24 = countforcharacterss24+1.0;    
                
            }  
            
            if(data.contains("sy"))
            
            {
                
            countforcharacterss25 = countforcharacterss25+1.0;    
                
            }  
            
            if(data.contains("sz"))
            
            {
                
            countforcharacterss26 = countforcharacterss26+1.0;    
                
            }  
            
            if(data.contains("s."))
            
            {
                
            countforcharacterss27 = countforcharacterss27+1.0;    
                
            }  
            
            if(data.contains("s,"))
            
            {
                
            countforcharacterss28 = countforcharacterss28+1.0;    
                
            }  
            
            if(data.contains("s "))
            
            {
                
            countforcharacterss29 = countforcharacterss29+1.0;    
                
            }  
            
            if(data.contains("ta"))
            
            {
                
            countforcharacterst1 = countforcharacterst1+1.0;    
                
            }  
            
            if(data.contains("tb"))
            
            {
                
            countforcharacterst2 = countforcharacterst2+1.0;    
                
            }  
            
            if(data.contains("tc"))
            
            {
                
            countforcharacterst3 = countforcharacterst3+1.0;    
                
            }  
            
            if(data.contains("td"))
            
            {
                
            countforcharacterst4 = countforcharacterst4+1.0;    
                
            }  
            
            if(data.contains("te"))
            
            {
                
            countforcharacterst5 = countforcharacterst5+1.0;    
                
            }  
            
            if(data.contains("tf"))
            
            {
                
            countforcharacterst6 = countforcharacterst6+1.0;    
                
            }  
            
            if(data.contains("tg"))
            
            {
                
            countforcharacterst7 = countforcharacterst7+1.0;    
                
            }  
            
            if(data.contains("th"))
            
            {
                
            countforcharacterst8 = countforcharacterst8+1.0;    
                
            }  
            
            if(data.contains("ti"))
            
            {
                
            countforcharacterst9 = countforcharacterst9+1.0;    
                
            }  
            
            if(data.contains("tj"))
            
            {
                
            countforcharacterst10 = countforcharacterst10+1.0;    
                
            }  
            
            if(data.contains("tk"))
            
            {
                
            countforcharacterst11 = countforcharacterst11+1.0;    
                
            }  
            
            if(data.contains("tl"))
            
            {
                
            countforcharacterst12 = countforcharacterst12+1.0;    
                
            }  
            
            if(data.contains("tm"))
            
            {
                
            countforcharacterst13 = countforcharacterst13+1.0;    
                
            }  
            
            if(data.contains("tn"))
            
            {
                
            countforcharacterst14 = countforcharacterst14+1.0;    
                
            }  
             
            if(data.contains("to"))
            
            {
                
            countforcharacterst15 = countforcharacterst15+1.0;    
                
            }  
            
            if(data.contains("tp"))
            
            {
                
            countforcharacterst16 = countforcharacterst16+1.0;    
                
            }  
            
            if(data.contains("tq"))
            
            {
                
            countforcharacterst17 = countforcharacterst17+1.0;    
                
            }  
            
            if(data.contains("tr"))
            
            {
                
            countforcharacterst18 = countforcharacterst18+1.0;    
                
            }  
            
            if(data.contains("ts"))
            
            {
                
            countforcharacterst19 = countforcharacterst19+1.0;    
                
            }  
            
            if(data.contains("tt"))
            
            {
                
            countforcharacterst20 = countforcharacterst20+1.0;    
                
            }  
            
            if(data.contains("tu"))
            
            {
                
            countforcharacterst21 = countforcharacterst21+1.0;    
                
            }  
            
            if(data.contains("tv"))
            
            {
                
            countforcharacterst22 = countforcharacterst22+1.0;    
                
            }  
            
            if(data.contains("tw"))
            
            {
                
            countforcharacterst23 = countforcharacterst23+1.0;    
                
            }  
            
            if(data.contains("tx"))
            
            {
                
            countforcharacterst24 = countforcharacterst24+1.0;    
                
            }  
            
            if(data.contains("ty"))
            
            {
                
            countforcharacterst25 = countforcharacterst25+1.0;    
                
            }  
            
            if(data.contains("tz"))
            
            {
                
            countforcharacterst26 = countforcharacterst26+1.0;    
                
            }  
            
            if(data.contains("t."))
            
            {
                
            countforcharacterst27 = countforcharacterst27+1.0;    
                
            }  
            
            if(data.contains("t,"))
            
            {
                
            countforcharacterst28 = countforcharacterst28+1.0;    
                
            }  
            
            if(data.contains("t "))
            
            {
                
            countforcharacterst29 = countforcharacterst29+1.0;    
                
            }  
            
            if(data.contains("ua"))
            
            {
                
            countforcharactersu1 = countforcharactersu1+1.0;    
                
            }  
            
            if(data.contains("ub"))
            
            {
                
            countforcharactersu2 = countforcharactersu2+1.0;    
                
            }  
            
            if(data.contains("uc"))
            
            {
                
            countforcharactersu3 = countforcharactersu3+1.0;    
                
            }  
            
            if(data.contains("ud"))
            
            {
                
            countforcharactersu4 = countforcharactersu4+1.0;    
                
            }  
            
            if(data.contains("ue"))
            
            {
                
            countforcharactersu5 = countforcharactersu5+1.0;    
                
            }  
            
            if(data.contains("uf"))
            
            {
                
            countforcharactersu6 = countforcharactersu6+1.0;    
                
            }  
            
            if(data.contains("ug"))
            
            {
                
            countforcharactersu7 = countforcharactersu7+1.0;    
                
            }  
            
            if(data.contains("uh"))
            
            {
                
            countforcharactersu8 = countforcharactersu8+1.0;    
                
            }  
            
            if(data.contains("ui"))
            
            {
                
            countforcharactersu9 = countforcharactersu9+1.0;    
                
            }  
            
            if(data.contains("uj"))
            
            {
                
            countforcharactersu10 = countforcharactersu10+1.0;    
                
            }  
            
            if(data.contains("uk"))
            
            {
                
            countforcharactersu11 = countforcharactersu11+1.0;    
                
            }  
            
            if(data.contains("ul"))
            
            {
                
            countforcharactersu12 = countforcharactersu12+1.0;    
                
            }  
            
            if(data.contains("um"))
            
            {
                
            countforcharactersu13 = countforcharactersu13+1.0;    
                
            }  
            
            if(data.contains("un"))
            
            {
                
            countforcharactersu14 = countforcharactersu14+1.0;    
                
            }  
             
            if(data.contains("uo"))
            
            {
                
            countforcharactersu15 = countforcharactersu15+1.0;    
                
            }  
            
            if(data.contains("up"))
            
            {
                
            countforcharactersu16 = countforcharactersu16+1.0;    
                
            }  
            
            if(data.contains("uq"))
            
            {
                
            countforcharactersu17 = countforcharactersu17+1.0;    
                
            }  
            
            if(data.contains("ur"))
            
            {
                
            countforcharactersu18 = countforcharactersu18+1.0;    
                
            }  
            
            if(data.contains("us"))
            
            {
                
            countforcharactersu19 = countforcharactersu19+1.0;    
                
            }  
            
            if(data.contains("ut"))
            
            {
                
            countforcharactersu20 = countforcharactersu20+1.0;    
                
            }  
            
            if(data.contains("uu"))
            
            {
                
            countforcharactersu21 = countforcharactersu21+1.0;    
                
            }  
            
            if(data.contains("uv"))
            
            {
                
            countforcharactersu22 = countforcharactersu22+1.0;    
                
            }  
            
            if(data.contains("uw"))
            
            {
                
            countforcharactersu23 = countforcharactersu23+1.0;    
                
            }  
            
            if(data.contains("ux"))
            
            {
                
            countforcharactersu24 = countforcharactersu24+1.0;    
                
            }  
            
            if(data.contains("uy"))
            
            {
                
            countforcharactersu25 = countforcharactersu25+1.0;    
                
            }  
            
            if(data.contains("uz"))
            
            {
                
            countforcharactersu26 = countforcharactersu26+1.0;    
                
            }  
            
            if(data.contains("u."))
            
            {
                
            countforcharactersu27 = countforcharactersu27+1.0;    
                
            }  
            
            if(data.contains("u,"))
            
            {
                
            countforcharactersu28 = countforcharactersu28+1.0;    
                
            }  
            
            if(data.contains("u "))
            
            {
                
            countforcharactersu29 = countforcharactersu29+1.0;    
                
            }  
            
            if(data.contains("va"))
            
            {
                
            countforcharactersv1 = countforcharactersv1+1.0;    
                
            }  
            
            if(data.contains("vb"))
            
            {
                
            countforcharactersv2 = countforcharactersv2+1.0;    
                
            }  
            
            if(data.contains("vc"))
            
            {
                
            countforcharactersv3 = countforcharactersv3+1.0;    
                
            }  
            
            if(data.contains("vd"))
            
            {
                
            countforcharactersv4 = countforcharactersv4+1.0;    
                
            }  
            
            if(data.contains("ve"))
            
            {
                
            countforcharactersv5 = countforcharactersv5+1.0;    
                
            }  
            
            if(data.contains("vf"))
            
            {
                
            countforcharactersv6 = countforcharactersv6+1.0;    
                
            }  
            
            if(data.contains("vg"))
            
            {
                
            countforcharactersv7 = countforcharactersv7+1.0;    
                
            }  
            
            if(data.contains("vh"))
            
            {
                
            countforcharactersv8 = countforcharactersv8+1.0;    
                
            }  
            
            if(data.contains("vi"))
            
            {
                
            countforcharactersv9 = countforcharactersv9+1.0;    
                
            }  
            
            if(data.contains("vj"))
            
            {
                
            countforcharactersv10 = countforcharactersv10+1.0;    
                
            }  
            
            if(data.contains("vk"))
            
            {
                
            countforcharactersv11 = countforcharactersv11+1.0;    
                
            }  
            
            if(data.contains("vl"))
            
            {
                
            countforcharactersv12 = countforcharactersv12+1.0;    
                
            }  
            
            if(data.contains("vm"))
            
            {
                
            countforcharactersv13 = countforcharactersv13+1.0;    
                
            }  
            
            if(data.contains("vn"))
            
            {
                
            countforcharactersv14 = countforcharactersv14+1.0;    
                
            }  
             
            if(data.contains("vo"))
            
            {
                
            countforcharactersv15 = countforcharactersv15+1.0;    
                
            }  
            
            if(data.contains("vp"))
            
            {
                
            countforcharactersv16 = countforcharactersv16+1.0;    
                
            }  
            
            if(data.contains("vq"))
            
            {
                
            countforcharactersv17 = countforcharactersv17+1.0;    
                
            }  
            
            if(data.contains("vr"))
            
            {
                
            countforcharactersv18 = countforcharactersv18+1.0;    
                
            }  
            
            if(data.contains("vs"))
            
            {
                
            countforcharactersv19 = countforcharactersv19+1.0;    
                
            }  
            
            if(data.contains("vt"))
            
            {
                
            countforcharactersv20 = countforcharactersv20+1.0;    
                
            }  
            
            if(data.contains("vu"))
            
            {
                
            countforcharactersv21 = countforcharactersv21+1.0;    
                
            }  
            
            if(data.contains("vv"))
            
            {
                
            countforcharactersv22 = countforcharactersv22+1.0;    
                
            }  
            
            if(data.contains("vw"))
            
            {
                
            countforcharactersv23 = countforcharactersv23+1.0;    
                
            }  
            
            if(data.contains("vx"))
            
            {
                
            countforcharactersv24 = countforcharactersv24+1.0;    
                
            }  
            
            if(data.contains("vy"))
            
            {
                
            countforcharactersv25 = countforcharactersv25+1.0;    
                
            }  
            
            if(data.contains("vz"))
            
            {
                
            countforcharactersv26 = countforcharactersv26+1.0;    
                
            }  
            
            if(data.contains("v."))
            
            {
                
            countforcharactersv27 = countforcharactersv27+1.0;    
                
            }  
            
            if(data.contains("v,"))
            
            {
                
            countforcharactersv28 = countforcharactersv28+1.0;    
                
            }  
            
            if(data.contains("v "))
            
            {
                
            countforcharactersv29 = countforcharactersv29+1.0;    
                
            }  
            
            if(data.contains("wa"))
            
            {
                
            countforcharactersw1 = countforcharactersw1+1.0;    
                
            }  
            
            if(data.contains("wb"))
            
            {
                
            countforcharactersw2 = countforcharactersw2+1.0;    
                
            }  
            
            if(data.contains("wc"))
            
            {
                
            countforcharactersw3 = countforcharactersw3+1.0;    
                
            }  
            
            if(data.contains("wd"))
            
            {
                
            countforcharactersw4 = countforcharactersw4+1.0;    
                
            }  
            
            if(data.contains("we"))
            
            {
                
            countforcharactersw5 = countforcharactersw5+1.0;    
                
            }  
            
            if(data.contains("wf"))
            
            {
                
            countforcharactersw6 = countforcharactersw6+1.0;    
                
            }  
            
            if(data.contains("wg"))
            
            {
                
            countforcharactersw7 = countforcharactersw7+1.0;    
                
            }  
            
            if(data.contains("wh"))
            
            {
                
            countforcharactersw8 = countforcharactersw8+1.0;    
                
            }  
            
            if(data.contains("wi"))
            
            {
                
            countforcharactersw9 = countforcharactersw9+1.0;    
                
            }  
            
            if(data.contains("wj"))
            
            {
                
            countforcharactersw10 = countforcharactersw10+1.0;    
                
            }  
            
            if(data.contains("wk"))
            
            {
                
            countforcharactersw11 = countforcharactersw11+1.0;    
                
            }  
            
            if(data.contains("wl"))
            
            {
                
            countforcharactersw12 = countforcharactersw12+1.0;    
                
            }  
            
            if(data.contains("wm"))
            
            {
                
            countforcharactersw13 = countforcharactersw13+1.0;    
                
            }  
            
            if(data.contains("wn"))
            
            {
                
            countforcharactersw14 = countforcharactersw14+1.0;    
                
            }  
             
            if(data.contains("wo"))
            
            {
                
            countforcharactersw15 = countforcharactersw15+1.0;    
                
            }  
            
            if(data.contains("wp"))
            
            {
                
            countforcharactersw16 = countforcharactersw16+1.0;    
                
            }  
            
            if(data.contains("wq"))
            
            {
                
            countforcharactersw17 = countforcharactersw17+1.0;    
                
            }  
            
            if(data.contains("wr"))
            
            {
                
            countforcharactersw18 = countforcharactersw18+1.0;    
                
            }  
            
            if(data.contains("ws"))
            
            {
                
            countforcharactersw19 = countforcharactersw19+1.0;    
                
            }  
            
            if(data.contains("wt"))
            
            {
                
            countforcharactersw20 = countforcharactersw20+1.0;    
                
            }  
            
            if(data.contains("wu"))
            
            {
                
            countforcharactersw21 = countforcharactersw21+1.0;    
                
            }  
            
            if(data.contains("wv"))
            
            {
                
            countforcharactersw22 = countforcharactersw22+1.0;    
                
            }  
            
            if(data.contains("ww"))
            
            {
                
            countforcharactersw23 = countforcharactersw23+1.0;    
                
            }  
            
            if(data.contains("wx"))
            
            {
                
            countforcharactersw24 = countforcharactersw24+1.0;    
                
            }  
            
            if(data.contains("wy"))
            
            {
                
            countforcharactersw25 = countforcharactersw25+1.0;    
                
            }  
            
            if(data.contains("wz"))
            
            {
                
            countforcharactersw26 = countforcharactersw26+1.0;    
                
            }  
            
            if(data.contains("w."))
            
            {
                
            countforcharactersw27 = countforcharactersw27+1.0;    
                
            }  
            
            if(data.contains("w,"))
            
            {
                
            countforcharactersw28 = countforcharactersw28+1.0;    
                
            }  
            
            if(data.contains("w "))
            
            {
                
            countforcharactersw29 = countforcharactersw29+1.0;    
                
            }  
            
            if(data.contains("xa"))
            
            {
                
            countforcharactersx1 = countforcharactersx1+1.0;    
                
            }  
            
            if(data.contains("xb"))
            
            {
                
            countforcharactersx2 = countforcharactersx2+1.0;    
                
            }  
            
            if(data.contains("xc"))
            
            {
                
            countforcharactersx3 = countforcharactersx3+1.0;    
                
            }  
            
            if(data.contains("xd"))
            
            {
                
            countforcharactersx4 = countforcharactersx4+1.0;    
                
            }  
            
            if(data.contains("xe"))
            
            {
                
            countforcharactersx5 = countforcharactersx5+1.0;    
                
            }  
            
            if(data.contains("xf"))
            
            {
                
            countforcharactersx6 = countforcharactersx6+1.0;    
                
            }  
            
            if(data.contains("xg"))
            
            {
                
            countforcharactersx7 = countforcharactersx7+1.0;    
                
            }  
            
            if(data.contains("xh"))
            
            {
                
            countforcharactersx8 = countforcharactersx8+1.0;    
                
            }  
            
            if(data.contains("xi"))
            
            {
                
            countforcharactersx9 = countforcharactersx9+1.0;    
                
            }  
            
            if(data.contains("xj"))
            
            {
                
            countforcharactersx10 = countforcharactersx10+1.0;    
                
            }  
            
            if(data.contains("xk"))
            
            {
                
            countforcharactersx11 = countforcharactersx11+1.0;    
                
            }  
            
            if(data.contains("xl"))
            
            {
                
            countforcharactersx12 = countforcharactersx12+1.0;    
                
            }  
            
            if(data.contains("xm"))
            
            {
                
            countforcharactersx13 = countforcharactersx13+1.0;    
                
            }  
            
            if(data.contains("xn"))
            
            {
                
            countforcharactersx14 = countforcharactersx14+1.0;    
                
            }  
             
            if(data.contains("xo"))
            
            {
                
            countforcharactersx15 = countforcharactersx15+1.0;    
                
            }  
            
            if(data.contains("xp"))
            
            {
                
            countforcharactersx16 = countforcharactersx16+1.0;    
                
            }  
            
            if(data.contains("xq"))
            
            {
                
            countforcharactersx17 = countforcharactersx17+1.0;    
                
            }  
            
            if(data.contains("xr"))
            
            {
                
            countforcharactersx18 = countforcharactersx18+1.0;    
                
            }  
            
            if(data.contains("xs"))
            
            {
                
            countforcharactersx19 = countforcharactersx19+1.0;    
                
            }  
            
            if(data.contains("xt"))
            
            {
                
            countforcharactersx20 = countforcharactersx20+1.0;    
                
            }  
            
            if(data.contains("xu"))
            
            {
                
            countforcharactersx21 = countforcharactersx21+1.0;    
                
            }  
            
            if(data.contains("xv"))
            
            {
                
            countforcharactersx22 = countforcharactersx22+1.0;    
                
            }  
            
            if(data.contains("xw"))
            
            {
                
            countforcharactersx23 = countforcharactersx23+1.0;    
                
            }  
            
            if(data.contains("xx"))
            
            {
                
            countforcharactersx24 = countforcharactersx24+1.0;    
                
            }  
            
            if(data.contains("xy"))
            
            {
                
            countforcharactersx25 = countforcharactersx25+1.0;    
                
            }  
            
            if(data.contains("xz"))
            
            {
                
            countforcharactersx26 = countforcharactersx26+1.0;    
                
            }  
            
            if(data.contains("x."))
            
            {
                
            countforcharactersx27 = countforcharactersx27+1.0;    
                
            }  
            
            if(data.contains("x,"))
            
            {
                
            countforcharactersx28 = countforcharactersx28+1.0;    
                
            }  
            
            if(data.contains("x "))
            
            {
                
            countforcharactersx29 = countforcharactersx29+1.0;    
                
            }  
            
            if(data.contains("ya"))
            
            {
                
            countforcharactersy1 = countforcharactersy1+1.0;    
                
            }  
            
            if(data.contains("yb"))
            
            {
                
            countforcharactersy2 = countforcharactersy2+1.0;    
                
            }  
            
            if(data.contains("yc"))
            
            {
                
            countforcharactersy3 = countforcharactersy3+1.0;    
                
            }  
            
            if(data.contains("yd"))
            
            {
                
            countforcharactersy4 = countforcharactersy4+1.0;    
                
            }  
            
            if(data.contains("ye"))
            
            {
                
            countforcharactersy5 = countforcharactersy5+1.0;    
                
            }  
            
            if(data.contains("yf"))
            
            {
                
            countforcharactersy6 = countforcharactersy6+1.0;    
                
            }  
            
            if(data.contains("yg"))
            
            {
                
            countforcharactersy7 = countforcharactersy7+1.0;    
                
            }  
            
            if(data.contains("yh"))
            
            {
                
            countforcharactersy8 = countforcharactersy8+1.0;    
                
            }  
            
            if(data.contains("yi"))
            
            {
                
            countforcharactersy9 = countforcharactersy9+1.0;    
                
            }  
            
            if(data.contains("yj"))
            
            {
                
            countforcharactersy10 = countforcharactersy10+1.0;    
                
            }  
            
            if(data.contains("yk"))
            
            {
                
            countforcharactersy11 = countforcharactersy11+1.0;    
                
            }  
            
            if(data.contains("yl"))
            
            {
                
            countforcharactersy12 = countforcharactersy12+1.0;    
                
            }  
            
            if(data.contains("ym"))
            
            {
                
            countforcharactersy13 = countforcharactersy13+1.0;    
                
            }  
            
            if(data.contains("yn"))
            
            {
                
            countforcharactersy14 = countforcharactersy14+1.0;    
                
            }  
             
            if(data.contains("yo"))
            
            {
                
            countforcharactersy15 = countforcharactersy15+1.0;    
                
            }  
            
            if(data.contains("yp"))
            
            {
                
            countforcharactersy16 = countforcharactersy16+1.0;    
                
            }  
            
            if(data.contains("yq"))
            
            {
                
            countforcharactersy17 = countforcharactersy17+1.0;    
                
            }  
            
            if(data.contains("yr"))
            
            {
                
            countforcharactersy18 = countforcharactersy18+1.0;    
                
            }  
            
            if(data.contains("ys"))
            
            {
                
            countforcharactersy19 = countforcharactersy19+1.0;    
                
            }  
            
            if(data.contains("yt"))
            
            {
                
            countforcharactersy20 = countforcharactersy20+1.0;    
                
            }  
            
            if(data.contains("yu"))
            
            {
                
            countforcharactersy21 = countforcharactersy21+1.0;    
                
            }  
            
            if(data.contains("yv"))
            
            {
                
            countforcharactersy22 = countforcharactersy22+1.0;    
                
            }  
            
            if(data.contains("yw"))
            
            {
                
            countforcharactersy23 = countforcharactersy23+1.0;    
                
            }  
            
            if(data.contains("yx"))
            
            {
                
            countforcharactersy24 = countforcharactersy24+1.0;    
                
            }  
            
            if(data.contains("yy"))
            
            {
                
            countforcharactersy25 = countforcharactersy25+1.0;    
                
            }  
            
            if(data.contains("yz"))
            
            {
                
            countforcharactersy26 = countforcharactersy26+1.0;    
                
            }  
            
            if(data.contains("y."))
            
            {
                
            countforcharactersy27 = countforcharactersy27+1.0;    
                
            }  
            
            if(data.contains("y,"))
            
            {
                
            countforcharactersy28 = countforcharactersy28+1.0;    
                
            }  
            
            if(data.contains("y "))
            
            {
                
            countforcharactersy29 = countforcharactersy29+1.0;    
                
            }  
            
            if(data.contains("za"))
            
            {
                
            countforcharactersz1 = countforcharactersz1+1.0;    
                
            }  
            
            if(data.contains("zb"))
            
            {
                
            countforcharactersz2 = countforcharactersz2+1.0;    
                
            }  
            
            if(data.contains("zc"))
            
            {
                
            countforcharactersz3 = countforcharactersz3+1.0;    
                
            }  
            
            if(data.contains("zd"))
            
            {
                
            countforcharactersz4 = countforcharactersz4+1.0;    
                
            }  
            
            if(data.contains("ze"))
            
            {
                
            countforcharactersz5 = countforcharactersz5+1.0;    
                
            }  
            
            if(data.contains("zf"))
            
            {
                
            countforcharactersz6 = countforcharactersz6+1.0;    
                
            }  
            
            if(data.contains("zg"))
            
            {
                
            countforcharactersz7 = countforcharactersz7+1.0;    
                
            }  
            
            if(data.contains("zh"))
            
            {
                
            countforcharactersz8 = countforcharactersz8+1.0;    
                
            }  
            
            if(data.contains("zi"))
            
            {
                
            countforcharactersz9 = countforcharactersz9+1.0;    
                
            }  
            
            if(data.contains("zj"))
            
            {
                
            countforcharactersz10 = countforcharactersz10+1.0;    
                
            }  
            
            if(data.contains("zk"))
            
            {
                
            countforcharactersz11 = countforcharactersz11+1.0;    
                
            }  
            
            if(data.contains("zl"))
            
            {
                
            countforcharactersz12 = countforcharactersz12+1.0;    
                
            }  
            
            if(data.contains("zm"))
            
            {
                
            countforcharactersz13 = countforcharactersz13+1.0;    
                
            }  
            
            if(data.contains("zn"))
            
            {
                
            countforcharactersz14 = countforcharactersz14+1.0;    
                
            }  
             
            if(data.contains("zo"))
            
            {
                
            countforcharactersz15 = countforcharactersz15+1.0;    
                
            }  
            
            if(data.contains("zp"))
            
            {
                
            countforcharactersz16 = countforcharactersz16+1.0;    
                
            }  
            
            if(data.contains("zq"))
            
            {
                
            countforcharactersz17 = countforcharactersz17+1.0;    
                
            }  
            
            if(data.contains("zr"))
            
            {
                
            countforcharactersz18 = countforcharactersz18+1.0;    
                
            }  
            
            if(data.contains("zs"))
            
            {
                
            countforcharactersz19 = countforcharactersz19+1.0;    
                
            }  
            
            if(data.contains("zt"))
            
            {
                
            countforcharactersz20 = countforcharactersz20+1.0;    
                
            }  
            
            if(data.contains("zu"))
            
            {
                
            countforcharactersz21 = countforcharactersz21+1.0;    
                
            }  
            
            if(data.contains("zv"))
            
            {
                
            countforcharactersz22 = countforcharactersz22+1.0;    
                
            }  
            
            if(data.contains("zw"))
            
            {
                
            countforcharactersz23 = countforcharactersz23+1.0;    
                
            }  
            
            if(data.contains("zx"))
            
            {
                
            countforcharactersz24 = countforcharactersz24+1.0;    
                
            }  
            
            if(data.contains("zy"))
            
            {
                
            countforcharactersz25 = countforcharactersz25+1.0;    
                
            }  
            
            if(data.contains("zz"))
            
            {
                
            countforcharactersz26 = countforcharactersz26+1.0;    
                
            }  
            
            if(data.contains("z."))
            
            {
                
            countforcharactersz27 = countforcharactersz27+1.0;    
                
            }  
            
            if(data.contains("z,"))
            
            {
                
            countforcharactersz28 = countforcharactersz28+1.0;    
                
            }  
            
            if(data.contains("z "))
            
            {
                
            countforcharactersz29 = countforcharactersz29+1.0;    
                
            }  
            
            if(data.contains(".a"))
            
            {
                
            countforcharactersdot1 = countforcharactersdot1+1.0;    
                
            }  
            
            if(data.contains(".b"))
            
            {
                
            countforcharactersdot2 = countforcharactersdot2+1.0;    
                
            }  
            
            if(data.contains(".c"))
            
            {
                
            countforcharactersdot3 = countforcharactersdot3+1.0;    
                
            }  
            
            if(data.contains(".d"))
            
            {
                
            countforcharactersdot4 = countforcharactersdot4+1.0;    
                
            }  
            
            if(data.contains(".e"))
            
            {
                
            countforcharactersdot5 = countforcharactersdot5+1.0;    
                
            }  
            
            if(data.contains(".f"))
            
            {
                
            countforcharactersdot6 = countforcharactersdot6+1.0;    
                
            }  
            
            if(data.contains(".g"))
            
            {
                
            countforcharactersdot7 = countforcharactersdot7+1.0;    
                
            }  
            
            if(data.contains(".h"))
            
            {
                
            countforcharactersdot8 = countforcharactersdot8+1.0;    
                
            }  
            
            if(data.contains(".i"))
            
            {
                
            countforcharactersdot9 = countforcharactersdot9+1.0;    
                
            }  
            
            if(data.contains(".j"))
            
            {
                
            countforcharactersdot10 = countforcharactersdot10+1.0;    
                
            }  
            
            if(data.contains(".k"))
            
            {
                
            countforcharactersdot11 = countforcharactersdot11+1.0;    
                
            }  
            
            if(data.contains(".l"))
            
            {
                
            countforcharactersdot12 = countforcharactersdot12+1.0;    
                
            }  
            
            if(data.contains(".m"))
            
            {
                
            countforcharactersdot13 = countforcharactersdot13+1.0;    
                
            }  
            
            if(data.contains(".n"))
            
            {
                
            countforcharactersdot14 = countforcharactersdot14+1.0;    
                
            }  
             
            if(data.contains(".o"))
            
            {
                
            countforcharactersdot15 = countforcharactersdot15+1.0;    
                
            }  
            
            if(data.contains(".p"))
            
            {
                
            countforcharactersdot16 = countforcharactersdot16+1.0;    
                
            }  
            
            if(data.contains(".q"))
            
            {
                
            countforcharactersdot17 = countforcharactersdot17+1.0;    
                
            }  
            
            if(data.contains(".r"))
            
            {
                
            countforcharactersdot18 = countforcharactersdot18+1.0;    
                
            }  
            
            if(data.contains(".s"))
            
            {
                
            countforcharactersdot19 = countforcharactersdot19+1.0;    
                
            }  
            
            if(data.contains(".t"))
            
            {
                
            countforcharactersdot20 = countforcharactersdot20+1.0;    
                
            }  
            
            if(data.contains(".u"))
            
            {
                
            countforcharactersdot21 = countforcharactersdot21+1.0;    
                
            }  
            
            if(data.contains(".v"))
            
            {
                
            countforcharactersdot22 = countforcharactersdot22+1.0;    
                
            }  
            
            if(data.contains(".w"))
            
            {
                
            countforcharactersdot23 = countforcharactersdot23+1.0;    
                
            }  
            
            if(data.contains(".x"))
            
            {
                
            countforcharactersdot24 = countforcharactersdot24+1.0;    
                
            }  
            
            if(data.contains(".y"))
            
            {
                
            countforcharactersdot25 = countforcharactersdot25+1.0;    
                
            }  
            
            if(data.contains(".z"))
            
            {
                
            countforcharactersdot26 = countforcharactersdot26+1.0;    
                
            }  
            
            if(data.contains(".."))
            
            {
                
            countforcharactersdot27 = countforcharactersdot27+1.0;    
                
            }  
            
            if(data.contains(".,"))
            
            {
                
            countforcharactersdot28 = countforcharactersdot28+1.0;    
                
            }  
            
            if(data.contains(". "))
            
            {
                
            countforcharactersdot29 = countforcharactersdot29+1.0;    
                
            }  
            
            if(data.contains(",a"))
            
            {
                
            countforcharacterscomma1 = countforcharacterscomma1+1.0;    
                
            }  
            
            if(data.contains(",b"))
            
            {
                
            countforcharacterscomma2 = countforcharacterscomma2+1.0;    
                
            }  
            
            if(data.contains(",c"))
            
            {
                
            countforcharacterscomma3 = countforcharacterscomma3+1.0;    
                
            }  
            
            if(data.contains(",d"))
            
            {
                
            countforcharacterscomma4 = countforcharacterscomma4+1.0;    
                
            }  
            
            if(data.contains(",e"))
            
            {
                
            countforcharacterscomma5 = countforcharacterscomma5+1.0;    
                
            }  
            
            if(data.contains(",f"))
            
            {
                
            countforcharacterscomma6 = countforcharacterscomma6+1.0;    
                
            }  
            
            if(data.contains(",g"))
            
            {
                
            countforcharacterscomma7 = countforcharacterscomma7+1.0;    
                
            }  
            
            if(data.contains(",h"))
            
            {
                
            countforcharacterscomma8 = countforcharacterscomma8+1.0;    
                
            }  
            
            if(data.contains(",i"))
            
            {
                
            countforcharacterscomma9 = countforcharacterscomma9+1.0;    
                
            }  
            
            if(data.contains(",j"))
            
            {
                
            countforcharacterscomma10 = countforcharacterscomma10+1.0;    
                
            }  
            
            if(data.contains(",k"))
            
            {
                
            countforcharacterscomma11 = countforcharacterscomma11+1.0;    
                
            }  
            
            if(data.contains(",l"))
            
            {
                
            countforcharacterscomma12 = countforcharacterscomma12+1.0;    
                
            }  
            
            if(data.contains(",m"))
            
            {
                
            countforcharacterscomma13 = countforcharacterscomma13+1.0;    
                
            }  
            
            if(data.contains(",n"))
            
            {
                
            countforcharacterscomma14 = countforcharacterscomma14+1.0;    
                
            }  
             
            if(data.contains(",o"))
            
            {
                
            countforcharacterscomma15 = countforcharacterscomma15+1.0;    
                
            }  
            
            if(data.contains(",p"))
            
            {
                
            countforcharacterscomma16 = countforcharacterscomma16+1.0;    
                
            }  
            
            if(data.contains(",q"))
            
            {
                
            countforcharacterscomma17 = countforcharacterscomma17+1.0;    
                
            }  
            
            if(data.contains(",r"))
            
            {
                
            countforcharacterscomma18 = countforcharacterscomma18+1.0;    
                
            }  
            
            if(data.contains(",s"))
            
            {
                
            countforcharacterscomma19 = countforcharacterscomma19+1.0;    
                
            }  
            
            if(data.contains(",t"))
            
            {
                
            countforcharacterscomma20 = countforcharacterscomma20+1.0;    
                
            }  
            
            if(data.contains(",u"))
            
            {
                
            countforcharacterscomma21 = countforcharacterscomma21+1.0;    
                
            }  
            
            if(data.contains(",v"))
            
            {
                
            countforcharacterscomma22 = countforcharacterscomma22+1.0;    
                
            }  
            
            if(data.contains(",w"))
            
            {
                
            countforcharacterscomma23 = countforcharacterscomma23+1.0;    
                
            }  
            
            if(data.contains(",x"))
            
            {
                
            countforcharacterscomma24 = countforcharacterscomma24+1.0;    
                
            }  
            
            if(data.contains(",y"))
            
            {
                
            countforcharacterscomma25 = countforcharacterscomma25+1.0;    
                
            }  
            
            if(data.contains(",z"))
            
            {
                
            countforcharacterscomma26 = countforcharacterscomma26+1.0;    
                
            }  
            
            if(data.contains(",."))
            
            {
                
            countforcharacterscomma27 = countforcharacterscomma27+1.0;    
                
            }  
            
            if(data.contains(",,"))
            
            {
                
            countforcharacterscomma28 = countforcharacterscomma28+1.0;    
                
            }  
            
            if(data.contains(", "))
            
            {
                
            countforcharacterscomma29 = countforcharacterscomma29+1.0;    
                
            }  
            
            if(data.contains(" a"))
            
            {
                
            countforcharactersvacuum1 = countforcharactersvacuum1+1.0;    
                
            }  
            
            if(data.contains(" b"))
            
            {
                
            countforcharactersvacuum2 = countforcharactersvacuum2+1.0;    
                
            }  
            
            if(data.contains(" c"))
            
            {
                
            countforcharactersvacuum3 = countforcharactersvacuum3+1.0;    
                
            }  
            
            if(data.contains(" d"))
            
            {
                
            countforcharactersvacuum4 = countforcharactersvacuum4+1.0;    
                
            }  
            
            if(data.contains(" e"))
            
            {
                
            countforcharactersvacuum5 = countforcharactersvacuum5+1.0;    
                
            }  
            
            if(data.contains(" f"))
            
            {
                
            countforcharactersvacuum6 = countforcharactersvacuum6+1.0;    
                
            }  
            
            if(data.contains(" g"))
            
            {
                
            countforcharactersvacuum7 = countforcharactersvacuum7+1.0;    
                
            }  
            
            if(data.contains(" h"))
            
            {
                
            countforcharactersvacuum8 = countforcharactersvacuum8+1.0;    
                
            }  
            
            if(data.contains(" i"))
            
            {
                
            countforcharactersvacuum9 = countforcharactersvacuum9+1.0;    
                
            }  
            
            if(data.contains(" j"))
            
            {
                
            countforcharactersvacuum10 = countforcharactersvacuum10+1.0;    
                
            }  
            
            if(data.contains(" k"))
            
            {
                
            countforcharactersvacuum11 = countforcharactersvacuum11+1.0;    
                
            }  
            
            if(data.contains(" l"))
            
            {
                
            countforcharactersvacuum12 = countforcharactersvacuum12+1.0;    
                
            }  
            
            if(data.contains(" m"))
            
            {
                
            countforcharactersvacuum13 = countforcharactersvacuum13+1.0;    
                
            }  
            
            if(data.contains(" n"))
            
            {
                
            countforcharactersvacuum14 = countforcharactersvacuum14+1.0;    
                
            }  
             
            if(data.contains(" o"))
            
            {
                
            countforcharactersvacuum15 = countforcharactersvacuum15+1.0;    
                
            }  
            
            if(data.contains(" p"))
            
            {
                
            countforcharactersvacuum16 = countforcharactersvacuum16+1.0;    
                
            }  
            
            if(data.contains(" q"))
            
            {
                
            countforcharactersvacuum17 = countforcharactersvacuum17+1.0;    
                
            }  
            
            if(data.contains(" r"))
            
            {
                
            countforcharactersvacuum18 = countforcharactersvacuum18+1.0;    
                
            }  
            
            if(data.contains(" s"))
            
            {
                
            countforcharactersvacuum19 = countforcharactersvacuum19+1.0;    
                
            }  
            
            if(data.contains(" t"))
            
            {
                
            countforcharactersvacuum20 = countforcharactersvacuum20+1.0;    
                
            }  
            
            if(data.contains(" u"))
            
            {
                
            countforcharactersvacuum21 = countforcharactersvacuum21+1.0;    
                
            }  
            
            if(data.contains(" v"))
            
            {
                
            countforcharactersvacuum22 = countforcharactersvacuum22+1.0;    
                
            }  
            
            if(data.contains(" w"))
            
            {
                
            countforcharactersvacuum23 = countforcharactersvacuum23+1.0;    
                
            }  
            
            if(data.contains(" x"))
            
            {
                
            countforcharactersvacuum24 = countforcharactersvacuum24+1.0;    
                
            }  
            
            if(data.contains(" y"))
            
            {
                
            countforcharactersvacuum25 = countforcharactersvacuum25+1.0;    
                
            }  
            
            if(data.contains(" z"))
            
            {
                
            countforcharactersvacuum26 = countforcharactersvacuum26+1.0;    
                
            }  
            
            if(data.contains(" ."))
            
            {
                
            countforcharactersvacuum27 = countforcharactersvacuum27+1.0;    
                
            }  
            
            if(data.contains(" ,"))
            
            {
                
            countforcharactersvacuum28 = countforcharactersvacuum28+1.0;    
                
            }  
            
            if(data.contains("  "))
            
            {
                
            countforcharactersvacuum29 = countforcharactersvacuum29+1.0;    
                
            }  
            
            }
            
            System.out.println("\nThe number of pair characters aa is = " + countforcharactersa1 );
            System.out.println("\nThe number of pair characters ab is = " + countforcharactersa2 );
            System.out.println("\nThe number of pair characters ac is = " + countforcharactersa3 );
            System.out.println("\nThe number of pair characters ad is = " + countforcharactersa4 );
            System.out.println("\nThe number of pair characters ae is = " + countforcharactersa5 );
            System.out.println("\nThe number of pair characters af is = " + countforcharactersa6 );
            System.out.println("\nThe number of pair characters ag is = " + countforcharactersa7 );
            System.out.println("\nThe number of pair characters ah is = " + countforcharactersa8 );
            System.out.println("\nThe number of pair characters ai is = " + countforcharactersa9 );
            System.out.println("\nThe number of pair characters aj is = " + countforcharactersa10 );
            System.out.println("\nThe number of pair characters ak is = " + countforcharactersa11 );
            System.out.println("\nThe number of pair characters al is = " + countforcharactersa12 );
            System.out.println("\nThe number of pair characters am is = " + countforcharactersa13 );
            System.out.println("\nThe number of pair characters an is = " + countforcharactersa14 );
            System.out.println("\nThe number of pair characters ao is = " + countforcharactersa15 );
            System.out.println("\nThe number of pair characters ap is = " + countforcharactersa16 );
            System.out.println("\nThe number of pair characters aq is = " + countforcharactersa17 );
            System.out.println("\nThe number of pair characters ar is = " + countforcharactersa18 );
            System.out.println("\nThe number of pair characters as is = " + countforcharactersa19 );
            System.out.println("\nThe number of pair characters at is = " + countforcharactersa20 );
            System.out.println("\nThe number of pair characters au is = " + countforcharactersa21 );
            System.out.println("\nThe number of pair characters av is = " + countforcharactersa22 );
            System.out.println("\nThe number of pair characters aw is = " + countforcharactersa23 );
            System.out.println("\nThe number of pair characters ax is = " + countforcharactersa24 );
            System.out.println("\nThe number of pair characters ay is = " + countforcharactersa25 );
            System.out.println("\nThe number of pair characters az is = " + countforcharactersa26 );
            System.out.println("\nThe number of pair characters a. is = " + countforcharactersa27 );
            System.out.println("\nThe number of pair characters a, is = " + countforcharactersa28 );
            System.out.println("\nThe number of pair characters avacuum is = " + countforcharactersa29 );
            System.out.println("\nThe number of pair characters ba is = " + countforcharactersb1 );
            System.out.println("\nThe number of pair characters bb is = " + countforcharactersb2 );
            System.out.println("\nThe number of pair characters bc is = " + countforcharactersb3 );
            System.out.println("\nThe number of pair characters bd is = " + countforcharactersb4 );
            System.out.println("\nThe number of pair characters be is = " + countforcharactersb5 );
            System.out.println("\nThe number of pair characters bf is = " + countforcharactersb6 );
            System.out.println("\nThe number of pair characters bg is = " + countforcharactersb7 );
            System.out.println("\nThe number of pair characters bh is = " + countforcharactersb8 );
            System.out.println("\nThe number of pair characters bi is = " + countforcharactersb9 );
            System.out.println("\nThe number of pair characters bj is = " + countforcharactersb10 );
            System.out.println("\nThe number of pair characters bk is = " + countforcharactersb11 );
            System.out.println("\nThe number of pair characters bl is = " + countforcharactersb12 );
            System.out.println("\nThe number of pair characters bm is = " + countforcharactersb13 );
            System.out.println("\nThe number of pair characters bn is = " + countforcharactersb14 );
            System.out.println("\nThe number of pair characters bo is = " + countforcharactersb15 );
            System.out.println("\nThe number of pair characters bp is = " + countforcharactersb16 );
            System.out.println("\nThe number of pair characters bq is = " + countforcharactersb17 );
            System.out.println("\nThe number of pair characters br is = " + countforcharactersb18 );
            System.out.println("\nThe number of pair characters bs is = " + countforcharactersb19 );
            System.out.println("\nThe number of pair characters bt is = " + countforcharactersb20 );
            System.out.println("\nThe number of pair characters bu is = " + countforcharactersb21 );
            System.out.println("\nThe number of pair characters bv is = " + countforcharactersb22 );
            System.out.println("\nThe number of pair characters bw is = " + countforcharactersb23 );
            System.out.println("\nThe number of pair characters bx is = " + countforcharactersb24 );
            System.out.println("\nThe number of pair characters by is = " + countforcharactersb25 );
            System.out.println("\nThe number of pair characters bz is = " + countforcharactersb26 );
            System.out.println("\nThe number of pair characters b. is = " + countforcharactersb27 );
            System.out.println("\nThe number of pair characters b, is = " + countforcharactersb28 );
            System.out.println("\nThe number of pair characters bvacuum is = " + countforcharactersb29 );
            System.out.println("\nThe number of pair characters ca is = " + countforcharactersc1 );
            System.out.println("\nThe number of pair characters cb is = " + countforcharactersc2 );
            System.out.println("\nThe number of pair characters cc is = " + countforcharactersc3 );
            System.out.println("\nThe number of pair characters cd is = " + countforcharactersc4 );
            System.out.println("\nThe number of pair characters ce is = " + countforcharactersc5 );
            System.out.println("\nThe number of pair characters cf is = " + countforcharactersc6 );
            System.out.println("\nThe number of pair characters cg is = " + countforcharactersc7 );
            System.out.println("\nThe number of pair characters ch is = " + countforcharactersc8 );
            System.out.println("\nThe number of pair characters ci is = " + countforcharactersc9 );
            System.out.println("\nThe number of pair characters cj is = " + countforcharactersc10 );
            System.out.println("\nThe number of pair characters ck is = " + countforcharactersc11 );
            System.out.println("\nThe number of pair characters cl is = " + countforcharactersc12 );
            System.out.println("\nThe number of pair characters cm is = " + countforcharactersc13 );
            System.out.println("\nThe number of pair characters cn is = " + countforcharactersc14 );
            System.out.println("\nThe number of pair characters co is = " + countforcharactersc15 );
            System.out.println("\nThe number of pair characters cp is = " + countforcharactersc16 );
            System.out.println("\nThe number of pair characters cq is = " + countforcharactersc17 );
            System.out.println("\nThe number of pair characters cr is = " + countforcharactersc18 );
            System.out.println("\nThe number of pair characters cs is = " + countforcharactersc19 );
            System.out.println("\nThe number of pair characters ct is = " + countforcharactersc20 );
            System.out.println("\nThe number of pair characters cu is = " + countforcharactersc21 );
            System.out.println("\nThe number of pair characters cv is = " + countforcharactersc22 );
            System.out.println("\nThe number of pair characters cw is = " + countforcharactersc23 );
            System.out.println("\nThe number of pair characters cx is = " + countforcharactersc24 );
            System.out.println("\nThe number of pair characters cy is = " + countforcharactersc25 );
            System.out.println("\nThe number of pair characters cz is = " + countforcharactersc26 );
            System.out.println("\nThe number of pair characters c. is = " + countforcharactersc27 );
            System.out.println("\nThe number of pair characters c, is = " + countforcharactersc28 );
            System.out.println("\nThe number of pair characters cvacuum is = " + countforcharactersc29 );
            System.out.println("\nThe number of pair characters da is = " + countforcharactersd1 );
            System.out.println("\nThe number of pair characters db is = " + countforcharactersd2 );
            System.out.println("\nThe number of pair characters dc is = " + countforcharactersd3 );
            System.out.println("\nThe number of pair characters dd is = " + countforcharactersd4 );
            System.out.println("\nThe number of pair characters de is = " + countforcharactersd5 );
            System.out.println("\nThe number of pair characters df is = " + countforcharactersd6 );
            System.out.println("\nThe number of pair characters dg is = " + countforcharactersd7 );
            System.out.println("\nThe number of pair characters dh is = " + countforcharactersd8 );
            System.out.println("\nThe number of pair characters di is = " + countforcharactersd9 );
            System.out.println("\nThe number of pair characters dj is = " + countforcharactersd10 );
            System.out.println("\nThe number of pair characters dk is = " + countforcharactersd11 );
            System.out.println("\nThe number of pair characters dl is = " + countforcharactersd12 );
            System.out.println("\nThe number of pair characters dm is = " + countforcharactersd13 );
            System.out.println("\nThe number of pair characters dn is = " + countforcharactersd14 );
            System.out.println("\nThe number of pair characters do is = " + countforcharactersd15 );
            System.out.println("\nThe number of pair characters dp is = " + countforcharactersd16 );
            System.out.println("\nThe number of pair characters dq is = " + countforcharactersd17 );
            System.out.println("\nThe number of pair characters dr is = " + countforcharactersd18 );
            System.out.println("\nThe number of pair characters ds is = " + countforcharactersd19 );
            System.out.println("\nThe number of pair characters dt is = " + countforcharactersd20 );
            System.out.println("\nThe number of pair characters du is = " + countforcharactersd21 );
            System.out.println("\nThe number of pair characters dv is = " + countforcharactersd22 );
            System.out.println("\nThe number of pair characters dw is = " + countforcharactersd23 );
            System.out.println("\nThe number of pair characters dx is = " + countforcharactersd24 );
            System.out.println("\nThe number of pair characters dy is = " + countforcharactersd25 );
            System.out.println("\nThe number of pair characters dz is = " + countforcharactersd26 );
            System.out.println("\nThe number of pair characters d. is = " + countforcharactersd27 );
            System.out.println("\nThe number of pair characters d, is = " + countforcharactersd28 );
            System.out.println("\nThe number of pair characters dvacuum is = " + countforcharactersd29 );
            System.out.println("\nThe number of pair characters ea is = " + countforcharacterse1 );
            System.out.println("\nThe number of pair characters eb is = " + countforcharacterse2 );
            System.out.println("\nThe number of pair characters ec is = " + countforcharacterse3 );
            System.out.println("\nThe number of pair characters ed is = " + countforcharacterse4 );
            System.out.println("\nThe number of pair characters ee is = " + countforcharacterse5 );
            System.out.println("\nThe number of pair characters ef is = " + countforcharacterse6 );
            System.out.println("\nThe number of pair characters eg is = " + countforcharacterse7 );
            System.out.println("\nThe number of pair characters eh is = " + countforcharacterse8 );
            System.out.println("\nThe number of pair characters ei is = " + countforcharacterse9 );
            System.out.println("\nThe number of pair characters ej is = " + countforcharacterse10 );
            System.out.println("\nThe number of pair characters ek is = " + countforcharacterse11 );
            System.out.println("\nThe number of pair characters el is = " + countforcharacterse12 );
            System.out.println("\nThe number of pair characters em is = " + countforcharacterse13 );
            System.out.println("\nThe number of pair characters en is = " + countforcharacterse14 );
            System.out.println("\nThe number of pair characters eo is = " + countforcharacterse15 );
            System.out.println("\nThe number of pair characters ep is = " + countforcharacterse16 );
            System.out.println("\nThe number of pair characters eq is = " + countforcharacterse17 );
            System.out.println("\nThe number of pair characters er is = " + countforcharacterse18 );
            System.out.println("\nThe number of pair characters es is = " + countforcharacterse19 );
            System.out.println("\nThe number of pair characters et is = " + countforcharacterse20 );
            System.out.println("\nThe number of pair characters eu is = " + countforcharacterse21 );
            System.out.println("\nThe number of pair characters ev is = " + countforcharacterse22 );
            System.out.println("\nThe number of pair characters ew is = " + countforcharacterse23 );
            System.out.println("\nThe number of pair characters ex is = " + countforcharacterse24 );
            System.out.println("\nThe number of pair characters ey is = " + countforcharacterse25 );
            System.out.println("\nThe number of pair characters ez is = " + countforcharacterse26 );
            System.out.println("\nThe number of pair characters e. is = " + countforcharacterse27 );
            System.out.println("\nThe number of pair characters e, is = " + countforcharacterse28 );
            System.out.println("\nThe number of pair characters evacuum is = " + countforcharacterse29 );
            System.out.println("\nThe number of pair characters fa is = " + countforcharactersf1 );
            System.out.println("\nThe number of pair characters fb is = " + countforcharactersf2 );
            System.out.println("\nThe number of pair characters fc is = " + countforcharactersf3 );
            System.out.println("\nThe number of pair characters fd is = " + countforcharactersf4 );
            System.out.println("\nThe number of pair characters fe is = " + countforcharactersf5 );
            System.out.println("\nThe number of pair characters ff is = " + countforcharactersf6 );
            System.out.println("\nThe number of pair characters fg is = " + countforcharactersf7 );
            System.out.println("\nThe number of pair characters fh is = " + countforcharactersf8 );
            System.out.println("\nThe number of pair characters fi is = " + countforcharactersf9 );
            System.out.println("\nThe number of pair characters fj is = " + countforcharactersf10 );
            System.out.println("\nThe number of pair characters fk is = " + countforcharactersf11 );
            System.out.println("\nThe number of pair characters fl is = " + countforcharactersf12 );
            System.out.println("\nThe number of pair characters fm is = " + countforcharactersf13 );
            System.out.println("\nThe number of pair characters fn is = " + countforcharactersf14 );
            System.out.println("\nThe number of pair characters fo is = " + countforcharactersf15 );
            System.out.println("\nThe number of pair characters fp is = " + countforcharactersf16 );
            System.out.println("\nThe number of pair characters fq is = " + countforcharactersf17 );
            System.out.println("\nThe number of pair characters fr is = " + countforcharactersf18 );
            System.out.println("\nThe number of pair characters fs is = " + countforcharactersf19 );
            System.out.println("\nThe number of pair characters ft is = " + countforcharactersf20 );
            System.out.println("\nThe number of pair characters fu is = " + countforcharactersf21 );
            System.out.println("\nThe number of pair characters fv is = " + countforcharactersf22 );
            System.out.println("\nThe number of pair characters fw is = " + countforcharactersf23 );
            System.out.println("\nThe number of pair characters fx is = " + countforcharactersf24 );
            System.out.println("\nThe number of pair characters fy is = " + countforcharactersf25 );
            System.out.println("\nThe number of pair characters fz is = " + countforcharactersf26 );
            System.out.println("\nThe number of pair characters f. is = " + countforcharactersf27 );
            System.out.println("\nThe number of pair characters f, is = " + countforcharactersf28 );
            System.out.println("\nThe number of pair characters fvacuum is = " + countforcharactersf29 );
            System.out.println("\nThe number of pair characters ga is = " + countforcharactersg1 );
            System.out.println("\nThe number of pair characters gb is = " + countforcharactersg2 );
            System.out.println("\nThe number of pair characters gc is = " + countforcharactersg3 );
            System.out.println("\nThe number of pair characters gd is = " + countforcharactersg4 );
            System.out.println("\nThe number of pair characters ge is = " + countforcharactersg5 );
            System.out.println("\nThe number of pair characters gf is = " + countforcharactersg6 );
            System.out.println("\nThe number of pair characters gg is = " + countforcharactersg7 );
            System.out.println("\nThe number of pair characters gh is = " + countforcharactersg8 );
            System.out.println("\nThe number of pair characters gi is = " + countforcharactersg9 );
            System.out.println("\nThe number of pair characters gj is = " + countforcharactersg10 );
            System.out.println("\nThe number of pair characters gk is = " + countforcharactersg11 );
            System.out.println("\nThe number of pair characters gl is = " + countforcharactersg12 );
            System.out.println("\nThe number of pair characters gm is = " + countforcharactersg13 );
            System.out.println("\nThe number of pair characters gn is = " + countforcharactersg14 );
            System.out.println("\nThe number of pair characters go is = " + countforcharactersg15 );
            System.out.println("\nThe number of pair characters gp is = " + countforcharactersg16 );
            System.out.println("\nThe number of pair characters gq is = " + countforcharactersg17 );
            System.out.println("\nThe number of pair characters gr is = " + countforcharactersg18 );
            System.out.println("\nThe number of pair characters gs is = " + countforcharactersg19 );
            System.out.println("\nThe number of pair characters gt is = " + countforcharactersg20 );
            System.out.println("\nThe number of pair characters gu is = " + countforcharactersg21 );
            System.out.println("\nThe number of pair characters gv is = " + countforcharactersg22 );
            System.out.println("\nThe number of pair characters gw is = " + countforcharactersg23 );
            System.out.println("\nThe number of pair characters gx is = " + countforcharactersg24 );
            System.out.println("\nThe number of pair characters gy is = " + countforcharactersg25 );
            System.out.println("\nThe number of pair characters gz is = " + countforcharactersg26 );
            System.out.println("\nThe number of pair characters g. is = " + countforcharactersg27 );
            System.out.println("\nThe number of pair characters g, is = " + countforcharactersg28 );
            System.out.println("\nThe number of pair characters gvacuum is = " + countforcharactersg29 );
            System.out.println("\nThe number of pair characters ha is = " + countforcharactersh1 );
            System.out.println("\nThe number of pair characters hb is = " + countforcharactersh2 );
            System.out.println("\nThe number of pair characters hc is = " + countforcharactersh3 );
            System.out.println("\nThe number of pair characters hd is = " + countforcharactersh4 );
            System.out.println("\nThe number of pair characters he is = " + countforcharactersh5 );
            System.out.println("\nThe number of pair characters hf is = " + countforcharactersh6 );
            System.out.println("\nThe number of pair characters hg is = " + countforcharactersh7 );
            System.out.println("\nThe number of pair characters hh is = " + countforcharactersh8 );
            System.out.println("\nThe number of pair characters hi is = " + countforcharactersh9 );
            System.out.println("\nThe number of pair characters hj is = " + countforcharactersh10 );
            System.out.println("\nThe number of pair characters hk is = " + countforcharactersh11 );
            System.out.println("\nThe number of pair characters hl is = " + countforcharactersh12 );
            System.out.println("\nThe number of pair characters hm is = " + countforcharactersh13 );
            System.out.println("\nThe number of pair characters hn is = " + countforcharactersh14 );
            System.out.println("\nThe number of pair characters ho is = " + countforcharactersh15 );
            System.out.println("\nThe number of pair characters hp is = " + countforcharactersh16 );
            System.out.println("\nThe number of pair characters hq is = " + countforcharactersh17 );
            System.out.println("\nThe number of pair characters hr is = " + countforcharactersh18 );
            System.out.println("\nThe number of pair characters hs is = " + countforcharactersh19 );
            System.out.println("\nThe number of pair characters ht is = " + countforcharactersh20 );
            System.out.println("\nThe number of pair characters hu is = " + countforcharactersh21 );
            System.out.println("\nThe number of pair characters hv is = " + countforcharactersh22 );
            System.out.println("\nThe number of pair characters hw is = " + countforcharactersh23 );
            System.out.println("\nThe number of pair characters hx is = " + countforcharactersh24 );
            System.out.println("\nThe number of pair characters hy is = " + countforcharactersh25 );
            System.out.println("\nThe number of pair characters hz is = " + countforcharactersh26 );
            System.out.println("\nThe number of pair characters h. is = " + countforcharactersh27 );
            System.out.println("\nThe number of pair characters h, is = " + countforcharactersh28 );
            System.out.println("\nThe number of pair characters hvacuum is = " + countforcharactersh29 );
            System.out.println("\nThe number of pair characters ia is = " + countforcharactersi1 );
            System.out.println("\nThe number of pair characters ib is = " + countforcharactersi2 );
            System.out.println("\nThe number of pair characters ic is = " + countforcharactersi3 );
            System.out.println("\nThe number of pair characters id is = " + countforcharactersi4 );
            System.out.println("\nThe number of pair characters ie is = " + countforcharactersi5 );
            System.out.println("\nThe number of pair characters if is = " + countforcharactersi6 );
            System.out.println("\nThe number of pair characters ig is = " + countforcharactersi7 );
            System.out.println("\nThe number of pair characters ih is = " + countforcharactersi8 );
            System.out.println("\nThe number of pair characters ii is = " + countforcharactersi9 );
            System.out.println("\nThe number of pair characters ij is = " + countforcharactersi10 );
            System.out.println("\nThe number of pair characters ik is = " + countforcharactersi11 );
            System.out.println("\nThe number of pair characters il is = " + countforcharactersi12 );
            System.out.println("\nThe number of pair characters im is = " + countforcharactersi13 );
            System.out.println("\nThe number of pair characters in is = " + countforcharactersi14 );
            System.out.println("\nThe number of pair characters io is = " + countforcharactersi15 );
            System.out.println("\nThe number of pair characters ip is = " + countforcharactersi16 );
            System.out.println("\nThe number of pair characters iq is = " + countforcharactersi17 );
            System.out.println("\nThe number of pair characters ir is = " + countforcharactersi18 );
            System.out.println("\nThe number of pair characters is is = " + countforcharactersi19 );
            System.out.println("\nThe number of pair characters it is = " + countforcharactersi20 );
            System.out.println("\nThe number of pair characters iu is = " + countforcharactersi21 );
            System.out.println("\nThe number of pair characters iv is = " + countforcharactersi22 );
            System.out.println("\nThe number of pair characters iw is = " + countforcharactersi23 );
            System.out.println("\nThe number of pair characters ix is = " + countforcharactersi24 );
            System.out.println("\nThe number of pair characters iy is = " + countforcharactersi25 );
            System.out.println("\nThe number of pair characters iz is = " + countforcharactersi26 );
            System.out.println("\nThe number of pair characters i. is = " + countforcharactersi27 );
            System.out.println("\nThe number of pair characters i, is = " + countforcharactersi28 );
            System.out.println("\nThe number of pair characters ivacuum is = " + countforcharactersi29 );
            System.out.println("\nThe number of pair characters ja is = " + countforcharactersj1 );
            System.out.println("\nThe number of pair characters jb is = " + countforcharactersj2 );
            System.out.println("\nThe number of pair characters jc is = " + countforcharactersj3 );
            System.out.println("\nThe number of pair characters jd is = " + countforcharactersj4 );
            System.out.println("\nThe number of pair characters je is = " + countforcharactersj5 );
            System.out.println("\nThe number of pair characters jf is = " + countforcharactersj6 );
            System.out.println("\nThe number of pair characters jg is = " + countforcharactersj7 );
            System.out.println("\nThe number of pair characters jh is = " + countforcharactersj8 );
            System.out.println("\nThe number of pair characters ji is = " + countforcharactersj9 );
            System.out.println("\nThe number of pair characters jj is = " + countforcharactersj10 );
            System.out.println("\nThe number of pair characters jk is = " + countforcharactersj11 );
            System.out.println("\nThe number of pair characters jl is = " + countforcharactersj12 );
            System.out.println("\nThe number of pair characters jm is = " + countforcharactersj13 );
            System.out.println("\nThe number of pair characters jn is = " + countforcharactersj14 );
            System.out.println("\nThe number of pair characters jo is = " + countforcharactersj15 );
            System.out.println("\nThe number of pair characters jp is = " + countforcharactersj16 );
            System.out.println("\nThe number of pair characters jq is = " + countforcharactersj17 );
            System.out.println("\nThe number of pair characters jr is = " + countforcharactersj18 );
            System.out.println("\nThe number of pair characters js is = " + countforcharactersj19 );
            System.out.println("\nThe number of pair characters jt is = " + countforcharactersj20 );
            System.out.println("\nThe number of pair characters ju is = " + countforcharactersj21 );
            System.out.println("\nThe number of pair characters jv is = " + countforcharactersj22 );
            System.out.println("\nThe number of pair characters jw is = " + countforcharactersj23 );
            System.out.println("\nThe number of pair characters jx is = " + countforcharactersj24 );
            System.out.println("\nThe number of pair characters jy is = " + countforcharactersj25 );
            System.out.println("\nThe number of pair characters jz is = " + countforcharactersj26 );
            System.out.println("\nThe number of pair characters j. is = " + countforcharactersj27 );
            System.out.println("\nThe number of pair characters j, is = " + countforcharactersj28 );
            System.out.println("\nThe number of pair characters jvacuum is = " + countforcharactersj29 );
            System.out.println("\nThe number of pair characters ka is = " + countforcharactersk1 );
            System.out.println("\nThe number of pair characters kb is = " + countforcharactersk2 );
            System.out.println("\nThe number of pair characters kc is = " + countforcharactersk3 );
            System.out.println("\nThe number of pair characters kd is = " + countforcharactersk4 );
            System.out.println("\nThe number of pair characters ke is = " + countforcharactersk5 );
            System.out.println("\nThe number of pair characters kf is = " + countforcharactersk6 );
            System.out.println("\nThe number of pair characters kg is = " + countforcharactersk7 );
            System.out.println("\nThe number of pair characters kh is = " + countforcharactersk8 );
            System.out.println("\nThe number of pair characters ki is = " + countforcharactersk9 );
            System.out.println("\nThe number of pair characters kj is = " + countforcharactersk10 );
            System.out.println("\nThe number of pair characters kk is = " + countforcharactersk11 );
            System.out.println("\nThe number of pair characters kl is = " + countforcharactersk12 );
            System.out.println("\nThe number of pair characters km is = " + countforcharactersk13 );
            System.out.println("\nThe number of pair characters kn is = " + countforcharactersk14 );
            System.out.println("\nThe number of pair characters ko is = " + countforcharactersk15 );
            System.out.println("\nThe number of pair characters kp is = " + countforcharactersk16 );
            System.out.println("\nThe number of pair characters kq is = " + countforcharactersk17 );
            System.out.println("\nThe number of pair characters kr is = " + countforcharactersk18 );
            System.out.println("\nThe number of pair characters ks is = " + countforcharactersk19 );
            System.out.println("\nThe number of pair characters kt is = " + countforcharactersk20 );
            System.out.println("\nThe number of pair characters ku is = " + countforcharactersk21 );
            System.out.println("\nThe number of pair characters kv is = " + countforcharactersk22 );
            System.out.println("\nThe number of pair characters kw is = " + countforcharactersk23 );
            System.out.println("\nThe number of pair characters kx is = " + countforcharactersk24 );
            System.out.println("\nThe number of pair characters ky is = " + countforcharactersk25 );
            System.out.println("\nThe number of pair characters kz is = " + countforcharactersk26 );
            System.out.println("\nThe number of pair characters k. is = " + countforcharactersk27 );
            System.out.println("\nThe number of pair characters k, is = " + countforcharactersk28 );
            System.out.println("\nThe number of pair characters kvacuum is = " + countforcharactersk29 );
            System.out.println("\nThe number of pair characters la is = " + countforcharactersl1 );
            System.out.println("\nThe number of pair characters lb is = " + countforcharactersl2 );
            System.out.println("\nThe number of pair characters lc is = " + countforcharactersl3 );
            System.out.println("\nThe number of pair characters ld is = " + countforcharactersl4 );
            System.out.println("\nThe number of pair characters le is = " + countforcharactersl5 );
            System.out.println("\nThe number of pair characters lf is = " + countforcharactersl6 );
            System.out.println("\nThe number of pair characters lg is = " + countforcharactersl7 );
            System.out.println("\nThe number of pair characters lh is = " + countforcharactersl8 );
            System.out.println("\nThe number of pair characters li is = " + countforcharactersl9 );
            System.out.println("\nThe number of pair characters lj is = " + countforcharactersl10 );
            System.out.println("\nThe number of pair characters lk is = " + countforcharactersl11 );
            System.out.println("\nThe number of pair characters ll is = " + countforcharactersl12 );
            System.out.println("\nThe number of pair characters lm is = " + countforcharactersl13 );
            System.out.println("\nThe number of pair characters ln is = " + countforcharactersl14 );
            System.out.println("\nThe number of pair characters lo is = " + countforcharactersl15 );
            System.out.println("\nThe number of pair characters lp is = " + countforcharactersl16 );
            System.out.println("\nThe number of pair characters lq is = " + countforcharactersl17 );
            System.out.println("\nThe number of pair characters lr is = " + countforcharactersl18 );
            System.out.println("\nThe number of pair characters ls is = " + countforcharactersl19 );
            System.out.println("\nThe number of pair characters lt is = " + countforcharactersl20 );
            System.out.println("\nThe number of pair characters lu is = " + countforcharactersl21 );
            System.out.println("\nThe number of pair characters lv is = " + countforcharactersl22 );
            System.out.println("\nThe number of pair characters lw is = " + countforcharactersl23 );
            System.out.println("\nThe number of pair characters lx is = " + countforcharactersl24 );
            System.out.println("\nThe number of pair characters ly is = " + countforcharactersl25 );
            System.out.println("\nThe number of pair characters lz is = " + countforcharactersl26 );
            System.out.println("\nThe number of pair characters l. is = " + countforcharactersl27 );
            System.out.println("\nThe number of pair characters l, is = " + countforcharactersl28 );
            System.out.println("\nThe number of pair characters lvacuum is = " + countforcharactersl29 );
            System.out.println("\nThe number of pair characters ma is = " + countforcharactersm1 );
            System.out.println("\nThe number of pair characters mb is = " + countforcharactersm2 );
            System.out.println("\nThe number of pair characters mc is = " + countforcharactersm3 );
            System.out.println("\nThe number of pair characters md is = " + countforcharactersm4 );
            System.out.println("\nThe number of pair characters me is = " + countforcharactersm5 );
            System.out.println("\nThe number of pair characters mf is = " + countforcharactersm6 );
            System.out.println("\nThe number of pair characters mg is = " + countforcharactersm7 );
            System.out.println("\nThe number of pair characters mh is = " + countforcharactersm8 );
            System.out.println("\nThe number of pair characters mi is = " + countforcharactersm9 );
            System.out.println("\nThe number of pair characters mj is = " + countforcharactersm10 );
            System.out.println("\nThe number of pair characters mk is = " + countforcharactersm11 );
            System.out.println("\nThe number of pair characters ml is = " + countforcharactersm12 );
            System.out.println("\nThe number of pair characters mm is = " + countforcharactersm13 );
            System.out.println("\nThe number of pair characters mn is = " + countforcharactersm14 );
            System.out.println("\nThe number of pair characters mo is = " + countforcharactersm15 );
            System.out.println("\nThe number of pair characters mp is = " + countforcharactersm16 );
            System.out.println("\nThe number of pair characters mq is = " + countforcharactersm17 );
            System.out.println("\nThe number of pair characters mr is = " + countforcharactersm18 );
            System.out.println("\nThe number of pair characters ms is = " + countforcharactersm19 );
            System.out.println("\nThe number of pair characters mt is = " + countforcharactersm20 );
            System.out.println("\nThe number of pair characters mu is = " + countforcharactersm21 );
            System.out.println("\nThe number of pair characters mv is = " + countforcharactersm22 );
            System.out.println("\nThe number of pair characters mw is = " + countforcharactersm23 );
            System.out.println("\nThe number of pair characters mx is = " + countforcharactersm24 );
            System.out.println("\nThe number of pair characters my is = " + countforcharactersm25 );
            System.out.println("\nThe number of pair characters mz is = " + countforcharactersm26 );
            System.out.println("\nThe number of pair characters m. is = " + countforcharactersm27 );
            System.out.println("\nThe number of pair characters m, is = " + countforcharactersm28 );
            System.out.println("\nThe number of pair characters mvacuum is = " + countforcharactersm29 );
            System.out.println("\nThe number of pair characters na is = " + countforcharactersn1 );
            System.out.println("\nThe number of pair characters nb is = " + countforcharactersn2 );
            System.out.println("\nThe number of pair characters nc is = " + countforcharactersn3 );
            System.out.println("\nThe number of pair characters nd is = " + countforcharactersn4 );
            System.out.println("\nThe number of pair characters ne is = " + countforcharactersn5 );
            System.out.println("\nThe number of pair characters nf is = " + countforcharactersn6 );
            System.out.println("\nThe number of pair characters ng is = " + countforcharactersn7 );
            System.out.println("\nThe number of pair characters nh is = " + countforcharactersn8 );
            System.out.println("\nThe number of pair characters ni is = " + countforcharactersn9 );
            System.out.println("\nThe number of pair characters nj is = " + countforcharactersn10 );
            System.out.println("\nThe number of pair characters nk is = " + countforcharactersn11 );
            System.out.println("\nThe number of pair characters nl is = " + countforcharactersn12 );
            System.out.println("\nThe number of pair characters nm is = " + countforcharactersn13 );
            System.out.println("\nThe number of pair characters nn is = " + countforcharactersn14 );
            System.out.println("\nThe number of pair characters no is = " + countforcharactersn15 );
            System.out.println("\nThe number of pair characters np is = " + countforcharactersn16 );
            System.out.println("\nThe number of pair characters nq is = " + countforcharactersn17 );
            System.out.println("\nThe number of pair characters nr is = " + countforcharactersn18 );
            System.out.println("\nThe number of pair characters ns is = " + countforcharactersn19 );
            System.out.println("\nThe number of pair characters nt is = " + countforcharactersn20 );
            System.out.println("\nThe number of pair characters nu is = " + countforcharactersn21 );
            System.out.println("\nThe number of pair characters nv is = " + countforcharactersn22 );
            System.out.println("\nThe number of pair characters nw is = " + countforcharactersn23 );
            System.out.println("\nThe number of pair characters nx is = " + countforcharactersn24 );
            System.out.println("\nThe number of pair characters ny is = " + countforcharactersn25 );
            System.out.println("\nThe number of pair characters nz is = " + countforcharactersn26 );
            System.out.println("\nThe number of pair characters n. is = " + countforcharactersn27 );
            System.out.println("\nThe number of pair characters n, is = " + countforcharactersn28 );
            System.out.println("\nThe number of pair characters nvacuum is = " + countforcharactersn29 );
            System.out.println("\nThe number of pair characters oa is = " + countforcharacterso1 );
            System.out.println("\nThe number of pair characters ob is = " + countforcharacterso2 );
            System.out.println("\nThe number of pair characters oc is = " + countforcharacterso3 );
            System.out.println("\nThe number of pair characters od is = " + countforcharacterso4 );
            System.out.println("\nThe number of pair characters oe is = " + countforcharacterso5 );
            System.out.println("\nThe number of pair characters of is = " + countforcharacterso6 );
            System.out.println("\nThe number of pair characters og is = " + countforcharacterso7 );
            System.out.println("\nThe number of pair characters oh is = " + countforcharacterso8 );
            System.out.println("\nThe number of pair characters oi is = " + countforcharacterso9 );
            System.out.println("\nThe number of pair characters oj is = " + countforcharacterso10 );
            System.out.println("\nThe number of pair characters ok is = " + countforcharacterso11 );
            System.out.println("\nThe number of pair characters ol is = " + countforcharacterso12 );
            System.out.println("\nThe number of pair characters om is = " + countforcharacterso13 );
            System.out.println("\nThe number of pair characters on is = " + countforcharacterso14 );
            System.out.println("\nThe number of pair characters oo is = " + countforcharacterso15 );
            System.out.println("\nThe number of pair characters op is = " + countforcharacterso16 );
            System.out.println("\nThe number of pair characters oq is = " + countforcharacterso17 );
            System.out.println("\nThe number of pair characters or is = " + countforcharacterso18 );
            System.out.println("\nThe number of pair characters os is = " + countforcharacterso19 );
            System.out.println("\nThe number of pair characters ot is = " + countforcharacterso20 );
            System.out.println("\nThe number of pair characters ou is = " + countforcharacterso21 );
            System.out.println("\nThe number of pair characters ov is = " + countforcharacterso22 );
            System.out.println("\nThe number of pair characters ow is = " + countforcharacterso23 );
            System.out.println("\nThe number of pair characters ox is = " + countforcharacterso24 );
            System.out.println("\nThe number of pair characters oy is = " + countforcharacterso25 );
            System.out.println("\nThe number of pair characters oz is = " + countforcharacterso26 );
            System.out.println("\nThe number of pair characters o. is = " + countforcharacterso27 );
            System.out.println("\nThe number of pair characters o, is = " + countforcharacterso28 );
            System.out.println("\nThe number of pair characters ovacuum is = " + countforcharacterso29 );
            System.out.println("\nThe number of pair characters pa is = " + countforcharactersp1 );
            System.out.println("\nThe number of pair characters pb is = " + countforcharactersp2 );
            System.out.println("\nThe number of pair characters pc is = " + countforcharactersp3 );
            System.out.println("\nThe number of pair characters pd is = " + countforcharactersp4 );
            System.out.println("\nThe number of pair characters pe is = " + countforcharactersp5 );
            System.out.println("\nThe number of pair characters pf is = " + countforcharactersp6 );
            System.out.println("\nThe number of pair characters pg is = " + countforcharactersp7 );
            System.out.println("\nThe number of pair characters ph is = " + countforcharactersp8 );
            System.out.println("\nThe number of pair characters pi is = " + countforcharactersp9 );
            System.out.println("\nThe number of pair characters pj is = " + countforcharactersp10 );
            System.out.println("\nThe number of pair characters pk is = " + countforcharactersp11 );
            System.out.println("\nThe number of pair characters pl is = " + countforcharactersp12 );
            System.out.println("\nThe number of pair characters pm is = " + countforcharactersp13 );
            System.out.println("\nThe number of pair characters pn is = " + countforcharactersp14 );
            System.out.println("\nThe number of pair characters po is = " + countforcharactersp15 );
            System.out.println("\nThe number of pair characters pp is = " + countforcharactersp16 );
            System.out.println("\nThe number of pair characters pq is = " + countforcharactersp17 );
            System.out.println("\nThe number of pair characters pr is = " + countforcharactersp18 );
            System.out.println("\nThe number of pair characters ps is = " + countforcharactersp19 );
            System.out.println("\nThe number of pair characters pt is = " + countforcharactersp20 );
            System.out.println("\nThe number of pair characters pu is = " + countforcharactersp21 );
            System.out.println("\nThe number of pair characters pv is = " + countforcharactersp22 );
            System.out.println("\nThe number of pair characters pw is = " + countforcharactersp23 );
            System.out.println("\nThe number of pair characters px is = " + countforcharactersp24 );
            System.out.println("\nThe number of pair characters py is = " + countforcharactersp25 );
            System.out.println("\nThe number of pair characters pz is = " + countforcharactersp26 );
            System.out.println("\nThe number of pair characters p. is = " + countforcharactersp27 );
            System.out.println("\nThe number of pair characters p, is = " + countforcharactersp28 );
            System.out.println("\nThe number of pair characters pvacuum is = " + countforcharactersp29 );
            System.out.println("\nThe number of pair characters qa is = " + countforcharactersq1 );
            System.out.println("\nThe number of pair characters qb is = " + countforcharactersq2 );
            System.out.println("\nThe number of pair characters qc is = " + countforcharactersq3 );
            System.out.println("\nThe number of pair characters qd is = " + countforcharactersq4 );
            System.out.println("\nThe number of pair characters qe is = " + countforcharactersq5 );
            System.out.println("\nThe number of pair characters qf is = " + countforcharactersq6 );
            System.out.println("\nThe number of pair characters qg is = " + countforcharactersq7 );
            System.out.println("\nThe number of pair characters qh is = " + countforcharactersq8 );
            System.out.println("\nThe number of pair characters qi is = " + countforcharactersq9 );
            System.out.println("\nThe number of pair characters qj is = " + countforcharactersq10 );
            System.out.println("\nThe number of pair characters qk is = " + countforcharactersq11 );
            System.out.println("\nThe number of pair characters ql is = " + countforcharactersq12 );
            System.out.println("\nThe number of pair characters qm is = " + countforcharactersq13 );
            System.out.println("\nThe number of pair characters qn is = " + countforcharactersq14 );
            System.out.println("\nThe number of pair characters qo is = " + countforcharactersq15 );
            System.out.println("\nThe number of pair characters qp is = " + countforcharactersq16 );
            System.out.println("\nThe number of pair characters qq is = " + countforcharactersq17 );
            System.out.println("\nThe number of pair characters qr is = " + countforcharactersq18 );
            System.out.println("\nThe number of pair characters qs is = " + countforcharactersq19 );
            System.out.println("\nThe number of pair characters qt is = " + countforcharactersq20 );
            System.out.println("\nThe number of pair characters qu is = " + countforcharactersq21 );
            System.out.println("\nThe number of pair characters qv is = " + countforcharactersq22 );
            System.out.println("\nThe number of pair characters qw is = " + countforcharactersq23 );
            System.out.println("\nThe number of pair characters qx is = " + countforcharactersq24 );
            System.out.println("\nThe number of pair characters qy is = " + countforcharactersq25 );
            System.out.println("\nThe number of pair characters qz is = " + countforcharactersq26 );
            System.out.println("\nThe number of pair characters q. is = " + countforcharactersq27 );
            System.out.println("\nThe number of pair characters q, is = " + countforcharactersq28 );
            System.out.println("\nThe number of pair characters qvacuum is = " + countforcharactersq29 );
            System.out.println("\nThe number of pair characters ra is = " + countforcharactersr1 );
            System.out.println("\nThe number of pair characters rb is = " + countforcharactersr2 );
            System.out.println("\nThe number of pair characters rc is = " + countforcharactersr3 );
            System.out.println("\nThe number of pair characters rd is = " + countforcharactersr4 );
            System.out.println("\nThe number of pair characters re is = " + countforcharactersr5 );
            System.out.println("\nThe number of pair characters rf is = " + countforcharactersr6 );
            System.out.println("\nThe number of pair characters rg is = " + countforcharactersr7 );
            System.out.println("\nThe number of pair characters rh is = " + countforcharactersr8 );
            System.out.println("\nThe number of pair characters ri is = " + countforcharactersr9 );
            System.out.println("\nThe number of pair characters rj is = " + countforcharactersr10 );
            System.out.println("\nThe number of pair characters rk is = " + countforcharactersr11 );
            System.out.println("\nThe number of pair characters rl is = " + countforcharactersr12 );
            System.out.println("\nThe number of pair characters rm is = " + countforcharactersr13 );
            System.out.println("\nThe number of pair characters rn is = " + countforcharactersr14 );
            System.out.println("\nThe number of pair characters ro is = " + countforcharactersr15 );
            System.out.println("\nThe number of pair characters rp is = " + countforcharactersr16 );
            System.out.println("\nThe number of pair characters rq is = " + countforcharactersr17 );
            System.out.println("\nThe number of pair characters rr is = " + countforcharactersr18 );
            System.out.println("\nThe number of pair characters rs is = " + countforcharactersr19 );
            System.out.println("\nThe number of pair characters rt is = " + countforcharactersr20 );
            System.out.println("\nThe number of pair characters ru is = " + countforcharactersr21 );
            System.out.println("\nThe number of pair characters rv is = " + countforcharactersr22 );
            System.out.println("\nThe number of pair characters rw is = " + countforcharactersr23 );
            System.out.println("\nThe number of pair characters rx is = " + countforcharactersr24 );
            System.out.println("\nThe number of pair characters ry is = " + countforcharactersr25 );
            System.out.println("\nThe number of pair characters rz is = " + countforcharactersr26 );
            System.out.println("\nThe number of pair characters r. is = " + countforcharactersr27 );
            System.out.println("\nThe number of pair characters r, is = " + countforcharactersr28 );
            System.out.println("\nThe number of pair characters rvacuum is = " + countforcharactersr29 );
            System.out.println("\nThe number of pair characters sa is = " + countforcharacterss1 );
            System.out.println("\nThe number of pair characters sb is = " + countforcharacterss2 );
            System.out.println("\nThe number of pair characters sc is = " + countforcharacterss3 );
            System.out.println("\nThe number of pair characters sd is = " + countforcharacterss4 );
            System.out.println("\nThe number of pair characters se is = " + countforcharacterss5 );
            System.out.println("\nThe number of pair characters sf is = " + countforcharacterss6 );
            System.out.println("\nThe number of pair characters sg is = " + countforcharacterss7 );
            System.out.println("\nThe number of pair characters sh is = " + countforcharacterss8 );
            System.out.println("\nThe number of pair characters si is = " + countforcharacterss9 );
            System.out.println("\nThe number of pair characters sj is = " + countforcharacterss10 );
            System.out.println("\nThe number of pair characters sk is = " + countforcharacterss11 );
            System.out.println("\nThe number of pair characters sl is = " + countforcharacterss12 );
            System.out.println("\nThe number of pair characters sm is = " + countforcharacterss13 );
            System.out.println("\nThe number of pair characters sn is = " + countforcharacterss14 );
            System.out.println("\nThe number of pair characters so is = " + countforcharacterss15 );
            System.out.println("\nThe number of pair characters sp is = " + countforcharacterss16 );
            System.out.println("\nThe number of pair characters sq is = " + countforcharacterss17 );
            System.out.println("\nThe number of pair characters sr is = " + countforcharacterss18 );
            System.out.println("\nThe number of pair characters ss is = " + countforcharacterss19 );
            System.out.println("\nThe number of pair characters st is = " + countforcharacterss20 );
            System.out.println("\nThe number of pair characters su is = " + countforcharacterss21 );
            System.out.println("\nThe number of pair characters sv is = " + countforcharacterss22 );
            System.out.println("\nThe number of pair characters sw is = " + countforcharacterss23 );
            System.out.println("\nThe number of pair characters sx is = " + countforcharacterss24 );
            System.out.println("\nThe number of pair characters sy is = " + countforcharacterss25 );
            System.out.println("\nThe number of pair characters sz is = " + countforcharacterss26 );
            System.out.println("\nThe number of pair characters s. is = " + countforcharacterss27 );
            System.out.println("\nThe number of pair characters s, is = " + countforcharacterss28 );
            System.out.println("\nThe number of pair characters svacuum is = " + countforcharacterss29 );
            System.out.println("\nThe number of pair characters ta is = " + countforcharacterst1 );
            System.out.println("\nThe number of pair characters tb is = " + countforcharacterst2 );
            System.out.println("\nThe number of pair characters tc is = " + countforcharacterst3 );
            System.out.println("\nThe number of pair characters td is = " + countforcharacterst4 );
            System.out.println("\nThe number of pair characters te is = " + countforcharacterst5 );
            System.out.println("\nThe number of pair characters tf is = " + countforcharacterst6 );
            System.out.println("\nThe number of pair characters tg is = " + countforcharacterst7 );
            System.out.println("\nThe number of pair characters th is = " + countforcharacterst8 );
            System.out.println("\nThe number of pair characters ti is = " + countforcharacterst9 );
            System.out.println("\nThe number of pair characters tj is = " + countforcharacterst10 );
            System.out.println("\nThe number of pair characters tk is = " + countforcharacterst11 );
            System.out.println("\nThe number of pair characters tl is = " + countforcharacterst12 );
            System.out.println("\nThe number of pair characters tm is = " + countforcharacterst13 );
            System.out.println("\nThe number of pair characters tn is = " + countforcharacterst14 );
            System.out.println("\nThe number of pair characters to is = " + countforcharacterst15 );
            System.out.println("\nThe number of pair characters tp is = " + countforcharacterst16 );
            System.out.println("\nThe number of pair characters tq is = " + countforcharacterst17 );
            System.out.println("\nThe number of pair characters tr is = " + countforcharacterst18 );
            System.out.println("\nThe number of pair characters ts is = " + countforcharacterst19 );
            System.out.println("\nThe number of pair characters tt is = " + countforcharacterst20 );
            System.out.println("\nThe number of pair characters tu is = " + countforcharacterst21 );
            System.out.println("\nThe number of pair characters tv is = " + countforcharacterst22 );
            System.out.println("\nThe number of pair characters tw is = " + countforcharacterst23 );
            System.out.println("\nThe number of pair characters tx is = " + countforcharacterst24 );
            System.out.println("\nThe number of pair characters ty is = " + countforcharacterst25 );
            System.out.println("\nThe number of pair characters tz is = " + countforcharacterst26 );
            System.out.println("\nThe number of pair characters t. is = " + countforcharacterst27 );
            System.out.println("\nThe number of pair characters t, is = " + countforcharacterst28 );
            System.out.println("\nThe number of pair characters tvacuum is = " + countforcharacterst29 );
            System.out.println("\nThe number of pair characters ua is = " + countforcharactersu1 );
            System.out.println("\nThe number of pair characters ub is = " + countforcharactersu2 );
            System.out.println("\nThe number of pair characters uc is = " + countforcharactersu3 );
            System.out.println("\nThe number of pair characters ud is = " + countforcharactersu4 );
            System.out.println("\nThe number of pair characters ue is = " + countforcharactersu5 );
            System.out.println("\nThe number of pair characters uf is = " + countforcharactersu6 );
            System.out.println("\nThe number of pair characters ug is = " + countforcharactersu7 );
            System.out.println("\nThe number of pair characters uh is = " + countforcharactersu8 );
            System.out.println("\nThe number of pair characters ui is = " + countforcharactersu9 );
            System.out.println("\nThe number of pair characters uj is = " + countforcharactersu10 );
            System.out.println("\nThe number of pair characters uk is = " + countforcharactersu11 );
            System.out.println("\nThe number of pair characters ul is = " + countforcharactersu12 );
            System.out.println("\nThe number of pair characters um is = " + countforcharactersu13 );
            System.out.println("\nThe number of pair characters un is = " + countforcharactersu14 );
            System.out.println("\nThe number of pair characters uo is = " + countforcharactersu15 );
            System.out.println("\nThe number of pair characters up is = " + countforcharactersu16 );
            System.out.println("\nThe number of pair characters uq is = " + countforcharactersu17 );
            System.out.println("\nThe number of pair characters ur is = " + countforcharactersu18 );
            System.out.println("\nThe number of pair characters us is = " + countforcharactersu19 );
            System.out.println("\nThe number of pair characters ut is = " + countforcharactersu20 );
            System.out.println("\nThe number of pair characters uu is = " + countforcharactersu21 );
            System.out.println("\nThe number of pair characters uv is = " + countforcharactersu22 );
            System.out.println("\nThe number of pair characters uw is = " + countforcharactersu23 );
            System.out.println("\nThe number of pair characters ux is = " + countforcharactersu24 );
            System.out.println("\nThe number of pair characters uy is = " + countforcharactersu25 );
            System.out.println("\nThe number of pair characters uz is = " + countforcharactersu26 );
            System.out.println("\nThe number of pair characters u. is = " + countforcharactersu27 );
            System.out.println("\nThe number of pair characters u, is = " + countforcharactersu28 );
            System.out.println("\nThe number of pair characters uvacuum is = " + countforcharactersu29 );
            System.out.println("\nThe number of pair characters va is = " + countforcharactersv1 );
            System.out.println("\nThe number of pair characters vb is = " + countforcharactersv2 );
            System.out.println("\nThe number of pair characters vc is = " + countforcharactersv3 );
            System.out.println("\nThe number of pair characters vd is = " + countforcharactersv4 );
            System.out.println("\nThe number of pair characters ve is = " + countforcharactersv5 );
            System.out.println("\nThe number of pair characters vf is = " + countforcharactersv6 );
            System.out.println("\nThe number of pair characters vg is = " + countforcharactersv7 );
            System.out.println("\nThe number of pair characters vh is = " + countforcharactersv8 );
            System.out.println("\nThe number of pair characters vi is = " + countforcharactersv9 );
            System.out.println("\nThe number of pair characters vj is = " + countforcharactersv10 );
            System.out.println("\nThe number of pair characters vk is = " + countforcharactersv11 );
            System.out.println("\nThe number of pair characters vl is = " + countforcharactersv12 );
            System.out.println("\nThe number of pair characters vm is = " + countforcharactersv13 );
            System.out.println("\nThe number of pair characters vn is = " + countforcharactersv14 );
            System.out.println("\nThe number of pair characters vo is = " + countforcharactersv15 );
            System.out.println("\nThe number of pair characters vp is = " + countforcharactersv16 );
            System.out.println("\nThe number of pair characters vq is = " + countforcharactersv17 );
            System.out.println("\nThe number of pair characters vr is = " + countforcharactersv18 );
            System.out.println("\nThe number of pair characters vs is = " + countforcharactersv19 );
            System.out.println("\nThe number of pair characters vt is = " + countforcharactersv20 );
            System.out.println("\nThe number of pair characters vu is = " + countforcharactersv21 );
            System.out.println("\nThe number of pair characters vv is = " + countforcharactersv22 );
            System.out.println("\nThe number of pair characters vw is = " + countforcharactersv23 );
            System.out.println("\nThe number of pair characters vx is = " + countforcharactersv24 );
            System.out.println("\nThe number of pair characters vy is = " + countforcharactersv25 );
            System.out.println("\nThe number of pair characters vz is = " + countforcharactersv26 );
            System.out.println("\nThe number of pair characters v. is = " + countforcharactersv27 );
            System.out.println("\nThe number of pair characters v, is = " + countforcharactersv28 );
            System.out.println("\nThe number of pair characters vvacuum is = " + countforcharactersv29 );
            System.out.println("\nThe number of pair characters wa is = " + countforcharactersw1 );
            System.out.println("\nThe number of pair characters wb is = " + countforcharactersw2 );
            System.out.println("\nThe number of pair characters wc is = " + countforcharactersw3 );
            System.out.println("\nThe number of pair characters wd is = " + countforcharactersw4 );
            System.out.println("\nThe number of pair characters we is = " + countforcharactersw5 );
            System.out.println("\nThe number of pair characters wf is = " + countforcharactersw6 );
            System.out.println("\nThe number of pair characters wg is = " + countforcharactersw7 );
            System.out.println("\nThe number of pair characters wh is = " + countforcharactersw8 );
            System.out.println("\nThe number of pair characters wi is = " + countforcharactersw9 );
            System.out.println("\nThe number of pair characters wj is = " + countforcharactersw10 );
            System.out.println("\nThe number of pair characters wk is = " + countforcharactersw11 );
            System.out.println("\nThe number of pair characters wl is = " + countforcharactersw12 );
            System.out.println("\nThe number of pair characters wm is = " + countforcharactersw13 );
            System.out.println("\nThe number of pair characters wn is = " + countforcharactersw14 );
            System.out.println("\nThe number of pair characters wo is = " + countforcharactersw15 );
            System.out.println("\nThe number of pair characters wp is = " + countforcharactersw16 );
            System.out.println("\nThe number of pair characters wq is = " + countforcharactersw17 );
            System.out.println("\nThe number of pair characters wr is = " + countforcharactersw18 );
            System.out.println("\nThe number of pair characters ws is = " + countforcharactersw19 );
            System.out.println("\nThe number of pair characters wt is = " + countforcharactersw20 );
            System.out.println("\nThe number of pair characters wu is = " + countforcharactersw21 );
            System.out.println("\nThe number of pair characters wv is = " + countforcharactersw22 );
            System.out.println("\nThe number of pair characters ww is = " + countforcharactersw23 );
            System.out.println("\nThe number of pair characters wx is = " + countforcharactersw24 );
            System.out.println("\nThe number of pair characters wy is = " + countforcharactersw25 );
            System.out.println("\nThe number of pair characters wz is = " + countforcharactersw26 );
            System.out.println("\nThe number of pair characters w. is = " + countforcharactersw27 );
            System.out.println("\nThe number of pair characters w, is = " + countforcharactersw28 );
            System.out.println("\nThe number of pair characters wvacuum is = " + countforcharactersw29 );
            System.out.println("\nThe number of pair characters xa is = " + countforcharactersx1 );
            System.out.println("\nThe number of pair characters xb is = " + countforcharactersx2 );
            System.out.println("\nThe number of pair characters xc is = " + countforcharactersx3 );
            System.out.println("\nThe number of pair characters xd is = " + countforcharactersx4 );
            System.out.println("\nThe number of pair characters xe is = " + countforcharactersx5 );
            System.out.println("\nThe number of pair characters xf is = " + countforcharactersx6 );
            System.out.println("\nThe number of pair characters xg is = " + countforcharactersx7 );
            System.out.println("\nThe number of pair characters xh is = " + countforcharactersx8 );
            System.out.println("\nThe number of pair characters xi is = " + countforcharactersx9 );
            System.out.println("\nThe number of pair characters xj is = " + countforcharactersx10 );
            System.out.println("\nThe number of pair characters xk is = " + countforcharactersx11 );
            System.out.println("\nThe number of pair characters xl is = " + countforcharactersx12 );
            System.out.println("\nThe number of pair characters xm is = " + countforcharactersx13 );
            System.out.println("\nThe number of pair characters xn is = " + countforcharactersx14 );
            System.out.println("\nThe number of pair characters xo is = " + countforcharactersx15 );
            System.out.println("\nThe number of pair characters xp is = " + countforcharactersx16 );
            System.out.println("\nThe number of pair characters xq is = " + countforcharactersx17 );
            System.out.println("\nThe number of pair characters xr is = " + countforcharactersx18 );
            System.out.println("\nThe number of pair characters xs is = " + countforcharactersx19 );
            System.out.println("\nThe number of pair characters xt is = " + countforcharactersx20 );
            System.out.println("\nThe number of pair characters xu is = " + countforcharactersx21 );
            System.out.println("\nThe number of pair characters xv is = " + countforcharactersx22 );
            System.out.println("\nThe number of pair characters xw is = " + countforcharactersx23 );
            System.out.println("\nThe number of pair characters xx is = " + countforcharactersx24 );
            System.out.println("\nThe number of pair characters xy is = " + countforcharactersx25 );
            System.out.println("\nThe number of pair characters xz is = " + countforcharactersx26 );
            System.out.println("\nThe number of pair characters x. is = " + countforcharactersx27 );
            System.out.println("\nThe number of pair characters x, is = " + countforcharactersx28 );
            System.out.println("\nThe number of pair characters xvacuum is = " + countforcharactersx29 );
            System.out.println("\nThe number of pair characters ya is = " + countforcharactersy1 );
            System.out.println("\nThe number of pair characters yb is = " + countforcharactersy2 );
            System.out.println("\nThe number of pair characters yc is = " + countforcharactersy3 );
            System.out.println("\nThe number of pair characters yd is = " + countforcharactersy4 );
            System.out.println("\nThe number of pair characters ye is = " + countforcharactersy5 );
            System.out.println("\nThe number of pair characters yf is = " + countforcharactersy6 );
            System.out.println("\nThe number of pair characters yg is = " + countforcharactersy7 );
            System.out.println("\nThe number of pair characters yh is = " + countforcharactersy8 );
            System.out.println("\nThe number of pair characters yi is = " + countforcharactersy9 );
            System.out.println("\nThe number of pair characters yj is = " + countforcharactersy10 );
            System.out.println("\nThe number of pair characters yk is = " + countforcharactersy11 );
            System.out.println("\nThe number of pair characters yl is = " + countforcharactersy12 );
            System.out.println("\nThe number of pair characters ym is = " + countforcharactersy13 );
            System.out.println("\nThe number of pair characters yn is = " + countforcharactersy14 );
            System.out.println("\nThe number of pair characters yo is = " + countforcharactersy15 );
            System.out.println("\nThe number of pair characters yp is = " + countforcharactersy16 );
            System.out.println("\nThe number of pair characters yq is = " + countforcharactersy17 );
            System.out.println("\nThe number of pair characters yr is = " + countforcharactersy18 );
            System.out.println("\nThe number of pair characters ys is = " + countforcharactersy19 );
            System.out.println("\nThe number of pair characters yt is = " + countforcharactersy20 );
            System.out.println("\nThe number of pair characters yu is = " + countforcharactersy21 );
            System.out.println("\nThe number of pair characters yv is = " + countforcharactersy22 );
            System.out.println("\nThe number of pair characters yw is = " + countforcharactersy23 );
            System.out.println("\nThe number of pair characters yx is = " + countforcharactersy24 );
            System.out.println("\nThe number of pair characters yy is = " + countforcharactersy25 );
            System.out.println("\nThe number of pair characters yz is = " + countforcharactersy26 );
            System.out.println("\nThe number of pair characters y. is = " + countforcharactersy27 );
            System.out.println("\nThe number of pair characters y, is = " + countforcharactersy28 );
            System.out.println("\nThe number of pair characters yvacuum is = " + countforcharactersy29 );
            System.out.println("\nThe number of pair characters za is = " + countforcharactersz1 );
            System.out.println("\nThe number of pair characters zb is = " + countforcharactersz2 );
            System.out.println("\nThe number of pair characters zc is = " + countforcharactersz3 );
            System.out.println("\nThe number of pair characters zd is = " + countforcharactersz4 );
            System.out.println("\nThe number of pair characters ze is = " + countforcharactersz5 );
            System.out.println("\nThe number of pair characters zf is = " + countforcharactersz6 );
            System.out.println("\nThe number of pair characters zg is = " + countforcharactersz7 );
            System.out.println("\nThe number of pair characters zh is = " + countforcharactersz8 );
            System.out.println("\nThe number of pair characters zi is = " + countforcharactersz9 );
            System.out.println("\nThe number of pair characters zj is = " + countforcharactersz10 );
            System.out.println("\nThe number of pair characters zk is = " + countforcharactersz11 );
            System.out.println("\nThe number of pair characters zl is = " + countforcharactersz12 );
            System.out.println("\nThe number of pair characters zm is = " + countforcharactersz13 );
            System.out.println("\nThe number of pair characters zn is = " + countforcharactersz14 );
            System.out.println("\nThe number of pair characters zo is = " + countforcharactersz15 );
            System.out.println("\nThe number of pair characters zp is = " + countforcharactersz16 );
            System.out.println("\nThe number of pair characters zq is = " + countforcharactersz17 );
            System.out.println("\nThe number of pair characters zr is = " + countforcharactersz18 );
            System.out.println("\nThe number of pair characters zs is = " + countforcharactersz19 );
            System.out.println("\nThe number of pair characters zt is = " + countforcharactersz20 );
            System.out.println("\nThe number of pair characters zu is = " + countforcharactersz21 );
            System.out.println("\nThe number of pair characters zv is = " + countforcharactersz22 );
            System.out.println("\nThe number of pair characters zw is = " + countforcharactersz23 );
            System.out.println("\nThe number of pair characters zx is = " + countforcharactersz24 );
            System.out.println("\nThe number of pair characters zy is = " + countforcharactersz25 );
            System.out.println("\nThe number of pair characters zz is = " + countforcharactersz26 );
            System.out.println("\nThe number of pair characters z. is = " + countforcharactersz27 );
            System.out.println("\nThe number of pair characters z, is = " + countforcharactersz28 );
            System.out.println("\nThe number of pair characters zvacuum is = " + countforcharactersz29 );
            System.out.println("\nThe number of pair characters .a is = " + countforcharactersdot1 );
            System.out.println("\nThe number of pair characters .b is = " + countforcharactersdot2 );
            System.out.println("\nThe number of pair characters .c is = " + countforcharactersdot3 );
            System.out.println("\nThe number of pair characters .d is = " + countforcharactersdot4 );
            System.out.println("\nThe number of pair characters .e is = " + countforcharactersdot5 );
            System.out.println("\nThe number of pair characters .f is = " + countforcharactersdot6 );
            System.out.println("\nThe number of pair characters .g is = " + countforcharactersdot7 );
            System.out.println("\nThe number of pair characters .h is = " + countforcharactersdot8 );
            System.out.println("\nThe number of pair characters .i is = " + countforcharactersdot9 );
            System.out.println("\nThe number of pair characters .j is = " + countforcharactersdot10 );
            System.out.println("\nThe number of pair characters .k is = " + countforcharactersdot11 );
            System.out.println("\nThe number of pair characters .l is = " + countforcharactersdot12 );
            System.out.println("\nThe number of pair characters .m is = " + countforcharactersdot13 );
            System.out.println("\nThe number of pair characters .n is = " + countforcharactersdot14 );
            System.out.println("\nThe number of pair characters .o is = " + countforcharactersdot15 );
            System.out.println("\nThe number of pair characters .p is = " + countforcharactersdot16 );
            System.out.println("\nThe number of pair characters .q is = " + countforcharactersdot17 );
            System.out.println("\nThe number of pair characters .r is = " + countforcharactersdot18 );
            System.out.println("\nThe number of pair characters .s is = " + countforcharactersdot19 );
            System.out.println("\nThe number of pair characters .t is = " + countforcharactersdot20 );
            System.out.println("\nThe number of pair characters .u is = " + countforcharactersdot21 );
            System.out.println("\nThe number of pair characters .v is = " + countforcharactersdot22 );
            System.out.println("\nThe number of pair characters .w is = " + countforcharactersdot23 );
            System.out.println("\nThe number of pair characters .x is = " + countforcharactersdot24 );
            System.out.println("\nThe number of pair characters .y is = " + countforcharactersdot25 );
            System.out.println("\nThe number of pair characters .z is = " + countforcharactersdot26 );
            System.out.println("\nThe number of pair characters .. is = " + countforcharactersdot27 );
            System.out.println("\nThe number of pair characters ., is = " + countforcharactersdot28 );
            System.out.println("\nThe number of pair characters .vacuum is = " + countforcharactersz29 );
            System.out.println("\nThe number of pair characters ,a is = " + countforcharacterscomma1 );
            System.out.println("\nThe number of pair characters ,b is = " + countforcharacterscomma2 );
            System.out.println("\nThe number of pair characters ,c is = " + countforcharacterscomma3 );
            System.out.println("\nThe number of pair characters ,d is = " + countforcharacterscomma4 );
            System.out.println("\nThe number of pair characters ,e is = " + countforcharacterscomma5 );
            System.out.println("\nThe number of pair characters ,f is = " + countforcharacterscomma6 );
            System.out.println("\nThe number of pair characters ,g is = " + countforcharacterscomma7 );
            System.out.println("\nThe number of pair characters ,h is = " + countforcharacterscomma8 );
            System.out.println("\nThe number of pair characters ,i is = " + countforcharacterscomma9 );
            System.out.println("\nThe number of pair characters ,j is = " + countforcharacterscomma10 );
            System.out.println("\nThe number of pair characters ,k is = " + countforcharacterscomma11 );
            System.out.println("\nThe number of pair characters ,l is = " + countforcharacterscomma12 );
            System.out.println("\nThe number of pair characters ,m is = " + countforcharacterscomma13 );
            System.out.println("\nThe number of pair characters ,n is = " + countforcharacterscomma14 );
            System.out.println("\nThe number of pair characters ,o is = " + countforcharacterscomma15 );
            System.out.println("\nThe number of pair characters ,p is = " + countforcharacterscomma16 );
            System.out.println("\nThe number of pair characters ,q is = " + countforcharacterscomma17 );
            System.out.println("\nThe number of pair characters ,r is = " + countforcharacterscomma18 );
            System.out.println("\nThe number of pair characters ,s is = " + countforcharacterscomma19 );
            System.out.println("\nThe number of pair characters ,t is = " + countforcharacterscomma20 );
            System.out.println("\nThe number of pair characters ,u is = " + countforcharacterscomma21 );
            System.out.println("\nThe number of pair characters ,v is = " + countforcharacterscomma22 );
            System.out.println("\nThe number of pair characters ,w is = " + countforcharacterscomma23 );
            System.out.println("\nThe number of pair characters ,x is = " + countforcharacterscomma24 );
            System.out.println("\nThe number of pair characters ,y is = " + countforcharacterscomma25 );
            System.out.println("\nThe number of pair characters ,z is = " + countforcharacterscomma26 );
            System.out.println("\nThe number of pair characters ,. is = " + countforcharacterscomma27 );
            System.out.println("\nThe number of pair characters ,, is = " + countforcharacterscomma28 );
            System.out.println("\nThe number of pair characters ,vacuum is = " + countforcharacterscomma29 );
            System.out.println("\nThe number of pair characters vacuuma is = " + countforcharactersvacuum1 );
            System.out.println("\nThe number of pair characters vacuumb is = " + countforcharactersvacuum2 );
            System.out.println("\nThe number of pair characters vacuumc is = " + countforcharactersvacuum3 );
            System.out.println("\nThe number of pair characters vacuumd is = " + countforcharactersvacuum4 );
            System.out.println("\nThe number of pair characters vacuume is = " + countforcharactersvacuum5 );
            System.out.println("\nThe number of pair characters vacuumf is = " + countforcharactersvacuum6 );
            System.out.println("\nThe number of pair characters vacuumg is = " + countforcharactersvacuum7 );
            System.out.println("\nThe number of pair characters vacuumh is = " + countforcharactersvacuum8 );
            System.out.println("\nThe number of pair characters vacuumi is = " + countforcharactersvacuum9 );
            System.out.println("\nThe number of pair characters vacuumj is = " + countforcharactersvacuum10 );
            System.out.println("\nThe number of pair characters vacuumk is = " + countforcharactersvacuum11 );
            System.out.println("\nThe number of pair characters vacuuml is = " + countforcharactersvacuum12 );
            System.out.println("\nThe number of pair characters vacuumm is = " + countforcharactersvacuum13 );
            System.out.println("\nThe number of pair characters vacuumn is = " + countforcharactersvacuum14 );
            System.out.println("\nThe number of pair characters vacuumo is = " + countforcharactersvacuum15 );
            System.out.println("\nThe number of pair characters vacuump is = " + countforcharactersvacuum16 );
            System.out.println("\nThe number of pair characters vacuumq is = " + countforcharactersvacuum17 );
            System.out.println("\nThe number of pair characters vacuumr is = " + countforcharactersvacuum18 );
            System.out.println("\nThe number of pair characters vacuums is = " + countforcharactersvacuum19 );
            System.out.println("\nThe number of pair characters vacuumt is = " + countforcharactersvacuum20 );
            System.out.println("\nThe number of pair characters vacuumu is = " + countforcharactersvacuum21 );
            System.out.println("\nThe number of pair characters vacuumv is = " + countforcharactersvacuum22 );
            System.out.println("\nThe number of pair characters vacuumw is = " + countforcharactersvacuum23 );
            System.out.println("\nThe number of pair characters vacuumx is = " + countforcharactersvacuum24 );
            System.out.println("\nThe number of pair characters vacuumy is = " + countforcharactersvacuum25 );
            System.out.println("\nThe number of pair characters vacuumz is = " + countforcharactersvacuum26 );
            System.out.println("\nThe number of pair characters vacuum. is = " + countforcharactersvacuum27 );
            System.out.println("\nThe number of pair characters vacuum, is = " + countforcharactersvacuum28 );
            System.out.println("\nThe number of pair characters vacuumvacuum is = " + countforcharactersvacuum29 );
            System.out.println("\nThe sum of all the pair characters is = " + (countforcharactersa1+countforcharactersa2+countforcharactersa3+countforcharactersa4+countforcharactersa5+countforcharactersa6+countforcharactersa7 
                                                                        + countforcharactersa8+countforcharactersa9+countforcharactersa10+countforcharactersa11+countforcharactersa12+countforcharactersa13+countforcharactersa14
                                                                        + countforcharactersa15+countforcharactersa16+countforcharactersa17+countforcharactersa18+countforcharactersa19+countforcharactersa20+countforcharactersa21
                                                                        + countforcharactersa22+countforcharactersa23+countforcharactersa24+countforcharactersa25+countforcharactersa26+countforcharactersa27+countforcharactersa28
                                                                        + countforcharactersa29
                                                                        + countforcharactersb1+countforcharactersb2+countforcharactersb3+countforcharactersb4+countforcharactersb5+countforcharactersb6+countforcharactersb7 
                                                                        + countforcharactersb8+countforcharactersb9+countforcharactersb10+countforcharactersb11+countforcharactersb12+countforcharactersb13+countforcharactersb14
                                                                        + countforcharactersb15+countforcharactersb16+countforcharactersb17+countforcharactersb18+countforcharactersb19+countforcharactersb20+countforcharactersb21
                                                                        + countforcharactersb22+countforcharactersb23+countforcharactersb24+countforcharactersb25+countforcharactersb26+countforcharactersb27+countforcharactersb28
                                                                        + countforcharactersb29
                                                                        + countforcharactersc1+countforcharactersc2+countforcharactersc3+countforcharactersc4+countforcharactersc5+countforcharactersc6+countforcharactersc7 
                                                                        + countforcharactersc8+countforcharactersc9+countforcharactersc10+countforcharactersc11+countforcharactersc12+countforcharactersc13+countforcharactersc14
                                                                        + countforcharactersc15+countforcharactersc16+countforcharactersc17+countforcharactersc18+countforcharactersc19+countforcharactersc20+countforcharactersc21
                                                                        + countforcharactersc22+countforcharactersc23+countforcharactersc24+countforcharactersc25+countforcharactersc26+countforcharactersc27+countforcharactersc28
                                                                        + countforcharactersc29
                                                                        + countforcharactersd1+countforcharactersd2+countforcharactersd3+countforcharactersd4+countforcharactersd5+countforcharactersd6+countforcharactersd7 
                                                                        + countforcharactersd8+countforcharactersd9+countforcharactersd10+countforcharactersd11+countforcharactersd12+countforcharactersd13+countforcharactersd14
                                                                        + countforcharactersd15+countforcharactersd16+countforcharactersd17+countforcharactersd18+countforcharactersd19+countforcharactersd20+countforcharactersd21
                                                                        + countforcharactersd22+countforcharactersd23+countforcharactersd24+countforcharactersd25+countforcharactersd26+countforcharactersd27+countforcharactersd28
                                                                        + countforcharactersd29
                                                                        + countforcharacterse1+countforcharacterse2+countforcharacterse3+countforcharacterse4+countforcharacterse5+countforcharacterse6+countforcharacterse7 
                                                                        + countforcharacterse8+countforcharacterse9+countforcharacterse10+countforcharacterse11+countforcharacterse12+countforcharacterse13+countforcharacterse14
                                                                        + countforcharacterse15+countforcharacterse16+countforcharacterse17+countforcharacterse18+countforcharacterse19+countforcharacterse20+countforcharacterse21
                                                                        + countforcharacterse22+countforcharacterse23+countforcharacterse24+countforcharacterse25+countforcharacterse26+countforcharacterse27+countforcharacterse28
                                                                        + countforcharacterse29
                                                                        + countforcharactersf1+countforcharactersf2+countforcharactersf3+countforcharactersf4+countforcharactersf5+countforcharactersf6+countforcharactersf7 
                                                                        + countforcharactersf8+countforcharactersf9+countforcharactersf10+countforcharactersf11+countforcharactersf12+countforcharactersf13+countforcharactersf14
                                                                        + countforcharactersf15+countforcharactersf16+countforcharactersf17+countforcharactersf18+countforcharactersf19+countforcharactersf20+countforcharactersf21
                                                                        + countforcharactersf22+countforcharactersf23+countforcharactersf24+countforcharactersf25+countforcharactersf26+countforcharactersf27+countforcharactersf28
                                                                        + countforcharactersf29
                                                                        + countforcharactersg1+countforcharactersg2+countforcharactersg3+countforcharactersg4+countforcharactersg5+countforcharactersg6+countforcharactersg7 
                                                                        + countforcharactersg8+countforcharactersg9+countforcharactersg10+countforcharactersg11+countforcharactersg12+countforcharactersg13+countforcharactersg14
                                                                        + countforcharactersg15+countforcharactersg16+countforcharactersg17+countforcharactersg18+countforcharactersg19+countforcharactersg20+countforcharactersg21
                                                                        + countforcharactersg22+countforcharactersg23+countforcharactersg24+countforcharactersg25+countforcharactersg26+countforcharactersg27+countforcharactersg28
                                                                        + countforcharactersg29
                                                                        + countforcharactersh1+countforcharactersh2+countforcharactersh3+countforcharactersh4+countforcharactersh5+countforcharactersh6+countforcharactersh7 
                                                                        + countforcharactersh8+countforcharactersh9+countforcharactersh10+countforcharactersh11+countforcharactersh12+countforcharactersh13+countforcharactersh14
                                                                        + countforcharactersh15+countforcharactersh16+countforcharactersh17+countforcharactersh18+countforcharactersh19+countforcharactersh20+countforcharactersh21
                                                                        + countforcharactersh22+countforcharactersh23+countforcharactersh24+countforcharactersh25+countforcharactersh26+countforcharactersh27+countforcharactersh28
                                                                        + countforcharactersh29
                                                                        + countforcharactersi1+countforcharactersi2+countforcharactersi3+countforcharactersi4+countforcharactersi5+countforcharactersi6+countforcharactersi7 
                                                                        + countforcharactersi8+countforcharactersi9+countforcharactersi10+countforcharactersi11+countforcharactersi12+countforcharactersi13+countforcharactersi14
                                                                        + countforcharactersi15+countforcharactersi16+countforcharactersi17+countforcharactersi18+countforcharactersi19+countforcharactersi20+countforcharactersi21
                                                                        + countforcharactersi22+countforcharactersi23+countforcharactersi24+countforcharactersi25+countforcharactersi26+countforcharactersi27+countforcharactersi28
                                                                        + countforcharactersi29
                                                                        + countforcharactersj1+countforcharactersj2+countforcharactersj3+countforcharactersj4+countforcharactersj5+countforcharactersj6+countforcharactersj7 
                                                                        + countforcharactersj8+countforcharactersj9+countforcharactersj10+countforcharactersj11+countforcharactersj12+countforcharactersj13+countforcharactersj14
                                                                        + countforcharactersj15+countforcharactersj16+countforcharactersj17+countforcharactersj18+countforcharactersj19+countforcharactersj20+countforcharactersj21
                                                                        + countforcharactersj22+countforcharactersj23+countforcharactersj24+countforcharactersj25+countforcharactersj26+countforcharactersj27+countforcharactersj28
                                                                        + countforcharactersj29
                                                                        + countforcharactersk1+countforcharactersk2+countforcharactersk3+countforcharactersk4+countforcharactersk5+countforcharactersk6+countforcharactersk7 
                                                                        + countforcharactersk8+countforcharactersk9+countforcharactersk10+countforcharactersk11+countforcharactersk12+countforcharactersk13+countforcharactersk14
                                                                        + countforcharactersk15+countforcharactersk16+countforcharactersk17+countforcharactersk18+countforcharactersk19+countforcharactersk20+countforcharactersk21
                                                                        + countforcharactersk22+countforcharactersk23+countforcharactersk24+countforcharactersk25+countforcharactersk26+countforcharactersk27+countforcharactersk28
                                                                        + countforcharactersk29
                                                                        + countforcharactersl1+countforcharactersl2+countforcharactersl3+countforcharactersl4+countforcharactersl5+countforcharactersl6+countforcharactersl7 
                                                                        + countforcharactersl8+countforcharactersl9+countforcharactersl10+countforcharactersl11+countforcharactersl12+countforcharactersl13+countforcharactersl14
                                                                        + countforcharactersl15+countforcharactersl16+countforcharactersl17+countforcharactersl18+countforcharactersl19+countforcharactersl20+countforcharactersl21
                                                                        + countforcharactersl22+countforcharactersl23+countforcharactersl24+countforcharactersl25+countforcharactersl26+countforcharactersl27+countforcharactersl28
                                                                        + countforcharactersl29
                                                                        + countforcharactersm1+countforcharactersm2+countforcharactersm3+countforcharactersm4+countforcharactersm5+countforcharactersm6+countforcharactersm7 
                                                                        + countforcharactersm8+countforcharactersm9+countforcharactersm10+countforcharactersm11+countforcharactersm12+countforcharactersm13+countforcharactersm14
                                                                        + countforcharactersm15+countforcharactersm16+countforcharactersm17+countforcharactersm18+countforcharactersm19+countforcharactersm20+countforcharactersm21
                                                                        + countforcharactersm22+countforcharactersm23+countforcharactersm24+countforcharactersm25+countforcharactersm26+countforcharactersm27+countforcharactersm28
                                                                        + countforcharactersm29
                                                                        + countforcharactersn1+countforcharactersn2+countforcharactersn3+countforcharactersn4+countforcharactersn5+countforcharactersn6+countforcharactersn7 
                                                                        + countforcharactersn8+countforcharactersn9+countforcharactersn10+countforcharactersn11+countforcharactersn12+countforcharactersn13+countforcharactersn14
                                                                        + countforcharactersn15+countforcharactersn16+countforcharactersn17+countforcharactersn18+countforcharactersn19+countforcharactersn20+countforcharactersn21
                                                                        + countforcharactersn22+countforcharactersn23+countforcharactersn24+countforcharactersn25+countforcharactersn26+countforcharactersn27+countforcharactersn28
                                                                        + countforcharactersn29
                                                                        + countforcharacterso1+countforcharacterso2+countforcharacterso3+countforcharacterso4+countforcharacterso5+countforcharacterso6+countforcharacterso7 
                                                                        + countforcharacterso8+countforcharacterso9+countforcharacterso10+countforcharacterso11+countforcharacterso12+countforcharacterso13+countforcharacterso14
                                                                        + countforcharacterso15+countforcharacterso16+countforcharacterso17+countforcharacterso18+countforcharacterso19+countforcharacterso20+countforcharacterso21
                                                                        + countforcharacterso22+countforcharacterso23+countforcharacterso24+countforcharacterso25+countforcharacterso26+countforcharacterso27+countforcharacterso28
                                                                        + countforcharacterso29
                                                                        + countforcharactersp1+countforcharactersp2+countforcharactersp3+countforcharactersp4+countforcharactersp5+countforcharactersp6+countforcharactersp7 
                                                                        + countforcharactersp8+countforcharactersp9+countforcharactersp10+countforcharactersp11+countforcharactersp12+countforcharactersp13+countforcharactersp14
                                                                        + countforcharactersp15+countforcharactersp16+countforcharactersp17+countforcharactersp18+countforcharactersp19+countforcharactersp20+countforcharactersp21
                                                                        + countforcharactersp22+countforcharactersp23+countforcharactersp24+countforcharactersp25+countforcharactersp26+countforcharactersp27+countforcharactersp28
                                                                        + countforcharactersp29
                                                                        + countforcharactersq1+countforcharactersq2+countforcharactersq3+countforcharactersq4+countforcharactersq5+countforcharactersq6+countforcharactersq7 
                                                                        + countforcharactersq8+countforcharactersq9+countforcharactersq10+countforcharactersq11+countforcharactersq12+countforcharactersq13+countforcharactersq14
                                                                        + countforcharactersq15+countforcharactersq16+countforcharactersq17+countforcharactersq18+countforcharactersq19+countforcharactersq20+countforcharactersq21
                                                                        + countforcharactersq22+countforcharactersq23+countforcharactersq24+countforcharactersq25+countforcharactersq26+countforcharactersq27+countforcharactersq28
                                                                        + countforcharactersq29
                                                                        + countforcharactersr1+countforcharactersr2+countforcharactersr3+countforcharactersr4+countforcharactersr5+countforcharactersr6+countforcharactersr7 
                                                                        + countforcharactersr8+countforcharactersr9+countforcharactersr10+countforcharactersr11+countforcharactersr12+countforcharactersr13+countforcharactersr14
                                                                        + countforcharactersr15+countforcharactersr16+countforcharactersr17+countforcharactersr18+countforcharactersr19+countforcharactersr20+countforcharactersr21
                                                                        + countforcharactersr22+countforcharactersr23+countforcharactersr24+countforcharactersr25+countforcharactersr26+countforcharactersr27+countforcharactersr28
                                                                        + countforcharactersr29
                                                                        + countforcharacterss1+countforcharacterss2+countforcharacterss3+countforcharacterss4+countforcharacterss5+countforcharacterss6+countforcharacterss7 
                                                                        + countforcharacterss8+countforcharacterss9+countforcharacterss10+countforcharacterss11+countforcharacterss12+countforcharacterss13+countforcharacterss14
                                                                        + countforcharacterss15+countforcharacterss16+countforcharacterss17+countforcharacterss18+countforcharacterss19+countforcharacterss20+countforcharacterss21
                                                                        + countforcharacterss22+countforcharacterss23+countforcharacterss24+countforcharacterss25+countforcharacterss26+countforcharacterss27+countforcharacterss28
                                                                        + countforcharacterss29
                                                                        + countforcharacterst1+countforcharacterst2+countforcharacterst3+countforcharacterst4+countforcharacterst5+countforcharacterst6+countforcharacterst7 
                                                                        + countforcharacterst8+countforcharacterst9+countforcharacterst10+countforcharacterst11+countforcharacterst12+countforcharacterst13+countforcharacterst14
                                                                        + countforcharacterst15+countforcharacterst16+countforcharacterst17+countforcharacterst18+countforcharacterst19+countforcharacterst20+countforcharacterst21
                                                                        + countforcharacterst22+countforcharacterst23+countforcharacterst24+countforcharacterst25+countforcharacterst26+countforcharacterst27+countforcharacterst28
                                                                        + countforcharacterst29
                                                                        + countforcharactersu1+countforcharactersu2+countforcharactersu3+countforcharactersu4+countforcharactersu5+countforcharactersu6+countforcharactersu7 
                                                                        + countforcharactersu8+countforcharactersu9+countforcharactersu10+countforcharactersu11+countforcharactersu12+countforcharactersu13+countforcharactersu14
                                                                        + countforcharactersu15+countforcharactersu16+countforcharactersu17+countforcharactersu18+countforcharactersu19+countforcharactersu20+countforcharactersu21
                                                                        + countforcharactersu22+countforcharactersu23+countforcharactersu24+countforcharactersu25+countforcharactersu26+countforcharactersu27+countforcharactersu28
                                                                        + countforcharactersu29
                                                                        + countforcharactersv1+countforcharactersv2+countforcharactersv3+countforcharactersv4+countforcharactersv5+countforcharactersv6+countforcharactersv7 
                                                                        + countforcharactersv8+countforcharactersv9+countforcharactersv10+countforcharactersv11+countforcharactersv12+countforcharactersv13+countforcharactersv14
                                                                        + countforcharactersv15+countforcharactersv16+countforcharactersv17+countforcharactersv18+countforcharactersv19+countforcharactersv20+countforcharactersv21
                                                                        + countforcharactersv22+countforcharactersv23+countforcharactersv24+countforcharactersv25+countforcharactersv26+countforcharactersv27+countforcharactersv28
                                                                        + countforcharactersv29
                                                                        + countforcharactersw1+countforcharactersw2+countforcharactersw3+countforcharactersw4+countforcharactersw5+countforcharactersw6+countforcharactersw7 
                                                                        + countforcharactersw8+countforcharactersw9+countforcharactersw10+countforcharactersw11+countforcharactersw12+countforcharactersw13+countforcharactersw14
                                                                        + countforcharactersw15+countforcharactersw16+countforcharactersw17+countforcharactersw18+countforcharactersw19+countforcharactersw20+countforcharactersw21
                                                                        + countforcharactersw22+countforcharactersw23+countforcharactersw24+countforcharactersw25+countforcharactersw26+countforcharactersw27+countforcharactersw28
                                                                        + countforcharactersw29
                                                                        + countforcharactersx1+countforcharactersx2+countforcharactersx3+countforcharactersx4+countforcharactersx5+countforcharactersx6+countforcharactersx7 
                                                                        + countforcharactersx8+countforcharactersx9+countforcharactersx10+countforcharactersx11+countforcharactersx12+countforcharactersx13+countforcharactersx14
                                                                        + countforcharactersx15+countforcharactersx16+countforcharactersx17+countforcharactersx18+countforcharactersx19+countforcharactersx20+countforcharactersx21
                                                                        + countforcharactersx22+countforcharactersx23+countforcharactersx24+countforcharactersx25+countforcharactersx26+countforcharactersx27+countforcharactersx28
                                                                        + countforcharactersx29
                                                                        + countforcharactersy1+countforcharactersy2+countforcharactersy3+countforcharactersy4+countforcharactersy5+countforcharactersy6+countforcharactersy7 
                                                                        + countforcharactersy8+countforcharactersy9+countforcharactersy10+countforcharactersy11+countforcharactersy12+countforcharactersy13+countforcharactersy14
                                                                        + countforcharactersy15+countforcharactersy16+countforcharactersy17+countforcharactersy18+countforcharactersy19+countforcharactersy20+countforcharactersy21
                                                                        + countforcharactersy22+countforcharactersy23+countforcharactersy24+countforcharactersy25+countforcharactersy26+countforcharactersy27+countforcharactersy28
                                                                        + countforcharactersy29
                                                                        + countforcharactersz1+countforcharactersz2+countforcharactersz3+countforcharactersz4+countforcharactersz5+countforcharactersz6+countforcharactersz7 
                                                                        + countforcharactersz8+countforcharactersz9+countforcharactersz10+countforcharactersz11+countforcharactersz12+countforcharactersz13+countforcharactersz14
                                                                        + countforcharactersz15+countforcharactersz16+countforcharactersz17+countforcharactersz18+countforcharactersz19+countforcharactersz20+countforcharactersz21
                                                                        + countforcharactersz22+countforcharactersz23+countforcharactersz24+countforcharactersz25+countforcharactersz26+countforcharactersz27+countforcharactersz28
                                                                        + countforcharactersz29
                                                                        + countforcharactersdot1+countforcharactersdot2+countforcharactersdot3+countforcharactersdot4+countforcharactersdot5+countforcharactersdot6+countforcharactersdot7 
                                                                        + countforcharactersdot8+countforcharactersdot9+countforcharactersdot10+countforcharactersdot11+countforcharactersdot12+countforcharactersdot13+countforcharactersdot14
                                                                        + countforcharactersdot15+countforcharactersdot16+countforcharactersdot17+countforcharactersdot18+countforcharactersdot19+countforcharactersdot20+countforcharactersdot21
                                                                        + countforcharactersdot22+countforcharactersdot23+countforcharactersdot24+countforcharactersdot25+countforcharactersdot26+countforcharactersdot27+countforcharactersdot28
                                                                        + countforcharactersdot29 
                                                                        + countforcharacterscomma1+countforcharacterscomma2+countforcharacterscomma3+countforcharacterscomma4+countforcharacterscomma5+countforcharacterscomma6+countforcharacterscomma7 
                                                                        + countforcharacterscomma8+countforcharacterscomma9+countforcharacterscomma10+countforcharacterscomma11+countforcharacterscomma12+countforcharacterscomma13+countforcharacterscomma14
                                                                        + countforcharacterscomma15+countforcharacterscomma16+countforcharacterscomma17+countforcharacterscomma18+countforcharacterscomma19+countforcharacterscomma20+countforcharacterscomma21
                                                                        + countforcharacterscomma22+countforcharacterscomma23+countforcharacterscomma24+countforcharacterscomma25+countforcharacterscomma26+countforcharacterscomma27+countforcharacterscomma28
                                                                        + countforcharacterscomma29
                                                                        + countforcharactersvacuum1+countforcharactersvacuum2+countforcharactersvacuum3+countforcharactersvacuum4+countforcharactersvacuum5+countforcharactersvacuum6+countforcharactersvacuum7 
                                                                        + countforcharactersvacuum8+countforcharactersvacuum9+countforcharactersvacuum10+countforcharactersvacuum11+countforcharactersvacuum12+countforcharactersvacuum13+countforcharactersvacuum14
                                                                        + countforcharactersvacuum15+countforcharactersvacuum16+countforcharactersvacuum17+countforcharactersvacuum18+countforcharactersvacuum19+countforcharactersvacuum20+countforcharactersvacuum21
                                                                        + countforcharactersvacuum22+countforcharactersvacuum23+countforcharactersvacuum24+countforcharactersvacuum25+countforcharactersvacuum26+countforcharactersvacuum27+countforcharactersvacuum28
                                                                        + countforcharactersvacuum29 ));    
        
            }

            private static void calculatethedistributioninpairsofneighboringcharacters2() 
    
            {
                
            double paa = 15.0/372007.0;
            double pab = 669.0/372007.0;
            double pac = 1138.0/372007.0;
            double pad = 1437.0/372007.0;
            double pae = 13.0/372007.0;
            double paf = 409.0/372007.0;
            double pag = 753.0/372007.0;
            double pah = 35.0/372007.0;
            double pai = 1905.0/372007.0;
            double paj = 16.0/372007.0;
            double pak = 581.0/372007.0;
            double pal = 1657.0/372007.0;
            double pam = 749.0/372007.0;
            double pan = 2981.0/372007.0;
            double pao = 7.0/372007.0;
            double pap = 623.0/372007.0;
            double paq = 6.0/372007.0;
            double par = 2796.0/372007.0;
            double pas = 2384.0/372007.0;
            double pat = 2814.0/372007.0;
            double pau = 483.0/372007.0;
            double pav = 845.0/372007.0;
            double paw = 336.0/372007.0;
            double pax = 27.0/372007.0;
            double pay = 899.0/372007.0;
            double paz = 92.0/372007.0;
            double padot = 84.0/372007.0;
            double pacomma = 64.0/372007.0;
            double pavacuum = 1959.0/372007.0;  
            double pba = 660.0/372007.0;
            double pbb = 121.0/372007.0;
            double pbc = 1.0/372007.0;
            double pbe = 1668.0/372007.0;
            double pbf = 2.0/372007.0;
            double pbi = 390.0/372007.0;
            double pbj = 76.0/372007.0;
            double pbl = 742.0/372007.0;
            double pbm = 11.0/372007.0;
            double pbn = 4.0/372007.0;
            double pbo = 959.0/350144.0;
            double pbr = 515.0/372007.0;
            double pbs = 92.0/372007.0;
            double pbt = 25.0/372007.0;
            double pbu = 861.0/372007.0;
            double pbv = 25.0/372007.0;
            double pbw = 1.0/372007.0;
            double pby = 322.0/372007.0;
            double pbdot = 16.0/372007.0;
            double pbcomma = 9.0/372007.0;
            double pbvacuum = 97.0/372007.0;
            double pca = 1228.0/372007.0;
            double pcc = 132.0/372007.0;
            double pcd = 8.0/372007.0;
            double pce = 1400.0/372007.0;
            double pch = 1304.0/372007.0;
            double pci = 440.0/372007.0;
            double pck = 1043.0/372007.0;
            double pcl = 500.0/372007.0;
            double pco = 1456.0/372007.0;
            double pcq = 6.0/372007.0;
            double pcr = 456.0/372007.0;
            double pcs = 31.0/372007.0;
            double pct = 705.0/372007.0;
            double pcu = 356.0/372007.0;
            double pcv = 1.0/372007.0;
            double pcy = 43.0/372007.0;
            double pcdot = 44.0/372007.0;
            double pccomma = 22.0/372007.0;
            double pcvacuum = 222.0/372007.0;
            double pda = 629.0/372007.0;
            double pdb = 13.0/372007.0;
            double pdc = 22.0/372007.0;
            double pdd = 256.0/372007.0;
            double pde = 1511.0/372007.0;
            double pdf = 17.0/372007.0;
            double pdg = 92.0/372007.0;
            double pdh = 15.0/372007.0;
            double pdi = 1166.0/372007.0;
            double pdj = 12.0/372007.0;
            double pdk = 4.0/372007.0;
            double pdl = 163.0/372007.0;
            double pdm = 28.0/372007.0;
            double pdn = 448.0/372007.0;
            double pdo = 1230.0/372007.0;
            double pdp = 8.0/372007.0;
            double pdr = 502.0/372007.0;
            double pds = 485.0/372007.0;
            double pdt = 7.0/372007.0;
            double pdu = 159.0/372007.0;
            double pdv = 35.0/372007.0;
            double pdw = 15.0/372007.0;
            double pdy = 294.0/372007.0;
            double pddot = 1655.0/372007.0;
            double pdcomma = 754.0/372007.0;
            double pdvacuum = 3402.0/372007.0;
            double pea = 1834.0/372007.0;
            double peb = 90.0/372007.0;
            double pec = 1016.0/372007.0;
            double ped = 2851.0/372007.0;
            double pee = 1369.0/372007.0;
            double pef = 476.0/372007.0;
            double peg = 367.0/372007.0;
            double peh = 183.0/372007.0;
            double pei = 470.0/372007.0;
            double pej = 10.0/372007.0;
            double pek = 76.0/372007.0;
            double pel = 1458.0/372007.0;
            double pem = 801.0/372007.0;
            double pen = 2420.0/372007.0;
            double peo = 256.0/372007.0;
            double pep = 546.0/372007.0;
            double peq = 42.0/372007.0;
            double per = 3006.0/372007.0;
            double pes = 1997.0/372007.0;
            double pet = 1332.0/372007.0;
            double peu = 25.0/372007.0;
            double pev = 697.0/372007.0;
            double pew = 463.0/372007.0;
            double pex = 442.0/372007.0;
            double pey = 770.0/372007.0;
            double pez = 38.0/372007.0;
            double pedot = 1334.0/372007.0;
            double pecomma = 832.0/372007.0;
            double pevacuum = 4165.0/372007.0;
            double pfa = 569.0/372007.0;
            double pfb = 5.0/372007.0;
            double pfc = 1.0/372007.0;
            double pfe = 682.0/372007.0;
            double pff = 579.0/372007.0;
            double pfh = 1.0/372007.0;
            double pfi = 868.0/372007.0;
            double pfj = 22.0/372007.0;
            double pfl = 338.0/372007.0;
            double pfn = 2.0/372007.0;
            double pfo = 1186.0/372007.0;
            double pfr = 785.0/372007.0;
            double pfs = 29.0/372007.0;
            double pft = 522.0/372007.0;
            double pfu = 275.0/372007.0;
            double pfw = 4.0/372007.0;
            double pfy = 21.0/372007.0;
            double pfdot = 108.0/372007.0;
            double pfcomma = 62.0/372007.0;
            double pfvacuum = 1789.0/372007.0;
            double pga = 651.0/372007.0;
            double pgb = 5.0/372007.0;
            double pgd = 30.0/372007.0;
            double pge = 1128.0/372007.0;
            double pgf = 1.0/372007.0;
            double pgg = 165.0/372007.0;
            double pgh = 1195.0/372007.0;
            double pgi = 431.0/372007.0;
            double pgj = 2.0/372007.0;
            double pgl = 318.0/372007.0;
            double pgm = 7.0/372007.0;
            double pgn = 173.0/372007.0;
            double pgo = 711.0/372007.0;
            double pgp = 1.0/372007.0;
            double pgr = 439.0/372007.0;
            double pgs = 194.0/372007.0;
            double pgt = 20.0/372007.0;
            double pgu = 340.0/372007.0;
            double pgv = 17.0/372007.0;
            double pgy = 20.0/372007.0;
            double pgz = 1.0/372007.0;
            double pgdot = 421.0/372007.0;
            double pgcomma = 232.0/372007.0;
            double pgvacuum = 2210.0/372007.0; 
            double pha = 3197.0/372007.0;
            double phb = 3.0/372007.0;
            double phc = 1.0/372007.0;
            double phd = 1.0/372007.0;
            double phe = 1303.0/372007.0;
            double phf = 1303.0/372007.0;
            double phh = 1303.0/372007.0;
            double phi = 349.0/372007.0;
            double phl = 2.0/372007.0;
            double phm = 2.0/372007.0;
            double phn = 19.0/372007.0;
            double pho = 1188.0/372007.0;
            double php = 1188.0/372007.0;
            double phq = 1188.0/372007.0;
            double phr = 19.0/372007.0;
            double pht = 19.0/372007.0;
            double phu = 1085.0/372007.0;
            double phv = 1193.0/372007.0;
            double phw = 1193.0/372007.0;
            double phy = 70.0/372007.0;
            double phdot = 8.0/372007.0;
            double phcomma = 3.0/372007.0;
            double phvacuum = 19.0/372007.0;
            double pia = 586.0/372007.0;
            double pib = 180.0/372007.0;
            double pic = 1310.0/372007.0;
            double pid = 1969.0/372007.0;
            double pie = 858.0/372007.0;
            double pif = 670.0/372007.0;
            double pig = 943.0/372007.0;
            double pih = 12.0/372007.0;
            double pii = 2.0/372007.0;
            double pij = 1.0/372007.0;
            double pik = 475.0/372007.0;
            double pil = 1177.0/372007.0;
            double pim = 1058.0/372007.0;
            double pin = 3262.0/372007.0;
            double pio = 894.0/372007.0;
            double pip = 326.0/372007.0;
            double piq = 11.0/372007.0;
            double pir = 881.0/372007.0;
            double pis = 2156.0/372007.0;
            double pit = 2184.0/372007.0;
            double piu = 61.0/372007.0;
            double piv = 566.0/372007.0;
            double pix = 68.0/372007.0;
            double piz = 31.0/372007.0;
            double pidot = 10.0/372007.0;
            double picomma = 19.0/372007.0;
            double pivacuum = 1001.0/372007.0;      
            double pja = 91.0/372007.0;
            double pje = 107.0/372007.0;
            double pji = 14.0/372007.0;
            double pjo = 301.0/372007.0;
            double pju = 360.0/372007.0;
            double pjdot = 1.0/372007.0;
            double pka = 460.0/372007.0;
            double pkb = 4.0/372007.0;
            double pkc = 1.0/372007.0;
            double pkd = 7.0/372007.0;
            double pke = 1546.0/372007.0;
            double pkf = 2.0/372007.0;
            double pkg = 14.0/372007.0;
            double pkh = 3.0/372007.0;
            double pki = 703.0/372007.0;
            double pkj = 29.0/372007.0;
            double pkk = 20.0/372007.0;
            double pkl = 81.0/372007.0;
            double pkm = 3.0/372007.0;
            double pkn = 591.0/372007.0;
            double pko = 79.0/372007.0;
            double pkp = 3.0/372007.0;
            double pkr = 43.0/372007.0;
            double pks = 183.0/372007.0;
            double pkt = 15.0/372007.0;
            double pku = 13.0/372007.0;
            double pkv = 17.0/372007.0;
            double pkw = 12.0/372007.0;
            double pky = 34.0/372007.0;
            double pkdot = 286.0/372007.0;
            double pkcomma = 178.0/372007.0;
            double pkvacuum = 1184.0/372007.0;   
            double pla = 1213.0/372007.0;
            double plb = 25.0/372007.0;
            double plc = 56.0/372007.0;
            double pld = 1129.0/372007.0;
            double ple = 2091.0/372007.0;
            double plf = 284.0/372007.0;
            double plg = 28.0/372007.0;
            double plh = 3.0/372007.0;
            double pli = 1594.0/372007.0;
            double plj = 1.0/372007.0;
            double plk = 203.0/372007.0;
            double pll = 1677.0/372007.0;
            double plm = 265.0/372007.0;
            double pln = 20.0/372007.0;
            double plo = 1343.0/372007.0;
            double plp = 78.0/372007.0;
            double plr = 103.0/372007.0;
            double pls = 341.0/372007.0;
            double plt = 295.0/372007.0;
            double plu = 304.0/372007.0;
            double plv = 210.0/372007.0;
            double plw = 76.0/372007.0;
            double ply = 1002.0/372007.0;
            double plz = 1.0/372007.0;
            double pldot = 237.0/372007.0;
            double plcomma = 219.0/372007.0;
            double plvacuum = 1488.0/372007.0; 
            double pma = 1357.0/372007.0;
            double pmb = 275.0/372007.0;
            double pmc = 5.0/372007.0;
            double pmd = 1.0/372007.0;
            double pme = 1873.0/372007.0;
            double pmf = 6.0/372007.0;
            double pmh = 2.0/372007.0;
            double pmi = 799.0/372007.0;
            double pml = 21.0/372007.0;
            double pmm = 253.0/372007.0;
            double pmn = 32.0/372007.0;
            double pmo = 924.0/372007.0;
            double pmp = 444.0/372007.0;
            double pmr = 2.0/372007.0;
            double pms = 243.0/372007.0;
            double pmt = 11.0/372007.0;
            double pmu = 387.0/372007.0;
            double pmw = 2.0/372007.0;
            double pmy = 209.0/372007.0;
            double pmdot = 442.0/372007.0;
            double pmcomma = 176.0/372007.0;
            double pmvacuum = 1327.0/372007.0;  
            double pna = 694.0/372007.0;
            double pnb = 16.0/372007.0;
            double pnc = 661.0/372007.0;
            double pnd = 2494.0/372007.0;
            double pne = 1991.0/372007.0;
            double pnf = 138.0/372007.0;
            double png = 2492.0/372007.0;
            double pnh = 34.0/372007.0;
            double pni = 800.0/372007.0;
            double pnj = 31.0/372007.0;
            double pnk = 507.0/372007.0;
            double pnl = 268.0/372007.0;
            double pnm = 28.0/372007.0;
            double pnn = 296.0/372007.0;
            double pno = 1739.0/372007.0;
            double pnp = 14.0/372007.0;
            double pnq = 22.0/372007.0;
            double pnr = 19.0/372007.0;
            double pns = 994.0/372007.0;
            double pnt = 1642.0/372007.0;
            double pnu = 230.0/372007.0;
            double pnv = 127.0/372007.0;
            double pnw = 8.0/372007.0;
            double pnx = 6.0/372007.0;
            double pny = 434.0/372007.0;
            double pnz = 6.0/372007.0;
            double pndot = 770.0/372007.0;
            double pncomma = 453.0/372007.0;
            double pnvacuum = 3207.0/372007.0;  
            double poa = 300.0/372007.0;
            double pob = 285.0/372007.0;
            double poc = 397.0/372007.0;
            double pod = 746.0/372007.0;
            double poe = 149.0/372007.0;
            double pof = 1646.0/372007.0;
            double pog = 219.0/372007.0;
            double poh = 106.0/372007.0;
            double poi = 511.0/372007.0;
            double poj = 7.0/372007.0;
            double pok = 734.0/372007.0;
            double pol = 1205.0/372007.0;
            double pom = 1467.0/372007.0;
            double pon = 2484.0/372007.0;
            double poo = 1384.0/372007.0;
            double pop = 825.0/372007.0;
            double poq = 1.0/372007.0;
            double por = 2003.0/372007.0;
            double pos = 820.0/372007.0;
            double pot = 1416.0/372007.0;
            double pou = 2844.0/372007.0;
            double pov = 565.0/372007.0;
            double pow = 1555.0/372007.0;
            double pox = 71.0/372007.0;
            double poy = 178.0/372007.0;
            double poz = 22.0/372007.0;
            double podot = 161.0/372007.0;
            double pocomma = 185.0/372007.0;
            double povacuum = 2466.0/372007.0;
            double ppa = 728.0/372007.0;
            double ppb = 11.0/372007.0;
            double ppd = 4.0/372007.0;
            double ppe = 1351.0/372007.0;
            double ppf = 1.0/372007.0;
            double pph = 223.0/372007.0;
            double ppi = 397.0/372007.0;
            double ppk = 6.0/372007.0;
            double ppl = 656.0/372007.0;
            double ppm = 5.0/372007.0;
            double ppo = 777.0/372007.0;
            double ppp = 564.0/372007.0;
            double ppr = 725.0/372007.0;
            double pps = 305.0/372007.0;
            double ppt = 214.0/372007.0;
            double ppu = 307.0/372007.0;
            double ppw = 13.0/372007.0;
            double ppy = 50.0/372007.0;
            double ppdot = 190.0/372007.0;
            double ppcomma = 101.0/372007.0;
            double ppvacuum = 877.0/372007.0;
            double pqs = 1.0/372007.0;
            double pqu = 399.0/372007.0;
            double pqdot = 12.0/372007.0;
            double pqcomma = 8.0/372007.0;
            double pqvacuum = 12.0/372007.0;
            double pra = 1371.0/372007.0;
            double prb = 71.0/372007.0;
            double prc = 240.0/372007.0;
            double prd = 751.0/372007.0;
            double pre = 2798.0/372007.0;
            double prf = 91.0/372007.0;
            double prg = 317.0/372007.0;
            double prh = 88.0/372007.0;
            double pri = 1573.0/372007.0;
            double prj = 2.0/372007.0;
            double prk = 335.0/372007.0;
            double prl = 205.0/372007.0;
            double prm = 375.0/372007.0;
            double prn = 555.0/372007.0;
            double pro = 1645.0/372007.0;
            double prp = 102.0/372007.0;
            double prq = 6.0/372007.0;
            double prr = 1812.0/372007.0;
            double prs = 1089.0/372007.0;
            double prt = 786.0/372007.0;
            double pru = 463.0/372007.0;
            double prv = 177.0/372007.0;
            double prw = 158.0/372007.0;
            double pry = 1793.0/372007.0;
            double prz = 1.0/372007.0;
            double prdot = 777.0/372007.0;
            double prcomma = 397.0/372007.0;
            double prvacuum = 3591.0/372007.0;
            double psa = 1629.0/372007.0;
            double psb = 47.0/372007.0;
            double psc = 373.0/372007.0;
            double psd = 13.0/372007.0;
            double pse = 1949.0/372007.0;
            double psf = 29.0/372007.0;
            double psg = 15.0/372007.0;
            double psh = 1532.0/372007.0;
            double psi = 1219.0/372007.0;
            double psj = 2.0/372007.0;
            double psk = 655.0/372007.0;
            double psl = 373.0/372007.0;
            double psm = 342.0/372007.0;
            double psn = 446.0/372007.0;
            double pso = 1229.0/372007.0;
            double psp = 606.0/372007.0;
            double psq = 63.0/372007.0;
            double psr = 8.0/372007.0;
            double pss = 1028.0/372007.0;
            double pst = 2212.0/372007.0;
            double psu = 669.0/372007.0;
            double psv = 57.0/372007.0;
            double psw = 306.0/372007.0;
            double psy = 198.0/372007.0;
            double psdot = 1081.0/372007.0;
            double pscomma = 727.0/372007.0;
            double psvacuum = 3356.0/372007.0;
            double pta = 1237.0/372007.0;
            double ptb = 19.0/372007.0;
            double ptc = 332.0/372007.0;
            double ptd = 4.0/372007.0;
            double pte = 2022.0/372007.0;
            double ptf = 10.0/372007.0;
            double ptg = 3.0/372007.0;
            double pth = 3750.0/372007.0;
            double pti = 1678.0/372007.0;
            double ptj = 6.0/372007.0;
            double ptk = 1.0/372007.0;
            double ptl = 430.0/372007.0;
            double ptm = 68.0/372007.0;
            double ptn = 39.0/372007.0;
            double pto = 2370.0/372007.0;
            double ptp = 19.0/372007.0;
            double ptr = 1132.0/372007.0;
            double pts = 580.0/372007.0;
            double ptt = 772.0/372007.0;
            double ptu = 553.0/372007.0;
            double ptv = 53.0/372007.0;
            double ptw = 368.0/372007.0;
            double pty = 412.0/372007.0;
            double ptz = 5.0/372007.0;
            double ptdot = 860.0/372007.0;
            double ptcomma = 497.0/372007.0;
            double ptvacuum = 3600.0/372007.0;   
            double pua = 223.0/372007.0;
            double pub = 154.0/372007.0;
            double puc = 335.0/372007.0;
            double pud = 244.0/372007.0;
            double pue = 372.0/372007.0;
            double puf = 84.0/372007.0;
            double pug = 757.0/372007.0;
            double puh = 11.0/372007.0;
            double pui = 317.0/372007.0;
            double puk = 16.0/372007.0;
            double pul = 1093.0/372007.0;
            double pum = 420.0/372007.0;
            double pun = 1220.0/372007.0;
            double puo = 10.0/372007.0;
            double pup = 711.0/372007.0;
            double pur = 1274.0/372007.0;
            double pus = 1161.0/372007.0;
            double put = 1562.0/372007.0;
            double puu = 2.0/372007.0;
            double puv = 19.0/372007.0;
            double pux = 5.0/372007.0;
            double puy = 41.0/372007.0;
            double puz = 17.0/372007.0;
            double pudot = 61.0/372007.0;
            double pucomma = 46.0/372007.0;
            double puvacuum = 1079.0/372007.0;  
            double pva = 150.0/372007.0;
            double pvd = 5.0/372007.0;
            double pve = 2005.0/372007.0;
            double pvi = 556.0/372007.0;
            double pvl = 1.0/372007.0;
            double pvo = 282.0/372007.0;
            double pvs = 2.0/372007.0;
            double pvu = 8.0/372007.0;
            double pvv = 2.0/372007.0;
            double pvy = 21.0/372007.0;
            double pvdot = 14.0/372007.0;
            double pvcomma = 3.0/372007.0;
            double pvvacuum = 42.0/372007.0;   
            double pwa = 1891.0/372007.0;
            double pwb = 14.0/372007.0;
            double pwc = 2.0/372007.0;
            double pwd = 15.0/372007.0;
            double pwe = 1370.0/372007.0;
            double pwf = 7.0/372007.0;
            double pwg = 1.0/372007.0;
            double pwh = 1666.0/372007.0;
            double pwi = 1226.0/372007.0;
            double pwk = 3.0/372007.0;
            double pwl = 83.0/372007.0;
            double pwm = 139.0/372007.0;
            double pwn = 520.0/372007.0;
            double pwo = 943.0/372007.0;
            double pwp = 6.0/372007.0;
            double pwr = 108.0/372007.0;
            double pws = 147.0/372007.0;
            double pwt = 1.0/372007.0;
            double pwu = 14.0/372007.0;
            double pww = 1.0/372007.0;
            double pwy = 6.0/372007.0;
            double pwdot = 214.0/372007.0;
            double pwcomma = 140.0/372007.0;
            double pwvacuum = 975.0/372007.0;
            double pxa = 69.0/372007.0;
            double pxc = 62.0/372007.0;
            double pxe = 45.0/372007.0;
            double pxh = 11.0/372007.0;
            double pxi = 57.0/372007.0;
            double pxo = 7.0/372007.0;
            double pxp = 170.0/372007.0;
            double pxt = 111.0/372007.0;
            double pxu = 13.0/372007.0;
            double pxy = 9.0/372007.0;
            double pxdot = 9.0/372007.0;
            double pxcomma = 11.0/372007.0;
            double pxvacuum = 105.0/372007.0; 
            double pya = 36.0/372007.0;
            double pyb = 36.0/372007.0;
            double pyc = 40.0/372007.0;
            double pyd = 8.0/372007.0;
            double pye = 620.0/372007.0;
            double pyf = 3.0/372007.0;
            double pyg = 55.0/372007.0;
            double pyh = 3.0/372007.0;
            double pyi = 199.0/372007.0;
            double pyj = 2.0/372007.0;
            double pyl = 89.0/372007.0;
            double pym = 24.0/372007.0;
            double pyn = 36.0/372007.0;
            double pyo = 1332.0/372007.0;
            double pyp = 49.0/372007.0;
            double pyr = 25.0/372007.0;
            double pys = 247.0/372007.0;
            double pyt = 157.0/372007.0;
            double pyu = 3.0/372007.0;
            double pyv = 5.0/372007.0;
            double pyw = 53.0/372007.0;
            double pyx = 1.0/372007.0;
            double pydot = 580.0/372007.0;
            double pycomma = 370.0/372007.0;
            double pyvacuum = 2879.0/372007.0;
            double pza = 10.0/372007.0;
            double pze = 120.0/372007.0;
            double pzh = 2.0/372007.0;
            double pzi = 45.0/372007.0;
            double pzl = 12.0/372007.0;
            double pzm = 1.0/372007.0;
            double pzo = 14.0/372007.0;
            double pzy = 18.0/372007.0;
            double pzz = 34.0/372007.0;
            double pzcomma = 1.0/372007.0;
            double pzvacuum = 8.0/372007.0;
            double pdotk = 1.0/372007.0;
            double pdotm = 1.0/372007.0;
            double pdotn = 1.0/372007.0;
            double pdotcomma = 1.0/372007.0;
            double pdotvacuum = 8.0/372007.0;
            double pcommavacuum = 2897.0/372007.0;
            double pvacuuma = 3536.0/372007.0;
            double pvacuumb = 2557.0/372007.0;
            double pvacuumc = 2362.0/372007.0;
            double pvacuumd = 2174.0/372007.0;
            double pvacuume = 1356.0/372007.0;
            double pvacuumf = 2171.0/372007.0;
            double pvacuumg = 1541.0/372007.0;
            double pvacuumh = 3512.0/372007.0;
            double pvacuumi = 2963.0/372007.0;
            double pvacuumj = 599.0/372007.0;
            double pvacuumk = 1038.0/372007.0;
            double pvacuuml = 1974.0/372007.0;
            double pvacuumm = 2250.0/372007.0;
            double pvacuumn = 1686.0/372007.0;
            double pvacuumo = 2653.0/372007.0;
            double pvacuump = 1860.0/372007.0;
            double pvacuumq = 274.0/372007.0;
            double pvacuumr = 1878.0/372007.0;
            double pvacuums = 3798.0/372007.0;
            double pvacuumt = 3870.0/372007.0;
            double pvacuumu = 1087.0/372007.0;
            double pvacuumv = 711.0/372007.0;
            double pvacuumw = 3244.0/372007.0;
            double pvacuumx = 1.0/372007.0;
            double pvacuumy = 1528.0/372007.0;
            double pvacuumz = 21.0/372007.0;
            double pvacuumdot = 239.0/372007.0;
            double pvacuumcomma = 33.0/372007.0;  
            double pvacuumvacuum = 3002.0/372007.0;   

            double sumprobability = paa+pab+pac+pad+pae+paf+pag+pah+pai+paj+pak+pal+pam+pan+pao+pap+paq+par+pas+pat+pau+pav+paw+pax+pay+paz+padot+pacomma+pavacuum
                                   +pba+pbb+pbc+pbe+pbf+pbi+pbj+pbl+pbm+pbn+pbo+pbr+pbs+pbt+pbu+pbv+pbw+pby+pbdot+pbcomma+pbvacuum
                                   +pca+pcc+pcd+pce+pch+pci+pck+pcl+pco+pcq+pcr+pcs+pct+pcu+pcv+pcy+pcdot+pccomma+pcvacuum
                                   +pda+pdb+pdc+pdd+pde+pdf+pdg+pdh+pdi+pdj+pdk+pdl+pdm+pdn+pdo+pdp+pdr+pds+pdt+pdu+pdv+pdw+pdy+pddot+pdcomma+pdvacuum
                                   +pea+peb+pec+ped+pee+pef+peg+peh+pei+pej+pek+pel+pem+pen+peo+pep+peq+per+pes+pet+peu+pev+pww+pex+pey+pez+pedot+pecomma+pevacuum
                                   +pfa+pfb+pfc+pfe+pff+pfh+pfi+pfj+pfl+pfn+pfo+pfr+pfs+pft+pfu+pfw+pfy+pfdot+pfcomma+pfvacuum
                                   +pga+pgb+pgd+pge+pgf+pgg+pgh+pgi+pgj+pgl+pgm+pgn+pgo+pgp+pgr+pgs+pgt+pgu+pgv+pgy+pgz+pgdot+pgcomma+pgvacuum
                                   +pha+phb+phc+phd+phe+phf+phh+phi+phl+phm+phn+pho+php+phq+phr+pht+phu+phv+phw+phy+phdot+phcomma+phvacuum
                                   +pia+pib+pic+pid+pie+pif+pig+pih+pii+pij+pik+pil+pim+pin+pio+pip+piq+pir+pis+pit+piu+piv+pix+piz+pidot+picomma+pivacuum
                                   +pja+pje+pji+pjo+pju+pjdot
                                   +pka+pkb+pkc+pkd+pke+pkf+pkg+pkh+pki+pkj+pkk+pkl+pkm+pkn+pko+pkp+pkr+pks+pkt+pku+pkv+pkw+pky+pkdot+pkcomma+pkvacuum
                                   +pla+plb+plc+pld+ple+plf+plg+plh+pli+plj+plk+pll+plm+pln+plo+plp+plr+pls+plt+plu+plv+plw+ply+plz+pldot+plcomma+plvacuum
                                   +pma+pmb+pmc+pmd+pme+pmf+pmh+pmi+pml+pmm+pmn+pmo+pmp+pmr+pms+pmt+pmu+pmw+pmy+pmdot+pmcomma+pmvacuum
                                   +pna+pnb+pnc+pnd+pne+pnf+png+pnh+pni+pnj+pnk+pnl+pnm+pnn+pno+pnp+pnq+pnr+pns+pnt+pnu+pnv+pnw+pnx+pny+pnz+pndot+pncomma+pnvacuum
                                   +poa+pob+poc+pod+poe+pof+pog+poh+poi+poj+pok+pol+pom+pon+poo+pop+poq+por+pos+pot+pou+pov+pow+pox+poy+poz+podot+pocomma+povacuum
                                   +ppa+ppb+ppd+ppe+ppf+pph+ppi+ppk+ppl+ppm+ppo+ppp+ppr+pps+ppt+ppu+ppw+ppy+ppdot+ppcomma+ppvacuum
                                   +pqs+pqu+pqdot+pqcomma+pqvacuum
                                   +pra+prb+prc+prd+pre+prf+prg+prh+pri+prj+prk+prl+prm+prn+pro+prp+prq+prr+prs+prt+pru+prv+prw+pry+prz+prdot+prcomma+prvacuum
                                   +psa+psb+psc+psd+pse+psf+psg+psh+psi+psj+psk+psl+psm+psn+pso+psp+psq+psr+pss+pst+psu+psv+psw+psy+psdot+pscomma+psvacuum
                                   +pta+ptb+ptc+ptd+pte+ptf+ptg+pth+pti+ptj+ptk+ptl+ptm+ptn+pto+ptp+ptr+pts+ptt+ptu+ptv+ptw+pty+ptz+ptdot+ptcomma+ptvacuum
                                   +pua+pub+puc+pud+pue+puf+pug+puh+pui+puk+pul+pum+pun+puo+pup+pur+pus+put+puu+puv+pux+puy+puz+pudot+pucomma+puvacuum
                                   +pva+pvd+pve+pvi+pvl+pvo+pvs+pvu+pvv+pvy+pvdot+pvcomma+pvvacuum
                                   +pwa+pwb+pwc+pwd+pwe+pwf+pwg+pwh+pwi+pwk+pwl+pwm+pwn+pwo+pwp+pwr+pws+pwt+pwu+pww+pwy+pwdot+pwcomma+pwvacuum
                                   +pxa+pxc+pxe+pxh+pxi+pxo+pxp+pxt+pxu+pxy+pxdot+pxcomma+pxvacuum
                                   +pya+pyb+pyc+pyd+pye+pyf+pyg+pyh+pyi+pyj+pyl+pym+pyn+pyo+pyp+pyr+pys+pyt+pyu+pyv+pyw+pyx+pydot+pycomma+pyvacuum
                                   +pza+pze+pzh+pzi+pzl+pzm+pzo+pzy+pzz+pzcomma+pzvacuum
                                   +pdotk+pdotm+pdotn+pdotcomma+pdotvacuum
                                   +pcommavacuum
                                   +pvacuuma+pvacuumb+pvacuumc+pvacuumd+pvacuume+pvacuumf+pvacuumg+pvacuumh+pvacuumi+pvacuumj+pvacuumk+pvacuuml+pvacuumm+pvacuumn+pvacuumo+pvacuump+pvacuumq+pvacuumr+pvacuums+pvacuumt+pvacuumu+pvacuumv+pvacuumw+pvacuumx+pvacuumy+pvacuumz+pvacuumdot+pvacuumcomma+pvacuumvacuum;
            
            System.out.println("\nP(aa) = 19.0/372007.0 = " + paa );
            System.out.println("\nP(ab) = 137.0/372007.0 = " + pab );
            System.out.println("\nP(ac) = 26.0/372007.0 = " + pac );
            System.out.println("\nP(ad) = 1088.0/372007.0 = " + pad );
            System.out.println("\nP(ae) = 805.0/372007.0 = " + pae );
            System.out.println("\nP(af) = 285.0/372007.0 = " + paf );
            System.out.println("\nP(ag) = 830.0/372007.0 = " + pag );
            System.out.println("\nP(ah) = 27.0/372007.0 = " + pah );
            System.out.println("\nP(ai) = 55.0/372007.0 = " + pai );
            System.out.println("\nP(aj) = 9.0/372007.0 = " + paj );
            System.out.println("\nP(ak) = 1403.0/372007.0 = " + pak );
            System.out.println("\nP(al) = 1574.0/372007.0 = " + pal );
            System.out.println("\nP(am) = 1042.0/372007.0 = " + pam );
            System.out.println("\nP(an) = 2880.0/372007.0 = " + pan );
            System.out.println("\nP(ao) = 6.0/372007.0 = " + pao );
            System.out.println("\nP(ap) = 746.0/372007.0 = " + pap );
            System.out.println("\nP(aq) = 746.0/372007.0 = " + paq );
            System.out.println("\nP(ar) = 3292.0/372007.0 = " + par );
            System.out.println("\nP(as) = 1156.0/372007.0 = " + pas );
            System.out.println("\nP(at) = 2142.0/372007.0 = " + pat );
            System.out.println("\nP(au) = 205.0/372007.0 = " + pau );
            System.out.println("\nP(av) = 1207.0/372007.0 = " + pav );
            System.out.println("\nP(aw) = 1.0/372007.0 = " + paw );
            System.out.println("\nP(ax) = 6.0/372007.0 = " + pax );
            System.out.println("\nP(ay) = 14.0/372007.0 = " + pay );
            System.out.println("\nP(az) = 18.0/372007.0 = " + paz );
            System.out.println("\nP(a.) = 577.0/372007.0 = " + padot );
            System.out.println("\nP(a,) = 376.0/372007.0 = " + pacomma );
            System.out.println("\nP(avacuum) = 3677.0/372007.0 = " + pavacuum );
            System.out.println("\nP(ba) = 660.0/372007.0 = " + pba );
            System.out.println("\nP(bb) = 121.0/372007.0 = " + pbb );
            System.out.println("\nP(bc) = 1.0/372007.0 = " + pbc );
            System.out.println("\nP(be) = 1668.0/372007.0 = " + pbe );
            System.out.println("\nP(bf) = 2.0/372007.0 = " + pbf );
            System.out.println("\nP(bi) = 390.0/372007.0 = " + pbi );
            System.out.println("\nP(bj) = 76.0/372007.0 = " + pbj );
            System.out.println("\nP(bl) = 742.0/372007.0 = " + pbl );
            System.out.println("\nP(bm) = 11.0/372007.0 = " + pbm );
            System.out.println("\nP(bn) = 4.0/372007.0 = " + pbn );
            System.out.println("\nP(bo) = 959.0/372007.0 = " + pbo );
            System.out.println("\nP(br) = 515.0/372007.0 = " + pbr );
            System.out.println("\nP(bs) = 92.0/372007.0 = " + pbs );
            System.out.println("\nP(bt) = 25.0/372007.0 = " + pbt );
            System.out.println("\nP(bu) = 861.0/372007.0 = " + pbu );
            System.out.println("\nP(bv) = 25.0/372007.0 = " + pbv );
            System.out.println("\nP(bw) = 1.0/372007.0 = " + pbw );
            System.out.println("\nP(by) = 322.0/372007.0 = " + pby );
            System.out.println("\nP(b.) = 16.0/372007.0 = " + pbdot );
            System.out.println("\nP(b,) = 9.0/372007.0 = " + pbcomma );
            System.out.println("\nP(bvacuum) = 97.0/372007.0 = " + pbvacuum );
            System.out.println("\nP(ca) = 1228.0/372007.0 = " + pca );
            System.out.println("\nP(cc) = 132.0/372007.0 = " + pcc );
            System.out.println("\nP(cd) = 8.0/372007.0 = " + pcd );
            System.out.println("\nP(ce) = 1400.0/372007.0 = " + pce );
            System.out.println("\nP(ch) = 1304.0/372007.0 = " + pch );
            System.out.println("\nP(ci) = 440.0/372007.0 = " + pci );
            System.out.println("\nP(ck) = 1043.0/372007.0 = " + pck );
            System.out.println("\nP(cl) = 500.0/372007.0 = " + pcl );
            System.out.println("\nP(co) = 1456.0/372007.0 = " + pco );
            System.out.println("\nP(cq) = 6.0/372007.0 = " + pcq );
            System.out.println("\nP(cr) = 456.0/372007.0 = " + pcr );
            System.out.println("\nP(cs) = 31.0/372007.0 = " + pcs );
            System.out.println("\nP(ct) = 705.0/372007.0 = " + pct );
            System.out.println("\nP(cu) = 356.0/372007.0 = " + pcu );
            System.out.println("\nP(cv) = 1.0/372007.0 = " + pcv );
            System.out.println("\nP(cy) = 43.0/372007.0 = " + pcy );
            System.out.println("\nP(c.) = 44.0/372007.0 = " + pcdot );
            System.out.println("\nP(c,) = 22.0/372007.0 = " + pccomma );
            System.out.println("\nP(cvacuum) = 222.0/372007.0 = " + pcvacuum );
            System.out.println("\nP(da) = 629.0/372007.0 = " + pda );
            System.out.println("\nP(db) = 13.0/372007.0 = " + pdb );
            System.out.println("\nP(dc) = 22.0/372007.0 = " + pdc );
            System.out.println("\nP(dd) = 256.0/372007.0 = " + pdd );
            System.out.println("\nP(de) = 1511.0/372007.0 = " + pde );
            System.out.println("\nP(df) = 17.0/372007.0 = " + pdf );
            System.out.println("\nP(dg) = 92.0/372007.0 = " + pdg );
            System.out.println("\nP(dh) = 15.0/372007.0 = " + pdh );
            System.out.println("\nP(di) = 1166.0/372007.0 = " + pdi );
            System.out.println("\nP(dj) = 12.0/372007.0 = " + pdj );
            System.out.println("\nP(dk) = 4.0/372007.0 = " + pdk);
            System.out.println("\nP(dl) = 163.0/372007.0 = " + pdl );
            System.out.println("\nP(dm) = 28.0/372007.0 = " + pdm );
            System.out.println("\nP(dn) = 448.0/372007.0 = " + pdn );
            System.out.println("\nP(do) = 1230.0/372007.0 = " + pdo );
            System.out.println("\nP(dp) = 8.0/372007.0 = " + pdp );
            System.out.println("\nP(dr) = 502.0/372007.0 = " + pdr );
            System.out.println("\nP(ds) = 485.0/372007.0 = " + pds );
            System.out.println("\nP(dt) = 7.0/372007.0 = " + pdt );
            System.out.println("\nP(du) = 159.0/372007.0 = " + pdu );
            System.out.println("\nP(dv) = 35.0/372007.0 = " + pdv );
            System.out.println("\nP(dw) = 15.0/372007.0 = " + pdw );
            System.out.println("\nP(dy) = 294.0/372007.0 = " + pdy );
            System.out.println("\nP(d.) = 1655.0/372007.0 = " + pddot );
            System.out.println("\nP(d,) = 754.0/372007.0 = " + pdcomma );
            System.out.println("\nP(dvacuum) = 3402.0/372007.0 = " + pdvacuum );
            System.out.println("\nP(ea) = 1834.0/372007.0 = " + pea );
            System.out.println("\nP(eb) = 90.0/372007.0 = " + peb );
            System.out.println("\nP(ec) = 1016.0/372007.0 = " + pec );
            System.out.println("\nP(ed) = 2851.0/372007.0 = " + ped );
            System.out.println("\nP(ee) = 1369.0/372007.0 = " + pee );
            System.out.println("\nP(ef) = 476.0/372007.0 = " + pef );
            System.out.println("\nP(eg) = 367.0/372007.0 = " + peg );
            System.out.println("\nP(eh) = 183.0/372007.0 = " + peh );
            System.out.println("\nP(ei) = 470.0/372007.0 = " + pei );
            System.out.println("\nP(ej) = 10.0/372007.0 = " + pej );
            System.out.println("\nP(ek) = 76.0/372007.0 = " + pek );
            System.out.println("\nP(el) = 1458.0/372007.0 = " + pel );
            System.out.println("\nP(em) = 801.0/372007.0 = " + pem );
            System.out.println("\nP(en) = 2420.0/372007.0 = " + pen );
            System.out.println("\nP(eo) = 256.0/372007.0 = " + peo );
            System.out.println("\nP(ep) = 546.0/372007.0 = " + pep );
            System.out.println("\nP(eq) = 42.0/372007.0 = " + peq );
            System.out.println("\nP(er) = 3006.0/372007.0 = " + per );
            System.out.println("\nP(es) = 1997.0/372007.0 = " + pes );
            System.out.println("\nP(et) = 1332.0/372007.0 = " + pet );
            System.out.println("\nP(eu) = 25.0/372007.0 = " + peu );
            System.out.println("\nP(ev) = 697.0/372007.0 = " + pev );
            System.out.println("\nP(ew) = 463.0/372007.0 = " + pew );
            System.out.println("\nP(ex) = 442.0/372007.0 = " + pex );
            System.out.println("\nP(ey) = 770.0/372007.0 = " + pey );
            System.out.println("\nP(ez) = 38.0/372007.0 = " + pez );
            System.out.println("\nP(e.) = 1334.0/372007.0 = " + pedot );
            System.out.println("\nP(e,) = 832.0/372007.0 = " + pecomma );
            System.out.println("\nP(evacuum) = 4165.0/372007.0 = " + pevacuum );
            System.out.println("\nP(fa) = 569.0/372007.0 = " + pfa );
            System.out.println("\nP(fb) = 5.0/372007.0 = " + pfb );
            System.out.println("\nP(fc) = 1.0/372007.0 = " + pfc );
            System.out.println("\nP(fe) = 682.0/372007.0 = " + pfe );
            System.out.println("\nP(ff) = 579.0/372007.0 = " + pff );
            System.out.println("\nP(fh) = 1.0/372007.0 = " + pfh );
            System.out.println("\nP(fi) = 868.0/372007.0 = " + pfi );
            System.out.println("\nP(fj) = 22.0/372007.0 = " + pfj );
            System.out.println("\nP(fl) = 338.0/372007.0 = " + pfl );
            System.out.println("\nP(fn) = 2.0/372007.0 = " + pfn );
            System.out.println("\nP(fo) = 1186.0/372007.0 = " + pfo );
            System.out.println("\nP(fr) = 785.0/372007.0 = " + pfr );
            System.out.println("\nP(fs) = 29.0/372007.0 = " + pfs );
            System.out.println("\nP(ft) = 522.0/372007.0 = " + pft );
            System.out.println("\nP(fu) = 275.0/372007.0 = " + pfu );
            System.out.println("\nP(fw) = 4.0/372007.0 = " + pfw );
            System.out.println("\nP(fy) = 21.0/372007.0 = " + pfy );
            System.out.println("\nP(f.) = 108.0/372007.0 = " + pfdot );
            System.out.println("\nP(f,) = 62.0/372007.0 = " + pfcomma );
            System.out.println("\nP(fvacuum) = 1789.0/372007.0 = " + pfvacuum );
            System.out.println("\nP(ga) = 651.0/372007.0 = " + pga );
            System.out.println("\nP(gb) = 5.0/372007.0 = " + pgb );
            System.out.println("\nP(gd) = 30.0/372007.0 = " + pgd );
            System.out.println("\nP(ge) = 1128.0/372007.0 = " + pge );
            System.out.println("\nP(gf) = 1.0/372007.0 = " + pgf );
            System.out.println("\nP(gg) = 165.0/372007.0 = " + pgg );
            System.out.println("\nP(gh) = 1195.0/372007.0 = " + pgh );
            System.out.println("\nP(gi) = 431.0/372007.0 = " + pgi );
            System.out.println("\nP(gj) = 2.0/372007.0 = " + pgj );
            System.out.println("\nP(gl) = 318.0/372007.0 = " + pgl );
            System.out.println("\nP(gm) = 7.0/372007.0 = " + pgm );
            System.out.println("\nP(gn) = 173.0/372007.0 = " + pgn );
            System.out.println("\nP(go) = 711.0/372007.0 = " + pgo );
            System.out.println("\nP(gp) = 1.0/372007.0 = " + pgp );
            System.out.println("\nP(gr) = 439.0/372007.0 = " + pgr );
            System.out.println("\nP(gs) = 194.0/372007.0 = " + pgs );
            System.out.println("\nP(gt) = 20.0/372007.0 = " + pgt );
            System.out.println("\nP(gu) = 340.0/372007.0 = " + pgu );
            System.out.println("\nP(gv) = 17.0/372007.0 = " + pgv );
            System.out.println("\nP(gy) = 20.0/372007.0 = " + pgy );
            System.out.println("\nP(gz) = 1.0/372007.0 = " + pgz );
            System.out.println("\nP(g.) = 421.0/372007.0 = " + pgdot );
            System.out.println("\nP(g,) = 232.0/372007.0 = " + pgcomma );
            System.out.println("\nP(gvacuum) = 2210.0/372007.0 = " + pgvacuum );
            System.out.println("\nP(ha) = 3233.0/372007.0 = " + pha );
            System.out.println("\nP(hb) = 33.0/372007.0 = " + phb );
            System.out.println("\nP(hc) = 3.0/372007.0 = " + phc );
            System.out.println("\nP(hd) = 10.0/372007.0 = " + phd );
            System.out.println("\nP(he) = 3834.0/372007.0 = " + phe );
            System.out.println("\nP(hf) = 9.0/372007.0 = " + phf );
            System.out.println("\nP(hh) = 5.0/372007.0 = " + phh );
            System.out.println("\nP(hi) = 2504.0/372007.0 = " + phi );
            System.out.println("\nP(hl) = 21.0/372007.0 = " + phl );
            System.out.println("\nP(hm) = 15.0/372007.0 = " + phm );
            System.out.println("\nP(hn) = 38.0/372007.0 = " + phn );
            System.out.println("\nP(ho) = 1780.0/372007.0 = " + pho );
            System.out.println("\nP(hp) = 1.0/372007.0 = " + php );
            System.out.println("\nP(hq) = 31.0/372007.0 = " + phq );
            System.out.println("\nP(hr) = 387.0/372007.0 = " + phr );
            System.out.println("\nP(ht) = 883.0/372007.0 = " + pht );
            System.out.println("\nP(hu) = 301.0/372007.0 = " + phu );
            System.out.println("\nP(hv) = 1.0/372007.0 = " + phv );
            System.out.println("\nP(hw) = 5.0/372007.0 = " + phw );
            System.out.println("\nP(hy) = 205.0/372007.0 = " + phy );
            System.out.println("\nP(h.) = 240.0/372007.0 = " + phdot );
            System.out.println("\nP(h,) = 123.0/372007.0 = " + phcomma );
            System.out.println("\nP(hvacuum) = 1422.0/372007.0 = " + phvacuum );
            System.out.println("\nP(ia) = 586.0/372007.0 = " + pia );
            System.out.println("\nP(ib) = 180.0/372007.0 = " + pib );
            System.out.println("\nP(ic) = 1310.0/372007.0 = " + pic );
            System.out.println("\nP(id) = 1969.0/372007.0 = " + pid );
            System.out.println("\nP(ie) = 858.0/372007.0 = " + pie );
            System.out.println("\nP(if) = 670.0/372007.0 = " + pif );
            System.out.println("\nP(ig) = 943.0/372007.0 = " + pig );
            System.out.println("\nP(ih) = 12.0/372007.0 = " + pih );
            System.out.println("\nP(ii) = 2.0/372007.0 = " + pii );
            System.out.println("\nP(ik) = 475.0/372007.0 = " + pik );
            System.out.println("\nP(il) = 1177.0/372007.0 = " + pil );
            System.out.println("\nP(im) = 1058.0/372007.0 = " + pim );
            System.out.println("\nP(in) = 3262.0/372007.0 = " + pin );
            System.out.println("\nP(io) = 894.0/372007.0 = " + pio );
            System.out.println("\nP(ip) = 326.0/372007.0 = " + pip );
            System.out.println("\nP(iq) = 11.0/372007.0 = " + piq );
            System.out.println("\nP(ir) = 881.0/372007.0 = " + pir );
            System.out.println("\nP(is) = 2156.0/372007.0 = " + pis );
            System.out.println("\nP(it) = 2184.0/372007.0 = " + pit );
            System.out.println("\nP(iu) = 61.0/372007.0 = " + piu );
            System.out.println("\nP(iv) = 566.0/372007.0 = " + piv );
            System.out.println("\nP(ix) = 68.0/372007.0 = " + pix );
            System.out.println("\nP(iz) = 31.0/372007.0 = " + piz );
            System.out.println("\nP(i.) = 10.0/372007.0 = " + pidot );
            System.out.println("\nP(i,) = 19.0/372007.0 = " + picomma );
            System.out.println("\nP(ivacuum) = 1001.0/372007.0 = " + pivacuum );
            System.out.println("\nP(ja) = 91.0/372007.0 = " + pja );
            System.out.println("\nP(je) = 107.0/372007.0 = " + pje );
            System.out.println("\nP(ji) = 14.0/372007.0 = " + pji );
            System.out.println("\nP(jo) = 301.0/372007.0 = " + pjo );
            System.out.println("\nP(ju) = 360.0/372007.0 = " + pju );
            System.out.println("\nP(j.) = 1.0/372007.0 = " + pjdot );
            System.out.println("\nP(ka) = 460.0/372007.0 = " + pka );
            System.out.println("\nP(kb) = 4.0/372007.0 = " + pkb );
            System.out.println("\nP(kc) = 1.0/372007.0 = " + pkc );
            System.out.println("\nP(kd) = 7.0/372007.0 = " + pkd );
            System.out.println("\nP(ke) = 1546.0/372007.0 = " + pke );
            System.out.println("\nP(kf) = 2.0/372007.0 = " + pkf );
            System.out.println("\nP(kg) = 14.0/372007.0 = " + pkg );
            System.out.println("\nP(kh) = 3.0/372007.0 = " + pkh );
            System.out.println("\nP(ki) = 703.0/372007.0 = " + pki );
            System.out.println("\nP(kj) = 29.0/372007.0 = " + pkj );
            System.out.println("\nP(kk) = 20.0/372007.0 = " + pkk );
            System.out.println("\nP(kl) = 81.0/372007.0 = " + pkl );
            System.out.println("\nP(km) = 3.0/372007.0 = " + pkm );
            System.out.println("\nP(kn) = 591.0/372007.0 = " + pkn );
            System.out.println("\nP(ko) = 79.0/372007.0 = " + pko );
            System.out.println("\nP(kp) = 3.0/372007.0 = " + pkp );
            System.out.println("\nP(kr) = 43.0/372007.0 = " + pkr );
            System.out.println("\nP(ks) = 183.0/372007.0 = " + pks );
            System.out.println("\nP(kt) = 15.0/372007.0 = " + pkt );
            System.out.println("\nP(ku) = 13.0/372007.0 = " + pku );
            System.out.println("\nP(kv) = 17.0/372007.0 = " + pkv );
            System.out.println("\nP(kw) = 12.0/372007.0 = " + pkw );
            System.out.println("\nP(ky) = 34.0/372007.0 = " + pky );
            System.out.println("\nP(k.) = 286.0/372007.0 = " + pkdot );
            System.out.println("\nP(k,) = 178.0/372007.0 = " + pkcomma );
            System.out.println("\nP(kvacuum) = 1184.0/372007.0 = " + pkvacuum );
            System.out.println("\nP(la) = 1213.0/372007.0 = " + pla );
            System.out.println("\nP(lb) = 25.0/372007.0 = " + plb );
            System.out.println("\nP(lc) = 56.0/372007.0 = " + plc );
            System.out.println("\nP(ld) = 1129.0/372007.0 = " + pld );
            System.out.println("\nP(le) = 2091.0/372007.0 = " + ple );
            System.out.println("\nP(lf) = 284.0/372007.0 = " + plf );
            System.out.println("\nP(lg) = 28.0/372007.0 = " + plg );
            System.out.println("\nP(lh) = 3.0/372007.0 = " + plh );
            System.out.println("\nP(li) = 1594.0/372007.0 = " + pli );
            System.out.println("\nP(lj) = 1.0/372007.0 = " + plj );
            System.out.println("\nP(lk) = 203.0/372007.0 = " + plk );
            System.out.println("\nP(ll) = 1677.0/372007.0 = " + pll );
            System.out.println("\nP(lm) = 265.0/372007.0 = " + plm );
            System.out.println("\nP(ln) = 20.0/372007.0 = " + pln );
            System.out.println("\nP(lo) = 1343.0/372007.0 = " + plo );
            System.out.println("\nP(lp) = 78.0/372007.0 = " + plp );
            System.out.println("\nP(lr) = 103.0/372007.0 = " + plr );
            System.out.println("\nP(ls) = 341.0/372007.0 = " + pls );
            System.out.println("\nP(lt) = 295.0/372007.0 = " + plt );
            System.out.println("\nP(lu) = 304.0/372007.0 = " + plu );
            System.out.println("\nP(lv) = 210.0/372007.0 = " + plv );
            System.out.println("\nP(lw) = 76.0/372007.0 = " + plw );
            System.out.println("\nP(ly) = 1002.0/372007.0 = " + ply );
            System.out.println("\nP(lz) = 1.0/372007.0 = " + plz );
            System.out.println("\nP(l.) = 237.0/372007.0 = " + pldot );
            System.out.println("\nP(l,) = 219.0/372007.0 = " + plcomma );
            System.out.println("\nP(lvacuum) = 1488.0/372007.0 = " + plvacuum );
            System.out.println("\nP(ma) = 1357.0/372007.0 = " + pma );
            System.out.println("\nP(mb) = 275.0/372007.0 = " + pmb );
            System.out.println("\nP(mc) = 5.0/372007.0 = " + pmc );
            System.out.println("\nP(md) = 1.0/372007.0 = " + pmd );
            System.out.println("\nP(me) = 1873.0/372007.0 = " + pme );
            System.out.println("\nP(mf) = 6.0/372007.0 = " + pmf );
            System.out.println("\nP(mh) = 2.0/372007.0 = " + pmh );
            System.out.println("\nP(mi) = 799.0/372007.0 = " + pmi );
            System.out.println("\nP(ml) = 21.0/372007.0 = " + pml );
            System.out.println("\nP(mm) = 253.0/372007.0 = " + pmm );
            System.out.println("\nP(mn) = 32.0/372007.0 = " + pmn );
            System.out.println("\nP(mo) = 924.0/372007.0 = " + pmo );
            System.out.println("\nP(mp) = 444.0/372007.0 = " + pmp );
            System.out.println("\nP(mr) = 2.0/372007.0 = " + pmr );
            System.out.println("\nP(ms) = 243.0/372007.0 = " + pms );
            System.out.println("\nP(mt) = 11.0/372007.0 = " + pmt );
            System.out.println("\nP(mu) = 387.0/372007.0 = " + pmu );
            System.out.println("\nP(mw) = 2.0/372007.0 = " + pmw );
            System.out.println("\nP(my) = 209.0/372007.0 = " + pmy );
            System.out.println("\nP(m.) = 442.0/372007.0 = " + pmdot );
            System.out.println("\nP(m,) = 176.0/372007.0 = " + pmcomma );
            System.out.println("\nP(mvacuum) = 1357.0/372007.0 = " + pmvacuum );
            System.out.println("\nP(na) = 694.0/372007.0 = " + pna );
            System.out.println("\nP(nb) = 16.0/372007.0 = " + pnb );
            System.out.println("\nP(nc) = 661.0/372007.0 = " + pnc );
            System.out.println("\nP(nd) = 2494.0/372007.0 = " + pnd );
            System.out.println("\nP(ne) = 1991.0/372007.0 = " + pne );
            System.out.println("\nP(nf) = 138.0/372007.0 = " + pnf );
            System.out.println("\nP(ng) = 2492.0/372007.0 = " + png );
            System.out.println("\nP(nh) = 34.0/372007.0 = " + pnh );
            System.out.println("\nP(ni) = 800.0/372007.0 = " + pni );
            System.out.println("\nP(nj) = 31.0/372007.0 = " + pnj );
            System.out.println("\nP(nk) = 507.0/372007.0 = " + pnk );
            System.out.println("\nP(nl) = 268.0/372007.0 = " + pnl );
            System.out.println("\nP(nm) = 28.0/372007.0 = " + pnm );
            System.out.println("\nP(nn) = 296.0/372007.0 = " + pnn );
            System.out.println("\nP(no) = 1739.0/372007.0 = " + pno );
            System.out.println("\nP(np) = 14.0/372007.0 = " + pnp );
            System.out.println("\nP(nq) = 22.0/372007.0 = " + pnq );
            System.out.println("\nP(nr) = 19.0/372007.0 = " + pnr );
            System.out.println("\nP(ns) = 994.0/372007.0 = " + pns );
            System.out.println("\nP(nt) = 1642.0/372007.0 = " + pnt );
            System.out.println("\nP(nu) = 230.0/372007.0 = " + pnu );
            System.out.println("\nP(nv) = 127.0/372007.0 = " + pnv );
            System.out.println("\nP(nw) = 8.0/372007.0 = " + pnw );
            System.out.println("\nP(nx) = 6.0/372007.0 = " + pnx );
            System.out.println("\nP(ny) = 434.0/372007.0 = " + pny );
            System.out.println("\nP(nz) = 6.0/372007.0 = " + pnz );
            System.out.println("\nP(n.) = 770.0/372007.0 = " + pndot );
            System.out.println("\nP(n,) = 453.0/372007.0 = " + pnz );
            System.out.println("\nP(nvacuum) = 3207.0/372007.0 = " + pnvacuum );
            System.out.println("\nP(oa) = 300.0/372007.0 = " + poa );
            System.out.println("\nP(ob) = 285.0/372007.0 = " + pob );
            System.out.println("\nP(oc) = 397.0/372007.0 = " + poc );
            System.out.println("\nP(od) = 746.0/372007.0 = " + pod );
            System.out.println("\nP(oe) = 149.0/372007.0 = " + poe );
            System.out.println("\nP(of) = 1646.0/372007.0 = " + pof );
            System.out.println("\nP(og) = 219.0/372007.0 = " + pog );
            System.out.println("\nP(oh) = 106.0/372007.0 = " + poh );
            System.out.println("\nP(oi) = 511.0/372007.0 = " + poi );
            System.out.println("\nP(oj) = 7.0/372007.0 = " + poj );
            System.out.println("\nP(ok) = 734.0/372007.0 = " + pok );
            System.out.println("\nP(ol) = 1205.0/372007.0 = " + pol );
            System.out.println("\nP(om) = 1467.0/372007.0 = " + pom );
            System.out.println("\nP(on) = 2484.0/372007.0 = " + pon );
            System.out.println("\nP(oo) = 1384.0/372007.0 = " + poo );
            System.out.println("\nP(op) = 825.0/372007.0 = " + pop );
            System.out.println("\nP(oq) = 1.0/372007.0 = " + poq );
            System.out.println("\nP(or) = 2003.0/372007.0 = " + por );
            System.out.println("\nP(os) = 820.0/372007.0 = " + pos );
            System.out.println("\nP(ot) = 1416.0/372007.0 = " + pot );
            System.out.println("\nP(ou) = 2844.0/372007.0 = " + pou );
            System.out.println("\nP(ov) = 565.0/372007.0 = " + pov );
            System.out.println("\nP(ow) = 1555.0/372007.0 = " + pow );
            System.out.println("\nP(ox) = 71.0/372007.0 = " + pox );
            System.out.println("\nP(oy) = 178.0/372007.0 = " + poy );
            System.out.println("\nP(oz) = 22.0/372007.0 = " + poz );
            System.out.println("\nP(o.) = 161.0/372007.0 = " + podot );
            System.out.println("\nP(o,) = 185.0/372007.0 = " + pocomma );
            System.out.println("\nP(ovacuum) = 2466.0/372007.0 = " + povacuum );
            System.out.println("\nP(pa) = 728.0/372007.0 = " + ppa );
            System.out.println("\nP(pb) = 11.0/372007.0 = " + ppb );
            System.out.println("\nP(pd) = 4.0/372007.0 = " + ppd );
            System.out.println("\nP(pe) = 1351.0/372007.0 = " + ppe );
            System.out.println("\nP(pf) = 1.0/372007.0 = " + ppf );
            System.out.println("\nP(ph) = 223.0/372007.0 = " + pph );
            System.out.println("\nP(pi) = 397.0/372007.0 = " + ppi );
            System.out.println("\nP(pk) = 6.0/372007.0 = " + ppk );
            System.out.println("\nP(pl) = 656.0/372007.0 = " + ppl );
            System.out.println("\nP(pm) = 5.0/372007.0 = " + ppm );
            System.out.println("\nP(po) = 777.0/372007.0 = " + ppo );
            System.out.println("\nP(pp) = 564.0/372007.0 = " + ppp );
            System.out.println("\nP(pr) = 725.0/372007.0 = " + ppr );
            System.out.println("\nP(ps) = 305.0/372007.0 = " + pps );
            System.out.println("\nP(pt) = 214.0/372007.0 = " + ppt );
            System.out.println("\nP(pu) = 307.0/372007.0 = " + ppu );
            System.out.println("\nP(pw) = 13.0/372007.0 = " + ppw );
            System.out.println("\nP(py) = 50.0/372007.0 = " + ppy );
            System.out.println("\nP(p.) = 190.0/372007.0 = " + ppdot );
            System.out.println("\nP(p,) = 101.0/372007.0 = " + ppcomma );
            System.out.println("\nP(pvacuum) = 877.0/372007.0 = " + ppvacuum );
            System.out.println("\nP(qs) = 1.0/372007.0 = " + pqs );
            System.out.println("\nP(qu) = 4.0/372007.0 = " + pqu );
            System.out.println("\nP(q.) = 12.0/372007.0 = " + pqdot );
            System.out.println("\nP(q,) = 8.0/372007.0 = " + pqcomma );
            System.out.println("\nP(qvacuum) = 12.0/372007.0 = " + pqvacuum );
            System.out.println("\nP(ra) = 1371.0/372007.0 = " + pra );
            System.out.println("\nP(rb) = 71.0/372007.0 = " + prb );
            System.out.println("\nP(rc) = 240.0/372007.0 = " + prc );
            System.out.println("\nP(rd) = 751.0/372007.0 = " + prd );
            System.out.println("\nP(re) = 2798.0/372007.0 = " + pre );
            System.out.println("\nP(rf) = 91.0/372007.0 = " + prf );
            System.out.println("\nP(rg) = 317.0/372007.0 = " + prg );
            System.out.println("\nP(rh) = 88.0/372007.0 = " + prh );
            System.out.println("\nP(ri) = 1573.0/372007.0 = " + pri );
            System.out.println("\nP(rj) = 2.0/372007.0 = " + prj );
            System.out.println("\nP(rk) = 335.0/372007.0 = " + prk );
            System.out.println("\nP(rl) = 205.0/372007.0 = " + prl );
            System.out.println("\nP(rm) = 375.0/372007.0 = " + prm );
            System.out.println("\nP(rn) = 555.0/372007.0 = " + prn );
            System.out.println("\nP(ro) = 1645.0/372007.0 = " + pro );
            System.out.println("\nP(rp) = 102.0/372007.0 = " + prp );
            System.out.println("\nP(rq) = 6.0/372007.0 = " + prq );
            System.out.println("\nP(rr) = 1812.0/372007.0 = " + prr );
            System.out.println("\nP(rs) = 1089.0/372007.0 = " + prs );
            System.out.println("\nP(rt) = 786.0/372007.0 = " + prt );
            System.out.println("\nP(ru) = 463.0/372007.0 = " + pru );
            System.out.println("\nP(rv) = 177.0/372007.0 = " + prv );
            System.out.println("\nP(rw) = 158.0/372007.0 = " + prw );
            System.out.println("\nP(ry) = 1793.0/372007.0 = " + pry );
            System.out.println("\nP(rz) = 1.0/372007.0 = " + prz );
            System.out.println("\nP(r.) = 777.0/372007.0 = " + prdot );
            System.out.println("\nP(r,) = 397.0/372007.0 = " + prcomma );
            System.out.println("\nP(rvacuum) = 2591.0/372007.0 = " + prvacuum );
            System.out.println("\nP(sa) = 1629.0/372007.0 = " + psa );
            System.out.println("\nP(sb) = 47.0/372007.0 = " + psb );
            System.out.println("\nP(sc) = 373.0/372007.0 = " + psc );
            System.out.println("\nP(sd) = 13.0/372007.0 = " + psd );
            System.out.println("\nP(se) = 1949.0/372007.0 = " + pse );
            System.out.println("\nP(sf) = 29.0/372007.0 = " + psf );
            System.out.println("\nP(sg) = 15.0/372007.0 = " + psg );
            System.out.println("\nP(sh) = 1532.0/372007.0 = " + psh );
            System.out.println("\nP(si) = 1219.0/372007.0 = " + psi );
            System.out.println("\nP(sj) = 2.0/372007.0 = " + psj );
            System.out.println("\nP(sk) = 655.0/372007.0 = " + psk );
            System.out.println("\nP(sl) = 373.0/372007.0 = " + psl );
            System.out.println("\nP(sm) = 342.0/372007.0 = " + psm );
            System.out.println("\nP(sn) = 446.0/372007.0 = " + psn );
            System.out.println("\nP(so) = 1229.0/372007.0 = " + pso );
            System.out.println("\nP(sp) = 606.0/372007.0 = " + psp );
            System.out.println("\nP(sq) = 63.0/372007.0 = " + psq );
            System.out.println("\nP(sr) = 8.0/372007.0 = " + psr );
            System.out.println("\nP(ss) = 1028.0/372007.0 = " + pss );
            System.out.println("\nP(st) = 2212.0/372007.0 = " + pst );
            System.out.println("\nP(su) = 669.0/372007.0 = " + psu );
            System.out.println("\nP(sv) = 57.0/372007.0 = " + psv );
            System.out.println("\nP(sw) = 306.0/372007.0 = " + psw );
            System.out.println("\nP(sy) = 198.0/372007.0 = " + psy );
            System.out.println("\nP(s.) = 1081.0/372007.0 = " + psdot );
            System.out.println("\nP(s,) = 727.0/372007.0 = " + pscomma );
            System.out.println("\nP(svacuum) = 3356.0/372007.0 = " + psvacuum );
            System.out.println("\nP(ta) = 1237.0/372007.0 = " + pta );
            System.out.println("\nP(tb) = 19.0/372007.0 = " + ptb );
            System.out.println("\nP(tc) = 332.0/372007.0 = " + ptc );
            System.out.println("\nP(td) = 4.0/372007.0 = " + ptd );
            System.out.println("\nP(te) = 2022.0/372007.0 = " + pte );
            System.out.println("\nP(tf) = 10.0/372007.0 = " + ptf );
            System.out.println("\nP(tg) = 3.0/372007.0 = " + ptg );
            System.out.println("\nP(th) = 3750.0/372007.0 = " + pth );
            System.out.println("\nP(ti) = 1678.0/372007.0 = " + pti );
            System.out.println("\nP(tj) = 6.0/372007.0 = " + ptj );
            System.out.println("\nP(tk) = 1.0/372007.0 = " + ptk );
            System.out.println("\nP(tl) = 430.0/372007.0 = " + ptl );
            System.out.println("\nP(tm) = 68.0/372007.0 = " + ptm );
            System.out.println("\nP(tn) = 39.0/372007.0 = " + ptn );
            System.out.println("\nP(to) = 2370.0/372007.0 = " + pto );
            System.out.println("\nP(tp) = 19.0/372007.0 = " + ptp );
            System.out.println("\nP(tr) = 1132.0/372007.0 = " + ptr );
            System.out.println("\nP(ts) = 580.0/372007.0 = " + pts );
            System.out.println("\nP(tt) = 772.0/372007.0 = " + ptt );
            System.out.println("\nP(tu) = 553.0/372007.0 = " + ptu );
            System.out.println("\nP(tv) = 53.0/372007.0 = " + ptv );
            System.out.println("\nP(tw) = 368.0/372007.0 = " + ptw );
            System.out.println("\nP(ty) = 412.0/372007.0 = " + pty );
            System.out.println("\nP(tz) = 5.0/372007.0 = " + ptz );
            System.out.println("\nP(t.) = 860.0/372007.0 = " + ptdot );
            System.out.println("\nP(t,) = 497.0/372007.0 = " + ptcomma );
            System.out.println("\nP(tvacuum) = 3600.0/372007.0 = " + ptvacuum );
            System.out.println("\nP(ua) = 223.0/372007.0 = " + pua );
            System.out.println("\nP(ub) = 154.0/372007.0 = " + pub );
            System.out.println("\nP(uc) = 335.0/372007.0 = " + puc );
            System.out.println("\nP(ud) = 244.0/372007.0 = " + pud );
            System.out.println("\nP(ue) = 372.0/372007.0 = " + pue );
            System.out.println("\nP(uf) = 84.0/372007.0 = " + puf );
            System.out.println("\nP(ug) = 757.0/372007.0 = " + pug );
            System.out.println("\nP(uh) = 11.0/372007.0 = " + puh );
            System.out.println("\nP(ui) = 317.0/372007.0 = " + pui );
            System.out.println("\nP(uk) = 16.0/372007.0 = " + puk );
            System.out.println("\nP(ul) = 1093.0/372007.0 = " + pul );
            System.out.println("\nP(um) = 420.0/372007.0 = " + pum );
            System.out.println("\nP(un) = 1220.0/372007.0 = " + pun );
            System.out.println("\nP(uo) = 10.0/372007.0 = " + puo );
            System.out.println("\nP(up) = 711.0/372007.0 = " + pup );
            System.out.println("\nP(ur) = 1274.0/372007.0 = " + pur );
            System.out.println("\nP(us) = 1161.0/372007.0 = " + pus );
            System.out.println("\nP(ut) = 1562.0/372007.0 = " + put );
            System.out.println("\nP(uu) = 2.0/372007.0 = " + puu );
            System.out.println("\nP(uv) = 19.0/372007.0 = " + puv );
            System.out.println("\nP(ux) = 5.0/372007.0 = " + pux );
            System.out.println("\nP(uy) = 41.0/372007.0 = " + puy );
            System.out.println("\nP(uz) = 17.0/372007.0 = " + puz );
            System.out.println("\nP(u.) = 61.0/372007.0 = " + pudot );
            System.out.println("\nP(u,) = 46.0/372007.0 = " + pucomma );
            System.out.println("\nP(uvacuum) = 1079.0/372007.0 = " + puvacuum );
            System.out.println("\nP(va) = 150.0/372007.0 = " + pva );
            System.out.println("\nP(vd) = 5.0/372007.0 = " + pvd );
            System.out.println("\nP(ve) = 2005.0/372007.0 = " + pve );
            System.out.println("\nP(vi) = 556.0/372007.0 = " + pvi );
            System.out.println("\nP(vl) = 1.0/372007.0 = " + pvl );
            System.out.println("\nP(vo) = 282.0/372007.0 = " + pvo );
            System.out.println("\nP(vs) = 2.0/372007.0 = " + pvs );
            System.out.println("\nP(vu) = 8.0/372007.0 = " + pvu );
            System.out.println("\nP(vv) = 2.0/372007.0 = " + pvv );
            System.out.println("\nP(vy) = 21.0/372007.0 = " + pvy );
            System.out.println("\nP(v.) = 14.0/372007.0 = " + pvdot );
            System.out.println("\nP(v,) = 3.0/372007.0 = " + pvcomma );
            System.out.println("\nP(vvacuum) = 42.0/372007.0 = " + pvvacuum );
            System.out.println("\nP(wa) = 1891.0/372007.0 = " + pwa );
            System.out.println("\nP(wb) = 14.0/372007.0 = " + pwb );
            System.out.println("\nP(wc) = 2.0/372007.0 = " + pwc );
            System.out.println("\nP(wd) = 15.0/372007.0 = " + pwd );
            System.out.println("\nP(we) = 1370.0/372007.0 = " + pwe );
            System.out.println("\nP(wf) = 7.0/372007.0 = " + pwf );
            System.out.println("\nP(wg) = 1.0/372007.0 = " + pwg );
            System.out.println("\nP(wh) = 1666.0/372007.0 = " + pwh );
            System.out.println("\nP(wi) = 1226.0/372007.0 = " + pwi );
            System.out.println("\nP(wk) = 3.0/372007.0 = " + pwk );
            System.out.println("\nP(wl) = 83.0/372007.0 = " + pwl );
            System.out.println("\nP(wm) = 139.0/372007.0 = " + pwm );
            System.out.println("\nP(wn) = 520.0/372007.0 = " + pwn );
            System.out.println("\nP(wo) = 943.0/372007.0 = " + pwo );
            System.out.println("\nP(wp) = 6.0/372007.0 = " + pwp );
            System.out.println("\nP(wr) = 108.0/372007.0 = " + pwr );
            System.out.println("\nP(ws) = 147.0/372007.0 = " + pws );
            System.out.println("\nP(wt) = 1.0/372007.0 = " + pwt );
            System.out.println("\nP(wu) = 14.0/372007.0 = " + pwu );
            System.out.println("\nP(ww) = 1.0/372007.0 = " + pww );
            System.out.println("\nP(wy) = 6.0/372007.0 = " + pwy );
            System.out.println("\nP(w.) = 214.0/372007.0 = " + pwdot );
            System.out.println("\nP(w,) = 140.0/372007.0 = " + pwcomma );
            System.out.println("\nP(wvacuum) = 975.0/372007.0 = " + pwvacuum );
            System.out.println("\nP(xa) = 69.0/372007.0 = " + pxa );
            System.out.println("\nP(xc) = 62.0/372007.0 = " + pxc );
            System.out.println("\nP(xe) = 45.0/372007.0 = " + pxe );
            System.out.println("\nP(xh) = 11.0/372007.0 = " + pxh );
            System.out.println("\nP(xi) = 57.0/372007.0 = " + pxi );
            System.out.println("\nP(xo) = 7.0/372007.0 = " + pxo );
            System.out.println("\nP(xp) = 170.0/372007.0 = " + pxp );
            System.out.println("\nP(xt) = 111.0/372007.0 = " + pxt );
            System.out.println("\nP(xu) = 13.0/372007.0 = " + pxu );
            System.out.println("\nP(xy) = 9.0/372007.0 = " + pxy );
            System.out.println("\nP(x.) = 9.0/372007.0 = " + pxdot );
            System.out.println("\nP(x,) = 11.0/372007.0 = " + pxcomma );
            System.out.println("\nP(xvacuum) = 105.0/372007.0 = " + pxvacuum );
            System.out.println("\nP(ya) = 36.0/372007.0 = " + pya );
            System.out.println("\nP(yb) = 36.0/372007.0 = " + pyb );
            System.out.println("\nP(yc) = 40.0/372007.0 = " + pyc );
            System.out.println("\nP(yd) = 8.0/372007.0 = " + pyd );
            System.out.println("\nP(ye) = 620.0/372007.0 = " + pye );
            System.out.println("\nP(yf) = 3.0/372007.0 = " + pyf );
            System.out.println("\nP(yg) = 55.0/372007.0 = " + pyg );
            System.out.println("\nP(yh) = 3.0/372007.0 = " + pyh );
            System.out.println("\nP(yi) = 199.0/372007.0 = " + pyi );
            System.out.println("\nP(yj) = 2.0/372007.0 = " + pyj );
            System.out.println("\nP(yl) = 89.0/372007.0 = " + pyl );
            System.out.println("\nP(ym) = 24.0/372007.0 = " + pym );
            System.out.println("\nP(yn) = 36.0/372007.0 = " + pyn );
            System.out.println("\nP(yo) = 1332.0/372007.0 = " + pyo );
            System.out.println("\nP(yp) = 49.0/372007.0 = " + pyp );
            System.out.println("\nP(yr) = 25.0/372007.0 = " + pyr );
            System.out.println("\nP(ys) = 247.0/372007.0 = " + pys );
            System.out.println("\nP(yt) = 157.0/372007.0 = " + pyt );
            System.out.println("\nP(yu) = 3.0/372007.0 = " + pyu );
            System.out.println("\nP(yv) = 5.0/372007.0 = " + pyv );
            System.out.println("\nP(yw) = 53.0/372007.0 = " + pyw );
            System.out.println("\nP(yx) = 1.0/372007.0 = " + pyx );
            System.out.println("\nP(y.) = 580.0/372007.0 = " + pydot );
            System.out.println("\nP(y,) = 370.0/372007.0 = " + pycomma );
            System.out.println("\nP(yvacuum) = 2879.0/372007.0 = " + pyvacuum );
            System.out.println("\nP(za) = 10.0/372007.0 = " + pza );
            System.out.println("\nP(ze) = 120.0/372007.0 = " + pze );
            System.out.println("\nP(zh) = 2.0/372007.0 = " + pzh );
            System.out.println("\nP(zi) = 45.0/372007.0 = " + pzi );
            System.out.println("\nP(zl) = 12.0/372007.0 = " + pzl );
            System.out.println("\nP(zm) = 1.0/372007.0 = " + pzm );
            System.out.println("\nP(zo) = 14.0/372007.0 = " + pzo );
            System.out.println("\nP(zy) = 18.0/372007.0 = " + pzy );
            System.out.println("\nP(zz) = 34.0/372007.0 = " + pzz );
            System.out.println("\nP(z,) = 1.0/372007.0 = " + pzcomma );
            System.out.println("\nP(zvacuum) = 8.0/372007.0 = " + pzvacuum );
            System.out.println("\nP(.k) = 1.0/372007.0 = " + pdotk );
            System.out.println("\nP(.m) = 1.0/372007.0 = " + pdotm );
            System.out.println("\nP(.n) = 1.0/372007.0 = " + pdotn );
            System.out.println("\nP(.,) = 1.0/372007.0 = " + pdotcomma );
            System.out.println("\nP(.vacuum) = 8.0/372007.0 = " + pdotvacuum );
            System.out.println("\nP(,vacuum) = 2897.0/372007.0 = " + pcommavacuum );
            System.out.println("\nP(vacuuma) = 3536.0/372007.0 = " + pvacuuma );
            System.out.println("\nP(vacuumb) = 2557.0/372007.0 = " + pvacuumb );
            System.out.println("\nP(vacuumc) = 2362.0/372007.0 = " + pvacuumc );
            System.out.println("\nP(vacuumd) = 2174.0/372007.0 = " + pvacuumd );
            System.out.println("\nP(vacuume) = 1356.0/372007.0 = " + pvacuume );
            System.out.println("\nP(vacuumf) = 2171.0/372007.0 = " + pvacuumf );
            System.out.println("\nP(vacuumg) = 1541.0/372007.0 = " + pvacuumg );
            System.out.println("\nP(vacuumh) = 3512.0/372007.0 = " + pvacuumh );
            System.out.println("\nP(vacuumi) = 2963.0/372007.0 = " + pvacuumi );
            System.out.println("\nP(vacuumj) = 599.0/372007.0 = " + pvacuumj );
            System.out.println("\nP(vacuumk) = 1038.0/372007.0 = " + pvacuumk );
            System.out.println("\nP(vacuuml) = 1974.0/372007.0 = " + pvacuuml );
            System.out.println("\nP(vacuumm) = 2250.0/372007.0 = " + pvacuumm );
            System.out.println("\nP(vacuumn) = 1686.0/372007.0 = " + pvacuumn );
            System.out.println("\nP(vacuumo) = 2653.0/372007.0 = " + pvacuumo );
            System.out.println("\nP(vacuump) = 1860.0/372007.0 = " + pvacuump );
            System.out.println("\nP(vacuumq) = 274.0/372007.0 = " + pvacuumq );
            System.out.println("\nP(vacuumr) = 1878.0/372007.0 = " + pvacuumr );
            System.out.println("\nP(vacuums) = 3798.0/372007.0 = " + pvacuums );
            System.out.println("\nP(vacuumt) = 3870.0/372007.0 = " + pvacuumt );
            System.out.println("\nP(vacuumu) = 1087.0/372007.0 = " + pvacuumu );
            System.out.println("\nP(vacuumv) = 711.0/372007.0 = " + pvacuumv );
            System.out.println("\nP(vacuumw) = 3244.0/372007.0 = " + pvacuumw );
            System.out.println("\nP(vacuumx) = 1.0/372007.0 = " + pvacuumx );
            System.out.println("\nP(vacuumy) = 1528.0/372007.0 = " + pvacuumy );
            System.out.println("\nP(vacuumz) = 21.0/372007.0 = " + pvacuumz );
            System.out.println("\nP(vacuum.) = 239.0/372007.0 = " + pvacuumdot );
            System.out.println("\nP(vacuum,) = 33.0/372007.0 = " + pvacuumcomma );
            System.out.println("\nP(vacuumvacuum) = 3002.0/372007.0 = " + pvacuumvacuum );
            System.out.println("\nThe sum of the probability is = " + sumprobability ); 
            System.out.println("\nThe number of pair characters that are not included is cause the probability of them is 0.");    
        
            }

            private static void calculatethejointentropy2() 
    
            {
                
            double paa = 15.0/372007.0;
            double pab = 669.0/372007.0;
            double pac = 1138.0/372007.0;
            double pad = 1437.0/372007.0;
            double pae = 13.0/372007.0;
            double paf = 409.0/372007.0;
            double pag = 753.0/372007.0;
            double pah = 35.0/372007.0;
            double pai = 1905.0/372007.0;
            double paj = 16.0/372007.0;
            double pak = 581.0/372007.0;
            double pal = 1657.0/372007.0;
            double pam = 749.0/372007.0;
            double pan = 2981.0/372007.0;
            double pao = 7.0/372007.0;
            double pap = 623.0/372007.0;
            double paq = 6.0/372007.0;
            double par = 2796.0/372007.0;
            double pas = 2384.0/372007.0;
            double pat = 2814.0/372007.0;
            double pau = 483.0/372007.0;
            double pav = 845.0/372007.0;
            double paw = 336.0/372007.0;
            double pax = 27.0/372007.0;
            double pay = 899.0/372007.0;
            double paz = 92.0/372007.0;
            double padot = 84.0/372007.0;
            double pacomma = 64.0/372007.0;
            double pavacuum = 1959.0/372007.0;  
            double pba = 660.0/372007.0;
            double pbb = 121.0/372007.0;
            double pbc = 1.0/372007.0;
            double pbe = 1668.0/372007.0;
            double pbf = 2.0/372007.0;
            double pbi = 390.0/372007.0;
            double pbj = 76.0/372007.0;
            double pbl = 742.0/372007.0;
            double pbm = 11.0/372007.0;
            double pbn = 4.0/372007.0;
            double pbo = 959.0/350144.0;
            double pbr = 515.0/372007.0;
            double pbs = 92.0/372007.0;
            double pbt = 25.0/372007.0;
            double pbu = 861.0/372007.0;
            double pbv = 25.0/372007.0;
            double pbw = 1.0/372007.0;
            double pby = 322.0/372007.0;
            double pbdot = 16.0/372007.0;
            double pbcomma = 9.0/372007.0;
            double pbvacuum = 97.0/372007.0;
            double pca = 1228.0/372007.0;
            double pcc = 132.0/372007.0;
            double pcd = 8.0/372007.0;
            double pce = 1400.0/372007.0;
            double pch = 1304.0/372007.0;
            double pci = 440.0/372007.0;
            double pck = 1043.0/372007.0;
            double pcl = 500.0/372007.0;
            double pco = 1456.0/372007.0;
            double pcq = 6.0/372007.0;
            double pcr = 456.0/372007.0;
            double pcs = 31.0/372007.0;
            double pct = 705.0/372007.0;
            double pcu = 356.0/372007.0;
            double pcv = 1.0/372007.0;
            double pcy = 43.0/372007.0;
            double pcdot = 44.0/372007.0;
            double pccomma = 22.0/372007.0;
            double pcvacuum = 222.0/372007.0;
            double pda = 629.0/372007.0;
            double pdb = 13.0/372007.0;
            double pdc = 22.0/372007.0;
            double pdd = 256.0/372007.0;
            double pde = 1511.0/372007.0;
            double pdf = 17.0/372007.0;
            double pdg = 92.0/372007.0;
            double pdh = 15.0/372007.0;
            double pdi = 1166.0/372007.0;
            double pdj = 12.0/372007.0;
            double pdk = 4.0/372007.0;
            double pdl = 163.0/372007.0;
            double pdm = 28.0/372007.0;
            double pdn = 448.0/372007.0;
            double pdo = 1230.0/372007.0;
            double pdp = 8.0/372007.0;
            double pdr = 502.0/372007.0;
            double pds = 485.0/372007.0;
            double pdt = 7.0/372007.0;
            double pdu = 159.0/372007.0;
            double pdv = 35.0/372007.0;
            double pdw = 15.0/372007.0;
            double pdy = 294.0/372007.0;
            double pddot = 1655.0/372007.0;
            double pdcomma = 754.0/372007.0;
            double pdvacuum = 3402.0/372007.0;
            double pea = 1834.0/372007.0;
            double peb = 90.0/372007.0;
            double pec = 1016.0/372007.0;
            double ped = 2851.0/372007.0;
            double pee = 1369.0/372007.0;
            double pef = 476.0/372007.0;
            double peg = 367.0/372007.0;
            double peh = 183.0/372007.0;
            double pei = 470.0/372007.0;
            double pej = 10.0/372007.0;
            double pek = 76.0/372007.0;
            double pel = 1458.0/372007.0;
            double pem = 801.0/372007.0;
            double pen = 2420.0/372007.0;
            double peo = 256.0/372007.0;
            double pep = 546.0/372007.0;
            double peq = 42.0/372007.0;
            double per = 3006.0/372007.0;
            double pes = 1997.0/372007.0;
            double pet = 1332.0/372007.0;
            double peu = 25.0/372007.0;
            double pev = 697.0/372007.0;
            double pew = 463.0/372007.0;
            double pex = 442.0/372007.0;
            double pey = 770.0/372007.0;
            double pez = 38.0/372007.0;
            double pedot = 1334.0/372007.0;
            double pecomma = 832.0/372007.0;
            double pevacuum = 4165.0/372007.0;
            double pfa = 569.0/372007.0;
            double pfb = 5.0/372007.0;
            double pfc = 1.0/372007.0;
            double pfe = 682.0/372007.0;
            double pff = 579.0/372007.0;
            double pfh = 1.0/372007.0;
            double pfi = 868.0/372007.0;
            double pfj = 22.0/372007.0;
            double pfl = 338.0/372007.0;
            double pfn = 2.0/372007.0;
            double pfo = 1186.0/372007.0;
            double pfr = 785.0/372007.0;
            double pfs = 29.0/372007.0;
            double pft = 522.0/372007.0;
            double pfu = 275.0/372007.0;
            double pfw = 4.0/372007.0;
            double pfy = 21.0/372007.0;
            double pfdot = 108.0/372007.0;
            double pfcomma = 62.0/372007.0;
            double pfvacuum = 1789.0/372007.0;
            double pga = 651.0/372007.0;
            double pgb = 5.0/372007.0;
            double pgd = 30.0/372007.0;
            double pge = 1128.0/372007.0;
            double pgf = 1.0/372007.0;
            double pgg = 165.0/372007.0;
            double pgh = 1195.0/372007.0;
            double pgi = 431.0/372007.0;
            double pgj = 2.0/372007.0;
            double pgl = 318.0/372007.0;
            double pgm = 7.0/372007.0;
            double pgn = 173.0/372007.0;
            double pgo = 711.0/372007.0;
            double pgp = 1.0/372007.0;
            double pgr = 439.0/372007.0;
            double pgs = 194.0/372007.0;
            double pgt = 20.0/372007.0;
            double pgu = 340.0/372007.0;
            double pgv = 17.0/372007.0;
            double pgy = 20.0/372007.0;
            double pgz = 1.0/372007.0;
            double pgdot = 421.0/372007.0;
            double pgcomma = 232.0/372007.0;
            double pgvacuum = 2210.0/372007.0; 
            double pha = 3197.0/372007.0;
            double phb = 3.0/372007.0;
            double phc = 1.0/372007.0;
            double phd = 1.0/372007.0;
            double phe = 1303.0/372007.0;
            double phf = 1303.0/372007.0;
            double phh = 1303.0/372007.0;
            double phi = 349.0/372007.0;
            double phl = 2.0/372007.0;
            double phm = 2.0/372007.0;
            double phn = 19.0/372007.0;
            double pho = 1188.0/372007.0;
            double php = 1188.0/372007.0;
            double phq = 1188.0/372007.0;
            double phr = 19.0/372007.0;
            double pht = 19.0/372007.0;
            double phu = 1085.0/372007.0;
            double phv = 1193.0/372007.0;
            double phw = 1193.0/372007.0;
            double phy = 70.0/372007.0;
            double phdot = 8.0/372007.0;
            double phcomma = 3.0/372007.0;
            double phvacuum = 19.0/372007.0;
            double pia = 586.0/372007.0;
            double pib = 180.0/372007.0;
            double pic = 1310.0/372007.0;
            double pid = 1969.0/372007.0;
            double pie = 858.0/372007.0;
            double pif = 670.0/372007.0;
            double pig = 943.0/372007.0;
            double pih = 12.0/372007.0;
            double pii = 2.0/372007.0;
            double pij = 1.0/372007.0;
            double pik = 475.0/372007.0;
            double pil = 1177.0/372007.0;
            double pim = 1058.0/372007.0;
            double pin = 3262.0/372007.0;
            double pio = 894.0/372007.0;
            double pip = 326.0/372007.0;
            double piq = 11.0/372007.0;
            double pir = 881.0/372007.0;
            double pis = 2156.0/372007.0;
            double pit = 2184.0/372007.0;
            double piu = 61.0/372007.0;
            double piv = 566.0/372007.0;
            double pix = 68.0/372007.0;
            double piz = 31.0/372007.0;
            double pidot = 10.0/372007.0;
            double picomma = 19.0/372007.0;
            double pivacuum = 1001.0/372007.0;   
            double pja = 91.0/372007.0;
            double pje = 107.0/372007.0;
            double pji = 14.0/372007.0;
            double pjo = 301.0/372007.0;
            double pju = 360.0/372007.0;
            double pjdot = 1.0/372007.0;
            double pka = 460.0/372007.0;
            double pkb = 4.0/372007.0;
            double pkc = 1.0/372007.0;
            double pkd = 7.0/372007.0;
            double pke = 1546.0/372007.0;
            double pkf = 2.0/372007.0;
            double pkg = 14.0/372007.0;
            double pkh = 3.0/372007.0;
            double pki = 703.0/372007.0;
            double pkj = 29.0/372007.0;
            double pkk = 20.0/372007.0;
            double pkl = 81.0/372007.0;
            double pkm = 3.0/372007.0;
            double pkn = 591.0/372007.0;
            double pko = 79.0/372007.0;
            double pkp = 3.0/372007.0;
            double pkr = 43.0/372007.0;
            double pks = 183.0/372007.0;
            double pkt = 15.0/372007.0;
            double pku = 13.0/372007.0;
            double pkv = 17.0/372007.0;
            double pkw = 12.0/372007.0;
            double pky = 34.0/372007.0;
            double pkdot = 286.0/372007.0;
            double pkcomma = 178.0/372007.0;
            double pkvacuum = 1184.0/372007.0;  
            double pla = 1213.0/372007.0;
            double plb = 25.0/372007.0;
            double plc = 56.0/372007.0;
            double pld = 1129.0/372007.0;
            double ple = 2091.0/372007.0;
            double plf = 284.0/372007.0;
            double plg = 28.0/372007.0;
            double plh = 3.0/372007.0;
            double pli = 1594.0/372007.0;
            double plj = 1.0/372007.0;
            double plk = 203.0/372007.0;
            double pll = 1677.0/372007.0;
            double plm = 265.0/372007.0;
            double pln = 20.0/372007.0;
            double plo = 1343.0/372007.0;
            double plp = 78.0/372007.0;
            double plr = 103.0/372007.0;
            double pls = 341.0/372007.0;
            double plt = 295.0/372007.0;
            double plu = 304.0/372007.0;
            double plv = 210.0/372007.0;
            double plw = 76.0/372007.0;
            double ply = 1002.0/372007.0;
            double plz = 1.0/372007.0;
            double pldot = 237.0/372007.0;
            double plcomma = 219.0/372007.0;
            double plvacuum = 1488.0/372007.0; 
            double pma = 1357.0/372007.0;
            double pmb = 275.0/372007.0;
            double pmc = 5.0/372007.0;
            double pmd = 1.0/372007.0;
            double pme = 1873.0/372007.0;
            double pmf = 6.0/372007.0;
            double pmh = 2.0/372007.0;
            double pmi = 799.0/372007.0;
            double pml = 21.0/372007.0;
            double pmm = 253.0/372007.0;
            double pmn = 32.0/372007.0;
            double pmo = 924.0/372007.0;
            double pmp = 444.0/372007.0;
            double pmr = 2.0/372007.0;
            double pms = 243.0/372007.0;
            double pmt = 11.0/372007.0;
            double pmu = 387.0/372007.0;
            double pmw = 2.0/372007.0;
            double pmy = 209.0/372007.0;
            double pmdot = 442.0/372007.0;
            double pmcomma = 176.0/372007.0;
            double pmvacuum = 1327.0/372007.0;  
            double pna = 694.0/372007.0;
            double pnb = 16.0/372007.0;
            double pnc = 661.0/372007.0;
            double pnd = 2494.0/372007.0;
            double pne = 1991.0/372007.0;
            double pnf = 138.0/372007.0;
            double png = 2492.0/372007.0;
            double pnh = 34.0/372007.0;
            double pni = 800.0/372007.0;
            double pnj = 31.0/372007.0;
            double pnk = 507.0/372007.0;
            double pnl = 268.0/372007.0;
            double pnm = 28.0/372007.0;
            double pnn = 296.0/372007.0;
            double pno = 1739.0/372007.0;
            double pnp = 14.0/372007.0;
            double pnq = 22.0/372007.0;
            double pnr = 19.0/372007.0;
            double pns = 994.0/372007.0;
            double pnt = 1642.0/372007.0;
            double pnu = 230.0/372007.0;
            double pnv = 127.0/372007.0;
            double pnw = 8.0/372007.0;
            double pnx = 6.0/372007.0;
            double pny = 434.0/372007.0;
            double pnz = 6.0/372007.0;
            double pndot = 770.0/372007.0;
            double pncomma = 453.0/372007.0;
            double pnvacuum = 3207.0/372007.0;  
            double poa = 300.0/372007.0;
            double pob = 285.0/372007.0;
            double poc = 397.0/372007.0;
            double pod = 746.0/372007.0;
            double poe = 149.0/372007.0;
            double pof = 1646.0/372007.0;
            double pog = 219.0/372007.0;
            double poh = 106.0/372007.0;
            double poi = 511.0/372007.0;
            double poj = 7.0/372007.0;
            double pok = 734.0/372007.0;
            double pol = 1205.0/372007.0;
            double pom = 1467.0/372007.0;
            double pon = 2484.0/372007.0;
            double poo = 1384.0/372007.0;
            double pop = 825.0/372007.0;
            double poq = 1.0/372007.0;
            double por = 2003.0/372007.0;
            double pos = 820.0/372007.0;
            double pot = 1416.0/372007.0;
            double pou = 2844.0/372007.0;
            double pov = 565.0/372007.0;
            double pow = 1555.0/372007.0;
            double pox = 71.0/372007.0;
            double poy = 178.0/372007.0;
            double poz = 22.0/372007.0;
            double podot = 161.0/372007.0;
            double pocomma = 185.0/372007.0;
            double povacuum = 2466.0/372007.0;
            double ppa = 728.0/372007.0;
            double ppb = 11.0/372007.0;
            double ppd = 4.0/372007.0;
            double ppe = 1351.0/372007.0;
            double ppf = 1.0/372007.0;
            double pph = 223.0/372007.0;
            double ppi = 397.0/372007.0;
            double ppk = 6.0/372007.0;
            double ppl = 656.0/372007.0;
            double ppm = 5.0/372007.0;
            double ppo = 777.0/372007.0;
            double ppp = 564.0/372007.0;
            double ppr = 725.0/372007.0;
            double pps = 305.0/372007.0;
            double ppt = 214.0/372007.0;
            double ppu = 307.0/372007.0;
            double ppw = 13.0/372007.0;
            double ppy = 50.0/372007.0;
            double ppdot = 190.0/372007.0;
            double ppcomma = 101.0/372007.0;
            double ppvacuum = 877.0/372007.0;
            double pqs = 1.0/372007.0;
            double pqu = 399.0/372007.0;
            double pqdot = 12.0/372007.0;
            double pqcomma = 8.0/372007.0;
            double pqvacuum = 12.0/372007.0;
            double pra = 1371.0/372007.0;
            double prb = 71.0/372007.0;
            double prc = 240.0/372007.0;
            double prd = 751.0/372007.0;
            double pre = 2798.0/372007.0;
            double prf = 91.0/372007.0;
            double prg = 317.0/372007.0;
            double prh = 88.0/372007.0;
            double pri = 1573.0/372007.0;
            double prj = 2.0/372007.0;
            double prk = 335.0/372007.0;
            double prl = 205.0/372007.0;
            double prm = 375.0/372007.0;
            double prn = 555.0/372007.0;
            double pro = 1645.0/372007.0;
            double prp = 102.0/372007.0;
            double prq = 6.0/372007.0;
            double prr = 1812.0/372007.0;
            double prs = 1089.0/372007.0;
            double prt = 786.0/372007.0;
            double pru = 463.0/372007.0;
            double prv = 177.0/372007.0;
            double prw = 158.0/372007.0;
            double pry = 1793.0/372007.0;
            double prz = 1.0/372007.0;
            double prdot = 777.0/372007.0;
            double prcomma = 397.0/372007.0;
            double prvacuum = 3591.0/372007.0;
            double psa = 1629.0/372007.0;
            double psb = 47.0/372007.0;
            double psc = 373.0/372007.0;
            double psd = 13.0/372007.0;
            double pse = 1949.0/372007.0;
            double psf = 29.0/372007.0;
            double psg = 15.0/372007.0;
            double psh = 1532.0/372007.0;
            double psi = 1219.0/372007.0;
            double psj = 2.0/372007.0;
            double psk = 655.0/372007.0;
            double psl = 373.0/372007.0;
            double psm = 342.0/372007.0;
            double psn = 446.0/372007.0;
            double pso = 1229.0/372007.0;
            double psp = 606.0/372007.0;
            double psq = 63.0/372007.0;
            double psr = 8.0/372007.0;
            double pss = 1028.0/372007.0;
            double pst = 2212.0/372007.0;
            double psu = 669.0/372007.0;
            double psv = 57.0/372007.0;
            double psw = 306.0/372007.0;
            double psy = 198.0/372007.0;
            double psdot = 1081.0/372007.0;
            double pscomma = 727.0/372007.0;
            double psvacuum = 3356.0/372007.0;
            double pta = 1237.0/372007.0;
            double ptb = 19.0/372007.0;
            double ptc = 332.0/372007.0;
            double ptd = 4.0/372007.0;
            double pte = 2022.0/372007.0;
            double ptf = 10.0/372007.0;
            double ptg = 3.0/372007.0;
            double pth = 3750.0/372007.0;
            double pti = 1678.0/372007.0;
            double ptj = 6.0/372007.0;
            double ptk = 1.0/372007.0;
            double ptl = 430.0/372007.0;
            double ptm = 68.0/372007.0;
            double ptn = 39.0/372007.0;
            double pto = 2370.0/372007.0;
            double ptp = 19.0/372007.0;
            double ptr = 1132.0/372007.0;
            double pts = 580.0/372007.0;
            double ptt = 772.0/372007.0;
            double ptu = 553.0/372007.0;
            double ptv = 53.0/372007.0;
            double ptw = 368.0/372007.0;
            double pty = 412.0/372007.0;
            double ptz = 5.0/372007.0;
            double ptdot = 860.0/372007.0;
            double ptcomma = 497.0/372007.0;
            double ptvacuum = 3600.0/372007.0;   
            double pua = 223.0/372007.0;
            double pub = 154.0/372007.0;
            double puc = 335.0/372007.0;
            double pud = 244.0/372007.0;
            double pue = 372.0/372007.0;
            double puf = 84.0/372007.0;
            double pug = 757.0/372007.0;
            double puh = 11.0/372007.0;
            double pui = 317.0/372007.0;
            double puk = 16.0/372007.0;
            double pul = 1093.0/372007.0;
            double pum = 420.0/372007.0;
            double pun = 1220.0/372007.0;
            double puo = 10.0/372007.0;
            double pup = 711.0/372007.0;
            double pur = 1274.0/372007.0;
            double pus = 1161.0/372007.0;
            double put = 1562.0/372007.0;
            double puu = 2.0/372007.0;
            double puv = 19.0/372007.0;
            double pux = 5.0/372007.0;
            double puy = 41.0/372007.0;
            double puz = 17.0/372007.0;
            double pudot = 61.0/372007.0;
            double pucomma = 46.0/372007.0;
            double puvacuum = 1079.0/372007.0;  
            double pva = 150.0/372007.0;
            double pvd = 5.0/372007.0;
            double pve = 2005.0/372007.0;
            double pvi = 556.0/372007.0;
            double pvl = 1.0/372007.0;
            double pvo = 282.0/372007.0;
            double pvs = 2.0/372007.0;
            double pvu = 8.0/372007.0;
            double pvv = 2.0/372007.0;
            double pvy = 21.0/372007.0;
            double pvdot = 14.0/372007.0;
            double pvcomma = 3.0/372007.0;
            double pvvacuum = 42.0/372007.0;  
            double pwa = 1891.0/372007.0;
            double pwb = 14.0/372007.0;
            double pwc = 2.0/372007.0;
            double pwd = 15.0/372007.0;
            double pwe = 1370.0/372007.0;
            double pwf = 7.0/372007.0;
            double pwg = 1.0/372007.0;
            double pwh = 1666.0/372007.0;
            double pwi = 1226.0/372007.0;
            double pwk = 3.0/372007.0;
            double pwl = 83.0/372007.0;
            double pwm = 139.0/372007.0;
            double pwn = 520.0/372007.0;
            double pwo = 943.0/372007.0;
            double pwp = 6.0/372007.0;
            double pwr = 108.0/372007.0;
            double pws = 147.0/372007.0;
            double pwt = 1.0/372007.0;
            double pwu = 14.0/372007.0;
            double pww = 1.0/372007.0;
            double pwy = 6.0/372007.0;
            double pwdot = 214.0/372007.0;
            double pwcomma = 140.0/372007.0;
            double pwvacuum = 975.0/372007.0;
            double pxa = 69.0/372007.0;
            double pxc = 62.0/372007.0;
            double pxe = 45.0/372007.0;
            double pxh = 11.0/372007.0;
            double pxi = 57.0/372007.0;
            double pxo = 7.0/372007.0;
            double pxp = 170.0/372007.0;
            double pxt = 111.0/372007.0;
            double pxu = 13.0/372007.0;
            double pxy = 9.0/372007.0;
            double pxdot = 9.0/372007.0;
            double pxcomma = 11.0/372007.0;
            double pxvacuum = 105.0/372007.0; 
            double pya = 36.0/372007.0;
            double pyb = 36.0/372007.0;
            double pyc = 40.0/372007.0;
            double pyd = 8.0/372007.0;
            double pye = 620.0/372007.0;
            double pyf = 3.0/372007.0;
            double pyg = 55.0/372007.0;
            double pyh = 3.0/372007.0;
            double pyi = 199.0/372007.0;
            double pyj = 2.0/372007.0;
            double pyl = 89.0/372007.0;
            double pym = 24.0/372007.0;
            double pyn = 36.0/372007.0;
            double pyo = 1332.0/372007.0;
            double pyp = 49.0/372007.0;
            double pyr = 25.0/372007.0;
            double pys = 247.0/372007.0;
            double pyt = 157.0/372007.0;
            double pyu = 3.0/372007.0;
            double pyv = 5.0/372007.0;
            double pyw = 53.0/372007.0;
            double pyx = 1.0/372007.0;
            double pydot = 580.0/372007.0;
            double pycomma = 370.0/372007.0;
            double pyvacuum = 2879.0/372007.0;
            double pza = 10.0/372007.0;
            double pze = 120.0/372007.0;
            double pzh = 2.0/372007.0;
            double pzi = 45.0/372007.0;
            double pzl = 12.0/372007.0;
            double pzm = 1.0/372007.0;
            double pzo = 14.0/372007.0;
            double pzy = 18.0/372007.0;
            double pzz = 34.0/372007.0;
            double pzcomma = 1.0/372007.0;
            double pzvacuum = 8.0/372007.0;
            double pdotk = 1.0/372007.0;
            double pdotm = 1.0/372007.0;
            double pdotn = 1.0/372007.0;
            double pdotcomma = 1.0/372007.0;
            double pdotvacuum = 8.0/372007.0;
            double pcommavacuum = 2897.0/372007.0;
            double pvacuuma = 3536.0/372007.0;
            double pvacuumb = 2557.0/372007.0;
            double pvacuumc = 2362.0/372007.0;
            double pvacuumd = 2174.0/372007.0;
            double pvacuume = 1356.0/372007.0;
            double pvacuumf = 2171.0/372007.0;
            double pvacuumg = 1541.0/372007.0;
            double pvacuumh = 3512.0/372007.0;
            double pvacuumi = 2963.0/372007.0;
            double pvacuumj = 599.0/372007.0;
            double pvacuumk = 1038.0/372007.0;
            double pvacuuml = 1974.0/372007.0;
            double pvacuumm = 2250.0/372007.0;
            double pvacuumn = 1686.0/372007.0;
            double pvacuumo = 2653.0/372007.0;
            double pvacuump = 1860.0/372007.0;
            double pvacuumq = 274.0/372007.0;
            double pvacuumr = 1878.0/372007.0;
            double pvacuums = 3798.0/372007.0;
            double pvacuumt = 3870.0/372007.0;
            double pvacuumu = 1087.0/372007.0;
            double pvacuumv = 711.0/372007.0;
            double pvacuumw = 3244.0/372007.0;
            double pvacuumx = 1.0/372007.0;
            double pvacuumy = 1528.0/372007.0;
            double pvacuumz = 21.0/372007.0;
            double pvacuumdot = 239.0/372007.0;
            double pvacuumcomma = 33.0/372007.0;  
            double pvacuumvacuum = 3002.0/372007.0;       
            
            double entropypaa = paa*(Math.log(1/paa));
            double entropypab = pab*(Math.log(1/pab));
            double entropypac = pac*(Math.log(1/pac));
            double entropypad = pad*(Math.log(1/pad));
            double entropypae = pae*(Math.log(1/pae));
            double entropypaf = paf*(Math.log(1/paf));
            double entropypag = pag*(Math.log(1/pag));
            double entropypah = pah*(Math.log(1/pah));
            double entropypai = pai*(Math.log(1/pai));
            double entropypaj = paj*(Math.log(1/paj));
            double entropypak = pak*(Math.log(1/pak));
            double entropypal = pal*(Math.log(1/pal));
            double entropypam = pam*(Math.log(1/pam));
            double entropypan = pan*(Math.log(1/pan));
            double entropypao = pao*(Math.log(1/pao));
            double entropypap = pap*(Math.log(1/pap));
            double entropypaq = paq*(Math.log(1/paq));
            double entropypar = par*(Math.log(1/par));
            double entropypas = pas*(Math.log(1/pas));
            double entropypat = pat*(Math.log(1/pat));
            double entropypau = pau*(Math.log(1/pau));
            double entropypav = pav*(Math.log(1/pav));
            double entropypaw = paw*(Math.log(1/paw));
            double entropypax = pax*(Math.log(1/pax));
            double entropypay = pay*(Math.log(1/pay));
            double entropypaz = paz*(Math.log(1/paz));
            double entropypadot = padot*(Math.log(1/padot));
            double entropypacomma = pacomma*(Math.log(1/pacomma));
            double entropypavacuum = pavacuum*(Math.log(1/pavacuum));
            double entropypba = pba*(Math.log(1/pba));
            double entropypbb = pbb*(Math.log(1/pbb));
            double entropypbc = pbc*(Math.log(1/pbc));
            double entropypbe = pbe*(Math.log(1/pbe));
            double entropypbf = pbf*(Math.log(1/pbf));
            double entropypbi = pbi*(Math.log(1/pbi));
            double entropypbj = pbj*(Math.log(1/pbj));
            double entropypbl = pbl*(Math.log(1/pbl));
            double entropypbm = pbm*(Math.log(1/pbm));
            double entropypbn = pbn*(Math.log(1/pbn));
            double entropypbo = pbo*(Math.log(1/pbo));
            double entropypbr = pbr*(Math.log(1/pbr));
            double entropypbs = pbs*(Math.log(1/pbs));
            double entropypbt = pbt*(Math.log(1/pbt));
            double entropypbu = pbu*(Math.log(1/pbu));
            double entropypbv = pbv*(Math.log(1/pbv));
            double entropypbw = pbw*(Math.log(1/pbw));
            double entropypby = pby*(Math.log(1/pby));
            double entropypbdot = pbdot*(Math.log(1/pbdot));
            double entropypbcomma = pbcomma*(Math.log(1/pbcomma));
            double entropypbvacuum = pbvacuum*(Math.log(1/pbvacuum));
            double entropypca = pca*(Math.log(1/pca));
            double entropypcc = pcc*(Math.log(1/pcc));
            double entropypcd = pcd*(Math.log(1/pcd));
            double entropypce = pce*(Math.log(1/pce));
            double entropypch = pch*(Math.log(1/pch));
            double entropypci = pci*(Math.log(1/pci));
            double entropypck = pck*(Math.log(1/pck));
            double entropypcl = pcl*(Math.log(1/pcl));
            double entropypco = pco*(Math.log(1/pco));
            double entropypcq = pcq*(Math.log(1/pcq));
            double entropypcr = pcr*(Math.log(1/pcr));
            double entropypcs = pcs*(Math.log(1/pcs));
            double entropypct = pct*(Math.log(1/pct));
            double entropypcu = pcu*(Math.log(1/pcu));
            double entropypcv = pcv*(Math.log(1/pcv));
            double entropypcy = pcy*(Math.log(1/pcy));
            double entropypcdot = pcdot*(Math.log(1/pcdot));
            double entropypccomma = pccomma*(Math.log(1/pccomma));
            double entropypcvacuum = pcvacuum*(Math.log(1/pcvacuum));
            double entropypda = pda*(Math.log(1/pda));
            double entropypdb = pdb*(Math.log(1/pdb));
            double entropypdc = pdc*(Math.log(1/pdc));
            double entropypdd = pdd*(Math.log(1/pdd));
            double entropypde = pde*(Math.log(1/pde));
            double entropypdf = pdf*(Math.log(1/pdf));
            double entropypdg = pdg*(Math.log(1/pdg));
            double entropypdh = pdh*(Math.log(1/pdh));
            double entropypdi = pdi*(Math.log(1/pdi));
            double entropypdj = pdj*(Math.log(1/pdj));
            double entropypdk = pdk*(Math.log(1/pdk));
            double entropypdl = pdl*(Math.log(1/pdl));
            double entropypdm = pdm*(Math.log(1/pdm));
            double entropypdn = pdn*(Math.log(1/pdn));
            double entropypdo = pdo*(Math.log(1/pdo));
            double entropypdp = pdp*(Math.log(1/pdp));
            double entropypdr = pdr*(Math.log(1/pdr));
            double entropypds = pds*(Math.log(1/pds));
            double entropypdt = pdt*(Math.log(1/pdt));
            double entropypdu = pdu*(Math.log(1/pdu));
            double entropypdv = pdv*(Math.log(1/pdv));
            double entropypdw = pdw*(Math.log(1/pdw));
            double entropypdy = pdy*(Math.log(1/pdy));
            double entropypddot = pddot*(Math.log(1/pddot));
            double entropypdcomma = pdcomma*(Math.log(1/pdcomma));
            double entropypdvacuum = pdvacuum*(Math.log(1/pdvacuum));
            double entropypea = pea*(Math.log(1/pea));
            double entropypeb = peb*(Math.log(1/peb));
            double entropypec = pec*(Math.log(1/pec));
            double entropyped = ped*(Math.log(1/ped));
            double entropypee = pee*(Math.log(1/pee));
            double entropypef = pef*(Math.log(1/pef));
            double entropypeg = peg*(Math.log(1/peg));
            double entropypeh = peh*(Math.log(1/peh));
            double entropypei = pei*(Math.log(1/pei));
            double entropypej = pej*(Math.log(1/pej));
            double entropypek = pek*(Math.log(1/pek));
            double entropypel = pel*(Math.log(1/pel));
            double entropypem = pem*(Math.log(1/pem));
            double entropypen = pen*(Math.log(1/pen));
            double entropypeo = peo*(Math.log(1/peo));
            double entropypep = pep*(Math.log(1/pep));
            double entropypeq = peq*(Math.log(1/peq));
            double entropyper = per*(Math.log(1/per));
            double entropypes = pes*(Math.log(1/pes));
            double entropypet = pet*(Math.log(1/pet));
            double entropypeu = peu*(Math.log(1/peu));
            double entropypev = pev*(Math.log(1/pev));
            double entropypew = pew*(Math.log(1/pew));
            double entropypex = pex*(Math.log(1/pex));
            double entropypey = pey*(Math.log(1/pey));
            double entropypez = pez*(Math.log(1/pez));
            double entropypedot = pedot*(Math.log(1/pedot));
            double entropypecomma = pecomma*(Math.log(1/pecomma));
            double entropypevacuum = pevacuum*(Math.log(1/pevacuum));
            double entropypfa = pfa*(Math.log(1/pfa));
            double entropypfb = pfb*(Math.log(1/pfb));
            double entropypfc = pfc*(Math.log(1/pfc));
            double entropypfe = pfe*(Math.log(1/pfe));
            double entropypff = pff*(Math.log(1/pff));
            double entropypfh = pfh*(Math.log(1/pfh));
            double entropypfi = pfi*(Math.log(1/pfi));
            double entropypfj = pfj*(Math.log(1/pfj));
            double entropypfl = pfl*(Math.log(1/pfl));
            double entropypfn = pfn*(Math.log(1/pfn));
            double entropypfo = pfo*(Math.log(1/pfo));
            double entropypfr = pfr*(Math.log(1/pfr));
            double entropypfs = pfs*(Math.log(1/pfs));
            double entropypft = pft*(Math.log(1/pft));
            double entropypfu = pfu*(Math.log(1/pfu));
            double entropypfw = pfw*(Math.log(1/pfw));
            double entropypfy = pfy*(Math.log(1/pfy));
            double entropypfdot = pfdot*(Math.log(1/pfdot));
            double entropypfcomma = pfcomma*(Math.log(1/pfcomma));
            double entropypfvacuum = pfvacuum*(Math.log(1/pfvacuum)); 
            double entropypga = pga*(Math.log(1/pga));
            double entropypgb = pgb*(Math.log(1/pgb));
            double entropypgd = pgd*(Math.log(1/pgd));
            double entropypge = pge*(Math.log(1/pge));
            double entropypgf = pgf*(Math.log(1/pgf));
            double entropypgg = pgg*(Math.log(1/pgg));
            double entropypgh = pgh*(Math.log(1/pgh));
            double entropypgi = pgi*(Math.log(1/pgi));
            double entropypgj = pgj*(Math.log(1/pgj));
            double entropypgl = pgl*(Math.log(1/pgl));
            double entropypgm = pgm*(Math.log(1/pgm));
            double entropypgn = pgn*(Math.log(1/pgn));
            double entropypgo = pgo*(Math.log(1/pgo));
            double entropypgp = pgp*(Math.log(1/pgp));
            double entropypgr = pgr*(Math.log(1/pgr));
            double entropypgs = pgs*(Math.log(1/pgs));
            double entropypgt = pgt*(Math.log(1/pgt));
            double entropypgu = pgu*(Math.log(1/pgu));
            double entropypgv = pgv*(Math.log(1/pgv));
            double entropypgy = pgy*(Math.log(1/pgy));
            double entropypgz = pgz*(Math.log(1/pgz));
            double entropypgdot = pgdot*(Math.log(1/pgdot));
            double entropypgcomma = pgcomma*(Math.log(1/pgcomma));
            double entropypgvacuum = pgvacuum*(Math.log(1/pgvacuum));
            double entropypha = pha*(Math.log(1/pha));
            double entropyphb = phb*(Math.log(1/phb));
            double entropyphc = phc*(Math.log(1/phc));
            double entropyphd = phd*(Math.log(1/phd));
            double entropyphe = phe*(Math.log(1/phe));
            double entropyphf = phf*(Math.log(1/phf));
            double entropyphh = phh*(Math.log(1/phh));
            double entropyphi = phi*(Math.log(1/phi));
            double entropyphl = phl*(Math.log(1/phl));
            double entropyphm = phm*(Math.log(1/phm));
            double entropyphn = phn*(Math.log(1/phn));
            double entropypho = pho*(Math.log(1/pho));
            double entropyphp = php*(Math.log(1/php));
            double entropyphq = phq*(Math.log(1/phq));
            double entropyphr = phr*(Math.log(1/phr));
            double entropypht = pht*(Math.log(1/pht));
            double entropyphu = phu*(Math.log(1/phu));
            double entropyphv = phv*(Math.log(1/phv));
            double entropyphw = phw*(Math.log(1/phw));
            double entropyphy = phy*(Math.log(1/phy));
            double entropyphdot = phdot*(Math.log(1/phdot));
            double entropyphcomma = phcomma*(Math.log(1/phcomma));
            double entropyphvacuum = phvacuum*(Math.log(1/phvacuum));
            double entropypia = pia*(Math.log(1/pia));
            double entropypib = pib*(Math.log(1/pib));
            double entropypic = pic*(Math.log(1/pic));
            double entropypid = pid*(Math.log(1/pid));
            double entropypie = pie*(Math.log(1/pie));
            double entropypif = pif*(Math.log(1/pif));
            double entropypig = pig*(Math.log(1/pig));
            double entropypih = pih*(Math.log(1/pih));
            double entropypii = pii*(Math.log(1/pii));
            double entropypij = pij*(Math.log(1/pij));
            double entropypik = pik*(Math.log(1/pik));
            double entropypil = pil*(Math.log(1/pil));
            double entropypim = pim*(Math.log(1/pim));
            double entropypin = pin*(Math.log(1/pin));
            double entropypio = pio*(Math.log(1/pio));
            double entropypip = pip*(Math.log(1/pip));
            double entropypiq = piq*(Math.log(1/piq));
            double entropypir = pir*(Math.log(1/pir));
            double entropypis = pis*(Math.log(1/pis));
            double entropypit = pit*(Math.log(1/pit));
            double entropypiu = piu*(Math.log(1/piu));
            double entropypiv = piv*(Math.log(1/piv));
            double entropypix = pix*(Math.log(1/pix));
            double entropypiz = piz*(Math.log(1/piz));
            double entropypidot = pidot*(Math.log(1/pidot));
            double entropypicomma = picomma*(Math.log(1/picomma));
            double entropypivacuum = pivacuum*(Math.log(1/pivacuum));
            double entropypja = pja*(Math.log(1/pja));
            double entropypje = pje*(Math.log(1/pje));
            double entropypji = pji*(Math.log(1/pji));
            double entropypjo = pjo*(Math.log(1/pjo));
            double entropypju = pju*(Math.log(1/pju));
            double entropypjdot = pjdot*(Math.log(1/pjdot));
            double entropypka = pka*(Math.log(1/pka));
            double entropypkb = pkb*(Math.log(1/pkb));
            double entropypkc = pkc*(Math.log(1/pkc));
            double entropypkd = pkd*(Math.log(1/pkd));
            double entropypke = pke*(Math.log(1/pke));
            double entropypkf = pkf*(Math.log(1/pkf));
            double entropypkg = pkg*(Math.log(1/pkg));
            double entropypkh = pkh*(Math.log(1/pkh));
            double entropypki = pki*(Math.log(1/pki));
            double entropypkj = pkj*(Math.log(1/pkj));
            double entropypkk = pkk*(Math.log(1/pkk));
            double entropypkl = pkl*(Math.log(1/pkl));
            double entropypkm = pkm*(Math.log(1/pkm));
            double entropypkn = pkn*(Math.log(1/pkn));
            double entropypko = pko*(Math.log(1/pko));
            double entropypkp = pkp*(Math.log(1/pkp));
            double entropypkr = pkr*(Math.log(1/pkr));
            double entropypks = pks*(Math.log(1/pks));
            double entropypkt = pkt*(Math.log(1/pkt));
            double entropypku = pku*(Math.log(1/pku));
            double entropypkv = pkv*(Math.log(1/pkv));
            double entropypkw = pkw*(Math.log(1/pkw));
            double entropypky = pky*(Math.log(1/pky));
            double entropypkdot = pkdot*(Math.log(1/pkdot));
            double entropypkcomma = pkcomma*(Math.log(1/pkcomma));
            double entropypkvacuum = pkvacuum*(Math.log(1/pkvacuum));
            double entropypla = pla*(Math.log(1/pla));
            double entropyplb = plb*(Math.log(1/plb));
            double entropyplc = plc*(Math.log(1/plc));
            double entropypld = pld*(Math.log(1/pld));
            double entropyple = ple*(Math.log(1/ple));
            double entropyplf = plf*(Math.log(1/plf));
            double entropyplg = plg*(Math.log(1/plg));
            double entropyplh = plh*(Math.log(1/plh));
            double entropypli = pli*(Math.log(1/pli));
            double entropyplj = plj*(Math.log(1/plj));
            double entropyplk = plk*(Math.log(1/plk));
            double entropypll = pll*(Math.log(1/pll));
            double entropyplm = plm*(Math.log(1/plm));
            double entropypln = pln*(Math.log(1/pln));
            double entropyplo = plo*(Math.log(1/plo));
            double entropyplp = plp*(Math.log(1/plp));
            double entropyplr = plr*(Math.log(1/plr));
            double entropypls = pls*(Math.log(1/pls));
            double entropyplt = plt*(Math.log(1/plt));
            double entropyplu = plu*(Math.log(1/plu));
            double entropyplv = plv*(Math.log(1/plv));
            double entropyplw = plw*(Math.log(1/plw));
            double entropyply = ply*(Math.log(1/ply));
            double entropyplz = plz*(Math.log(1/plz));
            double entropypldot = pldot*(Math.log(1/pldot));
            double entropyplcomma = plcomma*(Math.log(1/plcomma));
            double entropyplvacuum = plvacuum*(Math.log(1/plvacuum));
            double entropypma = pma*(Math.log(1/pma));
            double entropypmb = pmb*(Math.log(1/pmb));
            double entropypmc = pmc*(Math.log(1/pmc));
            double entropypmd = pmd*(Math.log(1/pmd));
            double entropypme = pme*(Math.log(1/pme));
            double entropypmf = pmf*(Math.log(1/pmf));
            double entropypmh = pmh*(Math.log(1/pmh));
            double entropypmi = pmi*(Math.log(1/pmi));
            double entropypml = pml*(Math.log(1/pml));
            double entropypmm = pmm*(Math.log(1/pmm));
            double entropypmn = pmn*(Math.log(1/pmn));
            double entropypmo = pmo*(Math.log(1/pmo));
            double entropypmp = pmp*(Math.log(1/pmp));
            double entropypmr = pmr*(Math.log(1/pmr));
            double entropypms = pms*(Math.log(1/pms));
            double entropypmt = pmt*(Math.log(1/pmt));
            double entropypmu = pmu*(Math.log(1/pmu));
            double entropypmw = pmw*(Math.log(1/pmw));
            double entropypmy = pmy*(Math.log(1/pmy));
            double entropypmdot = pmdot*(Math.log(1/pmdot));
            double entropypmcomma = pmcomma*(Math.log(1/pmcomma));
            double entropypmvacuum = pmvacuum*(Math.log(1/pmvacuum));
            double entropypna = pna*(Math.log(1/pna));
            double entropypnb = pnb*(Math.log(1/pnb));
            double entropypnc = pnc*(Math.log(1/pnc));
            double entropypnd = pnd*(Math.log(1/pnd));
            double entropypne = pne*(Math.log(1/pne));
            double entropypnf = pnf*(Math.log(1/pnf));
            double entropypng = png*(Math.log(1/png));
            double entropypnh = pnh*(Math.log(1/pnh));
            double entropypni = pni*(Math.log(1/pni));
            double entropypnj = pnj*(Math.log(1/pnj));
            double entropypnk = pnk*(Math.log(1/pnk));
            double entropypnl = pnl*(Math.log(1/pnl));
            double entropypnm = pnm*(Math.log(1/pnm));
            double entropypnn = pnn*(Math.log(1/pnn));
            double entropypno = pno*(Math.log(1/pno));
            double entropypnp = pnp*(Math.log(1/pnp));
            double entropypnq = pnq*(Math.log(1/pnq));
            double entropypnr = pnr*(Math.log(1/pnr));
            double entropypns = pns*(Math.log(1/pns));
            double entropypnt = pnt*(Math.log(1/pnt));
            double entropypnu = pnu*(Math.log(1/pnu));
            double entropypnv = pnv*(Math.log(1/pnv));
            double entropypnw = pnw*(Math.log(1/pnw));
            double entropypnx = pnx*(Math.log(1/pnx));
            double entropypny = pny*(Math.log(1/pny));
            double entropypnz = pnz*(Math.log(1/pnz));
            double entropypndot = pndot*(Math.log(1/pndot));
            double entropypncomma = pncomma*(Math.log(1/pncomma));
            double entropypnvacuum = pnvacuum*(Math.log(1/pnvacuum));
            double entropypoa = poa*(Math.log(1/poa));
            double entropypob = pob*(Math.log(1/pob));
            double entropypoc = poc*(Math.log(1/poc));
            double entropypod = pod*(Math.log(1/pod));
            double entropypoe = poe*(Math.log(1/poe));
            double entropypof = pof*(Math.log(1/pof));
            double entropypog = pog*(Math.log(1/pog));
            double entropypoh = poh*(Math.log(1/poh));
            double entropypoi = poi*(Math.log(1/poi));
            double entropypoj = poj*(Math.log(1/poj));
            double entropypok = pok*(Math.log(1/pok));
            double entropypol = pol*(Math.log(1/pol));
            double entropypom = pom*(Math.log(1/pom));
            double entropypon = pon*(Math.log(1/pon));
            double entropypoo = poo*(Math.log(1/poo));
            double entropypop = pop*(Math.log(1/pop));
            double entropypoq = poq*(Math.log(1/poq));
            double entropypor = por*(Math.log(1/por));
            double entropypos = pos*(Math.log(1/pos));
            double entropypot = pot*(Math.log(1/pot));
            double entropypou = pou*(Math.log(1/pou));
            double entropypov = pov*(Math.log(1/pov));
            double entropypow = pow*(Math.log(1/pow));
            double entropypox = pox*(Math.log(1/pox));
            double entropypoy = poy*(Math.log(1/poy));
            double entropypoz = poz*(Math.log(1/poz));
            double entropypodot = podot*(Math.log(1/podot));
            double entropypocomma = pocomma*(Math.log(1/pocomma));
            double entropypovacuum = povacuum*(Math.log(1/povacuum));
            double entropyppa = ppa*(Math.log(1/ppa));
            double entropyppb = ppb*(Math.log(1/ppb));
            double entropyppd = ppd*(Math.log(1/ppd));
            double entropyppe = ppe*(Math.log(1/ppe));
            double entropyppf = ppf*(Math.log(1/ppf));
            double entropypph = pph*(Math.log(1/pph));
            double entropyppi = ppi*(Math.log(1/ppi));
            double entropyppk = ppk*(Math.log(1/ppk));
            double entropyppl = ppl*(Math.log(1/ppl));
            double entropyppm = ppm*(Math.log(1/ppm));
            double entropyppo = ppo*(Math.log(1/ppo));
            double entropyppp = ppp*(Math.log(1/ppp));
            double entropyppr = ppr*(Math.log(1/ppr));
            double entropypps = pps*(Math.log(1/pps));
            double entropyppt = ppt*(Math.log(1/ppt));
            double entropyppu = ppu*(Math.log(1/ppu));
            double entropyppw = ppw*(Math.log(1/ppw));
            double entropyppy = ppy*(Math.log(1/ppy));
            double entropyppdot = ppdot*(Math.log(1/ppdot));
            double entropyppcomma = ppcomma*(Math.log(1/ppcomma));
            double entropyppvacuum = ppvacuum*(Math.log(1/ppvacuum));
            double entropypqs = pqs*(Math.log(1/pqs));
            double entropypqu = pqu*(Math.log(1/pqu));
            double entropypqdot = pqdot*(Math.log(1/pqdot));
            double entropypqcomma = pqcomma*(Math.log(1/pqcomma));
            double entropypqvacuum = pqvacuum*(Math.log(1/pqvacuum));
            double entropypra = pra*(Math.log(1/pra));
            double entropyprb = prb*(Math.log(1/prb));
            double entropyprc = prc*(Math.log(1/prc));
            double entropyprd = prd*(Math.log(1/prd));
            double entropypre = pre*(Math.log(1/pre));
            double entropyprf = prf*(Math.log(1/prf));
            double entropyprg = prg*(Math.log(1/prg));
            double entropyprh = prh*(Math.log(1/prh));
            double entropypri = pri*(Math.log(1/pri));
            double entropyprj = prj*(Math.log(1/prj));
            double entropyprk = prk*(Math.log(1/prk));
            double entropyprl = prl*(Math.log(1/prl));
            double entropyprm = prm*(Math.log(1/prm));
            double entropyprn = prn*(Math.log(1/prn));
            double entropypro = pro*(Math.log(1/pro));
            double entropyprp = prp*(Math.log(1/prp));
            double entropyprq = prq*(Math.log(1/prq));
            double entropyprr = prr*(Math.log(1/prr));
            double entropyprs = prs*(Math.log(1/prs));
            double entropyprt = prt*(Math.log(1/prt));
            double entropypru = pru*(Math.log(1/pru));
            double entropyprv = prv*(Math.log(1/prv));
            double entropyprw = prw*(Math.log(1/prw));
            double entropypry = pry*(Math.log(1/pry));
            double entropyprz = prz*(Math.log(1/prz));
            double entropyprdot = prdot*(Math.log(1/prdot));
            double entropyprcomma = prcomma*(Math.log(1/prcomma));
            double entropyprvacuum = prvacuum*(Math.log(1/prvacuum));
            double entropypsa = psa*(Math.log(1/psa));
            double entropypsb = psb*(Math.log(1/psb));
            double entropypsc = psc*(Math.log(1/psc));
            double entropypsd = psd*(Math.log(1/psd));
            double entropypse = pse*(Math.log(1/pse));
            double entropypsf = psf*(Math.log(1/psf));
            double entropypsg = psg*(Math.log(1/psg));
            double entropypsh = psh*(Math.log(1/psh));
            double entropypsi = psi*(Math.log(1/psi));
            double entropypsj = psj*(Math.log(1/psj));
            double entropypsk = psk*(Math.log(1/psk));
            double entropypsl = psl*(Math.log(1/psl));
            double entropypsm = psm*(Math.log(1/psm));
            double entropypsn = psn*(Math.log(1/psn));
            double entropypso = pso*(Math.log(1/pso));
            double entropypsp = psp*(Math.log(1/psp));
            double entropypsq = psq*(Math.log(1/psq));
            double entropypsr = psr*(Math.log(1/psr));
            double entropypss = pss*(Math.log(1/pss));
            double entropypst = pst*(Math.log(1/pst));
            double entropypsu = psu*(Math.log(1/psu));
            double entropypsv = psv*(Math.log(1/psv));
            double entropypsw = psw*(Math.log(1/psw));
            double entropypsy = psy*(Math.log(1/psy));
            double entropypsdot = psdot*(Math.log(1/psdot));
            double entropypscomma = pscomma*(Math.log(1/pscomma));
            double entropypsvacuum = psvacuum*(Math.log(1/psvacuum));
            double entropypta = pta*(Math.log(1/pta));
            double entropyptb = ptb*(Math.log(1/ptb));
            double entropyptc = ptc*(Math.log(1/ptc));
            double entropyptd = ptd*(Math.log(1/ptd)); 
            double entropypte = pte*(Math.log(1/pte));
            double entropyptf = ptf*(Math.log(1/ptf));
            double entropyptg = ptg*(Math.log(1/ptg));
            double entropypth = pth*(Math.log(1/pth));
            double entropypti = pti*(Math.log(1/pti));
            double entropyptj = ptj*(Math.log(1/ptj));
            double entropyptk = ptk*(Math.log(1/ptk));
            double entropyptl = ptl*(Math.log(1/ptl));
            double entropyptm = ptm*(Math.log(1/ptm));
            double entropyptn = ptn*(Math.log(1/ptn));
            double entropypto = pto*(Math.log(1/pto));
            double entropyptp = ptp*(Math.log(1/ptp));
            double entropyptr = ptr*(Math.log(1/ptr));
            double entropypts = pts*(Math.log(1/pts));
            double entropyptt = ptt*(Math.log(1/ptt));
            double entropyptu = ptu*(Math.log(1/ptu));
            double entropyptv = ptv*(Math.log(1/ptv));
            double entropyptw = ptw*(Math.log(1/ptw));
            double entropypty = pty*(Math.log(1/pty));
            double entropyptz = ptz*(Math.log(1/ptz));
            double entropyptdot = ptdot*(Math.log(1/ptdot));
            double entropyptcomma = ptcomma*(Math.log(1/ptcomma));
            double entropyptvacuum = ptvacuum*(Math.log(1/ptvacuum));
            double entropypua = pua*(Math.log(1/pua));
            double entropypub = pub*(Math.log(1/pub));
            double entropypuc = puc*(Math.log(1/puc));
            double entropypud = pud*(Math.log(1/pud));
            double entropypue = pue*(Math.log(1/pue));
            double entropypuf = puf*(Math.log(1/puf));
            double entropypug = pug*(Math.log(1/pug));
            double entropypuh = puh*(Math.log(1/puh));
            double entropypui = pai*(Math.log(1/pui));
            double entropypuk = puk*(Math.log(1/puk));
            double entropypul = pul*(Math.log(1/pul));
            double entropypum = pum*(Math.log(1/pum));
            double entropypun = pun*(Math.log(1/pun));
            double entropypuo = puo*(Math.log(1/puo));
            double entropypup = pup*(Math.log(1/pup));
            double entropypur = pur*(Math.log(1/pur));
            double entropypus = pus*(Math.log(1/pus));
            double entropyput = put*(Math.log(1/put));
            double entropypuu = puu*(Math.log(1/puu));
            double entropypuv = puv*(Math.log(1/puv));
            double entropypux = pux*(Math.log(1/pux));
            double entropypuy = puy*(Math.log(1/puy));
            double entropypuz = puz*(Math.log(1/puz));
            double entropypudot = pudot*(Math.log(1/pudot));
            double entropypucomma = pucomma*(Math.log(1/pucomma));
            double entropypuvacuum = puvacuum*(Math.log(1/puvacuum));
            double entropypva = pva*(Math.log(1/pva));
            double entropypvd = pvd*(Math.log(1/pvd));
            double entropypve = pve*(Math.log(1/pve));
            double entropypvi = pvi*(Math.log(1/pvi));
            double entropypvl = pvl*(Math.log(1/pvl));
            double entropypvo = pvo*(Math.log(1/pvo));
            double entropypvs = pvs*(Math.log(1/pvs));
            double entropypvu = pvu*(Math.log(1/pvu));
            double entropypvv = pvv*(Math.log(1/pvv));
            double entropypvy = pvy*(Math.log(1/pvy));
            double entropypvdot = pvdot*(Math.log(1/pvdot));
            double entropypvcomma = pvcomma*(Math.log(1/pvcomma));
            double entropypvvacuum = pvvacuum*(Math.log(1/pvvacuum));
            double entropypwa = pwa*(Math.log(1/pwa));
            double entropypwb = pwb*(Math.log(1/pwb));
            double entropypwc = pwc*(Math.log(1/pwc));
            double entropypwd = pwd*(Math.log(1/pwd));
            double entropypwe = pwe*(Math.log(1/pwe));
            double entropypwf = pwf*(Math.log(1/pwf));
            double entropypwg = pwg*(Math.log(1/pwg));
            double entropypwh = pwh*(Math.log(1/pwh));
            double entropypwi = pwi*(Math.log(1/pwi));
            double entropypwk = pwk*(Math.log(1/pwk));
            double entropypwl = pwl*(Math.log(1/pwl));
            double entropypwm = pwm*(Math.log(1/pwm));
            double entropypwn = pwn*(Math.log(1/pwn));
            double entropypwo = pwo*(Math.log(1/pwo));
            double entropypwp = pwp*(Math.log(1/pwp));
            double entropypwr = pwr*(Math.log(1/pwr));
            double entropypws = pws*(Math.log(1/pws));
            double entropypwt = pwt*(Math.log(1/pwt));
            double entropypwu = pwu*(Math.log(1/pwu));
            double entropypww = pww*(Math.log(1/pww));
            double entropypwy = pwy*(Math.log(1/pwy));
            double entropypwdot = pwdot*(Math.log(1/pwdot));
            double entropypwcomma = pwcomma*(Math.log(1/pwcomma));
            double entropypwvacuum = pwvacuum*(Math.log(1/pwvacuum));
            double entropypxa = pxa*(Math.log(1/pxa));
            double entropypxc = pxc*(Math.log(1/pxc));
            double entropypxe = pxe*(Math.log(1/pxe));
            double entropypxh = pxh*(Math.log(1/pxh));
            double entropypxi = pxi*(Math.log(1/pxi));
            double entropypxo = pxo*(Math.log(1/pxo));
            double entropypxp = pxp*(Math.log(1/pxp));
            double entropypxt = pxt*(Math.log(1/pxt));
            double entropypxu = pxu*(Math.log(1/pxu));
            double entropypxy = pxy*(Math.log(1/pxy));
            double entropypxdot = pxdot*(Math.log(1/pxdot));
            double entropypxcomma = pxcomma*(Math.log(1/pxcomma));
            double entropypxvacuum = pxvacuum*(Math.log(1/pxvacuum));
            double entropypya = pya*(Math.log(1/pya));
            double entropypyb = pyb*(Math.log(1/pyb));
            double entropypyc = pyc*(Math.log(1/pyc));
            double entropypyd = pyd*(Math.log(1/pyd));
            double entropypye = pye*(Math.log(1/pye));
            double entropypyf = pyf*(Math.log(1/pyf));
            double entropypyg = pyg*(Math.log(1/pyg));
            double entropypyh = pyh*(Math.log(1/pyh));
            double entropypyi = pyi*(Math.log(1/pyi));
            double entropypyj = pyj*(Math.log(1/pyj));
            double entropypyl = pyl*(Math.log(1/pyl));
            double entropypym = pym*(Math.log(1/pym));
            double entropypyn = pyn*(Math.log(1/pyn));
            double entropypyo = pyo*(Math.log(1/pyo));
            double entropypyp = pyp*(Math.log(1/pyp));
            double entropypyr = pyr*(Math.log(1/pyr));
            double entropypys = pys*(Math.log(1/pys));
            double entropypyt = pyt*(Math.log(1/pyt));
            double entropypyu = pyu*(Math.log(1/pyu));
            double entropypyv = pyv*(Math.log(1/pyv));
            double entropypyw = pyw*(Math.log(1/pyw));
            double entropypyx = pyx*(Math.log(1/pyx));
            double entropypydot = pydot*(Math.log(1/pydot));
            double entropypycomma = pycomma*(Math.log(1/pycomma));
            double entropypyvacuum = pyvacuum*(Math.log(1/pyvacuum));
            double entropypza = pza*(Math.log(1/pza));
            double entropypze = pze*(Math.log(1/pze));
            double entropypzh = pzh*(Math.log(1/pzh));
            double entropypzi = pzi*(Math.log(1/pzi));
            double entropypzl = pzl*(Math.log(1/pzl));
            double entropypzm = pzm*(Math.log(1/pzm));
            double entropypzo = pzo*(Math.log(1/pzo));
            double entropypzy = pzy*(Math.log(1/pzy));
            double entropypzz = pzz*(Math.log(1/pzz));
            double entropypzcomma = pzcomma*(Math.log(1/pzcomma));
            double entropypzvacuum = pzvacuum*(Math.log(1/pzvacuum));
            double entropypdotk = pdotk*(Math.log(1/pdotk));
            double entropypdotm = pdotm*(Math.log(1/pdotm));
            double entropypdotn = pdotn*(Math.log(1/pdotn));
            double entropypdotcomma = pdotcomma*(Math.log(1/pdotcomma));
            double entropypdotvacuum = pdotvacuum*(Math.log(1/pdotvacuum));
            double entropypcommavacuum = pcommavacuum*(Math.log(1/pcommavacuum));
            double entropypvacuuma = pvacuuma*(Math.log(1/pvacuuma));
            double entropypvacuumb = pvacuumb*(Math.log(1/pvacuumb));
            double entropypvacuumc = pvacuumc*(Math.log(1/pvacuumc));
            double entropypvacuumd = pvacuumd*(Math.log(1/pvacuumd));
            double entropypvacuume = pvacuume*(Math.log(1/pvacuume));
            double entropypvacuumf = pvacuumf*(Math.log(1/pvacuumf));
            double entropypvacuumg = pvacuumg*(Math.log(1/pvacuumg));
            double entropypvacuumh = pvacuumh*(Math.log(1/pvacuumh));
            double entropypvacuumi = pvacuumi*(Math.log(1/pvacuumi));
            double entropypvacuumj = pvacuumj*(Math.log(1/pvacuumj));
            double entropypvacuumk = pvacuumk*(Math.log(1/pvacuumk));
            double entropypvacuuml = pvacuuml*(Math.log(1/pvacuuml));
            double entropypvacuumm = pvacuumm*(Math.log(1/pvacuumm));
            double entropypvacuumn = pvacuumn*(Math.log(1/pvacuumn));
            double entropypvacuumo = pvacuumo*(Math.log(1/pvacuumo));
            double entropypvacuump = pvacuump*(Math.log(1/pvacuump));
            double entropypvacuumq = pvacuumq*(Math.log(1/pvacuumq));
            double entropypvacuumr = pvacuumr*(Math.log(1/pvacuumr));
            double entropypvacuums = pvacuums*(Math.log(1/pvacuums));
            double entropypvacuumt = pvacuumt*(Math.log(1/pvacuumt));
            double entropypvacuumu = pvacuumu*(Math.log(1/pvacuumu));
            double entropypvacuumv = pvacuumv*(Math.log(1/pvacuumv));
            double entropypvacuumw = pvacuumw*(Math.log(1/pvacuumw));
            double entropypvacuumx = pvacuumx*(Math.log(1/pvacuumx));
            double entropypvacuumy = pvacuumy*(Math.log(1/pvacuumy));
            double entropypvacuumz = pvacuumz*(Math.log(1/pvacuumz));
            double entropypvacuumdot = pvacuumdot*(Math.log(1/pvacuumdot));
            double entropypvacuumcomma = pvacuumcomma*(Math.log(1/pvacuumcomma));
            double entropypvacuumvacuum = pvacuumvacuum*(Math.log(1/pvacuumvacuum));
            
            double sumentropy = entropypaa+entropypab+entropypac+entropypad+entropypae+entropypaf+entropypag+entropypah+entropypai+entropypaj+entropypak+entropypal+entropypam+entropypan+entropypao+entropypap+entropypaq+entropypar+entropypas+entropypat+entropypau+entropypav+entropypaw+entropypax+entropypay+entropypaz+entropypadot+entropypacomma+entropypavacuum
                               +entropypba+entropypbb+entropypbc+entropypbe+entropypbf+entropypbi+entropypbj+entropypbl+entropypbm+entropypbn+entropypbo+entropypbr+entropypbs+entropypbt+entropypbu+entropypbv+entropypbw+entropypby+entropypbdot+entropypbcomma+entropypbvacuum
                               +entropypca+entropypcc+entropypcd+entropypce+entropypch+entropypci+entropypck+entropypcl+entropypco+entropypcq+entropypcr+entropypcs+entropypct+entropypcu+entropypcv+entropypcy+entropypcdot+entropypccomma+entropypcvacuum
                               +entropypda+entropypdb+entropypdc+entropypdd+entropypde+entropypdf+entropypdg+entropypdh+entropypdi+entropypdj+entropypdk+entropypdl+entropypdm+entropypdn+entropypdo+entropypdp+entropypdr+entropypds+entropypdt+entropypdu+entropypdv+entropypdw+entropypdy+entropypddot+entropypdcomma+entropypdvacuum
                               +entropypea+entropypeb+entropypec+entropyped+entropypee+entropypef+entropypeg+entropypeh+entropypei+entropypej+entropypek+entropypel+entropypem+entropypen+entropypeo+entropypep+entropypeq+entropyper+entropypes+entropypet+entropypeu+entropypev+entropypew+entropypex+entropypey+entropypez+entropypedot+entropypecomma+entropypevacuum
                               +entropypfa+entropypfb+entropypfc+entropypfe+entropypff+entropypfh+entropypfi+entropypfj+entropypfl+entropypfn+entropypfo+entropypfr+entropypfs+entropypft+entropypfu+entropypfw+entropypfy+entropypfdot+entropypfcomma+entropypfvacuum
                               +entropypga+entropypgb+entropypgd+entropypge+entropypgf+entropypgg+entropypgh+entropypgi+entropypgj+entropypgl+entropypgm+entropypgn+entropypgo+entropypgp+entropypgr+entropypgs+entropypgt+entropypgu+entropypgv+entropypgy+entropypgz+entropypgdot+entropypgcomma+entropypgvacuum
                               +entropypha+entropyphb+entropyphc+entropyphd+entropyphe+entropyphf+entropyphh+entropyphi+entropyphl+entropyphm+entropyphn+entropypho+entropyphp+entropyphq+entropyphr+entropypht+entropyphu+entropyphv+entropyphw+entropyphy+entropyphdot+entropyphcomma+entropyphvacuum
                               +entropypia+entropypib+entropypic+entropypid+entropypie+entropypif+entropypig+entropypih+entropypii+entropypij+entropypik+entropypil+entropypim+entropypin+entropypio+entropypip+entropypiq+entropypir+entropypis+entropypit+entropypiu+entropypiv+entropypix+entropypiz+entropypidot+entropypicomma+entropypivacuum
                               +entropypja+entropypje+entropypji+entropypjo+entropypju+entropypjdot
                               +entropypka+entropypkb+entropypkc+entropypkd+entropypke+entropypkf+entropypkg+entropypkh+entropypki+entropypkj+entropypkk+entropypkl+entropypkm+entropypkn+entropypko+entropypkp+entropypkr+entropypks+entropypkt+entropypku+entropypkv+entropypkw+entropypky+entropypkdot+entropypkcomma+entropypkvacuum
                               +entropypla+entropyplb+entropyplc+entropypld+entropyple+entropyplf+entropyplg+entropyplh+entropypli+entropyplj+entropyplk+entropypll+entropyplm+entropypln+entropyplo+entropyplp+entropyplr+entropypls+entropyplt+entropyplu+entropyplw+entropyplv+entropyply+entropyplz+entropypldot+entropyplcomma+entropyplvacuum
                               +entropypma+entropypmb+entropypmc+entropypmd+entropypme+entropypmf+entropypmh+entropypmi+entropypml+entropypmm+entropypmn+entropypmo+entropypmp+entropypmr+entropypms+entropypmt+entropypmu+entropypmw+entropypmy+entropypmdot+entropypmcomma+entropypmvacuum
                               +entropypna+entropypnb+entropypnc+entropypnd+entropypne+entropypnf+entropypng+entropypnh+entropypni+entropypnj+entropypnk+entropypnl+entropypnm+entropypnn+entropypno+entropypnp+entropypnq+entropypnr+entropypns+entropypnt+entropypnu+entropypnv+entropypnw+entropypnx+entropypny+entropypnz+entropypndot+entropypncomma+entropypnvacuum
                               +entropypoa+entropypob+entropypoc+entropypod+entropypoe+entropypof+entropypog+entropypoh+entropypoi+entropypoj+entropypok+entropypol+entropypom+entropypon+entropypoo+entropypop+entropypoq+entropypor+entropypos+entropypot+entropypou+entropypov+entropypow+entropypox+entropypoy+entropypoz+entropypodot+entropypocomma+entropypovacuum
                               +entropyppa+entropyppb+entropyppd+entropyppe+entropyppf+entropypph+entropyppi+entropyppk+entropyppl+entropyppm+entropyppo+entropyppp+entropyppr+entropypps+entropyppt+entropyppu+entropyppw+entropyppy+entropyppdot+entropyppcomma+entropyppvacuum
                               +entropypqs+entropypqu+entropypqdot+entropypqcomma+entropypqvacuum
                               +entropypra+entropyprb+entropyprc+entropyprd+entropypre+entropyprf+entropyprg+entropyprh+entropypri+entropyprj+entropyprk+entropyprl+entropyprm+entropyprn+entropypro+entropyprp+entropyprq+entropyprr+entropyprs+entropyprt+entropypru+entropyprv+entropyprw+entropypry+entropyprz+entropyprdot+entropyprcomma+entropyprvacuum
                               +entropypsa+entropypsb+entropypsc+entropypsd+entropypse+entropypsf+entropypsg+entropypsh+entropypsi+entropypsj+entropypsk+entropypsl+entropypsm+entropypsn+entropypso+entropypsp+entropypsq+entropypsr+entropypss+entropypst+entropypsu+entropypsv+entropypsw+entropypsy+entropypsdot+entropypscomma+entropypsvacuum
                               +entropypta+entropyptb+entropyptc+entropyptd+entropypte+entropyptf+entropyptg+entropypth+entropypti+entropyptj+entropyptk+entropyptl+entropyptm+entropyptn+entropypto+entropyptp+entropyptr+entropypts+entropyptt+entropyptu+entropyptv+entropyptw+entropypty+entropyptz+entropyptdot+entropyptcomma+entropyptvacuum
                               +entropypua+entropypub+entropypuc+entropypud+entropypue+entropypuf+entropypug+entropypuh+entropypui+entropypuk+entropypul+entropypum+entropypun+entropypuo+entropypup+entropypur+entropypus+entropyput+entropypuu+entropypuv+entropypux+entropypuy+entropypuz+entropypudot+entropypucomma+entropypuvacuum
                               +entropypva+entropypvd+entropypve+entropypvi+entropypvl+entropypvo+entropypvs+entropypvu+entropypvv+entropypvy+entropypvdot+entropypvcomma+entropypvvacuum
                               +entropypwa+entropypwb+entropypwc+entropypwd+entropypwe+entropypwf+entropypwg+entropypwh+entropypwi+entropypwk+entropypwl+entropypwm+entropypwn+entropypwo+entropypwp+entropypwr+entropypws+entropypwt+entropypwu+entropypww+entropypwy+entropypwdot+entropypwcomma+entropypwvacuum
                               +entropypxa+entropypxc+entropypxe+entropypxh+entropypxi+entropypxo+entropypxp+entropypxt+entropypxu+entropypxy+entropypxdot+entropypxcomma+entropypxvacuum
                               +entropypya+entropypyb+entropypyc+entropypyd+entropypye+entropypyf+entropypyg+entropypyh+entropypyi+entropypyj+entropypyl+entropypym+entropypyn+entropypyo+entropypyp+entropypyr+entropypys+entropypyt+entropypyu+entropypyv+entropypyw+entropypyx+entropypydot+entropypycomma+entropypyvacuum
                               +entropypza+entropypze+entropypzh+entropypzi+entropypzl+entropypzm+entropypzo+entropypzy+entropypzz+entropypzcomma+entropypzvacuum
                               +entropypdotk+entropypdotm+entropypdotn+entropypdotcomma+entropypdotvacuum+entropypcommavacuum
                               +entropypvacuuma+entropypvacuumb+entropypvacuumc+entropypvacuumd+entropypvacuume+entropypvacuumf+entropypvacuumg+entropypvacuumh+entropypvacuumi+entropypvacuumj+entropypvacuumk+entropypvacuuml+entropypvacuumm+entropypvacuumn+entropypvacuumo+entropypvacuump+entropypvacuumq+entropypvacuumr+entropypvacuums+entropypvacuumt+entropypvacuumu+entropypvacuumv+entropypvacuumw+entropypvacuumx+entropypvacuumy+entropypvacuumz+entropypvacuumdot+entropypvacuumcomma+entropypvacuumvacuum;                   
            
            System.out.println("\nP(aa)*log(1/P(aa)) = " + entropypaa );
            System.out.println("\nP(ab)*log(1/P(ab)) = " + entropypab );
            System.out.println("\nP(ac)*log(1/P(ac)) = " + entropypac );
            System.out.println("\nP(ad)*log(1/P(ad)) = " + entropypad );
            System.out.println("\nP(ae)*log(1/P(ae)) = " + entropypae );
            System.out.println("\nP(af)*log(1/P(af)) = " + entropypaf );
            System.out.println("\nP(ag)*log(1/P(ag)) = " + entropypag );
            System.out.println("\nP(ah)*log(1/P(ah)) = " + entropypah );
            System.out.println("\nP(ai)*log(1/P(ai)) = " + entropypai );
            System.out.println("\nP(aj)*log(1/P(aj)) = " + entropypaj );
            System.out.println("\nP(ak)*log(1/P(ak)) = " + entropypak );
            System.out.println("\nP(al)*log(1/P(al)) = " + entropypal );
            System.out.println("\nP(am)*log(1/P(am)) = " + entropypam );
            System.out.println("\nP(an)*log(1/P(an)) = " + entropypan );
            System.out.println("\nP(ao)*log(1/P(ao)) = " + entropypao );
            System.out.println("\nP(ap)*log(1/P(ap)) = " + entropypap );
            System.out.println("\nP(aq)*log(1/P(aq)) = " + entropypaq );
            System.out.println("\nP(ar)*log(1/P(ar)) = " + entropypar );
            System.out.println("\nP(as)*log(1/P(as)) = " + entropypas );
            System.out.println("\nP(at)*log(1/P(at)) = " + entropypat );
            System.out.println("\nP(au)*log(1/P(au)) = " + entropypau );
            System.out.println("\nP(av)*log(1/P(av)) = " + entropypav );
            System.out.println("\nP(aw)*log(1/P(aw)) = " + entropypaw );
            System.out.println("\nP(ax)*log(1/P(ax)) = " + entropypax );
            System.out.println("\nP(ay)*log(1/P(ay)) = " + entropypay );
            System.out.println("\nP(az)*log(1/P(az)) = " + entropypaz );
            System.out.println("\nP(a.)*log(1/P(a.)) = " + entropypadot );
            System.out.println("\nP(a,)*log(1/P(a,)) = " + entropypacomma );
            System.out.println("\nP(avacuum)*log(1/P(avacuum)) = " + entropypavacuum );
            System.out.println("\nP(ba)*log(1/P(ba)) = " + entropypba );
            System.out.println("\nP(bb)*log(1/P(bb)) = " + entropypbb );
            System.out.println("\nP(bc)*log(1/P(bc)) = " + entropypbc );
            System.out.println("\nP(be)*log(1/P(be)) = " + entropypbe );
            System.out.println("\nP(bf)*log(1/P(bf)) = " + entropypbf );
            System.out.println("\nP(bi)*log(1/P(bi)) = " + entropypbi );
            System.out.println("\nP(bj)*log(1/P(bj)) = " + entropypbj );
            System.out.println("\nP(bl)*log(1/P(bl)) = " + entropypbl );
            System.out.println("\nP(bm)*log(1/P(bm)) = " + entropypbm );
            System.out.println("\nP(bn)*log(1/P(bn)) = " + entropypbn );
            System.out.println("\nP(bo)*log(1/P(bo)) = " + entropypbo );
            System.out.println("\nP(br)*log(1/P(br)) = " + entropypbr );
            System.out.println("\nP(bs)*log(1/P(bs)) = " + entropypbs );
            System.out.println("\nP(bt)*log(1/P(bt)) = " + entropypbt );
            System.out.println("\nP(bu)*log(1/P(bu)) = " + entropypbu );
            System.out.println("\nP(bv)*log(1/P(bv)) = " + entropypbv );
            System.out.println("\nP(bw)*log(1/P(bw)) = " + entropypbw );
            System.out.println("\nP(by)*log(1/P(by)) = " + entropypby );
            System.out.println("\nP(b.)*log(1/P(b.)) = " + entropypbdot );
            System.out.println("\nP(b,)*log(1/P(b,)) = " + entropypbcomma );
            System.out.println("\nP(bvacuum)*log(1/P(bvacuum)) = " + entropypbvacuum );
            System.out.println("\nP(ca)*log(1/P(ca)) = " + entropypca );
            System.out.println("\nP(cc)*log(1/P(cc)) = " + entropypcc );
            System.out.println("\nP(cd)*log(1/P(cd)) = " + entropypcd );
            System.out.println("\nP(ce)*log(1/P(ce)) = " + entropypce );
            System.out.println("\nP(ch)*log(1/P(ch)) = " + entropypch );
            System.out.println("\nP(ci)*log(1/P(ci)) = " + entropypci );
            System.out.println("\nP(ck)*log(1/P(ck)) = " + entropypck );
            System.out.println("\nP(cl)*log(1/P(cl)) = " + entropypcl );
            System.out.println("\nP(co)*log(1/P(co)) = " + entropypco );
            System.out.println("\nP(cq)*log(1/P(cq)) = " + entropypcq );
            System.out.println("\nP(cr)*log(1/P(cr)) = " + entropypcr );
            System.out.println("\nP(cs)*log(1/P(cs)) = " + entropypcs );
            System.out.println("\nP(ct)*log(1/P(ct)) = " + entropypct );
            System.out.println("\nP(cu)*log(1/P(cu)) = " + entropypcu );
            System.out.println("\nP(cv)*log(1/P(cv)) = " + entropypcv );
            System.out.println("\nP(cy)*log(1/P(cy)) = " + entropypcy );
            System.out.println("\nP(c.)*log(1/P(c.)) = " + entropypcdot );
            System.out.println("\nP(c,)*log(1/P(c,)) = " + entropypccomma );
            System.out.println("\nP(cvacuum)*log(1/P(cvacuum)) = " + entropypcvacuum );
            System.out.println("\nP(da)*log(1/P(da)) = " + entropypda );
            System.out.println("\nP(db)*log(1/P(db)) = " + entropypdb );
            System.out.println("\nP(dc)*log(1/P(dc)) = " + entropypdc );
            System.out.println("\nP(dd)*log(1/P(dd)) = " + entropypdd );
            System.out.println("\nP(de)*log(1/P(de)) = " + entropypde );
            System.out.println("\nP(df)*log(1/P(df)) = " + entropypdf );
            System.out.println("\nP(dg)*log(1/P(dg)) = " + entropypdg );
            System.out.println("\nP(dh)*log(1/P(dh)) = " + entropypdh );
            System.out.println("\nP(di)*log(1/P(di)) = " + entropypdi );
            System.out.println("\nP(dj)*log(1/P(dj)) = " + entropypdj );
            System.out.println("\nP(dk)*log(1/P(dk)) = " + entropypdk );
            System.out.println("\nP(dl)*log(1/P(dl)) = " + entropypdl );
            System.out.println("\nP(dm)*log(1/P(dm)) = " + entropypdm );
            System.out.println("\nP(dn)*log(1/P(dn)) = " + entropypdn );
            System.out.println("\nP(do)*log(1/P(do)) = " + entropypdo );
            System.out.println("\nP(dp)*log(1/P(dp)) = " + entropypdp );
            System.out.println("\nP(dr)*log(1/P(dr)) = " + entropypdr );
            System.out.println("\nP(ds)*log(1/P(ds)) = " + entropypds );
            System.out.println("\nP(dt)*log(1/P(dt)) = " + entropypdt );
            System.out.println("\nP(du)*log(1/P(du)) = " + entropypdu );
            System.out.println("\nP(dv)*log(1/P(dv)) = " + entropypdv );
            System.out.println("\nP(dw)*log(1/P(dw)) = " + entropypdw );
            System.out.println("\nP(dy)*log(1/P(dy)) = " + entropypdy );
            System.out.println("\nP(d.)*log(1/P(d.)) = " + entropypddot );
            System.out.println("\nP(d,)*log(1/P(d,)) = " + entropypdcomma );
            System.out.println("\nP(dvacuum)*log(1/P(dvacuum)) = " + entropypdvacuum ); 
            System.out.println("\nP(ea)*log(1/P(ea)) = " + entropypea );
            System.out.println("\nP(eb)*log(1/P(eb)) = " + entropypeb );
            System.out.println("\nP(ec)*log(1/P(ec)) = " + entropypec );
            System.out.println("\nP(ed)*log(1/P(ed)) = " + entropyped );
            System.out.println("\nP(ee)*log(1/P(ee)) = " + entropypee );
            System.out.println("\nP(ef)*log(1/P(ef)) = " + entropypef );
            System.out.println("\nP(eg)*log(1/P(eg)) = " + entropypeg );
            System.out.println("\nP(eh)*log(1/P(eh)) = " + entropypeh );
            System.out.println("\nP(ei)*log(1/P(ei)) = " + entropypei );
            System.out.println("\nP(ej)*log(1/P(ej)) = " + entropypej );
            System.out.println("\nP(ek)*log(1/P(ek)) = " + entropypek );
            System.out.println("\nP(el)*log(1/P(el)) = " + entropypel );
            System.out.println("\nP(em)*log(1/P(em)) = " + entropypem );
            System.out.println("\nP(en)*log(1/P(en)) = " + entropypen );
            System.out.println("\nP(eo)*log(1/P(eo)) = " + entropypeo );
            System.out.println("\nP(ep)*log(1/P(ep)) = " + entropypep );
            System.out.println("\nP(eq)*log(1/P(eq)) = " + entropypeq );
            System.out.println("\nP(er)*log(1/P(er)) = " + entropyper );
            System.out.println("\nP(es)*log(1/P(es)) = " + entropypes );
            System.out.println("\nP(et)*log(1/P(et)) = " + entropypet );
            System.out.println("\nP(eu)*log(1/P(eu)) = " + entropypeu );
            System.out.println("\nP(ev)*log(1/P(ev)) = " + entropypev );
            System.out.println("\nP(ew)*log(1/P(ew)) = " + entropypew );
            System.out.println("\nP(ex)*log(1/P(ex)) = " + entropypex );
            System.out.println("\nP(ey)*log(1/P(ey)) = " + entropypey );
            System.out.println("\nP(ez)*log(1/P(ez)) = " + entropypez );
            System.out.println("\nP(e.)*log(1/P(e.)) = " + entropypedot );
            System.out.println("\nP(e,)*log(1/P(e,)) = " + entropypecomma );
            System.out.println("\nP(evacuum)*log(1/P(evacuum)) = " + entropypevacuum );
            System.out.println("\nP(fa)*log(1/P(fa)) = " + entropypfa );
            System.out.println("\nP(fb)*log(1/P(fb)) = " + entropypfb );
            System.out.println("\nP(fc)*log(1/P(fc)) = " + entropypfc );
            System.out.println("\nP(fe)*log(1/P(fe)) = " + entropypfe );
            System.out.println("\nP(ff)*log(1/P(ff)) = " + entropypff );
            System.out.println("\nP(fh)*log(1/P(fh)) = " + entropypfh );
            System.out.println("\nP(fi)*log(1/P(fi)) = " + entropypfi );
            System.out.println("\nP(fj)*log(1/P(fj)) = " + entropypfj );
            System.out.println("\nP(fl)*log(1/P(fl)) = " + entropypfl );
            System.out.println("\nP(fn)*log(1/P(fn)) = " + entropypfn );
            System.out.println("\nP(fo)*log(1/P(fo)) = " + entropypfo );
            System.out.println("\nP(fr)*log(1/P(fr)) = " + entropypfr );
            System.out.println("\nP(fs)*log(1/P(fs)) = " + entropypfs );
            System.out.println("\nP(ft)*log(1/P(ft)) = " + entropypft );
            System.out.println("\nP(fu)*log(1/P(fu)) = " + entropypfu );
            System.out.println("\nP(fw)*log(1/P(fw)) = " + entropypfw );
            System.out.println("\nP(fy)*log(1/P(fy)) = " + entropypfy );
            System.out.println("\nP(f.)*log(1/P(f.)) = " + entropypfdot );
            System.out.println("\nP(f,)*log(1/P(f,)) = " + entropypfcomma );
            System.out.println("\nP(fvacuum)*log(1/P(fvacuum)) = " + entropypfvacuum );
            System.out.println("\nP(ga)*log(1/P(ga)) = " + entropypga );
            System.out.println("\nP(gb)*log(1/P(gb)) = " + entropypgb );
            System.out.println("\nP(gd)*log(1/P(gd)) = " + entropypgd );
            System.out.println("\nP(ge)*log(1/P(ge)) = " + entropypge );
            System.out.println("\nP(gf)*log(1/P(gf)) = " + entropypgf );
            System.out.println("\nP(gg)*log(1/P(gg)) = " + entropypgg );
            System.out.println("\nP(gh)*log(1/P(gh)) = " + entropypgh );
            System.out.println("\nP(gi)*log(1/P(gi)) = " + entropypgi );
            System.out.println("\nP(gj)*log(1/P(gj)) = " + entropypgj );
            System.out.println("\nP(gl)*log(1/P(gl)) = " + entropypgl );
            System.out.println("\nP(gm)*log(1/P(gm)) = " + entropypgm );
            System.out.println("\nP(gn)*log(1/P(gn)) = " + entropypgn );
            System.out.println("\nP(go)*log(1/P(go)) = " + entropypgo );
            System.out.println("\nP(gp)*log(1/P(gp)) = " + entropypgp );
            System.out.println("\nP(gr)*log(1/P(gr)) = " + entropypgr );
            System.out.println("\nP(gs)*log(1/P(gs)) = " + entropypgs );
            System.out.println("\nP(gt)*log(1/P(gt)) = " + entropypgt );
            System.out.println("\nP(gu)*log(1/P(gu)) = " + entropypgu );
            System.out.println("\nP(gv)*log(1/P(gv)) = " + entropypgv );
            System.out.println("\nP(gy)*log(1/P(gy)) = " + entropypgy );
            System.out.println("\nP(gz)*log(1/P(gz)) = " + entropypgz );
            System.out.println("\nP(g.)*log(1/P(g.)) = " + entropypgdot );
            System.out.println("\nP(g,)*log(1/P(g,)) = " + entropypgcomma );
            System.out.println("\nP(gvacuum)*log(1/P(gvacuum)) = " + entropypgvacuum );
            System.out.println("\nP(ha)*log(1/P(ha)) = " + entropypha );
            System.out.println("\nP(hb)*log(1/P(hb)) = " + entropyphb );
            System.out.println("\nP(hc)*log(1/P(hc)) = " + entropyphc );
            System.out.println("\nP(hd)*log(1/P(hd)) = " + entropyphd );
            System.out.println("\nP(he)*log(1/P(he)) = " + entropyphe );
            System.out.println("\nP(hf)*log(1/P(hf)) = " + entropyphf );
            System.out.println("\nP(hh)*log(1/P(hh)) = " + entropyphh );
            System.out.println("\nP(hi)*log(1/P(hi)) = " + entropyphi );
            System.out.println("\nP(hl)*log(1/P(hl)) = " + entropyphl );
            System.out.println("\nP(hm)*log(1/P(hm)) = " + entropyphm );
            System.out.println("\nP(hn)*log(1/P(hn)) = " + entropyphn );
            System.out.println("\nP(ho)*log(1/P(ho)) = " + entropypho );
            System.out.println("\nP(hp)*log(1/P(hp)) = " + entropyphp );
            System.out.println("\nP(hq)*log(1/P(hq)) = " + entropyphq );
            System.out.println("\nP(hr)*log(1/P(hr)) = " + entropyphr );
            System.out.println("\nP(ht)*log(1/P(ht)) = " + entropypht );
            System.out.println("\nP(hu)*log(1/P(hu)) = " + entropyphu );
            System.out.println("\nP(hv)*log(1/P(hv)) = " + entropyphv );
            System.out.println("\nP(hw)*log(1/P(hw)) = " + entropyphw );
            System.out.println("\nP(hy)*log(1/P(hy)) = " + entropyphy );
            System.out.println("\nP(h.)*log(1/P(h.)) = " + entropyphdot );
            System.out.println("\nP(h,)*log(1/P(h,)) = " + entropyphcomma );
            System.out.println("\nP(hvacuum)*log(1/P(hvacuum)) = " + entropyphvacuum );
            System.out.println("\nP(ia)*log(1/P(ia)) = " + entropypia );
            System.out.println("\nP(ib)*log(1/P(ib)) = " + entropypib );
            System.out.println("\nP(ic)*log(1/P(ic)) = " + entropypic );
            System.out.println("\nP(id)*log(1/P(id)) = " + entropypid );
            System.out.println("\nP(ie)*log(1/P(ie)) = " + entropypie );
            System.out.println("\nP(if)*log(1/P(if)) = " + entropypif );
            System.out.println("\nP(ig)*log(1/P(ig)) = " + entropypig );
            System.out.println("\nP(ih)*log(1/P(ih)) = " + entropypih );
            System.out.println("\nP(ii)*log(1/P(ii)) = " + entropypii );
            System.out.println("\nP(ij)*log(1/P(ij)) = " + entropypij );
            System.out.println("\nP(ik)*log(1/P(ik)) = " + entropypik );
            System.out.println("\nP(il)*log(1/P(il)) = " + entropypil );
            System.out.println("\nP(im)*log(1/P(im)) = " + entropypim );
            System.out.println("\nP(in)*log(1/P(in)) = " + entropypin );
            System.out.println("\nP(io)*log(1/P(io)) = " + entropypio );
            System.out.println("\nP(ip)*log(1/P(ip)) = " + entropypip );
            System.out.println("\nP(iq)*log(1/P(iq)) = " + entropypiq );
            System.out.println("\nP(ir)*log(1/P(ir)) = " + entropypir );
            System.out.println("\nP(is)*log(1/P(is)) = " + entropypis );
            System.out.println("\nP(it)*log(1/P(it)) = " + entropypit );
            System.out.println("\nP(iu)*log(1/P(iu)) = " + entropypiu );
            System.out.println("\nP(iv)*log(1/P(iv)) = " + entropypiv );
            System.out.println("\nP(ix)*log(1/P(ix)) = " + entropypix );
            System.out.println("\nP(iz)*log(1/P(iz)) = " + entropypiz );
            System.out.println("\nP(i.)*log(1/P(i.)) = " + entropypidot );
            System.out.println("\nP(i,)*log(1/P(i,)) = " + entropypicomma );
            System.out.println("\nP(ivacuum)*log(1/P(ivacuum)) = " + entropypivacuum ); 
            System.out.println("\nP(ja)*log(1/P(ja)) = " + entropypja );
            System.out.println("\nP(je)*log(1/P(je)) = " + entropypje );
            System.out.println("\nP(ji)*log(1/P(ji)) = " + entropypji );
            System.out.println("\nP(jo)*log(1/P(jo)) = " + entropypjo );
            System.out.println("\nP(ju)*log(1/P(ju)) = " + entropypju );
            System.out.println("\nP(j.)*log(1/P(j.)) = " + entropypjdot );
            System.out.println("\nP(ka)*log(1/P(ka)) = " + entropypka );
            System.out.println("\nP(kb)*log(1/P(kb)) = " + entropypkb );
            System.out.println("\nP(kc)*log(1/P(kc)) = " + entropypkc );
            System.out.println("\nP(kd)*log(1/P(kd)) = " + entropypkd );
            System.out.println("\nP(ke)*log(1/P(ke)) = " + entropypke );
            System.out.println("\nP(kf)*log(1/P(kf)) = " + entropypkf );
            System.out.println("\nP(kg)*log(1/P(kg)) = " + entropypkg );
            System.out.println("\nP(kh)*log(1/P(kh)) = " + entropypkh );
            System.out.println("\nP(ki)*log(1/P(ki)) = " + entropypki );
            System.out.println("\nP(kj)*log(1/P(kj)) = " + entropypkj );
            System.out.println("\nP(kk)*log(1/P(kk)) = " + entropypkk );
            System.out.println("\nP(kl)*log(1/P(kl)) = " + entropypkl );
            System.out.println("\nP(km)*log(1/P(km)) = " + entropypkm );
            System.out.println("\nP(kn)*log(1/P(kn)) = " + entropypkn );
            System.out.println("\nP(ko)*log(1/P(ko)) = " + entropypko );
            System.out.println("\nP(kp)*log(1/P(kp)) = " + entropypkp );
            System.out.println("\nP(kr)*log(1/P(kr)) = " + entropypkr );
            System.out.println("\nP(ks)*log(1/P(ks)) = " + entropypks );
            System.out.println("\nP(kt)*log(1/P(kt)) = " + entropypkt );
            System.out.println("\nP(ku)*log(1/P(ku)) = " + entropypku );
            System.out.println("\nP(kv)*log(1/P(kv)) = " + entropypkv );
            System.out.println("\nP(kw)*log(1/P(kw)) = " + entropypkw );
            System.out.println("\nP(ky)*log(1/P(ky)) = " + entropypky );
            System.out.println("\nP(k.)*log(1/P(k.)) = " + entropypkdot );
            System.out.println("\nP(k,)*log(1/P(k,)) = " + entropypkcomma );
            System.out.println("\nP(avacuum)*log(1/P(kvacuum)) = " + entropypkvacuum );
            System.out.println("\nP(la)*log(1/P(la)) = " + entropypla );
            System.out.println("\nP(lb)*log(1/P(lb)) = " + entropyplb );
            System.out.println("\nP(lc)*log(1/P(lc)) = " + entropyplc );
            System.out.println("\nP(ld)*log(1/P(ld)) = " + entropypld );
            System.out.println("\nP(le)*log(1/P(le)) = " + entropyple );
            System.out.println("\nP(lf)*log(1/P(lf)) = " + entropyplf );
            System.out.println("\nP(lg)*log(1/P(lg)) = " + entropyplg );
            System.out.println("\nP(lh)*log(1/P(lh)) = " + entropyplh );
            System.out.println("\nP(li)*log(1/P(li)) = " + entropypli );
            System.out.println("\nP(lj)*log(1/P(lj)) = " + entropyplj );
            System.out.println("\nP(lk)*log(1/P(lk)) = " + entropyplk );
            System.out.println("\nP(ll)*log(1/P(ll)) = " + entropypll );
            System.out.println("\nP(lm)*log(1/P(lm)) = " + entropyplm );
            System.out.println("\nP(ln)*log(1/P(ln)) = " + entropypln );
            System.out.println("\nP(lo)*log(1/P(lo)) = " + entropyplo );
            System.out.println("\nP(lp)*log(1/P(lp)) = " + entropyplp );
            System.out.println("\nP(lr)*log(1/P(lr)) = " + entropyplr );
            System.out.println("\nP(ls)*log(1/P(ls)) = " + entropypls );
            System.out.println("\nP(lt)*log(1/P(lt)) = " + entropyplt );
            System.out.println("\nP(lu)*log(1/P(lu)) = " + entropyplu );
            System.out.println("\nP(lv)*log(1/P(lv)) = " + entropyplv );
            System.out.println("\nP(lw)*log(1/P(lw)) = " + entropyplw );
            System.out.println("\nP(ly)*log(1/P(ly)) = " + entropyply );
            System.out.println("\nP(lz)*log(1/P(lz)) = " + entropyplz );
            System.out.println("\nP(l.)*log(1/P(l.)) = " + entropypldot );
            System.out.println("\nP(l,)*log(1/P(l,)) = " + entropyplcomma );
            System.out.println("\nP(lvacuum)*log(1/P(lvacuum)) = " + entropyplvacuum );
            System.out.println("\nP(ma)*log(1/P(ma)) = " + entropypma );
            System.out.println("\nP(mb)*log(1/P(mb)) = " + entropypmb );
            System.out.println("\nP(mc)*log(1/P(mc)) = " + entropypmc );
            System.out.println("\nP(md)*log(1/P(md)) = " + entropypmd );
            System.out.println("\nP(me)*log(1/P(me)) = " + entropypme );
            System.out.println("\nP(mf)*log(1/P(mf)) = " + entropypmf );
            System.out.println("\nP(mh)*log(1/P(mh)) = " + entropypmh );
            System.out.println("\nP(mi)*log(1/P(mi)) = " + entropypmi );
            System.out.println("\nP(ml)*log(1/P(ml)) = " + entropypml );
            System.out.println("\nP(mm)*log(1/P(mm)) = " + entropypmm );
            System.out.println("\nP(mn)*log(1/P(mn)) = " + entropypmn );
            System.out.println("\nP(mo)*log(1/P(mo)) = " + entropypmo );
            System.out.println("\nP(mp)*log(1/P(mp)) = " + entropypmp );
            System.out.println("\nP(mr)*log(1/P(mr)) = " + entropypmr );
            System.out.println("\nP(ms)*log(1/P(ms)) = " + entropypms );
            System.out.println("\nP(mt)*log(1/P(mt)) = " + entropypmt );
            System.out.println("\nP(mu)*log(1/P(mu)) = " + entropypmu );
            System.out.println("\nP(mw)*log(1/P(mw)) = " + entropypmw );
            System.out.println("\nP(my)*log(1/P(my)) = " + entropypmy );
            System.out.println("\nP(m.)*log(1/P(m.)) = " + entropypmdot );
            System.out.println("\nP(m,)*log(1/P(m,)) = " + entropypmcomma );
            System.out.println("\nP(mvacuum)*log(1/P(mvacuum)) = " + entropypmvacuum );
            System.out.println("\nP(na)*log(1/P(na)) = " + entropypna );
            System.out.println("\nP(nb)*log(1/P(nb)) = " + entropypnb );
            System.out.println("\nP(nc)*log(1/P(nc)) = " + entropypnc );
            System.out.println("\nP(nd)*log(1/P(nd)) = " + entropypnd );
            System.out.println("\nP(ne)*log(1/P(ne)) = " + entropypne );
            System.out.println("\nP(nf)*log(1/P(nf)) = " + entropypnf );
            System.out.println("\nP(ng)*log(1/P(ng)) = " + entropypng );
            System.out.println("\nP(nh)*log(1/P(nh)) = " + entropypnh );
            System.out.println("\nP(ni)*log(1/P(ni)) = " + entropypni );
            System.out.println("\nP(nj)*log(1/P(nj)) = " + entropypnj );
            System.out.println("\nP(nk)*log(1/P(nk)) = " + entropypnk );
            System.out.println("\nP(nl)*log(1/P(nl)) = " + entropypnl );
            System.out.println("\nP(nm)*log(1/P(nm)) = " + entropypnm );
            System.out.println("\nP(nn)*log(1/P(nn)) = " + entropypnn );
            System.out.println("\nP(no)*log(1/P(no)) = " + entropypno );
            System.out.println("\nP(np)*log(1/P(np)) = " + entropypnp );
            System.out.println("\nP(nq)*log(1/P(nq)) = " + entropypnq );
            System.out.println("\nP(nr)*log(1/P(nr)) = " + entropypnr );
            System.out.println("\nP(ns)*log(1/P(ns)) = " + entropypns );
            System.out.println("\nP(nt)*log(1/P(nt)) = " + entropypnt );
            System.out.println("\nP(nu)*log(1/P(nu)) = " + entropypnu );
            System.out.println("\nP(nv)*log(1/P(nv)) = " + entropypnv );
            System.out.println("\nP(nw)*log(1/P(nw)) = " + entropypnw );
            System.out.println("\nP(nx)*log(1/P(nx)) = " + entropypnx );
            System.out.println("\nP(ny)*log(1/P(ny)) = " + entropypny );
            System.out.println("\nP(nz)*log(1/P(nz)) = " + entropypnz );
            System.out.println("\nP(n.)*log(1/P(n.)) = " + entropypndot );
            System.out.println("\nP(n,)*log(1/P(n,)) = " + entropypncomma );
            System.out.println("\nP(nvacuum)*log(1/P(nvacuum)) = " + entropypnvacuum );
            System.out.println("\nP(oa)*log(1/P(oa)) = " + entropypoa );
            System.out.println("\nP(ob)*log(1/P(ob)) = " + entropypob );
            System.out.println("\nP(oc)*log(1/P(oc)) = " + entropypoc );
            System.out.println("\nP(od)*log(1/P(od)) = " + entropypod );
            System.out.println("\nP(oe)*log(1/P(oe)) = " + entropypoe );
            System.out.println("\nP(of)*log(1/P(of)) = " + entropypof );
            System.out.println("\nP(og)*log(1/P(og)) = " + entropypog );
            System.out.println("\nP(oh)*log(1/P(oh)) = " + entropypoh );
            System.out.println("\nP(oi)*log(1/P(oi)) = " + entropypoi );
            System.out.println("\nP(oj)*log(1/P(oj)) = " + entropypoj );
            System.out.println("\nP(ok)*log(1/P(ok)) = " + entropypok );
            System.out.println("\nP(ol)*log(1/P(ol)) = " + entropypol );
            System.out.println("\nP(om)*log(1/P(om)) = " + entropypom );
            System.out.println("\nP(on)*log(1/P(on)) = " + entropypon );
            System.out.println("\nP(oo)*log(1/P(oo)) = " + entropypoo );
            System.out.println("\nP(op)*log(1/P(op)) = " + entropypop );
            System.out.println("\nP(oq)*log(1/P(oq)) = " + entropypoq );
            System.out.println("\nP(or)*log(1/P(or)) = " + entropypor );
            System.out.println("\nP(os)*log(1/P(os)) = " + entropypos );
            System.out.println("\nP(ot)*log(1/P(ot)) = " + entropypot );
            System.out.println("\nP(ou)*log(1/P(ou)) = " + entropypou );
            System.out.println("\nP(ov)*log(1/P(ov)) = " + entropypov );
            System.out.println("\nP(ow)*log(1/P(ow)) = " + entropypow );
            System.out.println("\nP(ox)*log(1/P(ox)) = " + entropypox );
            System.out.println("\nP(oy)*log(1/P(oy)) = " + entropypoy );
            System.out.println("\nP(oz)*log(1/P(oz)) = " + entropypoz );
            System.out.println("\nP(o.)*log(1/P(o.)) = " + entropypodot );
            System.out.println("\nP(o,)*log(1/P(o,)) = " + entropypocomma );
            System.out.println("\nP(ovacuum)*log(1/P(ovacuum)) = " + entropypovacuum );
            System.out.println("\nP(pa)*log(1/P(pa)) = " + entropyppa );
            System.out.println("\nP(pb)*log(1/P(pb)) = " + entropyppb );
            System.out.println("\nP(pd)*log(1/P(pd)) = " + entropyppd );
            System.out.println("\nP(pe)*log(1/P(pe)) = " + entropyppe );
            System.out.println("\nP(pf)*log(1/P(pf)) = " + entropyppf );
            System.out.println("\nP(ph)*log(1/P(ph)) = " + entropypph );
            System.out.println("\nP(pi)*log(1/P(pi)) = " + entropyppi );
            System.out.println("\nP(pk)*log(1/P(pk)) = " + entropyppk );
            System.out.println("\nP(pl)*log(1/P(pl)) = " + entropyppl );
            System.out.println("\nP(pm)*log(1/P(pm)) = " + entropyppm );
            System.out.println("\nP(po)*log(1/P(po)) = " + entropyppo );
            System.out.println("\nP(pp)*log(1/P(pp)) = " + entropyppp );
            System.out.println("\nP(pr)*log(1/P(pr)) = " + entropyppr );
            System.out.println("\nP(ps)*log(1/P(ps)) = " + entropypps );
            System.out.println("\nP(pt)*log(1/P(pt)) = " + entropyppt );
            System.out.println("\nP(pu)*log(1/P(pu)) = " + entropyppu );
            System.out.println("\nP(pw)*log(1/P(pw)) = " + entropyppw );
            System.out.println("\nP(py)*log(1/P(py)) = " + entropyppy );
            System.out.println("\nP(p.)*log(1/P(p.)) = " + entropyppdot );
            System.out.println("\nP(p,)*log(1/P(p,)) = " + entropyppcomma );
            System.out.println("\nP(pvacuum)*log(1/P(pvacuum)) = " + entropyppvacuum );
            System.out.println("\nP(qs)*log(1/P(qs)) = " + entropypqs );
            System.out.println("\nP(qu)*log(1/P(qu)) = " + entropypqu );
            System.out.println("\nP(q.)*log(1/P(q.)) = " + entropypqdot );
            System.out.println("\nP(q,)*log(1/P(q,)) = " + entropypqcomma );
            System.out.println("\nP(qvacuum)*log(1/P(qvacuum)) = " + entropypqvacuum );
            System.out.println("\nP(ra)*log(1/P(ra)) = " + entropypra );
            System.out.println("\nP(rb)*log(1/P(rb)) = " + entropyprb );
            System.out.println("\nP(rc)*log(1/P(rc)) = " + entropyprc );
            System.out.println("\nP(rd)*log(1/P(rd)) = " + entropyprd );
            System.out.println("\nP(re)*log(1/P(re)) = " + entropypre );
            System.out.println("\nP(rf)*log(1/P(rf)) = " + entropyprf );
            System.out.println("\nP(rg)*log(1/P(rg)) = " + entropyprg );
            System.out.println("\nP(rh)*log(1/P(rh)) = " + entropyprh );
            System.out.println("\nP(ri)*log(1/P(ri)) = " + entropypri );
            System.out.println("\nP(rj)*log(1/P(rj)) = " + entropyprj );
            System.out.println("\nP(rk)*log(1/P(rk)) = " + entropyprk );
            System.out.println("\nP(rl)*log(1/P(rl)) = " + entropyprl );
            System.out.println("\nP(rm)*log(1/P(rm)) = " + entropyprm );
            System.out.println("\nP(rn)*log(1/P(rn)) = " + entropyprn );
            System.out.println("\nP(ro)*log(1/P(ro)) = " + entropypro );
            System.out.println("\nP(rp)*log(1/P(rp)) = " + entropyprp );
            System.out.println("\nP(rq)*log(1/P(rq)) = " + entropyprq );
            System.out.println("\nP(rr)*log(1/P(rr)) = " + entropyprr );
            System.out.println("\nP(rs)*log(1/P(rs)) = " + entropyprs );
            System.out.println("\nP(rt)*log(1/P(rt)) = " + entropyprt );
            System.out.println("\nP(ru)*log(1/P(ru)) = " + entropypru );
            System.out.println("\nP(rv)*log(1/P(rv)) = " + entropyprv );
            System.out.println("\nP(rw)*log(1/P(rw)) = " + entropyprw );
            System.out.println("\nP(ry)*log(1/P(ry)) = " + entropypry );
            System.out.println("\nP(rz)*log(1/P(rz)) = " + entropyprz );
            System.out.println("\nP(r.)*log(1/P(r.)) = " + entropyprdot );
            System.out.println("\nP(r,)*log(1/P(r,)) = " + entropyprcomma );
            System.out.println("\nP(rvacuum)*log(1/P(rvacuum)) = " + entropyprvacuum );
            System.out.println("\nP(sa)*log(1/P(sa)) = " + entropypsa );
            System.out.println("\nP(sb)*log(1/P(sb)) = " + entropypsb );
            System.out.println("\nP(sc)*log(1/P(sc)) = " + entropypsc );
            System.out.println("\nP(sd)*log(1/P(sd)) = " + entropypsd );
            System.out.println("\nP(se)*log(1/P(se)) = " + entropypse );
            System.out.println("\nP(sf)*log(1/P(sf)) = " + entropypsf );
            System.out.println("\nP(sg)*log(1/P(sg)) = " + entropypsg );
            System.out.println("\nP(sh)*log(1/P(sh)) = " + entropypsh );
            System.out.println("\nP(si)*log(1/P(si)) = " + entropypsi );
            System.out.println("\nP(sj)*log(1/P(sj)) = " + entropypsj );
            System.out.println("\nP(sk)*log(1/P(sk)) = " + entropypsk );
            System.out.println("\nP(sl)*log(1/P(sl)) = " + entropypsl );
            System.out.println("\nP(sm)*log(1/P(sm)) = " + entropypsm );
            System.out.println("\nP(sn)*log(1/P(sn)) = " + entropypsn );
            System.out.println("\nP(so)*log(1/P(so)) = " + entropypso );
            System.out.println("\nP(sp)*log(1/P(sp)) = " + entropypsp );
            System.out.println("\nP(sq)*log(1/P(sq)) = " + entropypsq );
            System.out.println("\nP(sr)*log(1/P(sr)) = " + entropypsr );
            System.out.println("\nP(ss)*log(1/P(ss)) = " + entropypss );
            System.out.println("\nP(st)*log(1/P(st)) = " + entropypst );
            System.out.println("\nP(su)*log(1/P(su)) = " + entropypsu );
            System.out.println("\nP(sv)*log(1/P(sv)) = " + entropypsv );
            System.out.println("\nP(sw)*log(1/P(sw)) = " + entropypsw );
            System.out.println("\nP(sy)*log(1/P(sy)) = " + entropypsy );
            System.out.println("\nP(s.)*log(1/P(s.)) = " + entropypsdot );
            System.out.println("\nP(s,)*log(1/P(s,)) = " + entropypscomma );
            System.out.println("\nP(svacuum)*log(1/P(svacuum)) = " + entropypsvacuum );
            System.out.println("\nP(ta)*log(1/P(ta)) = " + entropypta );
            System.out.println("\nP(tb)*log(1/P(tb)) = " + entropyptb );
            System.out.println("\nP(tc)*log(1/P(tc)) = " + entropyptc );
            System.out.println("\nP(td)*log(1/P(td)) = " + entropyptd );
            System.out.println("\nP(te)*log(1/P(te)) = " + entropypte );
            System.out.println("\nP(tf)*log(1/P(tf)) = " + entropyptf );
            System.out.println("\nP(tg)*log(1/P(tg)) = " + entropyptg );
            System.out.println("\nP(th)*log(1/P(th)) = " + entropypth );
            System.out.println("\nP(ti)*log(1/P(ti)) = " + entropypti );
            System.out.println("\nP(tj)*log(1/P(tj)) = " + entropyptj );
            System.out.println("\nP(tk)*log(1/P(tk)) = " + entropyptk );
            System.out.println("\nP(tl)*log(1/P(tl)) = " + entropyptl );
            System.out.println("\nP(tm)*log(1/P(tm)) = " + entropyptm );
            System.out.println("\nP(tn)*log(1/P(tn)) = " + entropyptn );
            System.out.println("\nP(to)*log(1/P(to)) = " + entropypto );
            System.out.println("\nP(tp)*log(1/P(tp)) = " + entropyptp );
            System.out.println("\nP(tr)*log(1/P(tr)) = " + entropyptr );
            System.out.println("\nP(ts)*log(1/P(ts)) = " + entropypts );
            System.out.println("\nP(tt)*log(1/P(tt)) = " + entropyptt );
            System.out.println("\nP(tu)*log(1/P(tu)) = " + entropyptu );
            System.out.println("\nP(tv)*log(1/P(tv)) = " + entropyptv );
            System.out.println("\nP(tw)*log(1/P(tw)) = " + entropyptw );
            System.out.println("\nP(ty)*log(1/P(ty)) = " + entropypty );
            System.out.println("\nP(tz)*log(1/P(tz)) = " + entropyptz );
            System.out.println("\nP(t.)*log(1/P(t.)) = " + entropyptdot );
            System.out.println("\nP(t,)*log(1/P(t,)) = " + entropyptcomma );
            System.out.println("\nP(tvacuum)*log(1/P(tvacuum)) = " + entropyptvacuum );
            System.out.println("\nP(ua)*log(1/P(ua)) = " + entropypua );
            System.out.println("\nP(ub)*log(1/P(ub)) = " + entropypub );
            System.out.println("\nP(uc)*log(1/P(uc)) = " + entropypuc );
            System.out.println("\nP(ud)*log(1/P(ud)) = " + entropypud );
            System.out.println("\nP(ue)*log(1/P(ue)) = " + entropypue );
            System.out.println("\nP(uf)*log(1/P(uf)) = " + entropypuf );
            System.out.println("\nP(ug)*log(1/P(ug)) = " + entropypug );
            System.out.println("\nP(uh)*log(1/P(uh)) = " + entropypuh );
            System.out.println("\nP(ui)*log(1/P(ui)) = " + entropypui );
            System.out.println("\nP(uk)*log(1/P(uk)) = " + entropypuk );
            System.out.println("\nP(ul)*log(1/P(ul)) = " + entropypul );
            System.out.println("\nP(um)*log(1/P(um)) = " + entropypum );
            System.out.println("\nP(un)*log(1/P(un)) = " + entropypun );
            System.out.println("\nP(uo)*log(1/P(uo)) = " + entropypuo );
            System.out.println("\nP(up)*log(1/P(up)) = " + entropypup );
            System.out.println("\nP(ur)*log(1/P(ur)) = " + entropypur );
            System.out.println("\nP(us)*log(1/P(us)) = " + entropypus );
            System.out.println("\nP(ut)*log(1/P(ut)) = " + entropyput );
            System.out.println("\nP(uu)*log(1/P(uu)) = " + entropypuu );
            System.out.println("\nP(uv)*log(1/P(uv)) = " + entropypuv );
            System.out.println("\nP(ux)*log(1/P(ux)) = " + entropypux );
            System.out.println("\nP(uy)*log(1/P(uy)) = " + entropypuy );
            System.out.println("\nP(uz)*log(1/P(uz)) = " + entropypuz );
            System.out.println("\nP(u.)*log(1/P(u.)) = " + entropypudot );
            System.out.println("\nP(u,)*log(1/P(u,)) = " + entropypucomma );
            System.out.println("\nP(uvacuum)*log(1/P(uvacuum)) = " + entropypuvacuum );
            System.out.println("\nP(va)*log(1/P(va)) = " + entropypva );
            System.out.println("\nP(vd)*log(1/P(vd)) = " + entropypvd );
            System.out.println("\nP(ve)*log(1/P(ve)) = " + entropypve );
            System.out.println("\nP(vi)*log(1/P(vi)) = " + entropypvi );
            System.out.println("\nP(vl)*log(1/P(vl)) = " + entropypvl );
            System.out.println("\nP(vo)*log(1/P(vo)) = " + entropypvo );
            System.out.println("\nP(vs)*log(1/P(vs)) = " + entropypvs );
            System.out.println("\nP(vu)*log(1/P(vu)) = " + entropypvu );
            System.out.println("\nP(vv)*log(1/P(vv)) = " + entropypvv );
            System.out.println("\nP(vy)*log(1/P(vy)) = " + entropypvy );
            System.out.println("\nP(v.)*log(1/P(v.)) = " + entropypvdot );
            System.out.println("\nP(v,)*log(1/P(v,)) = " + entropypvcomma );
            System.out.println("\nP(vvacuum)*log(1/P(vvacuum)) = " + entropypvvacuum );
            System.out.println("\nP(wa)*log(1/P(wa)) = " + entropypwa );
            System.out.println("\nP(wb)*log(1/P(wb)) = " + entropypwb );
            System.out.println("\nP(wc)*log(1/P(wc)) = " + entropypwc );
            System.out.println("\nP(wd)*log(1/P(wd)) = " + entropypwd );
            System.out.println("\nP(we)*log(1/P(we)) = " + entropypwe );
            System.out.println("\nP(wf)*log(1/P(wf)) = " + entropypwf );
            System.out.println("\nP(wg)*log(1/P(wg)) = " + entropypwg );
            System.out.println("\nP(wh)*log(1/P(wh)) = " + entropypwh );
            System.out.println("\nP(wi)*log(1/P(wi)) = " + entropypwi );
            System.out.println("\nP(wk)*log(1/P(wk)) = " + entropypwk );
            System.out.println("\nP(wl)*log(1/P(wl)) = " + entropypwl );
            System.out.println("\nP(wm)*log(1/P(wm)) = " + entropypwm );
            System.out.println("\nP(wn)*log(1/P(wn)) = " + entropypwn );
            System.out.println("\nP(wo)*log(1/P(wo)) = " + entropypwo );
            System.out.println("\nP(wp)*log(1/P(wp)) = " + entropypwp );
            System.out.println("\nP(wr)*log(1/P(wr)) = " + entropypwr );
            System.out.println("\nP(ws)*log(1/P(ws)) = " + entropypws );
            System.out.println("\nP(wt)*log(1/P(wt)) = " + entropypwt );
            System.out.println("\nP(wu)*log(1/P(wu)) = " + entropypwu );
            System.out.println("\nP(ww)*log(1/P(ww)) = " + entropypww );
            System.out.println("\nP(wy)*log(1/P(wy)) = " + entropypwy );
            System.out.println("\nP(w.)*log(1/P(w.)) = " + entropypwdot );
            System.out.println("\nP(w,)*log(1/P(w,)) = " + entropypwcomma );
            System.out.println("\nP(wvacuum)*log(1/P(wvacuum)) = " + entropypwvacuum );
            System.out.println("\nP(xa)*log(1/P(xa)) = " + entropypxa );
            System.out.println("\nP(xc)*log(1/P(xc)) = " + entropypxc );
            System.out.println("\nP(xe)*log(1/P(xe)) = " + entropypxe );
            System.out.println("\nP(xh)*log(1/P(xh)) = " + entropypxh );
            System.out.println("\nP(xi)*log(1/P(xi)) = " + entropypxi );
            System.out.println("\nP(xo)*log(1/P(xo)) = " + entropypxo );
            System.out.println("\nP(xp)*log(1/P(xp)) = " + entropypxp );
            System.out.println("\nP(xt)*log(1/P(xt)) = " + entropypxt );
            System.out.println("\nP(xu)*log(1/P(xu)) = " + entropypxu );
            System.out.println("\nP(xy)*log(1/P(xy)) = " + entropypxy );
            System.out.println("\nP(x.)*log(1/P(x.)) = " + entropypxdot );
            System.out.println("\nP(x,)*log(1/P(x,)) = " + entropypxcomma );
            System.out.println("\nP(xvacuum)*log(1/P(xvacuum)) = " + entropypxvacuum );
            System.out.println("\nP(ya)*log(1/P(ya)) = " + entropypya );
            System.out.println("\nP(yb)*log(1/P(yb)) = " + entropypyb );
            System.out.println("\nP(yc)*log(1/P(yc)) = " + entropypyc );
            System.out.println("\nP(yd)*log(1/P(yd)) = " + entropypyd );
            System.out.println("\nP(ye)*log(1/P(ye)) = " + entropypye );
            System.out.println("\nP(yf)*log(1/P(yf)) = " + entropypyf );
            System.out.println("\nP(yg)*log(1/P(yg)) = " + entropypyg );
            System.out.println("\nP(yh)*log(1/P(yh)) = " + entropypyh );
            System.out.println("\nP(yi)*log(1/P(yi)) = " + entropypyi );
            System.out.println("\nP(yj)*log(1/P(yj)) = " + entropypyj );
            System.out.println("\nP(yl)*log(1/P(yl)) = " + entropypyl );
            System.out.println("\nP(ym)*log(1/P(ym)) = " + entropypym );
            System.out.println("\nP(yn)*log(1/P(yn)) = " + entropypyn );
            System.out.println("\nP(yo)*log(1/P(yo)) = " + entropypyo );
            System.out.println("\nP(yp)*log(1/P(yp)) = " + entropypyp );
            System.out.println("\nP(yr)*log(1/P(yr)) = " + entropypyr );
            System.out.println("\nP(ys)*log(1/P(ys)) = " + entropypys );
            System.out.println("\nP(yt)*log(1/P(yt)) = " + entropypyt );
            System.out.println("\nP(yu)*log(1/P(yu)) = " + entropypyu );
            System.out.println("\nP(yv)*log(1/P(yv)) = " + entropypyv );
            System.out.println("\nP(yw)*log(1/P(yw)) = " + entropypyw );
            System.out.println("\nP(yx)*log(1/P(yx)) = " + entropypyx );
            System.out.println("\nP(y.)*log(1/P(y.)) = " + entropypydot );
            System.out.println("\nP(y,)*log(1/P(y,)) = " + entropypycomma );
            System.out.println("\nP(yvacuum)*log(1/P(yvacuum)) = " + entropypyvacuum );
            System.out.println("\nP(za)*log(1/P(za)) = " + entropypza );
            System.out.println("\nP(ze)*log(1/P(ze)) = " + entropypze );
            System.out.println("\nP(zh)*log(1/P(zh)) = " + entropypzh );
            System.out.println("\nP(zi)*log(1/P(zi)) = " + entropypzi );
            System.out.println("\nP(zl)*log(1/P(zl)) = " + entropypzl );
            System.out.println("\nP(zm)*log(1/P(zm)) = " + entropypzm );
            System.out.println("\nP(zo)*log(1/P(zo)) = " + entropypzo );
            System.out.println("\nP(zy)*log(1/P(zy)) = " + entropypzy );
            System.out.println("\nP(zz)*log(1/P(zz)) = " + entropypzz );
            System.out.println("\nP(z,)*log(1/P(z,)) = " + entropypzcomma );
            System.out.println("\nP(zvacuum)*log(1/P(zvacuum)) = " + entropypzvacuum );
            System.out.println("\nP(.k)*log(1/P(.k)) = " + entropypdotk );
            System.out.println("\nP(.m)*log(1/P(.m)) = " + entropypdotm );
            System.out.println("\nP(.n)*log(1/P(.n)) = " + entropypdotn );
            System.out.println("\nP(.,)*log(1/P(.,)) = " + entropypdotcomma );
            System.out.println("\nP(.vacuum)*log(1/P(.vacuum)) = " + entropypdotvacuum );
            System.out.println("\nP(,vacuum)*log(1/P(,vacuum)) = " + entropypcommavacuum );
            System.out.println("\nP(vacuuma)*log(1/P(vacuuma)) = " + entropypvacuuma );
            System.out.println("\nP(vacuumb)*log(1/P(vacuumb)) = " + entropypvacuumb  );
            System.out.println("\nP(vacuumc)*log(1/P(vacuumc)) = " + entropypvacuumc  );
            System.out.println("\nP(vacuumd)*log(1/P(vacuumd)) = " + entropypvacuumd  );
            System.out.println("\nP(vacuume)*log(1/P(vacuume)) = " + entropypvacuume  );
            System.out.println("\nP(vacuumf)*log(1/P(vacuumf)) = " + entropypvacuumf  );
            System.out.println("\nP(vacuumg)*log(1/P(vacuumg)) = " + entropypvacuumg  );
            System.out.println("\nP(vacuumh)*log(1/P(vacuumh)) = " + entropypvacuumh  );
            System.out.println("\nP(vacuumi)*log(1/P(vacuumi)) = " + entropypvacuumi  );
            System.out.println("\nP(vacuumj)*log(1/P(vacuumj)) = " + entropypvacuumj  );
            System.out.println("\nP(vacuumk)*log(1/P(vacuumk)) = " + entropypvacuumk  );
            System.out.println("\nP(vacuuml)*log(1/P(vacuuml)) = " + entropypvacuuml  );
            System.out.println("\nP(vacuumm)*log(1/P(vacuumm)) = " + entropypvacuumm  );
            System.out.println("\nP(vacuumn)*log(1/P(vacuumn)) = " + entropypvacuumn  );
            System.out.println("\nP(vacuumo)*log(1/P(vacuumo)) = " + entropypvacuumo  );
            System.out.println("\nP(vacuump)*log(1/P(vacuump)) = " + entropypvacuump  );
            System.out.println("\nP(vacuumq)*log(1/P(vacuumq)) = " + entropypvacuumq  );
            System.out.println("\nP(vacuumr)*log(1/P(vacuumr)) = " + entropypvacuumr  );
            System.out.println("\nP(vacuums)*log(1/P(vacuums)) = " + entropypvacuums  );
            System.out.println("\nP(vacuumt)*log(1/P(vacuumt)) = " + entropypvacuumt  );
            System.out.println("\nP(vacuumu)*log(1/P(vacuumu)) = " + entropypvacuumu  );
            System.out.println("\nP(vacuumv)*log(1/P(vacuumv)) = " + entropypvacuumv  );
            System.out.println("\nP(vacuumw)*log(1/P(vacuumw)) = " + entropypvacuumw  );
            System.out.println("\nP(vacuumx)*log(1/P(vacuumx)) = " + entropypvacuumx  );
            System.out.println("\nP(vacuumy)*log(1/P(vacuumy)) = " + entropypvacuumy  );
            System.out.println("\nP(vacuumz)*log(1/P(vacuumz)) = " + entropypvacuumz  );
            System.out.println("\nP(vacuum.)*log(1/P(vacuum.)) = " + entropypvacuumdot  );
            System.out.println("\nP(vacuum,)*log(1/P(vacuum,)) = " + entropypvacuumcomma  );
            System.out.println("\nP(vacuumvacuum)*log(1/P(vacuumvacuum)) = " + entropypvacuumvacuum  );
            System.out.println("\nThe sum of the H(s) is = " + sumentropy ); 
            System.out.println("\nThe entropy H(Xn)+H(Xn+1)<H(Xn,Xn+1) = 3.260578852252319<5.621357493158759"); 
       
            }

            private static void calculatetheconditionalentropy2() 
                    
            {
                
            double pa = 4689.0/99499.0;  
            double pb = 2964.0/99499.0;
            double pc = 3342.0/99499.0;
            double pd = 4364.0/99499.0;
            double pe = 4714.0/99499.0;
            double pf = 3024.0/99499.0;
            double pg = 3446.0/99499.0;
            double ph = 4624.0/99499.0;
            double pi = 4468.0/99499.0;
            double pj = 777.0/99499.0;  
            double pk = 3014.0/99499.0;
            double pl = 3865.0/99499.0;
            double pm = 3456.0/99499.0;
            double pn = 4481.0/99499.0;
            double po = 4603.0/99499.0;
            double pp = 2946.0/99499.0;
            double pq = 424.0/99499.0;  
            double pr = 4360.0/99499.0;
            double ps = 4521.0/99499.0;
            double pt = 4573.0/99499.0;
            double pu = 3768.0/99499.0;
            double pv = 2322.0/99499.0;
            double pw = 3733.0/99499.0;
            double px = 577.0/99499.0;  
            double py = 3786.0/99499.0;
            double pz = 218.0/99499.0;
            double pdot = 4527.0/99499.0;
            double pcomma = 2897.0/99499.0;
            double pvacuum = 5016.0/99499.0;       
             
            double paa = 15.0/372007.0;
            double pab = 669.0/372007.0;
            double pac = 1138.0/372007.0;
            double pad = 1437.0/372007.0;
            double pae = 13.0/372007.0;
            double paf = 409.0/372007.0;
            double pag = 753.0/372007.0;
            double pah = 35.0/372007.0;
            double pai = 1905.0/372007.0;
            double paj = 16.0/372007.0;
            double pak = 581.0/372007.0;
            double pal = 1657.0/372007.0;
            double pam = 749.0/372007.0;
            double pan = 2981.0/372007.0;
            double pao = 7.0/372007.0;
            double pap = 623.0/372007.0;
            double paq = 6.0/372007.0;
            double par = 2796.0/372007.0;
            double pas = 2384.0/372007.0;
            double pat = 2814.0/372007.0;
            double pau = 483.0/372007.0;
            double pav = 845.0/372007.0;
            double paw = 336.0/372007.0;
            double pax = 27.0/372007.0;
            double pay = 899.0/372007.0;
            double paz = 92.0/372007.0;
            double padot = 84.0/372007.0;
            double pacomma = 64.0/372007.0;
            double pavacuum = 1959.0/372007.0;  
            double pba = 660.0/372007.0;
            double pbb = 121.0/372007.0;
            double pbc = 1.0/372007.0;
            double pbe = 1668.0/372007.0;
            double pbf = 2.0/372007.0;
            double pbi = 390.0/372007.0;
            double pbj = 76.0/372007.0;
            double pbl = 742.0/372007.0;
            double pbm = 11.0/372007.0;
            double pbn = 4.0/372007.0;
            double pbo = 959.0/350144.0;
            double pbr = 515.0/372007.0;
            double pbs = 92.0/372007.0;
            double pbt = 25.0/372007.0;
            double pbu = 861.0/372007.0;
            double pbv = 25.0/372007.0;
            double pbw = 1.0/372007.0;
            double pby = 322.0/372007.0;
            double pbdot = 16.0/372007.0;
            double pbcomma = 9.0/372007.0;
            double pbvacuum = 97.0/372007.0;
            double pca = 1228.0/372007.0;
            double pcc = 132.0/372007.0;
            double pcd = 8.0/372007.0;
            double pce = 1400.0/372007.0;
            double pch = 1304.0/372007.0;
            double pci = 440.0/372007.0;
            double pck = 1043.0/372007.0;
            double pcl = 500.0/372007.0;
            double pco = 1456.0/372007.0;
            double pcq = 6.0/372007.0;
            double pcr = 456.0/372007.0;
            double pcs = 31.0/372007.0;
            double pct = 705.0/372007.0;
            double pcu = 356.0/372007.0;
            double pcv = 1.0/372007.0;
            double pcy = 43.0/372007.0;
            double pcdot = 44.0/372007.0;
            double pccomma = 22.0/372007.0;
            double pcvacuum = 222.0/372007.0;
            double pda = 629.0/372007.0;
            double pdb = 13.0/372007.0;
            double pdc = 22.0/372007.0;
            double pdd = 256.0/372007.0;
            double pde = 1511.0/372007.0;
            double pdf = 17.0/372007.0;
            double pdg = 92.0/372007.0;
            double pdh = 15.0/372007.0;
            double pdi = 1166.0/372007.0;
            double pdj = 12.0/372007.0;
            double pdk = 4.0/372007.0;
            double pdl = 163.0/372007.0;
            double pdm = 28.0/372007.0;
            double pdn = 448.0/372007.0;
            double pdo = 1230.0/372007.0;
            double pdp = 8.0/372007.0;
            double pdr = 502.0/372007.0;
            double pds = 485.0/372007.0;
            double pdt = 7.0/372007.0;
            double pdu = 159.0/372007.0;
            double pdv = 35.0/372007.0;
            double pdw = 15.0/372007.0;
            double pdy = 294.0/372007.0;
            double pddot = 1655.0/372007.0;
            double pdcomma = 754.0/372007.0;
            double pdvacuum = 3402.0/372007.0;
            double pea = 1834.0/372007.0;
            double peb = 90.0/372007.0;
            double pec = 1016.0/372007.0;
            double ped = 2851.0/372007.0;
            double pee = 1369.0/372007.0;
            double pef = 476.0/372007.0;
            double peg = 367.0/372007.0;
            double peh = 183.0/372007.0;
            double pei = 470.0/372007.0;
            double pej = 10.0/372007.0;
            double pek = 76.0/372007.0;
            double pel = 1458.0/372007.0;
            double pem = 801.0/372007.0;
            double pen = 2420.0/372007.0;
            double peo = 256.0/372007.0;
            double pep = 546.0/372007.0;
            double peq = 42.0/372007.0;
            double per = 3006.0/372007.0;
            double pes = 1997.0/372007.0;
            double pet = 1332.0/372007.0;
            double peu = 25.0/372007.0;
            double pev = 697.0/372007.0;
            double pew = 463.0/372007.0;
            double pex = 442.0/372007.0;
            double pey = 770.0/372007.0;
            double pez = 38.0/372007.0;
            double pedot = 1334.0/372007.0;
            double pecomma = 832.0/372007.0;
            double pevacuum = 4165.0/372007.0;
            double pfa = 569.0/372007.0;
            double pfb = 5.0/372007.0;
            double pfc = 1.0/372007.0;
            double pfe = 682.0/372007.0;
            double pff = 579.0/372007.0;
            double pfh = 1.0/372007.0;
            double pfi = 868.0/372007.0;
            double pfj = 22.0/372007.0;
            double pfl = 338.0/372007.0;
            double pfn = 2.0/372007.0;
            double pfo = 1186.0/372007.0;
            double pfr = 785.0/372007.0;
            double pfs = 29.0/372007.0;
            double pft = 522.0/372007.0;
            double pfu = 275.0/372007.0;
            double pfw = 4.0/372007.0;
            double pfy = 21.0/372007.0;
            double pfdot = 108.0/372007.0;
            double pfcomma = 62.0/372007.0;
            double pfvacuum = 1789.0/372007.0;
            double pga = 651.0/372007.0;
            double pgb = 5.0/372007.0;
            double pgd = 30.0/372007.0;
            double pge = 1128.0/372007.0;
            double pgf = 1.0/372007.0;
            double pgg = 165.0/372007.0;
            double pgh = 1195.0/372007.0;
            double pgi = 431.0/372007.0;
            double pgj = 2.0/372007.0;
            double pgl = 318.0/372007.0;
            double pgm = 7.0/372007.0;
            double pgn = 173.0/372007.0;
            double pgo = 711.0/372007.0;
            double pgp = 1.0/372007.0;
            double pgr = 439.0/372007.0;
            double pgs = 194.0/372007.0;
            double pgt = 20.0/372007.0;
            double pgu = 340.0/372007.0;
            double pgv = 17.0/372007.0;
            double pgy = 20.0/372007.0;
            double pgz = 1.0/372007.0;
            double pgdot = 421.0/372007.0;
            double pgcomma = 232.0/372007.0;
            double pgvacuum = 2210.0/372007.0; 
            double pha = 3197.0/372007.0;
            double phb = 3.0/372007.0;
            double phc = 1.0/372007.0;
            double phd = 1.0/372007.0;
            double phe = 1303.0/372007.0;
            double phf = 1303.0/372007.0;
            double phh = 1303.0/372007.0;
            double phi = 349.0/372007.0;
            double phl = 2.0/372007.0;
            double phm = 2.0/372007.0;
            double phn = 19.0/372007.0;
            double pho = 1188.0/372007.0;
            double php = 1188.0/372007.0;
            double phq = 1188.0/372007.0;
            double phr = 19.0/372007.0;
            double pht = 19.0/372007.0;
            double phu = 1085.0/372007.0;
            double phv = 1193.0/372007.0;
            double phw = 1193.0/372007.0;
            double phy = 70.0/372007.0;
            double phdot = 8.0/372007.0;
            double phcomma = 3.0/372007.0;
            double phvacuum = 19.0/372007.0;
            double pia = 586.0/372007.0;
            double pib = 180.0/372007.0;
            double pic = 1310.0/372007.0;
            double pid = 1969.0/372007.0;
            double pie = 858.0/372007.0;
            double pif = 670.0/372007.0;
            double pig = 943.0/372007.0;
            double pih = 12.0/372007.0;
            double pii = 2.0/372007.0;
            double pij = 1.0/372007.0;
            double pik = 475.0/372007.0;
            double pil = 1177.0/372007.0;
            double pim = 1058.0/372007.0;
            double pin = 3262.0/372007.0;
            double pio = 894.0/372007.0;
            double pip = 326.0/372007.0;
            double piq = 11.0/372007.0;
            double pir = 881.0/372007.0;
            double pis = 2156.0/372007.0;
            double pit = 2184.0/372007.0;
            double piu = 61.0/372007.0;
            double piv = 566.0/372007.0;
            double pix = 68.0/372007.0;
            double piz = 31.0/372007.0;
            double pidot = 10.0/372007.0;
            double picomma = 19.0/372007.0;
            double pivacuum = 1001.0/372007.0;   
            double pja = 91.0/372007.0;
            double pje = 107.0/372007.0;
            double pji = 14.0/372007.0;
            double pjo = 301.0/372007.0;
            double pju = 360.0/372007.0;
            double pjdot = 1.0/372007.0;
            double pka = 460.0/372007.0;
            double pkb = 4.0/372007.0;
            double pkc = 1.0/372007.0;
            double pkd = 7.0/372007.0;
            double pke = 1546.0/372007.0;
            double pkf = 2.0/372007.0;
            double pkg = 14.0/372007.0;
            double pkh = 3.0/372007.0;
            double pki = 703.0/372007.0;
            double pkj = 29.0/372007.0;
            double pkk = 20.0/372007.0;
            double pkl = 81.0/372007.0;
            double pkm = 3.0/372007.0;
            double pkn = 591.0/372007.0;
            double pko = 79.0/372007.0;
            double pkp = 3.0/372007.0;
            double pkr = 43.0/372007.0;
            double pks = 183.0/372007.0;
            double pkt = 15.0/372007.0;
            double pku = 13.0/372007.0;
            double pkv = 17.0/372007.0;
            double pkw = 12.0/372007.0;
            double pky = 34.0/372007.0;
            double pkdot = 286.0/372007.0;
            double pkcomma = 178.0/372007.0;
            double pkvacuum = 1184.0/372007.0;  
            double pla = 1213.0/372007.0;
            double plb = 25.0/372007.0;
            double plc = 56.0/372007.0;
            double pld = 1129.0/372007.0;
            double ple = 2091.0/372007.0;
            double plf = 284.0/372007.0;
            double plg = 28.0/372007.0;
            double plh = 3.0/372007.0;
            double pli = 1594.0/372007.0;
            double plj = 1.0/372007.0;
            double plk = 203.0/372007.0;
            double pll = 1677.0/372007.0;
            double plm = 265.0/372007.0;
            double pln = 20.0/372007.0;
            double plo = 1343.0/372007.0;
            double plp = 78.0/372007.0;
            double plr = 103.0/372007.0;
            double pls = 341.0/372007.0;
            double plt = 295.0/372007.0;
            double plu = 304.0/372007.0;
            double plv = 210.0/372007.0;
            double plw = 76.0/372007.0;
            double ply = 1002.0/372007.0;
            double plz = 1.0/372007.0;
            double pldot = 237.0/372007.0;
            double plcomma = 219.0/372007.0;
            double plvacuum = 1488.0/372007.0; 
            double pma = 1357.0/372007.0;
            double pmb = 275.0/372007.0;
            double pmc = 5.0/372007.0;
            double pmd = 1.0/372007.0;
            double pme = 1873.0/372007.0;
            double pmf = 6.0/372007.0;
            double pmh = 2.0/372007.0;
            double pmi = 799.0/372007.0;
            double pml = 21.0/372007.0;
            double pmm = 253.0/372007.0;
            double pmn = 32.0/372007.0;
            double pmo = 924.0/372007.0;
            double pmp = 444.0/372007.0;
            double pmr = 2.0/372007.0;
            double pms = 243.0/372007.0;
            double pmt = 11.0/372007.0;
            double pmu = 387.0/372007.0;
            double pmw = 2.0/372007.0;
            double pmy = 209.0/372007.0;
            double pmdot = 442.0/372007.0;
            double pmcomma = 176.0/372007.0;
            double pmvacuum = 1327.0/372007.0;  
            double pna = 694.0/372007.0;
            double pnb = 16.0/372007.0;
            double pnc = 661.0/372007.0;
            double pnd = 2494.0/372007.0;
            double pne = 1991.0/372007.0;
            double pnf = 138.0/372007.0;
            double png = 2492.0/372007.0;
            double pnh = 34.0/372007.0;
            double pni = 800.0/372007.0;
            double pnj = 31.0/372007.0;
            double pnk = 507.0/372007.0;
            double pnl = 268.0/372007.0;
            double pnm = 28.0/372007.0;
            double pnn = 296.0/372007.0;
            double pno = 1739.0/372007.0;
            double pnp = 14.0/372007.0;
            double pnq = 22.0/372007.0;
            double pnr = 19.0/372007.0;
            double pns = 994.0/372007.0;
            double pnt = 1642.0/372007.0;
            double pnu = 230.0/372007.0;
            double pnv = 127.0/372007.0;
            double pnw = 8.0/372007.0;
            double pnx = 6.0/372007.0;
            double pny = 434.0/372007.0;
            double pnz = 6.0/372007.0;
            double pndot = 770.0/372007.0;
            double pncomma = 453.0/372007.0;
            double pnvacuum = 3207.0/372007.0;  
            double poa = 300.0/372007.0;
            double pob = 285.0/372007.0;
            double poc = 397.0/372007.0;
            double pod = 746.0/372007.0;
            double poe = 149.0/372007.0;
            double pof = 1646.0/372007.0;
            double pog = 219.0/372007.0;
            double poh = 106.0/372007.0;
            double poi = 511.0/372007.0;
            double poj = 7.0/372007.0;
            double pok = 734.0/372007.0;
            double pol = 1205.0/372007.0;
            double pom = 1467.0/372007.0;
            double pon = 2484.0/372007.0;
            double poo = 1384.0/372007.0;
            double pop = 825.0/372007.0;
            double poq = 1.0/372007.0;
            double por = 2003.0/372007.0;
            double pos = 820.0/372007.0;
            double pot = 1416.0/372007.0;
            double pou = 2844.0/372007.0;
            double pov = 565.0/372007.0;
            double pow = 1555.0/372007.0;
            double pox = 71.0/372007.0;
            double poy = 178.0/372007.0;
            double poz = 22.0/372007.0;
            double podot = 161.0/372007.0;
            double pocomma = 185.0/372007.0;
            double povacuum = 2466.0/372007.0;
            double ppa = 728.0/372007.0;
            double ppb = 11.0/372007.0;
            double ppd = 4.0/372007.0;
            double ppe = 1351.0/372007.0;
            double ppf = 1.0/372007.0;
            double pph = 223.0/372007.0;
            double ppi = 397.0/372007.0;
            double ppk = 6.0/372007.0;
            double ppl = 656.0/372007.0;
            double ppm = 5.0/372007.0;
            double ppo = 777.0/372007.0;
            double ppp = 564.0/372007.0;
            double ppr = 725.0/372007.0;
            double pps = 305.0/372007.0;
            double ppt = 214.0/372007.0;
            double ppu = 307.0/372007.0;
            double ppw = 13.0/372007.0;
            double ppy = 50.0/372007.0;
            double ppdot = 190.0/372007.0;
            double ppcomma = 101.0/372007.0;
            double ppvacuum = 877.0/372007.0;
            double pqs = 1.0/372007.0;
            double pqu = 399.0/372007.0;
            double pqdot = 12.0/372007.0;
            double pqcomma = 8.0/372007.0;
            double pqvacuum = 12.0/372007.0;
            double pra = 1371.0/372007.0;
            double prb = 71.0/372007.0;
            double prc = 240.0/372007.0;
            double prd = 751.0/372007.0;
            double pre = 2798.0/372007.0;
            double prf = 91.0/372007.0;
            double prg = 317.0/372007.0;
            double prh = 88.0/372007.0;
            double pri = 1573.0/372007.0;
            double prj = 2.0/372007.0;
            double prk = 335.0/372007.0;
            double prl = 205.0/372007.0;
            double prm = 375.0/372007.0;
            double prn = 555.0/372007.0;
            double pro = 1645.0/372007.0;
            double prp = 102.0/372007.0;
            double prq = 6.0/372007.0;
            double prr = 1812.0/372007.0;
            double prs = 1089.0/372007.0;
            double prt = 786.0/372007.0;
            double pru = 463.0/372007.0;
            double prv = 177.0/372007.0;
            double prw = 158.0/372007.0;
            double pry = 1793.0/372007.0;
            double prz = 1.0/372007.0;
            double prdot = 777.0/372007.0;
            double prcomma = 397.0/372007.0;
            double prvacuum = 3591.0/372007.0;
            double psa = 1629.0/372007.0;
            double psb = 47.0/372007.0;
            double psc = 373.0/372007.0;
            double psd = 13.0/372007.0;
            double pse = 1949.0/372007.0;
            double psf = 29.0/372007.0;
            double psg = 15.0/372007.0;
            double psh = 1532.0/372007.0;
            double psi = 1219.0/372007.0;
            double psj = 2.0/372007.0;
            double psk = 655.0/372007.0;
            double psl = 373.0/372007.0;
            double psm = 342.0/372007.0;
            double psn = 446.0/372007.0;
            double pso = 1229.0/372007.0;
            double psp = 606.0/372007.0;
            double psq = 63.0/372007.0;
            double psr = 8.0/372007.0;
            double pss = 1028.0/372007.0;
            double pst = 2212.0/372007.0;
            double psu = 669.0/372007.0;
            double psv = 57.0/372007.0;
            double psw = 306.0/372007.0;
            double psy = 198.0/372007.0;
            double psdot = 1081.0/372007.0;
            double pscomma = 727.0/372007.0;
            double psvacuum = 3356.0/372007.0;
            double pta = 1237.0/372007.0;
            double ptb = 19.0/372007.0;
            double ptc = 332.0/372007.0;
            double ptd = 4.0/372007.0;
            double pte = 2022.0/372007.0;
            double ptf = 10.0/372007.0;
            double ptg = 3.0/372007.0;
            double pth = 3750.0/372007.0;
            double pti = 1678.0/372007.0;
            double ptj = 6.0/372007.0;
            double ptk = 1.0/372007.0;
            double ptl = 430.0/372007.0;
            double ptm = 68.0/372007.0;
            double ptn = 39.0/372007.0;
            double pto = 2370.0/372007.0;
            double ptp = 19.0/372007.0;
            double ptr = 1132.0/372007.0;
            double pts = 580.0/372007.0;
            double ptt = 772.0/372007.0;
            double ptu = 553.0/372007.0;
            double ptv = 53.0/372007.0;
            double ptw = 368.0/372007.0;
            double pty = 412.0/372007.0;
            double ptz = 5.0/372007.0;
            double ptdot = 860.0/372007.0;
            double ptcomma = 497.0/372007.0;
            double ptvacuum = 3600.0/372007.0;   
            double pua = 223.0/372007.0;
            double pub = 154.0/372007.0;
            double puc = 335.0/372007.0;
            double pud = 244.0/372007.0;
            double pue = 372.0/372007.0;
            double puf = 84.0/372007.0;
            double pug = 757.0/372007.0;
            double puh = 11.0/372007.0;
            double pui = 317.0/372007.0;
            double puk = 16.0/372007.0;
            double pul = 1093.0/372007.0;
            double pum = 420.0/372007.0;
            double pun = 1220.0/372007.0;
            double puo = 10.0/372007.0;
            double pup = 711.0/372007.0;
            double pur = 1274.0/372007.0;
            double pus = 1161.0/372007.0;
            double put = 1562.0/372007.0;
            double puu = 2.0/372007.0;
            double puv = 19.0/372007.0;
            double pux = 5.0/372007.0;
            double puy = 41.0/372007.0;
            double puz = 17.0/372007.0;
            double pudot = 61.0/372007.0;
            double pucomma = 46.0/372007.0;
            double puvacuum = 1079.0/372007.0;  
            double pva = 150.0/372007.0;
            double pvd = 5.0/372007.0;
            double pve = 2005.0/372007.0;
            double pvi = 556.0/372007.0;
            double pvl = 1.0/372007.0;
            double pvo = 282.0/372007.0;
            double pvs = 2.0/372007.0;
            double pvu = 8.0/372007.0;
            double pvv = 2.0/372007.0;
            double pvy = 21.0/372007.0;
            double pvdot = 14.0/372007.0;
            double pvcomma = 3.0/372007.0;
            double pvvacuum = 42.0/372007.0;  
            double pwa = 1891.0/372007.0;
            double pwb = 14.0/372007.0;
            double pwc = 2.0/372007.0;
            double pwd = 15.0/372007.0;
            double pwe = 1370.0/372007.0;
            double pwf = 7.0/372007.0;
            double pwg = 1.0/372007.0;
            double pwh = 1666.0/372007.0;
            double pwi = 1226.0/372007.0;
            double pwk = 3.0/372007.0;
            double pwl = 83.0/372007.0;
            double pwm = 139.0/372007.0;
            double pwn = 520.0/372007.0;
            double pwo = 943.0/372007.0;
            double pwp = 6.0/372007.0;
            double pwr = 108.0/372007.0;
            double pws = 147.0/372007.0;
            double pwt = 1.0/372007.0;
            double pwu = 14.0/372007.0;
            double pww = 1.0/372007.0;
            double pwy = 6.0/372007.0;
            double pwdot = 214.0/372007.0;
            double pwcomma = 140.0/372007.0;
            double pwvacuum = 975.0/372007.0;
            double pxa = 69.0/372007.0;
            double pxc = 62.0/372007.0;
            double pxe = 45.0/372007.0;
            double pxh = 11.0/372007.0;
            double pxi = 57.0/372007.0;
            double pxo = 7.0/372007.0;
            double pxp = 170.0/372007.0;
            double pxt = 111.0/372007.0;
            double pxu = 13.0/372007.0;
            double pxy = 9.0/372007.0;
            double pxdot = 9.0/372007.0;
            double pxcomma = 11.0/372007.0;
            double pxvacuum = 105.0/372007.0; 
            double pya = 36.0/372007.0;
            double pyb = 36.0/372007.0;
            double pyc = 40.0/372007.0;
            double pyd = 8.0/372007.0;
            double pye = 620.0/372007.0;
            double pyf = 3.0/372007.0;
            double pyg = 55.0/372007.0;
            double pyh = 3.0/372007.0;
            double pyi = 199.0/372007.0;
            double pyj = 2.0/372007.0;
            double pyl = 89.0/372007.0;
            double pym = 24.0/372007.0;
            double pyn = 36.0/372007.0;
            double pyo = 1332.0/372007.0;
            double pyp = 49.0/372007.0;
            double pyr = 25.0/372007.0;
            double pys = 247.0/372007.0;
            double pyt = 157.0/372007.0;
            double pyu = 3.0/372007.0;
            double pyv = 5.0/372007.0;
            double pyw = 53.0/372007.0;
            double pyx = 1.0/372007.0;
            double pydot = 580.0/372007.0;
            double pycomma = 370.0/372007.0;
            double pyvacuum = 2879.0/372007.0;
            double pza = 10.0/372007.0;
            double pze = 120.0/372007.0;
            double pzh = 2.0/372007.0;
            double pzi = 45.0/372007.0;
            double pzl = 12.0/372007.0;
            double pzm = 1.0/372007.0;
            double pzo = 14.0/372007.0;
            double pzy = 18.0/372007.0;
            double pzz = 34.0/372007.0;
            double pzcomma = 1.0/372007.0;
            double pzvacuum = 8.0/372007.0;
            double pdotk = 1.0/372007.0;
            double pdotm = 1.0/372007.0;
            double pdotn = 1.0/372007.0;
            double pdotcomma = 1.0/372007.0;
            double pdotvacuum = 8.0/372007.0;
            double pcommavacuum = 2897.0/372007.0;
            double pvacuuma = 3536.0/372007.0;
            double pvacuumb = 2557.0/372007.0;
            double pvacuumc = 2362.0/372007.0;
            double pvacuumd = 2174.0/372007.0;
            double pvacuume = 1356.0/372007.0;
            double pvacuumf = 2171.0/372007.0;
            double pvacuumg = 1541.0/372007.0;
            double pvacuumh = 3512.0/372007.0;
            double pvacuumi = 2963.0/372007.0;
            double pvacuumj = 599.0/372007.0;
            double pvacuumk = 1038.0/372007.0;
            double pvacuuml = 1974.0/372007.0;
            double pvacuumm = 2250.0/372007.0;
            double pvacuumn = 1686.0/372007.0;
            double pvacuumo = 2653.0/372007.0;
            double pvacuump = 1860.0/372007.0;
            double pvacuumq = 274.0/372007.0;
            double pvacuumr = 1878.0/372007.0;
            double pvacuums = 3798.0/372007.0;
            double pvacuumt = 3870.0/372007.0;
            double pvacuumu = 1087.0/372007.0;
            double pvacuumv = 711.0/372007.0;
            double pvacuumw = 3244.0/372007.0;
            double pvacuumx = 1.0/372007.0;
            double pvacuumy = 1528.0/372007.0;
            double pvacuumz = 21.0/372007.0;
            double pvacuumdot = 239.0/372007.0;
            double pvacuumcomma = 33.0/372007.0;  
            double pvacuumvacuum = 3002.0/372007.0;       
            
            double conditionalentropypaa = paa*(Math.log(pa/paa));
            double conditionalentropypab = pab*(Math.log(pb/pab));
            double conditionalentropypac = pac*(Math.log(pc/pac));
            double conditionalentropypad = pad*(Math.log(pd/pad));
            double conditionalentropypae = pae*(Math.log(pe/pae));
            double conditionalentropypaf = paf*(Math.log(pf/paf));
            double conditionalentropypag = pag*(Math.log(pg/pag));
            double conditionalentropypah = pah*(Math.log(ph/pah));
            double conditionalentropypai = pai*(Math.log(pi/pai));
            double conditionalentropypaj = paj*(Math.log(pj/paj));
            double conditionalentropypak = pak*(Math.log(pk/pak));
            double conditionalentropypal = pal*(Math.log(pl/pal));
            double conditionalentropypam = pam*(Math.log(pm/pam));
            double conditionalentropypan = pan*(Math.log(pn/pan));
            double conditionalentropypao = pao*(Math.log(po/pao));
            double conditionalentropypap = pap*(Math.log(pp/pap));
            double conditionalentropypaq = paq*(Math.log(pq/paq));
            double conditionalentropypar = par*(Math.log(pr/par));
            double conditionalentropypas = pas*(Math.log(ps/pas));
            double conditionalentropypat = pat*(Math.log(pt/pat));
            double conditionalentropypau = pau*(Math.log(pu/pau));
            double conditionalentropypav = pav*(Math.log(pv/pav));
            double conditionalentropypaw = paw*(Math.log(pw/paw));
            double conditionalentropypax = pax*(Math.log(px/pax));
            double conditionalentropypay = pay*(Math.log(py/pay));
            double conditionalentropypaz = paz*(Math.log(pz/paz));
            double conditionalentropypadot = padot*(Math.log(pdot/padot));
            double conditionalentropypacomma = pacomma*(Math.log(pcomma/pacomma));
            double conditionalentropypavacuum = pavacuum*(Math.log(pvacuum/pavacuum));
            double conditionalentropypba = pba*(Math.log(pa/pba));
            double conditionalentropypbb = pbb*(Math.log(pb/pbb));
            double conditionalentropypbc = pbc*(Math.log(pc/pbc));
            double conditionalentropypbe = pbe*(Math.log(pe/pbe));
            double conditionalentropypbf = pbf*(Math.log(pf/pbf));
            double conditionalentropypbi = pbi*(Math.log(pi/pbi));
            double conditionalentropypbj = pbj*(Math.log(pj/pbj));
            double conditionalentropypbl = pbl*(Math.log(pl/pbl));
            double conditionalentropypbm = pbm*(Math.log(pm/pbm));
            double conditionalentropypbn = pbn*(Math.log(pn/pbn));
            double conditionalentropypbo = pbo*(Math.log(po/pbo));
            double conditionalentropypbr = pbr*(Math.log(pr/pbr));
            double conditionalentropypbs = pbs*(Math.log(ps/pbs));
            double conditionalentropypbt = pbt*(Math.log(pt/pbt));
            double conditionalentropypbu = pbu*(Math.log(pu/pbu));
            double conditionalentropypbv = pbv*(Math.log(pv/pbv));
            double conditionalentropypbw = pbw*(Math.log(pw/pbw));
            double conditionalentropypby = pby*(Math.log(py/pby));
            double conditionalentropypbdot = pbdot*(Math.log(pdot/pbdot));
            double conditionalentropypbcomma = pbcomma*(Math.log(pcomma/pbcomma));
            double conditionalentropypbvacuum = pbvacuum*(Math.log(pvacuum/pbvacuum));
            double conditionalentropypca = pca*(Math.log(pa/pca));
            double conditionalentropypcc = pcc*(Math.log(pc/pcc));
            double conditionalentropypcd = pcd*(Math.log(pd/pcd));
            double conditionalentropypce = pce*(Math.log(pe/pce));
            double conditionalentropypch = pch*(Math.log(ph/pch));
            double conditionalentropypci = pci*(Math.log(pi/pci));
            double conditionalentropypck = pck*(Math.log(pk/pck));
            double conditionalentropypcl = pcl*(Math.log(pl/pcl));
            double conditionalentropypco = pco*(Math.log(po/pco));
            double conditionalentropypcq = pcq*(Math.log(pq/pcq));
            double conditionalentropypcr = pcr*(Math.log(pr/pcr));
            double conditionalentropypcs = pcs*(Math.log(ps/pcs));
            double conditionalentropypct = pct*(Math.log(pt/pct));
            double conditionalentropypcu = pcu*(Math.log(pu/pcu));
            double conditionalentropypcv = pcv*(Math.log(pv/pcv));
            double conditionalentropypcy = pcy*(Math.log(py/pcy));
            double conditionalentropypcdot = pcdot*(Math.log(pdot/pcdot));
            double conditionalentropypccomma = pccomma*(Math.log(pcomma/pccomma));
            double conditionalentropypcvacuum = pcvacuum*(Math.log(pvacuum/pcvacuum));
            double conditionalentropypda = pda*(Math.log(pa/pda));
            double conditionalentropypdb = pdb*(Math.log(pb/pdb));
            double conditionalentropypdc = pdc*(Math.log(pc/pdc));
            double conditionalentropypdd = pdd*(Math.log(pd/pdd));
            double conditionalentropypde = pde*(Math.log(pe/pde));
            double conditionalentropypdf = pdf*(Math.log(pf/pdf));
            double conditionalentropypdg = pdg*(Math.log(pg/pdg));
            double conditionalentropypdh = pdh*(Math.log(ph/pdh));
            double conditionalentropypdi = pdi*(Math.log(pi/pdi));
            double conditionalentropypdj = pdj*(Math.log(pj/pdj));
            double conditionalentropypdk = pdk*(Math.log(pk/pdk));
            double conditionalentropypdl = pdl*(Math.log(pl/pdl));
            double conditionalentropypdm = pdm*(Math.log(pm/pdm));
            double conditionalentropypdn = pdn*(Math.log(pn/pdn));
            double conditionalentropypdo = pdo*(Math.log(po/pdo));
            double conditionalentropypdp = pdp*(Math.log(pp/pdp));
            double conditionalentropypdr = pdr*(Math.log(pr/pdr));
            double conditionalentropypds = pds*(Math.log(ps/pds));
            double conditionalentropypdt = pdt*(Math.log(pt/pdt));
            double conditionalentropypdu = pdu*(Math.log(pu/pdu));
            double conditionalentropypdv = pdv*(Math.log(pv/pdv));
            double conditionalentropypdw = pdw*(Math.log(pw/pdw));
            double conditionalentropypdy = pdy*(Math.log(py/pdy));
            double conditionalentropypddot = pddot*(Math.log(pdot/pddot));
            double conditionalentropypdcomma = pdcomma*(Math.log(pcomma/pdcomma));
            double conditionalentropypdvacuum = pdvacuum*(Math.log(pvacuum/pdvacuum));
            double conditionalentropypea = pea*(Math.log(pa/pea));
            double conditionalentropypeb = peb*(Math.log(pb/peb));
            double conditionalentropypec = pec*(Math.log(pc/pec));
            double conditionalentropyped = ped*(Math.log(pd/ped));
            double conditionalentropypee = pee*(Math.log(pe/pee));
            double conditionalentropypef = pef*(Math.log(pf/pef));
            double conditionalentropypeg = peg*(Math.log(pg/peg));
            double conditionalentropypeh = peh*(Math.log(ph/peh));
            double conditionalentropypei = pei*(Math.log(pi/pei));
            double conditionalentropypej = pej*(Math.log(pj/pej));
            double conditionalentropypek = pek*(Math.log(pk/pek));
            double conditionalentropypel = pel*(Math.log(pl/pel));
            double conditionalentropypem = pem*(Math.log(pm/pem));
            double conditionalentropypen = pen*(Math.log(pn/pen));
            double conditionalentropypeo = peo*(Math.log(po/peo));
            double conditionalentropypep = pep*(Math.log(pp/pep));
            double conditionalentropypeq = peq*(Math.log(pq/peq));
            double conditionalentropyper = per*(Math.log(pr/per));
            double conditionalentropypes = pes*(Math.log(ps/pes));
            double conditionalentropypet = pet*(Math.log(pt/pet));
            double conditionalentropypeu = peu*(Math.log(pu/peu));
            double conditionalentropypev = pev*(Math.log(pv/pev));
            double conditionalentropypew = pew*(Math.log(pw/pew));
            double conditionalentropypex = pex*(Math.log(px/pex));
            double conditionalentropypey = pey*(Math.log(py/pey));
            double conditionalentropypez = pez*(Math.log(pz/pez));
            double conditionalentropypedot = pedot*(Math.log(pdot/pedot));
            double conditionalentropypecomma = pecomma*(Math.log(pcomma/pecomma));
            double conditionalentropypevacuum = pevacuum*(Math.log(pvacuum/pevacuum));
            double conditionalentropypfa = pfa*(Math.log(pa/pfa));
            double conditionalentropypfb = pfb*(Math.log(pb/pfb));
            double conditionalentropypfc = pfc*(Math.log(pc/pfc));
            double conditionalentropypfe = pfe*(Math.log(pe/pfe));
            double conditionalentropypff = pff*(Math.log(pf/pff));
            double conditionalentropypfh = pfh*(Math.log(ph/pfh));
            double conditionalentropypfi = pfi*(Math.log(pi/pfi));
            double conditionalentropypfj = pfj*(Math.log(pj/pfj));
            double conditionalentropypfl = pfl*(Math.log(pl/pfl));
            double conditionalentropypfn = pfn*(Math.log(pn/pfn));
            double conditionalentropypfo = pfo*(Math.log(po/pfo));
            double conditionalentropypfr = pfr*(Math.log(pr/pfr));
            double conditionalentropypfs = pfs*(Math.log(ps/pfs));
            double conditionalentropypft = pft*(Math.log(pt/pft));
            double conditionalentropypfu = pfu*(Math.log(pu/pfu));
            double conditionalentropypfw = pfw*(Math.log(pw/pfw));
            double conditionalentropypfy = pfy*(Math.log(py/pfy));
            double conditionalentropypfdot = pfdot*(Math.log(pdot/pfdot));
            double conditionalentropypfcomma = pfcomma*(Math.log(pcomma/pfcomma));
            double conditionalentropypfvacuum = pfvacuum*(Math.log(pvacuum/pfvacuum));
            double conditionalentropypga = pga*(Math.log(pa/pga));
            double conditionalentropypgb = pgb*(Math.log(pb/pgb));
            double conditionalentropypgd = pgd*(Math.log(pd/pgd));
            double conditionalentropypge = pge*(Math.log(pe/pge));
            double conditionalentropypgf = pgf*(Math.log(pf/pgf));
            double conditionalentropypgg = pgg*(Math.log(pg/pgg));
            double conditionalentropypgh = pgh*(Math.log(ph/pgh));
            double conditionalentropypgi = pgi*(Math.log(pi/pgi));
            double conditionalentropypgj = pgj*(Math.log(pj/pgj));
            double conditionalentropypgl = pgl*(Math.log(pl/pgl));
            double conditionalentropypgm = pgm*(Math.log(pm/pgm));
            double conditionalentropypgn = pgn*(Math.log(pn/pgn));
            double conditionalentropypgo = pgo*(Math.log(po/pgo));
            double conditionalentropypgp = pgp*(Math.log(pp/pgp));
            double conditionalentropypgr = pgr*(Math.log(pr/pgr));
            double conditionalentropypgs = pgs*(Math.log(ps/pgs));
            double conditionalentropypgt = pgt*(Math.log(pt/pgt));
            double conditionalentropypgu = pgu*(Math.log(pu/pgu));
            double conditionalentropypgv = pgv*(Math.log(pv/pgv));
            double conditionalentropypgy = pgy*(Math.log(py/pgy));
            double conditionalentropypgz = pgz*(Math.log(pz/pgz));
            double conditionalentropypgdot = pgdot*(Math.log(pdot/pgdot));
            double conditionalentropypgcomma = pgcomma*(Math.log(pcomma/pgcomma));
            double conditionalentropypgvacuum = pgvacuum*(Math.log(pvacuum/pgvacuum));
            double conditionalentropypha = pha*(Math.log(pa/pha));
            double conditionalentropyphb = phb*(Math.log(pb/phb));
            double conditionalentropyphc = phc*(Math.log(pc/phc));
            double conditionalentropyphd = phd*(Math.log(pd/phd));
            double conditionalentropyphe = phe*(Math.log(pe/phe));
            double conditionalentropyphf = phf*(Math.log(pf/phf));
            double conditionalentropyphh = phh*(Math.log(ph/phh));
            double conditionalentropyphi = phi*(Math.log(pi/phi));
            double conditionalentropyphl = phl*(Math.log(pl/phl));
            double conditionalentropyphm = phm*(Math.log(pm/phm));
            double conditionalentropyphn = phn*(Math.log(pn/phn));
            double conditionalentropypho = pho*(Math.log(po/pho));
            double conditionalentropyphp = php*(Math.log(pp/php));
            double conditionalentropyphq = phq*(Math.log(pq/phq));
            double conditionalentropyphr = phr*(Math.log(pr/phr));
            double conditionalentropypht = pht*(Math.log(pt/pht));
            double conditionalentropyphu = phu*(Math.log(pu/phu));
            double conditionalentropyphv = phv*(Math.log(pv/phv));
            double conditionalentropyphw = phw*(Math.log(pw/phw));
            double conditionalentropyphy = phy*(Math.log(py/phy));
            double conditionalentropyphdot = phdot*(Math.log(pdot/phdot));
            double conditionalentropyphcomma = phcomma*(Math.log(pcomma/phcomma));
            double conditionalentropyphvacuum = phvacuum*(Math.log(pvacuum/phvacuum));
            double conditionalentropypia = pia*(Math.log(pa/pia));
            double conditionalentropypib = pib*(Math.log(pb/pib));
            double conditionalentropypic = pic*(Math.log(pc/pic));
            double conditionalentropypid = pid*(Math.log(pd/pid));
            double conditionalentropypie = pie*(Math.log(pe/pie));
            double conditionalentropypif = pif*(Math.log(pf/pif));
            double conditionalentropypig = pig*(Math.log(pg/pig));
            double conditionalentropypih = pih*(Math.log(ph/pih));
            double conditionalentropypii = pii*(Math.log(pi/pii));
            double conditionalentropypij = pij*(Math.log(pj/pij));
            double conditionalentropypik = pik*(Math.log(pk/pik));
            double conditionalentropypil = pil*(Math.log(pl/pil));
            double conditionalentropypim = pim*(Math.log(pm/pim));
            double conditionalentropypin = pin*(Math.log(pn/pin));
            double conditionalentropypio = pio*(Math.log(po/pio));
            double conditionalentropypip = pip*(Math.log(pp/pip));
            double conditionalentropypiq = piq*(Math.log(pq/piq));
            double conditionalentropypir = pir*(Math.log(pr/pir));
            double conditionalentropypis = pis*(Math.log(ps/pis));
            double conditionalentropypit = pit*(Math.log(pt/pit));
            double conditionalentropypiu = piu*(Math.log(pu/piu));
            double conditionalentropypiv = piv*(Math.log(pv/piv));
            double conditionalentropypix = pix*(Math.log(px/pix));
            double conditionalentropypiz = piz*(Math.log(pz/piz));
            double conditionalentropypidot = pidot*(Math.log(pdot/pidot));
            double conditionalentropypicomma = picomma*(Math.log(pcomma/picomma));
            double conditionalentropypivacuum = pivacuum*(Math.log(pvacuum/pivacuum));
            double conditionalentropypja = pja*(Math.log(pa/pja));
            double conditionalentropypje = pje*(Math.log(pe/pje));
            double conditionalentropypji = pji*(Math.log(pi/pji));
            double conditionalentropypjo = pjo*(Math.log(po/pjo));
            double conditionalentropypju = pju*(Math.log(pu/pju));
            double conditionalentropypjdot = pjdot*(Math.log(pdot/pjdot));
            double conditionalentropypka = pka*(Math.log(pa/pka));
            double conditionalentropypkb = pkb*(Math.log(pb/pkb));
            double conditionalentropypkc = pkc*(Math.log(pc/pkc));
            double conditionalentropypkd = pkd*(Math.log(pd/pkd));
            double conditionalentropypke = pke*(Math.log(pe/pke));
            double conditionalentropypkf = pkf*(Math.log(pf/pkf));
            double conditionalentropypkg = pkg*(Math.log(pg/pkg));
            double conditionalentropypkh = pkh*(Math.log(ph/pkh));
            double conditionalentropypki = pki*(Math.log(pi/pki));
            double conditionalentropypkj = pkj*(Math.log(pj/pkj));
            double conditionalentropypkk = pkk*(Math.log(pk/pkk));
            double conditionalentropypkl = pkl*(Math.log(pl/pkl));
            double conditionalentropypkm = pkm*(Math.log(pm/pkm));
            double conditionalentropypkn = pkn*(Math.log(pn/pkn));
            double conditionalentropypko = pko*(Math.log(po/pko));
            double conditionalentropypkp = pkp*(Math.log(pp/pkp));
            double conditionalentropypkr = pkr*(Math.log(pr/pkr));
            double conditionalentropypks = pks*(Math.log(ps/pks));
            double conditionalentropypkt = pkt*(Math.log(pt/pkt));
            double conditionalentropypku = pku*(Math.log(pu/pku));
            double conditionalentropypkv = pkv*(Math.log(pv/pkv));
            double conditionalentropypkw = pkw*(Math.log(pw/pkw));
            double conditionalentropypky = pky*(Math.log(py/pky));
            double conditionalentropypkdot = pkdot*(Math.log(pdot/pkdot));
            double conditionalentropypkcomma = pkcomma*(Math.log(pcomma/pkcomma));
            double conditionalentropypkvacuum = pkvacuum*(Math.log(pvacuum/pkvacuum));
            double conditionalentropypla = pla*(Math.log(pa/pla));
            double conditionalentropyplb = plb*(Math.log(pb/plb));
            double conditionalentropyplc = plc*(Math.log(pc/plc));
            double conditionalentropypld = pld*(Math.log(pd/pld));
            double conditionalentropyple = ple*(Math.log(pe/ple));
            double conditionalentropyplf = plf*(Math.log(pf/plf));
            double conditionalentropyplg = plg*(Math.log(pg/plg));
            double conditionalentropyplh = plh*(Math.log(ph/plh));
            double conditionalentropypli = pli*(Math.log(pi/pli));
            double conditionalentropyplj = plj*(Math.log(pj/plj));
            double conditionalentropyplk = plk*(Math.log(pk/plk));
            double conditionalentropypll = pll*(Math.log(pl/pll));
            double conditionalentropyplm = plm*(Math.log(pm/plm));
            double conditionalentropypln = pln*(Math.log(pn/pln));
            double conditionalentropyplo = plo*(Math.log(po/plo));
            double conditionalentropyplp = plp*(Math.log(pp/plp));
            double conditionalentropyplr = plr*(Math.log(pr/plr));
            double conditionalentropypls = pls*(Math.log(ps/pls));
            double conditionalentropyplt = plt*(Math.log(pt/plt));
            double conditionalentropyplu = plu*(Math.log(pu/plu));
            double conditionalentropyplv = plv*(Math.log(pv/plv));
            double conditionalentropyplw = plw*(Math.log(pw/plw));
            double conditionalentropyply = ply*(Math.log(py/ply));
            double conditionalentropyplz = plz*(Math.log(pz/plz));
            double conditionalentropypldot = pldot*(Math.log(pdot/pldot));
            double conditionalentropyplcomma = plcomma*(Math.log(pcomma/plcomma));
            double conditionalentropyplvacuum = plvacuum*(Math.log(pvacuum/plvacuum));
            double conditionalentropypma = pma*(Math.log(pa/pma));
            double conditionalentropypmb = pmb*(Math.log(pb/pmb));
            double conditionalentropypmc = pmc*(Math.log(pc/pmc));
            double conditionalentropypmd = pmd*(Math.log(pd/pmd));
            double conditionalentropypme = pme*(Math.log(pe/pme));
            double conditionalentropypmf = pmf*(Math.log(pf/pmf));
            double conditionalentropypmh = pmh*(Math.log(ph/pmh));
            double conditionalentropypmi = pmi*(Math.log(pi/pmi));
            double conditionalentropypml = pml*(Math.log(pl/pml));
            double conditionalentropypmm = pmm*(Math.log(pm/pmm));
            double conditionalentropypmn = pmn*(Math.log(pn/pmn));
            double conditionalentropypmo = pmo*(Math.log(po/pmo));
            double conditionalentropypmp = pmp*(Math.log(pp/pmp));
            double conditionalentropypmr = pmr*(Math.log(pr/pmr));
            double conditionalentropypms = pms*(Math.log(ps/pms));
            double conditionalentropypmt = pmt*(Math.log(pt/pmt));
            double conditionalentropypmu = pmu*(Math.log(pu/pmu));
            double conditionalentropypmw = pmw*(Math.log(pw/pmw));
            double conditionalentropypmy = pmy*(Math.log(py/pmy));
            double conditionalentropypmdot = pmdot*(Math.log(pdot/pmdot));
            double conditionalentropypmcomma = pmcomma*(Math.log(pcomma/pmcomma));
            double conditionalentropypmvacuum = pmvacuum*(Math.log(pvacuum/pmvacuum));
            double conditionalentropypna = pna*(Math.log(pa/pna));
            double conditionalentropypnb = pnb*(Math.log(pb/pnb));
            double conditionalentropypnc = pnc*(Math.log(pc/pnc));
            double conditionalentropypnd = pnd*(Math.log(pd/pnd));
            double conditionalentropypne = pne*(Math.log(pe/pne));
            double conditionalentropypnf = pnf*(Math.log(pf/pnf));
            double conditionalentropypng = png*(Math.log(pg/png));
            double conditionalentropypnh = pnh*(Math.log(ph/pnh));
            double conditionalentropypni = pni*(Math.log(pi/pni));
            double conditionalentropypnj = pnj*(Math.log(pj/pnj));
            double conditionalentropypnk = pnk*(Math.log(pk/pnk));
            double conditionalentropypnl = pnl*(Math.log(pl/pnl));
            double conditionalentropypnm = pnm*(Math.log(pm/pnm));
            double conditionalentropypnn = pnn*(Math.log(pn/pnn));
            double conditionalentropypno = pno*(Math.log(po/pno));
            double conditionalentropypnp = pnp*(Math.log(pp/pnp));
            double conditionalentropypnq = pnq*(Math.log(pq/pnq));
            double conditionalentropypnr = pnr*(Math.log(pr/pnr));
            double conditionalentropypns = pns*(Math.log(ps/pns));
            double conditionalentropypnt = pnt*(Math.log(pt/pnt));
            double conditionalentropypnu = pnu*(Math.log(pu/pnu));
            double conditionalentropypnv = pnv*(Math.log(pv/pnv));
            double conditionalentropypnw = pnw*(Math.log(pw/pnw));
            double conditionalentropypnx = pnx*(Math.log(px/pnx));
            double conditionalentropypny = pny*(Math.log(py/pny));
            double conditionalentropypnz = pnz*(Math.log(pz/pnz));
            double conditionalentropypndot = pndot*(Math.log(pdot/pndot));
            double conditionalentropypncomma = pncomma*(Math.log(pcomma/pncomma));
            double conditionalentropypnvacuum = pnvacuum*(Math.log(pvacuum/pnvacuum));
            double conditionalentropypoa = poa*(Math.log(pa/poa));
            double conditionalentropypob = pob*(Math.log(pb/pob));
            double conditionalentropypoc = poc*(Math.log(pc/poc));
            double conditionalentropypod = pod*(Math.log(pd/pod));
            double conditionalentropypoe = poe*(Math.log(pe/poe));
            double conditionalentropypof = pof*(Math.log(pf/pof));
            double conditionalentropypog = pog*(Math.log(pg/pog));
            double conditionalentropypoh = poh*(Math.log(ph/poh));
            double conditionalentropypoi = poi*(Math.log(pi/poi));
            double conditionalentropypoj = poj*(Math.log(pj/poj));
            double conditionalentropypok = pok*(Math.log(pk/pok));
            double conditionalentropypol = pol*(Math.log(pl/pol));
            double conditionalentropypom = pom*(Math.log(pm/pom));
            double conditionalentropypon = pon*(Math.log(pn/pon));
            double conditionalentropypoo = poo*(Math.log(po/poo));
            double conditionalentropypop = pop*(Math.log(pp/pop));
            double conditionalentropypoq = poq*(Math.log(pq/poq));
            double conditionalentropypor = por*(Math.log(pr/por));
            double conditionalentropypos = pos*(Math.log(ps/pos));
            double conditionalentropypot = pot*(Math.log(pt/pot));
            double conditionalentropypou = pou*(Math.log(pu/pou));
            double conditionalentropypov = pov*(Math.log(pv/pov));
            double conditionalentropypow = pow*(Math.log(pw/pow));
            double conditionalentropypox = pox*(Math.log(px/pox));
            double conditionalentropypoy = poy*(Math.log(py/poy));
            double conditionalentropypoz = poz*(Math.log(pz/poz));
            double conditionalentropypodot = podot*(Math.log(pdot/podot));
            double conditionalentropypocomma = pocomma*(Math.log(pcomma/pocomma));
            double conditionalentropypovacuum = povacuum*(Math.log(pvacuum/povacuum));
            double conditionalentropyppa = ppa*(Math.log(pa/ppa));
            double conditionalentropyppb = ppb*(Math.log(pb/ppb));
            double conditionalentropyppd = ppd*(Math.log(pd/ppd));
            double conditionalentropyppe = ppe*(Math.log(pe/ppe));
            double conditionalentropyppf = ppf*(Math.log(pf/ppf));
            double conditionalentropypph = pph*(Math.log(ph/pph));
            double conditionalentropyppi = ppi*(Math.log(pi/ppi));
            double conditionalentropyppk = ppk*(Math.log(pk/ppk));
            double conditionalentropyppl = ppl*(Math.log(pl/ppl));
            double conditionalentropyppm = ppm*(Math.log(pm/ppm));
            double conditionalentropyppo = ppo*(Math.log(po/ppo));
            double conditionalentropyppp = ppp*(Math.log(pp/ppp));
            double conditionalentropyppr = ppr*(Math.log(pr/ppr));
            double conditionalentropypps = pps*(Math.log(ps/pps));
            double conditionalentropyppt = ppt*(Math.log(pt/ppt));
            double conditionalentropyppu = ppu*(Math.log(pu/ppu));
            double conditionalentropyppw = ppw*(Math.log(pw/ppw));
            double conditionalentropyppy = ppy*(Math.log(py/ppy));
            double conditionalentropyppdot = ppdot*(Math.log(pdot/ppdot));
            double conditionalentropyppcomma = ppcomma*(Math.log(pcomma/ppcomma));
            double conditionalentropyppvacuum = ppvacuum*(Math.log(pvacuum/ppvacuum));
            double conditionalentropypqs = pqs*(Math.log(ps/pqs));
            double conditionalentropypqu = pqu*(Math.log(pu/pqu));
            double conditionalentropypqdot = pqdot*(Math.log(pdot/pqdot));
            double conditionalentropypqcomma = pqcomma*(Math.log(pcomma/pqcomma));
            double conditionalentropypqvacuum = pqvacuum*(Math.log(pvacuum/pqvacuum));
            double conditionalentropypra = pra*(Math.log(pa/pra));
            double conditionalentropyprb = prb*(Math.log(pb/prb));
            double conditionalentropyprc = prc*(Math.log(pc/prc));
            double conditionalentropyprd = prd*(Math.log(pd/prd));
            double conditionalentropypre = pre*(Math.log(pe/pre));
            double conditionalentropyprf = prf*(Math.log(pf/prf));
            double conditionalentropyprg = prg*(Math.log(pg/prg));
            double conditionalentropyprh = prh*(Math.log(ph/prh));
            double conditionalentropypri = pri*(Math.log(pi/pri));
            double conditionalentropyprj = prj*(Math.log(pj/prj));
            double conditionalentropyprk = prk*(Math.log(pk/prk));
            double conditionalentropyprl = prl*(Math.log(pl/prl));
            double conditionalentropyprm = prm*(Math.log(pm/prm));
            double conditionalentropyprn = prn*(Math.log(pn/prn));
            double conditionalentropypro = pro*(Math.log(po/pro));
            double conditionalentropyprp = prp*(Math.log(pp/prp));
            double conditionalentropyprq = prq*(Math.log(pq/prq));
            double conditionalentropyprr = prr*(Math.log(pr/prr));
            double conditionalentropyprs = prs*(Math.log(ps/prs));
            double conditionalentropyprt = prt*(Math.log(pt/prt));
            double conditionalentropypru = pru*(Math.log(pu/pru));
            double conditionalentropyprv = prv*(Math.log(pv/prv));
            double conditionalentropyprw = prw*(Math.log(pw/prw));
            double conditionalentropypry = pry*(Math.log(py/pry));
            double conditionalentropyprz = prz*(Math.log(pz/prz));
            double conditionalentropyprdot = prdot*(Math.log(pdot/prdot));
            double conditionalentropyprcomma = prcomma*(Math.log(pcomma/prcomma));
            double conditionalentropyprvacuum = prvacuum*(Math.log(pvacuum/prvacuum));
            double conditionalentropypsa = psa*(Math.log(pa/psa));
            double conditionalentropypsb = psb*(Math.log(pb/psb));
            double conditionalentropypsc = psc*(Math.log(pc/psc));
            double conditionalentropypsd = psd*(Math.log(pd/psd));
            double conditionalentropypse = pse*(Math.log(pe/pse));
            double conditionalentropypsf = psf*(Math.log(pf/psf));
            double conditionalentropypsg = psg*(Math.log(pg/psg));
            double conditionalentropypsh = psh*(Math.log(ph/psh));
            double conditionalentropypsi = psi*(Math.log(pi/psi));
            double conditionalentropypsj = psj*(Math.log(pj/psj));
            double conditionalentropypsk = psk*(Math.log(pk/psk));
            double conditionalentropypsl = psl*(Math.log(pl/psl));
            double conditionalentropypsm = psm*(Math.log(pm/psm));
            double conditionalentropypsn = psn*(Math.log(pn/psn));
            double conditionalentropypso = pso*(Math.log(po/pso));
            double conditionalentropypsp = psp*(Math.log(pp/psp));
            double conditionalentropypsq = psq*(Math.log(pq/psq));
            double conditionalentropypsr = psr*(Math.log(pr/psr));
            double conditionalentropypss = pss*(Math.log(ps/pss));
            double conditionalentropypst = pst*(Math.log(pt/pst));
            double conditionalentropypsu = psu*(Math.log(pu/psu));
            double conditionalentropypsv = psv*(Math.log(pv/psv));
            double conditionalentropypsw = psw*(Math.log(pw/psw));
            double conditionalentropypsy = psy*(Math.log(py/psy));
            double conditionalentropypsdot = psdot*(Math.log(pdot/psdot));
            double conditionalentropypscomma = pscomma*(Math.log(pcomma/pscomma));
            double conditionalentropypsvacuum = psvacuum*(Math.log(pvacuum/psvacuum));
            double conditionalentropypta = pta*(Math.log(pa/pta));
            double conditionalentropyptb = ptb*(Math.log(pb/ptb));
            double conditionalentropyptc = ptc*(Math.log(pc/ptc));
            double conditionalentropyptd = ptd*(Math.log(pd/ptd)); 
            double conditionalentropypte = pte*(Math.log(pe/pte));
            double conditionalentropyptf = ptf*(Math.log(pf/ptf));
            double conditionalentropyptg = ptg*(Math.log(pg/ptg));
            double conditionalentropypth = pth*(Math.log(ph/pth));
            double conditionalentropypti = pti*(Math.log(pi/pti));
            double conditionalentropyptj = ptj*(Math.log(pj/ptj));
            double conditionalentropyptk = ptk*(Math.log(pk/ptk));
            double conditionalentropyptl = ptl*(Math.log(pl/ptl));
            double conditionalentropyptm = ptm*(Math.log(pm/ptm));
            double conditionalentropyptn = ptn*(Math.log(pn/ptn));
            double conditionalentropypto = pto*(Math.log(po/pto));
            double conditionalentropyptp = ptp*(Math.log(pp/ptp));
            double conditionalentropyptr = ptr*(Math.log(pr/ptr));
            double conditionalentropypts = pts*(Math.log(ps/pts));
            double conditionalentropyptt = ptt*(Math.log(pt/ptt));
            double conditionalentropyptu = ptu*(Math.log(pu/ptu));
            double conditionalentropyptv = ptv*(Math.log(pv/ptv));
            double conditionalentropyptw = ptw*(Math.log(pw/ptw));
            double conditionalentropypty = pty*(Math.log(py/pty));
            double conditionalentropyptz = ptz*(Math.log(pz/ptz));
            double conditionalentropyptdot = ptdot*(Math.log(pdot/ptdot));
            double conditionalentropyptcomma = ptcomma*(Math.log(pcomma/ptcomma));
            double conditionalentropyptvacuum = ptvacuum*(Math.log(pvacuum/ptvacuum));
            double conditionalentropypua = pua*(Math.log(pa/pua));
            double conditionalentropypub = pub*(Math.log(pb/pub));
            double conditionalentropypuc = puc*(Math.log(pc/puc));
            double conditionalentropypud = pud*(Math.log(pd/pud));
            double conditionalentropypue = pue*(Math.log(pe/pue));
            double conditionalentropypuf = puf*(Math.log(pf/puf));
            double conditionalentropypug = pug*(Math.log(pg/pug));
            double conditionalentropypuh = puh*(Math.log(ph/puh));
            double conditionalentropypui = pai*(Math.log(pi/pui));
            double conditionalentropypuk = puk*(Math.log(pk/puk));
            double conditionalentropypul = pul*(Math.log(pl/pul));
            double conditionalentropypum = pum*(Math.log(pm/pum));
            double conditionalentropypun = pun*(Math.log(pn/pun));
            double conditionalentropypuo = puo*(Math.log(po/puo));
            double conditionalentropypup = pup*(Math.log(pp/pup));
            double conditionalentropypur = pur*(Math.log(pr/pur));
            double conditionalentropypus = pus*(Math.log(ps/pus));
            double conditionalentropyput = put*(Math.log(pt/put));
            double conditionalentropypuu = puu*(Math.log(pu/puu));
            double conditionalentropypuv = puv*(Math.log(pv/puv));
            double conditionalentropypux = pux*(Math.log(px/pux));
            double conditionalentropypuy = puy*(Math.log(py/puy));
            double conditionalentropypuz = puz*(Math.log(pz/puz));
            double conditionalentropypudot = pudot*(Math.log(pdot/pudot));
            double conditionalentropypucomma = pucomma*(Math.log(pcomma/pucomma));
            double conditionalentropypuvacuum = puvacuum*(Math.log(pvacuum/puvacuum));
            double conditionalentropypva = pva*(Math.log(pa/pva));
            double conditionalentropypvd = pvd*(Math.log(pd/pvd));
            double conditionalentropypve = pve*(Math.log(pe/pve));
            double conditionalentropypvi = pvi*(Math.log(pi/pvi));
            double conditionalentropypvl = pvl*(Math.log(pl/pvl));
            double conditionalentropypvo = pvo*(Math.log(po/pvo));
            double conditionalentropypvs = pvs*(Math.log(ps/pvs));
            double conditionalentropypvu = pvu*(Math.log(pu/pvu));
            double conditionalentropypvv = pvv*(Math.log(pv/pvv));
            double conditionalentropypvy = pvy*(Math.log(py/pvy));
            double conditionalentropypvdot = pvdot*(Math.log(pdot/pvdot));
            double conditionalentropypvcomma = pvcomma*(Math.log(pcomma/pvcomma));
            double conditionalentropypvvacuum = pvvacuum*(Math.log(pvacuum/pvvacuum));
            double conditionalentropypwa = pwa*(Math.log(pa/pwa));
            double conditionalentropypwb = pwb*(Math.log(pb/pwb));
            double conditionalentropypwc = pwc*(Math.log(pc/pwc));
            double conditionalentropypwd = pwd*(Math.log(pd/pwd));
            double conditionalentropypwe = pwe*(Math.log(pe/pwe));
            double conditionalentropypwf = pwf*(Math.log(pf/pwf));
            double conditionalentropypwg = pwg*(Math.log(pg/pwg));
            double conditionalentropypwh = pwh*(Math.log(ph/pwh));
            double conditionalentropypwi = pwi*(Math.log(pi/pwi));
            double conditionalentropypwk = pwk*(Math.log(pk/pwk));
            double conditionalentropypwl = pwl*(Math.log(pl/pwl));
            double conditionalentropypwm = pwm*(Math.log(pm/pwm));
            double conditionalentropypwn = pwn*(Math.log(pn/pwn));
            double conditionalentropypwo = pwo*(Math.log(po/pwo));
            double conditionalentropypwp = pwp*(Math.log(pp/pwp));
            double conditionalentropypwr = pwr*(Math.log(pr/pwr));
            double conditionalentropypws = pws*(Math.log(ps/pws));
            double conditionalentropypwt = pwt*(Math.log(pt/pwt));
            double conditionalentropypwu = pwu*(Math.log(pu/pwu));
            double conditionalentropypww = pww*(Math.log(pw/pww));
            double conditionalentropypwy = pwy*(Math.log(py/pwy));
            double conditionalentropypwdot = pwdot*(Math.log(pdot/pwdot));
            double conditionalentropypwcomma = pwcomma*(Math.log(pcomma/pwcomma));
            double conditionalentropypwvacuum = pwvacuum*(Math.log(pvacuum/pwvacuum));
            double conditionalentropypxa = pxa*(Math.log(pa/pxa));
            double conditionalentropypxc = pxc*(Math.log(pc/pxc));
            double conditionalentropypxe = pxe*(Math.log(pe/pxe));
            double conditionalentropypxh = pxh*(Math.log(ph/pxh));
            double conditionalentropypxi = pxi*(Math.log(pi/pxi));
            double conditionalentropypxo = pxo*(Math.log(po/pxo));
            double conditionalentropypxp = pxp*(Math.log(pp/pxp));
            double conditionalentropypxt = pxt*(Math.log(pt/pxt));
            double conditionalentropypxu = pxu*(Math.log(pu/pxu));
            double conditionalentropypxy = pxy*(Math.log(py/pxy));
            double conditionalentropypxdot = pxdot*(Math.log(pdot/pxdot));
            double conditionalentropypxcomma = pxcomma*(Math.log(pcomma/pxcomma));
            double conditionalentropypxvacuum = pxvacuum*(Math.log(pvacuum/pxvacuum));
            double conditionalentropypya = pya*(Math.log(pa/pya));
            double conditionalentropypyb = pyb*(Math.log(pb/pyb));
            double conditionalentropypyc = pyc*(Math.log(pc/pyc));
            double conditionalentropypyd = pyd*(Math.log(pd/pyd));
            double conditionalentropypye = pye*(Math.log(pe/pye));
            double conditionalentropypyf = pyf*(Math.log(pf/pyf));
            double conditionalentropypyg = pyg*(Math.log(pg/pyg));
            double conditionalentropypyh = pyh*(Math.log(ph/pyh));
            double conditionalentropypyi = pyi*(Math.log(pi/pyi));
            double conditionalentropypyj = pyj*(Math.log(pj/pyj));
            double conditionalentropypyl = pyl*(Math.log(pl/pyl));
            double conditionalentropypym = pym*(Math.log(pm/pym));
            double conditionalentropypyn = pyn*(Math.log(pn/pyn));
            double conditionalentropypyo = pyo*(Math.log(po/pyo));
            double conditionalentropypyp = pyp*(Math.log(pp/pyp));
            double conditionalentropypyr = pyr*(Math.log(pr/pyr));
            double conditionalentropypys = pys*(Math.log(ps/pys));
            double conditionalentropypyt = pyt*(Math.log(pt/pyt));
            double conditionalentropypyu = pyu*(Math.log(pu/pyu));
            double conditionalentropypyv = pyv*(Math.log(pv/pyv));
            double conditionalentropypyw = pyw*(Math.log(pw/pyw));
            double conditionalentropypyx = pyx*(Math.log(px/pyx));
            double conditionalentropypydot = pydot*(Math.log(pdot/pydot));
            double conditionalentropypycomma = pycomma*(Math.log(pcomma/pycomma));
            double conditionalentropypyvacuum = pyvacuum*(Math.log(pvacuum/pyvacuum));
            double conditionalentropypza = pza*(Math.log(pa/pza));
            double conditionalentropypze = pze*(Math.log(pe/pze));
            double conditionalentropypzh = pzh*(Math.log(ph/pzh));
            double conditionalentropypzi = pzi*(Math.log(pi/pzi));
            double conditionalentropypzl = pzl*(Math.log(pl/pzl));
            double conditionalentropypzm = pzm*(Math.log(pm/pzm));
            double conditionalentropypzo = pzo*(Math.log(po/pzo));
            double conditionalentropypzy = pzy*(Math.log(py/pzy));
            double conditionalentropypzz = pzz*(Math.log(pz/pzz));
            double conditionalentropypzcomma = pzcomma*(Math.log(pcomma/pzcomma));
            double conditionalentropypzvacuum = pzvacuum*(Math.log(pvacuum/pzvacuum));
            double conditionalentropypdotk = pdotk*(Math.log(pk/pdotk));
            double conditionalentropypdotm = pdotm*(Math.log(pm/pdotm));
            double conditionalentropypdotn = pdotn*(Math.log(pn/pdotn));
            double conditionalentropypdotcomma = pdotcomma*(Math.log(pcomma/pdotcomma));
            double conditionalentropypdotvacuum = pdotvacuum*(Math.log(pvacuum/pdotvacuum));
            double conditionalentropypcommavacuum = pcommavacuum*(Math.log(pvacuum/pcommavacuum));
            double conditionalentropypvacuuma = pvacuuma*(Math.log(pa/pvacuuma));
            double conditionalentropypvacuumb = pvacuumb*(Math.log(pb/pvacuumb));
            double conditionalentropypvacuumc = pvacuumc*(Math.log(pc/pvacuumc));
            double conditionalentropypvacuumd = pvacuumd*(Math.log(pd/pvacuumd));
            double conditionalentropypvacuume = pvacuume*(Math.log(pe/pvacuume));
            double conditionalentropypvacuumf = pvacuumf*(Math.log(pf/pvacuumf));
            double conditionalentropypvacuumg = pvacuumg*(Math.log(pg/pvacuumg));
            double conditionalentropypvacuumh = pvacuumh*(Math.log(ph/pvacuumh));
            double conditionalentropypvacuumi = pvacuumi*(Math.log(pi/pvacuumi));
            double conditionalentropypvacuumj = pvacuumj*(Math.log(pj/pvacuumj));
            double conditionalentropypvacuumk = pvacuumk*(Math.log(pk/pvacuumk));
            double conditionalentropypvacuuml = pvacuuml*(Math.log(pl/pvacuuml));
            double conditionalentropypvacuumm = pvacuumm*(Math.log(pm/pvacuumm));
            double conditionalentropypvacuumn = pvacuumn*(Math.log(pn/pvacuumn));
            double conditionalentropypvacuumo = pvacuumo*(Math.log(po/pvacuumo));
            double conditionalentropypvacuump = pvacuump*(Math.log(pp/pvacuump));
            double conditionalentropypvacuumq = pvacuumq*(Math.log(pq/pvacuumq));
            double conditionalentropypvacuumr = pvacuumr*(Math.log(pr/pvacuumr));
            double conditionalentropypvacuums = pvacuums*(Math.log(ps/pvacuums));
            double conditionalentropypvacuumt = pvacuumt*(Math.log(pt/pvacuumt));
            double conditionalentropypvacuumu = pvacuumu*(Math.log(pu/pvacuumu));
            double conditionalentropypvacuumv = pvacuumv*(Math.log(pv/pvacuumv));
            double conditionalentropypvacuumw = pvacuumw*(Math.log(pw/pvacuumw));
            double conditionalentropypvacuumx = pvacuumx*(Math.log(px/pvacuumx));
            double conditionalentropypvacuumy = pvacuumy*(Math.log(py/pvacuumy));
            double conditionalentropypvacuumz = pvacuumz*(Math.log(pz/pvacuumz));
            double conditionalentropypvacuumdot = pvacuumdot*(Math.log(pdot/pvacuumdot));
            double conditionalentropypvacuumcomma = pvacuumcomma*(Math.log(pcomma/pvacuumcomma));
            double conditionalentropypvacuumvacuum = pvacuumvacuum*(Math.log(pvacuum/pvacuumvacuum));
            
            double sumconditionalentropy = conditionalentropypaa+conditionalentropypab+conditionalentropypac+conditionalentropypad+conditionalentropypae+conditionalentropypaf+conditionalentropypag+conditionalentropypah+conditionalentropypai+conditionalentropypaj+conditionalentropypak+conditionalentropypal+conditionalentropypam+conditionalentropypan+conditionalentropypao+conditionalentropypap+conditionalentropypaq+conditionalentropypar+conditionalentropypas+conditionalentropypat+conditionalentropypau+conditionalentropypav+conditionalentropypaw+conditionalentropypax+conditionalentropypay+conditionalentropypaz+conditionalentropypadot+conditionalentropypacomma+conditionalentropypavacuum
                               +conditionalentropypba+conditionalentropypbb+conditionalentropypbc+conditionalentropypbe+conditionalentropypbf+conditionalentropypbi+conditionalentropypbj+conditionalentropypbl+conditionalentropypbm+conditionalentropypbn+conditionalentropypbo+conditionalentropypbr+conditionalentropypbs+conditionalentropypbt+conditionalentropypbu+conditionalentropypbv+conditionalentropypbw+conditionalentropypby+conditionalentropypbdot+conditionalentropypbcomma+conditionalentropypbvacuum
                               +conditionalentropypca+conditionalentropypcc+conditionalentropypcd+conditionalentropypce+conditionalentropypch+conditionalentropypci+conditionalentropypck+conditionalentropypcl+conditionalentropypco+conditionalentropypcq+conditionalentropypcr+conditionalentropypcs+conditionalentropypct+conditionalentropypcu+conditionalentropypcv+conditionalentropypcy+conditionalentropypcdot+conditionalentropypccomma+conditionalentropypcvacuum
                               +conditionalentropypda+conditionalentropypdb+conditionalentropypdc+conditionalentropypdd+conditionalentropypde+conditionalentropypdf+conditionalentropypdg+conditionalentropypdh+conditionalentropypdi+conditionalentropypdj+conditionalentropypdk+conditionalentropypdl+conditionalentropypdm+conditionalentropypdn+conditionalentropypdo+conditionalentropypdp+conditionalentropypdr+conditionalentropypds+conditionalentropypdt+conditionalentropypdu+conditionalentropypdv+conditionalentropypdw+conditionalentropypdy+conditionalentropypddot+conditionalentropypdcomma+conditionalentropypdvacuum
                               +conditionalentropypea+conditionalentropypeb+conditionalentropypec+conditionalentropyped+conditionalentropypee+conditionalentropypef+conditionalentropypeg+conditionalentropypeh+conditionalentropypei+conditionalentropypej+conditionalentropypek+conditionalentropypel+conditionalentropypem+conditionalentropypen+conditionalentropypeo+conditionalentropypep+conditionalentropypeq+conditionalentropyper+conditionalentropypes+conditionalentropypet+conditionalentropypeu+conditionalentropypev+conditionalentropypew+conditionalentropypex+conditionalentropypey+conditionalentropypez+conditionalentropypedot+conditionalentropypecomma+conditionalentropypevacuum
                               +conditionalentropypfa+conditionalentropypfb+conditionalentropypfc+conditionalentropypfe+conditionalentropypff+conditionalentropypfh+conditionalentropypfi+conditionalentropypfj+conditionalentropypfl+conditionalentropypfn+conditionalentropypfo+conditionalentropypfr+conditionalentropypfs+conditionalentropypft+conditionalentropypfu+conditionalentropypfw+conditionalentropypfy+conditionalentropypfdot+conditionalentropypfcomma+conditionalentropypfvacuum
                               +conditionalentropypga+conditionalentropypgb+conditionalentropypgd+conditionalentropypge+conditionalentropypgf+conditionalentropypgg+conditionalentropypgh+conditionalentropypgi+conditionalentropypgj+conditionalentropypgl+conditionalentropypgm+conditionalentropypgn+conditionalentropypgo+conditionalentropypgp+conditionalentropypgr+conditionalentropypgs+conditionalentropypgt+conditionalentropypgu+conditionalentropypgv+conditionalentropypgy+conditionalentropypgz+conditionalentropypgdot+conditionalentropypgcomma+conditionalentropypgvacuum
                               +conditionalentropypha+conditionalentropyphb+conditionalentropyphc+conditionalentropyphd+conditionalentropyphe+conditionalentropyphf+conditionalentropyphh+conditionalentropyphi+conditionalentropyphl+conditionalentropyphm+conditionalentropyphn+conditionalentropypho+conditionalentropyphp+conditionalentropyphq+conditionalentropyphr+conditionalentropypht+conditionalentropyphu+conditionalentropyphv+conditionalentropyphw+conditionalentropyphy+conditionalentropyphdot+conditionalentropyphcomma+conditionalentropyphvacuum
                               +conditionalentropypia+conditionalentropypib+conditionalentropypic+conditionalentropypid+conditionalentropypie+conditionalentropypif+conditionalentropypig+conditionalentropypih+conditionalentropypii+conditionalentropypij+conditionalentropypik+conditionalentropypil+conditionalentropypim+conditionalentropypin+conditionalentropypio+conditionalentropypip+conditionalentropypiq+conditionalentropypir+conditionalentropypis+conditionalentropypit+conditionalentropypiu+conditionalentropypiv+conditionalentropypix+conditionalentropypiz+conditionalentropypidot+conditionalentropypicomma+conditionalentropypivacuum
                               +conditionalentropypja+conditionalentropypje+conditionalentropypji+conditionalentropypjo+conditionalentropypju+conditionalentropypjdot
                               +conditionalentropypka+conditionalentropypkb+conditionalentropypkc+conditionalentropypkd+conditionalentropypke+conditionalentropypkf+conditionalentropypkg+conditionalentropypkh+conditionalentropypki+conditionalentropypkj+conditionalentropypkk+conditionalentropypkl+conditionalentropypkm+conditionalentropypkn+conditionalentropypko+conditionalentropypkp+conditionalentropypkr+conditionalentropypks+conditionalentropypkt+conditionalentropypku+conditionalentropypkv+conditionalentropypkw+conditionalentropypky+conditionalentropypkdot+conditionalentropypkcomma+conditionalentropypkvacuum
                               +conditionalentropypla+conditionalentropyplb+conditionalentropyplc+conditionalentropypld+conditionalentropyple+conditionalentropyplf+conditionalentropyplg+conditionalentropyplh+conditionalentropypli+conditionalentropyplj+conditionalentropyplk+conditionalentropypll+conditionalentropyplm+conditionalentropypln+conditionalentropyplo+conditionalentropyplp+conditionalentropyplr+conditionalentropypls+conditionalentropyplt+conditionalentropyplu+conditionalentropyplw+conditionalentropyplv+conditionalentropyply+conditionalentropyplz+conditionalentropypldot+conditionalentropyplcomma+conditionalentropyplvacuum
                               +conditionalentropypma+conditionalentropypmb+conditionalentropypmc+conditionalentropypmd+conditionalentropypme+conditionalentropypmf+conditionalentropypmh+conditionalentropypmi+conditionalentropypml+conditionalentropypmm+conditionalentropypmn+conditionalentropypmo+conditionalentropypmp+conditionalentropypmr+conditionalentropypms+conditionalentropypmt+conditionalentropypmu+conditionalentropypmw+conditionalentropypmy+conditionalentropypmdot+conditionalentropypmcomma+conditionalentropypmvacuum
                               +conditionalentropypna+conditionalentropypnb+conditionalentropypnc+conditionalentropypnd+conditionalentropypne+conditionalentropypnf+conditionalentropypng+conditionalentropypnh+conditionalentropypni+conditionalentropypnj+conditionalentropypnk+conditionalentropypnl+conditionalentropypnm+conditionalentropypnn+conditionalentropypno+conditionalentropypnp+conditionalentropypnq+conditionalentropypnr+conditionalentropypns+conditionalentropypnt+conditionalentropypnu+conditionalentropypnv+conditionalentropypnw+conditionalentropypnx+conditionalentropypny+conditionalentropypnz+conditionalentropypndot+conditionalentropypncomma+conditionalentropypnvacuum
                               +conditionalentropypoa+conditionalentropypob+conditionalentropypoc+conditionalentropypod+conditionalentropypoe+conditionalentropypof+conditionalentropypog+conditionalentropypoh+conditionalentropypoi+conditionalentropypoj+conditionalentropypok+conditionalentropypol+conditionalentropypom+conditionalentropypon+conditionalentropypoo+conditionalentropypop+conditionalentropypoq+conditionalentropypor+conditionalentropypos+conditionalentropypot+conditionalentropypou+conditionalentropypov+conditionalentropypow+conditionalentropypox+conditionalentropypoy+conditionalentropypoz+conditionalentropypodot+conditionalentropypocomma+conditionalentropypovacuum
                               +conditionalentropyppa+conditionalentropyppb+conditionalentropyppd+conditionalentropyppe+conditionalentropyppf+conditionalentropypph+conditionalentropyppi+conditionalentropyppk+conditionalentropyppl+conditionalentropyppm+conditionalentropyppo+conditionalentropyppp+conditionalentropyppr+conditionalentropypps+conditionalentropyppt+conditionalentropyppu+conditionalentropyppw+conditionalentropyppy+conditionalentropyppdot+conditionalentropyppcomma+conditionalentropyppvacuum
                               +conditionalentropypqs+conditionalentropypqu+conditionalentropypqdot+conditionalentropypqcomma+conditionalentropypqvacuum
                               +conditionalentropypra+conditionalentropyprb+conditionalentropyprc+conditionalentropyprd+conditionalentropypre+conditionalentropyprf+conditionalentropyprg+conditionalentropyprh+conditionalentropypri+conditionalentropyprj+conditionalentropyprk+conditionalentropyprl+conditionalentropyprm+conditionalentropyprn+conditionalentropypro+conditionalentropyprp+conditionalentropyprq+conditionalentropyprr+conditionalentropyprs+conditionalentropyprt+conditionalentropypru+conditionalentropyprv+conditionalentropyprw+conditionalentropypry+conditionalentropyprz+conditionalentropyprdot+conditionalentropyprcomma+conditionalentropyprvacuum
                               +conditionalentropypsa+conditionalentropypsb+conditionalentropypsc+conditionalentropypsd+conditionalentropypse+conditionalentropypsf+conditionalentropypsg+conditionalentropypsh+conditionalentropypsi+conditionalentropypsj+conditionalentropypsk+conditionalentropypsl+conditionalentropypsm+conditionalentropypsn+conditionalentropypso+conditionalentropypsp+conditionalentropypsq+conditionalentropypsr+conditionalentropypss+conditionalentropypst+conditionalentropypsu+conditionalentropypsv+conditionalentropypsw+conditionalentropypsy+conditionalentropypsdot+conditionalentropypscomma+conditionalentropypsvacuum
                               +conditionalentropypta+conditionalentropyptb+conditionalentropyptc+conditionalentropyptd+conditionalentropypte+conditionalentropyptf+conditionalentropyptg+conditionalentropypth+conditionalentropypti+conditionalentropyptj+conditionalentropyptk+conditionalentropyptl+conditionalentropyptm+conditionalentropyptn+conditionalentropypto+conditionalentropyptp+conditionalentropyptr+conditionalentropypts+conditionalentropyptt+conditionalentropyptu+conditionalentropyptv+conditionalentropyptw+conditionalentropypty+conditionalentropyptz+conditionalentropyptdot+conditionalentropyptcomma+conditionalentropyptvacuum
                               +conditionalentropypua+conditionalentropypub+conditionalentropypuc+conditionalentropypud+conditionalentropypue+conditionalentropypuf+conditionalentropypug+conditionalentropypuh+conditionalentropypui+conditionalentropypuk+conditionalentropypul+conditionalentropypum+conditionalentropypun+conditionalentropypuo+conditionalentropypup+conditionalentropypur+conditionalentropypus+conditionalentropyput+conditionalentropypuu+conditionalentropypuv+conditionalentropypux+conditionalentropypuy+conditionalentropypuz+conditionalentropypudot+conditionalentropypucomma+conditionalentropypuvacuum
                               +conditionalentropypva+conditionalentropypvd+conditionalentropypve+conditionalentropypvi+conditionalentropypvl+conditionalentropypvo+conditionalentropypvs+conditionalentropypvu+conditionalentropypvv+conditionalentropypvy+conditionalentropypvdot+conditionalentropypvcomma+conditionalentropypvvacuum
                               +conditionalentropypwa+conditionalentropypwb+conditionalentropypwc+conditionalentropypwd+conditionalentropypwe+conditionalentropypwf+conditionalentropypwg+conditionalentropypwh+conditionalentropypwi+conditionalentropypwk+conditionalentropypwl+conditionalentropypwm+conditionalentropypwn+conditionalentropypwo+conditionalentropypwp+conditionalentropypwr+conditionalentropypws+conditionalentropypwt+conditionalentropypwu+conditionalentropypww+conditionalentropypwy+conditionalentropypwdot+conditionalentropypwcomma+conditionalentropypwvacuum
                               +conditionalentropypxa+conditionalentropypxc+conditionalentropypxe+conditionalentropypxh+conditionalentropypxi+conditionalentropypxo+conditionalentropypxp+conditionalentropypxt+conditionalentropypxu+conditionalentropypxy+conditionalentropypxdot+conditionalentropypxcomma+conditionalentropypxvacuum
                               +conditionalentropypya+conditionalentropypyb+conditionalentropypyc+conditionalentropypyd+conditionalentropypye+conditionalentropypyf+conditionalentropypyg+conditionalentropypyh+conditionalentropypyi+conditionalentropypyj+conditionalentropypyl+conditionalentropypym+conditionalentropypyn+conditionalentropypyo+conditionalentropypyp+conditionalentropypyr+conditionalentropypys+conditionalentropypyt+conditionalentropypyu+conditionalentropypyv+conditionalentropypyw+conditionalentropypyx+conditionalentropypydot+conditionalentropypycomma+conditionalentropypyvacuum
                               +conditionalentropypza+conditionalentropypze+conditionalentropypzh+conditionalentropypzi+conditionalentropypzl+conditionalentropypzm+conditionalentropypzo+conditionalentropypzy+conditionalentropypzz+conditionalentropypzcomma+conditionalentropypzvacuum
                               +conditionalentropypdotk+conditionalentropypdotm+conditionalentropypdotn+conditionalentropypdotcomma+conditionalentropypdotvacuum+conditionalentropypcommavacuum
                               +conditionalentropypvacuuma+conditionalentropypvacuumb+conditionalentropypvacuumc+conditionalentropypvacuumd+conditionalentropypvacuume+conditionalentropypvacuumf+conditionalentropypvacuumg+conditionalentropypvacuumh+conditionalentropypvacuumi+conditionalentropypvacuumj+conditionalentropypvacuumk+conditionalentropypvacuuml+conditionalentropypvacuumm+conditionalentropypvacuumn+conditionalentropypvacuumo+conditionalentropypvacuump+conditionalentropypvacuumq+conditionalentropypvacuumr+conditionalentropypvacuums+conditionalentropypvacuumt+conditionalentropypvacuumu+conditionalentropypvacuumv+conditionalentropypvacuumw+conditionalentropypvacuumx+conditionalentropypvacuumy+conditionalentropypvacuumz+conditionalentropypvacuumdot+conditionalentropypvacuumcomma+conditionalentropypvacuumvacuum;                   
            
            System.out.println("\nP(aa)*log(P(a)/P(aa)) = " + conditionalentropypaa );
            System.out.println("\nP(ab)*log(P(b)/P(ab)) = " + conditionalentropypab );
            System.out.println("\nP(ac)*log(P(c)/P(ac)) = " + conditionalentropypac );
            System.out.println("\nP(ad)*log(P(d)/P(ad)) = " + conditionalentropypad );
            System.out.println("\nP(ae)*log(P(e)/P(ae)) = " + conditionalentropypae );
            System.out.println("\nP(af)*log(P(f)/P(af)) = " + conditionalentropypaf );
            System.out.println("\nP(ag)*log(P(g)/P(ag)) = " + conditionalentropypag );
            System.out.println("\nP(ah)*log(P(h)/P(ah)) = " + conditionalentropypah );
            System.out.println("\nP(ai)*log(P(i)/P(ai)) = " + conditionalentropypai );
            System.out.println("\nP(aj)*log(P(j)/P(aj)) = " + conditionalentropypaj );
            System.out.println("\nP(ak)*log(P(k)/P(ak)) = " + conditionalentropypak );
            System.out.println("\nP(al)*log(P(l)/P(al)) = " + conditionalentropypal );
            System.out.println("\nP(am)*log(P(m)/P(am)) = " + conditionalentropypam );
            System.out.println("\nP(an)*log(P(n)/P(an)) = " + conditionalentropypan );
            System.out.println("\nP(ao)*log(P(o)/P(ao)) = " + conditionalentropypao );
            System.out.println("\nP(ap)*log(P(p)/P(ap)) = " + conditionalentropypap );
            System.out.println("\nP(aq)*log(P(q)/P(aq)) = " + conditionalentropypaq );
            System.out.println("\nP(ar)*log(P(r)/P(ar)) = " + conditionalentropypar );
            System.out.println("\nP(as)*log(P(s)/P(as)) = " + conditionalentropypas );
            System.out.println("\nP(at)*log(P(t)/P(at)) = " + conditionalentropypat );
            System.out.println("\nP(au)*log(P(u)/P(au)) = " + conditionalentropypau );
            System.out.println("\nP(av)*log(P(v)/P(av)) = " + conditionalentropypav );
            System.out.println("\nP(aw)*log(P(w)/P(aw)) = " + conditionalentropypaw );
            System.out.println("\nP(ax)*log(P(x)/P(ax)) = " + conditionalentropypax );
            System.out.println("\nP(ay)*log(P(y)/P(ay)) = " + conditionalentropypay );
            System.out.println("\nP(az)*log(P(z)/P(az)) = " + conditionalentropypaz );
            System.out.println("\nP(a.)*log(P(.)/P(a.)) = " + conditionalentropypadot );
            System.out.println("\nP(a,)*log(P(,)/P(a,)) = " + conditionalentropypacomma );
            System.out.println("\nP(avacuum)*log(P(vacuum)/P(avacuum)) = " + conditionalentropypavacuum );
            System.out.println("\nP(ba)*log(P(a)/P(ba)) = " + conditionalentropypba );
            System.out.println("\nP(bb)*log(P(b)/P(bb)) = " + conditionalentropypbb );
            System.out.println("\nP(bc)*log(P(c)/P(bc)) = " + conditionalentropypbc );
            System.out.println("\nP(be)*log(P(e)/P(be)) = " + conditionalentropypbe );
            System.out.println("\nP(bf)*log(P(f)/P(bf)) = " + conditionalentropypbf );
            System.out.println("\nP(bi)*log(P(i)/P(bi)) = " + conditionalentropypbi );
            System.out.println("\nP(bj)*log(P(j)/P(bj)) = " + conditionalentropypbj );
            System.out.println("\nP(bl)*log(P(l)/P(bl)) = " + conditionalentropypbl );
            System.out.println("\nP(bm)*log(P(m)/P(bm)) = " + conditionalentropypbm );
            System.out.println("\nP(bn)*log(P(n)/P(bn)) = " + conditionalentropypbn );
            System.out.println("\nP(bo)*log(P(o)/P(bo)) = " + conditionalentropypbo );
            System.out.println("\nP(br)*log(P(r)/P(br)) = " + conditionalentropypbr );
            System.out.println("\nP(bs)*log(P(s)/P(bs)) = " + conditionalentropypbs );
            System.out.println("\nP(bt)*log(P(t)/P(bt)) = " + conditionalentropypbt );
            System.out.println("\nP(bu)*log(P(u)/P(bu)) = " + conditionalentropypbu );
            System.out.println("\nP(bv)*log(P(v)/P(bv)) = " + conditionalentropypbv );
            System.out.println("\nP(bw)*log(P(w)/P(bw)) = " + conditionalentropypbw );
            System.out.println("\nP(by)*log(P(y)/P(by)) = " + conditionalentropypby );
            System.out.println("\nP(b.)*log(P(.)/P(b.)) = " + conditionalentropypbdot );
            System.out.println("\nP(b,)*log(P(,)/P(b,)) = " + conditionalentropypbcomma );
            System.out.println("\nP(bvacuum)*log(P(vacuum)/P(bvacuum)) = " + conditionalentropypbvacuum );
            System.out.println("\nP(ca)*log(P(a)/P(ca)) = " + conditionalentropypca );
            System.out.println("\nP(cc)*log(P(c)/P(cc)) = " + conditionalentropypcc );
            System.out.println("\nP(cd)*log(P(d)/P(cd)) = " + conditionalentropypcd );
            System.out.println("\nP(ce)*log(P(e)/P(ce)) = " + conditionalentropypce );
            System.out.println("\nP(ch)*log(P(h)/P(ch)) = " + conditionalentropypch );
            System.out.println("\nP(ci)*log(P(i)/P(ci)) = " + conditionalentropypci );
            System.out.println("\nP(ck)*log(P(k)/P(ck)) = " + conditionalentropypck );
            System.out.println("\nP(cl)*log(P(l)/P(cl)) = " + conditionalentropypcl );
            System.out.println("\nP(co)*log(P(o)/P(co)) = " + conditionalentropypco );
            System.out.println("\nP(cq)*log(P(q)/P(cq)) = " + conditionalentropypcq );
            System.out.println("\nP(cr)*log(P(r)/P(cr)) = " + conditionalentropypcr );
            System.out.println("\nP(cs)*log(P(s)/P(cs)) = " + conditionalentropypcs );
            System.out.println("\nP(ct)*log(P(t)/P(ct)) = " + conditionalentropypct );
            System.out.println("\nP(cu)*log(P(u)/P(cu)) = " + conditionalentropypcu );
            System.out.println("\nP(cv)*log(P(v)/P(cv)) = " + conditionalentropypcv );
            System.out.println("\nP(cy)*log(P(y)/P(cy)) = " + conditionalentropypcy );
            System.out.println("\nP(c.)*log(P(.)/P(c.)) = " + conditionalentropypcdot );
            System.out.println("\nP(c,)*log(P(,)/P(c,)) = " + conditionalentropypccomma );
            System.out.println("\nP(cvacuum)*log(P(vacuum)/P(cvacuum)) = " + conditionalentropypcvacuum );
            System.out.println("\nP(da)*log(P(a)/P(da)) = " + conditionalentropypda );
            System.out.println("\nP(db)*log(P(b)/P(db)) = " + conditionalentropypdb );
            System.out.println("\nP(dc)*log(P(c)/P(dc)) = " + conditionalentropypdc );
            System.out.println("\nP(dd)*log(P(d)/P(dd)) = " + conditionalentropypdd );
            System.out.println("\nP(de)*log(P(e)/P(de)) = " + conditionalentropypde );
            System.out.println("\nP(df)*log(P(f)/P(df)) = " + conditionalentropypdf );
            System.out.println("\nP(dg)*log(P(g)/P(dg)) = " + conditionalentropypdg );
            System.out.println("\nP(dh)*log(P(h)/P(dh)) = " + conditionalentropypdh );
            System.out.println("\nP(di)*log(P(i)/P(di)) = " + conditionalentropypdi );
            System.out.println("\nP(dj)*log(P(j)/P(dj)) = " + conditionalentropypdj );
            System.out.println("\nP(dk)*log(P(k)/P(dk)) = " + conditionalentropypdk );
            System.out.println("\nP(dl)*log(P(l)/P(dl)) = " + conditionalentropypdl );
            System.out.println("\nP(dm)*log(P(m)/P(dm)) = " + conditionalentropypdm );
            System.out.println("\nP(dn)*log(P(n)/P(dn)) = " + conditionalentropypdn );
            System.out.println("\nP(do)*log(P(o)/P(do)) = " + conditionalentropypdo );
            System.out.println("\nP(dp)*log(P(p)/P(dp)) = " + conditionalentropypdp );
            System.out.println("\nP(dr)*log(P(r)/P(dr)) = " + conditionalentropypdr );
            System.out.println("\nP(ds)*log(P(s)/P(ds)) = " + conditionalentropypds );
            System.out.println("\nP(dt)*log(P(t)/P(dt)) = " + conditionalentropypdt );
            System.out.println("\nP(du)*log(P(u)/P(du)) = " + conditionalentropypdu );
            System.out.println("\nP(dv)*log(P(v)/P(dv)) = " + conditionalentropypdv );
            System.out.println("\nP(dw)*log(P(w)/P(dw)) = " + conditionalentropypdw );
            System.out.println("\nP(dy)*log(P(y)/P(dy)) = " + conditionalentropypdy );
            System.out.println("\nP(d.)*log(P(.)/P(d.)) = " + conditionalentropypddot );
            System.out.println("\nP(d,)*log(P(,)/P(d,)) = " + conditionalentropypdcomma );
            System.out.println("\nP(dvacuum)*log(P(vacuum)/P(dvacuum)) = " + conditionalentropypdvacuum ); 
            System.out.println("\nP(ea)*log(P(a)/P(ea)) = " + conditionalentropypea );
            System.out.println("\nP(eb)*log(P(b)/P(eb)) = " + conditionalentropypeb );
            System.out.println("\nP(ec)*log(P(c)/P(ec)) = " + conditionalentropypec );
            System.out.println("\nP(ed)*log(P(d)/P(ed)) = " + conditionalentropyped );
            System.out.println("\nP(ee)*log(P(e)/P(ee)) = " + conditionalentropypee );
            System.out.println("\nP(ef)*log(P(f)/P(ef)) = " + conditionalentropypef );
            System.out.println("\nP(eg)*log(P(g)/P(eg)) = " + conditionalentropypeg );
            System.out.println("\nP(eh)*log(P(h)/P(eh)) = " + conditionalentropypeh );
            System.out.println("\nP(ei)*log(P(i)/P(ei)) = " + conditionalentropypei );
            System.out.println("\nP(ej)*log(P(j)/P(ej)) = " + conditionalentropypej );
            System.out.println("\nP(ek)*log(P(k)/P(ek)) = " + conditionalentropypek );
            System.out.println("\nP(el)*log(P(l)/P(el)) = " + conditionalentropypel );
            System.out.println("\nP(em)*log(P(m)/P(em)) = " + conditionalentropypem );
            System.out.println("\nP(en)*log(P(n)/P(en)) = " + conditionalentropypen );
            System.out.println("\nP(eo)*log(P(o)/P(eo)) = " + conditionalentropypeo );
            System.out.println("\nP(ep)*log(P(p)/P(ep)) = " + conditionalentropypep );
            System.out.println("\nP(eq)*log(P(q)/P(eq)) = " + conditionalentropypeq );
            System.out.println("\nP(er)*log(P(r)/P(er)) = " + conditionalentropyper );
            System.out.println("\nP(es)*log(P(s)/P(es)) = " + conditionalentropypes );
            System.out.println("\nP(et)*log(P(t)/P(et)) = " + conditionalentropypet );
            System.out.println("\nP(eu)*log(P(u)/P(eu)) = " + conditionalentropypeu );
            System.out.println("\nP(ev)*log(P(v)/P(ev)) = " + conditionalentropypev );
            System.out.println("\nP(ew)*log(P(w)/P(ew)) = " + conditionalentropypew );
            System.out.println("\nP(ex)*log(P(x)/P(ex)) = " + conditionalentropypex );
            System.out.println("\nP(ey)*log(P(y)/P(ey)) = " + conditionalentropypey );
            System.out.println("\nP(ez)*log(P(z)/P(ez)) = " + conditionalentropypez );
            System.out.println("\nP(e.)*log(P(.)/P(e.)) = " + conditionalentropypedot );
            System.out.println("\nP(e,)*log(P(,)/P(e,)) = " + conditionalentropypecomma );
            System.out.println("\nP(evacuum)*log(P(vacuum)/P(evacuum)) = " + conditionalentropypevacuum );           
            System.out.println("\nP(fa)*log(P(a)/P(fa)) = " + conditionalentropypfa );
            System.out.println("\nP(fb)*log(P(b)/P(fb)) = " + conditionalentropypfb );
            System.out.println("\nP(fc)*log(P(c)/P(fc)) = " + conditionalentropypfc );
            System.out.println("\nP(fe)*log(P(e)/P(fe)) = " + conditionalentropypfe );
            System.out.println("\nP(ff)*log(P(f)/P(ff)) = " + conditionalentropypff );
            System.out.println("\nP(fh)*log(P(h)/P(fh)) = " + conditionalentropypfh );
            System.out.println("\nP(fi)*log(P(i)/P(fi)) = " + conditionalentropypfi );
            System.out.println("\nP(fj)*log(P(j)/P(fj)) = " + conditionalentropypfj );
            System.out.println("\nP(fl)*log(P(l)/P(fl)) = " + conditionalentropypfl );
            System.out.println("\nP(fn)*log(P(n)/P(fn)) = " + conditionalentropypfn );
            System.out.println("\nP(fo)*log(P(o)/P(fo)) = " + conditionalentropypfo );
            System.out.println("\nP(fr)*log(P(r)/P(fr)) = " + conditionalentropypfr );
            System.out.println("\nP(fs)*log(P(s)/P(fs)) = " + conditionalentropypfs );
            System.out.println("\nP(ft)*log(P(t)/P(ft)) = " + conditionalentropypft );
            System.out.println("\nP(fu)*log(P(u)/P(fu)) = " + conditionalentropypfu );
            System.out.println("\nP(fw)*log(P(w)/P(fw)) = " + conditionalentropypfw );
            System.out.println("\nP(fy)*log(P(y)/P(fy)) = " + conditionalentropypfy );
            System.out.println("\nP(f.)*log(P(.)/P(f.)) = " + conditionalentropypfdot );
            System.out.println("\nP(f,)*log(P(,)/P(f,)) = " + conditionalentropypfcomma );
            System.out.println("\nP(fvacuum)*log(P(vacuum)/P(fvacuum)) = " + conditionalentropypfvacuum );
            System.out.println("\nP(ga)*log(P(a)/P(ga)) = " + conditionalentropypga );
            System.out.println("\nP(gb)*log(P(b)/P(gb)) = " + conditionalentropypgb );
            System.out.println("\nP(gd)*log(P(d)/P(gd)) = " + conditionalentropypgd );
            System.out.println("\nP(ge)*log(P(e)/P(ge)) = " + conditionalentropypge );
            System.out.println("\nP(gf)*log(P(f)/P(gf)) = " + conditionalentropypgf );
            System.out.println("\nP(gg)*log(P(g)/P(gg)) = " + conditionalentropypgg );
            System.out.println("\nP(gh)*log(P(h)/P(gh)) = " + conditionalentropypgh );
            System.out.println("\nP(gi)*log(P(i)/P(gi)) = " + conditionalentropypgi );
            System.out.println("\nP(gj)*log(P(j)/P(gj)) = " + conditionalentropypgj );
            System.out.println("\nP(gl)*log(P(l)/P(gl)) = " + conditionalentropypgl );
            System.out.println("\nP(gm)*log(P(m)/P(gm)) = " + conditionalentropypgm );
            System.out.println("\nP(gn)*log(P(n)/P(gn)) = " + conditionalentropypgn );
            System.out.println("\nP(go)*log(P(o)/P(go)) = " + conditionalentropypgo );
            System.out.println("\nP(gp)*log(P(p)/P(gp)) = " + conditionalentropypgp );
            System.out.println("\nP(gr)*log(P(r)/P(gr)) = " + conditionalentropypgr );
            System.out.println("\nP(gs)*log(P(s)/P(gs)) = " + conditionalentropypgs );
            System.out.println("\nP(gt)*log(P(t)/P(gt)) = " + conditionalentropypgt );
            System.out.println("\nP(gu)*log(P(u)/P(gu)) = " + conditionalentropypgu );
            System.out.println("\nP(gv)*log(P(v)/P(gv)) = " + conditionalentropypgv );
            System.out.println("\nP(gy)*log(P(y)/P(gy)) = " + conditionalentropypgy );
            System.out.println("\nP(gz)*log(P(z)/P(gz)) = " + conditionalentropypgz );
            System.out.println("\nP(g.)*log(P(.)/P(g.)) = " + conditionalentropypgdot );
            System.out.println("\nP(g,)*log(P(,)/P(g,)) = " + conditionalentropypgcomma );
            System.out.println("\nP(gvacuum)*log(P(vacuum)/P(gvacuum)) = " + conditionalentropypgvacuum );
            System.out.println("\nP(ha)*log(P(a)/P(ha)) = " + conditionalentropypha );
            System.out.println("\nP(hb)*log(P(b)/P(hb)) = " + conditionalentropyphb );
            System.out.println("\nP(hc)*log(P(c)/P(hc)) = " + conditionalentropyphc );
            System.out.println("\nP(hd)*log(P(d)/P(hd)) = " + conditionalentropyphd );
            System.out.println("\nP(he)*log(P(e)/P(he)) = " + conditionalentropyphe );
            System.out.println("\nP(hf)*log(P(f)/P(hf)) = " + conditionalentropyphf );
            System.out.println("\nP(hh)*log(P(h)/P(hh)) = " + conditionalentropyphh );
            System.out.println("\nP(hi)*log(P(i)/P(hi)) = " + conditionalentropyphi );
            System.out.println("\nP(hl)*log(P(l)/P(hl)) = " + conditionalentropyphl );
            System.out.println("\nP(hm)*log(P(m)/P(hm)) = " + conditionalentropyphm );
            System.out.println("\nP(hn)*log(P(n)/P(hn)) = " + conditionalentropyphn );
            System.out.println("\nP(ho)*log(P(o)/P(ho)) = " + conditionalentropypho );
            System.out.println("\nP(hp)*log(P(p)/P(hp)) = " + conditionalentropyphp );
            System.out.println("\nP(hq)*log(P(q)/P(hq)) = " + conditionalentropyphq );
            System.out.println("\nP(hr)*log(P(r)/P(hr)) = " + conditionalentropyphr );
            System.out.println("\nP(ht)*log(P(t)/P(ht)) = " + conditionalentropypht );
            System.out.println("\nP(hu)*log(P(u)/P(hu)) = " + conditionalentropyphu );
            System.out.println("\nP(hv)*log(P(v)/P(hv)) = " + conditionalentropyphv );
            System.out.println("\nP(hw)*log(P(w)/P(hw)) = " + conditionalentropyphw );
            System.out.println("\nP(hy)*log(P(y)/P(hy)) = " + conditionalentropyphy );
            System.out.println("\nP(h.)*log(P(.)/P(h.)) = " + conditionalentropyphdot );
            System.out.println("\nP(h,)*log(P(,)/P(h,)) = " + conditionalentropyphcomma );
            System.out.println("\nP(hvacuum)*log(P(vacuum)/P(hvacuum)) = " + conditionalentropyphvacuum );
            System.out.println("\nP(ia)*log(P(a)/P(ia)) = " + conditionalentropypia );
            System.out.println("\nP(ib)*log(P(b)/P(ib)) = " + conditionalentropypib );
            System.out.println("\nP(ic)*log(P(c)/P(ic)) = " + conditionalentropypic );
            System.out.println("\nP(id)*log(P(d)/P(id)) = " + conditionalentropypid );
            System.out.println("\nP(ie)*log(P(e)/P(ie)) = " + conditionalentropypie );
            System.out.println("\nP(if)*log(P(f)/P(if)) = " + conditionalentropypif );
            System.out.println("\nP(ig)*log(P(g)/P(ig)) = " + conditionalentropypig );
            System.out.println("\nP(ih)*log(P(h)/P(ih)) = " + conditionalentropypih );
            System.out.println("\nP(ii)*log(P(i)/P(ii)) = " + conditionalentropypii );
            System.out.println("\nP(ij)*log(P(j)/P(ij)) = " + conditionalentropypij );
            System.out.println("\nP(ik)*log(P(k)/P(ik)) = " + conditionalentropypik );
            System.out.println("\nP(il)*log(P(l)/P(il)) = " + conditionalentropypil );
            System.out.println("\nP(im)*log(P(m)/P(im)) = " + conditionalentropypim );
            System.out.println("\nP(in)*log(P(n)/P(in)) = " + conditionalentropypin );
            System.out.println("\nP(io)*log(P(o)/P(io)) = " + conditionalentropypio );
            System.out.println("\nP(ip)*log(P(p)/P(ip)) = " + conditionalentropypip );
            System.out.println("\nP(iq)*log(P(q)/P(iq)) = " + conditionalentropypiq );
            System.out.println("\nP(ir)*log(P(r)/P(ir)) = " + conditionalentropypir );
            System.out.println("\nP(is)*log(P(s)/P(is)) = " + conditionalentropypis );
            System.out.println("\nP(it)*log(P(t)/P(it)) = " + conditionalentropypit );
            System.out.println("\nP(iu)*log(P(u)/P(iu)) = " + conditionalentropypiu );
            System.out.println("\nP(iv)*log(P(v)/P(iv)) = " + conditionalentropypiv );
            System.out.println("\nP(ix)*log(P(x)/P(ix)) = " + conditionalentropypix );
            System.out.println("\nP(iz)*log(P(z)/P(iz)) = " + conditionalentropypiz );
            System.out.println("\nP(i.)*log(P(.)/P(i.)) = " + conditionalentropypidot );
            System.out.println("\nP(i,)*log(P(,)/P(i,)) = " + conditionalentropypicomma );
            System.out.println("\nP(ivacuum)*log(P(vacuum)/P(ivacuum)) = " + conditionalentropypivacuum ); 
            System.out.println("\nP(ja)*log(P(a)/P(ja)) = " + conditionalentropypja );
            System.out.println("\nP(je)*log(P(e)/P(je)) = " + conditionalentropypje );
            System.out.println("\nP(ji)*log(P(i)/P(ji)) = " + conditionalentropypji );
            System.out.println("\nP(jo)*log(P(o)/P(jo)) = " + conditionalentropypjo );
            System.out.println("\nP(ju)*log(P(u)/P(ju)) = " + conditionalentropypju );
            System.out.println("\nP(j.)*log(P(.)/P(j.)) = " + conditionalentropypjdot );
            System.out.println("\nP(ka)*log(P(a)/P(ka)) = " + conditionalentropypka );
            System.out.println("\nP(kb)*log(P(b)/P(kb)) = " + conditionalentropypkb );
            System.out.println("\nP(kc)*log(P(c)/P(kc)) = " + conditionalentropypkc );
            System.out.println("\nP(kd)*log(P(d)/P(kd)) = " + conditionalentropypkd );
            System.out.println("\nP(ke)*log(P(e)/P(ke)) = " + conditionalentropypke );
            System.out.println("\nP(kf)*log(P(f)/P(kf)) = " + conditionalentropypkf );
            System.out.println("\nP(kg)*log(P(g)/P(kg)) = " + conditionalentropypkg );
            System.out.println("\nP(kh)*log(P(h)/P(kh)) = " + conditionalentropypkh );
            System.out.println("\nP(ki)*log(P(i)/P(ki)) = " + conditionalentropypki );
            System.out.println("\nP(kj)*log(P(j)/P(kj)) = " + conditionalentropypkj );
            System.out.println("\nP(kk)*log(P(k)/P(kk)) = " + conditionalentropypkk );
            System.out.println("\nP(kl)*log(P(l)/P(kl)) = " + conditionalentropypkl );
            System.out.println("\nP(km)*log(P(m)/P(km)) = " + conditionalentropypkm );
            System.out.println("\nP(kn)*log(P(n)/P(kn)) = " + conditionalentropypkn );
            System.out.println("\nP(ko)*log(P(o)/P(ko)) = " + conditionalentropypko );
            System.out.println("\nP(kp)*log(P(p)/P(kp)) = " + conditionalentropypkp );
            System.out.println("\nP(kr)*log(P(r)/P(kr)) = " + conditionalentropypkr );
            System.out.println("\nP(ks)*log(P(s)/P(ks)) = " + conditionalentropypks );
            System.out.println("\nP(kt)*log(P(t)/P(kt)) = " + conditionalentropypkt );
            System.out.println("\nP(ku)*log(P(u)/P(ku)) = " + conditionalentropypku );
            System.out.println("\nP(kv)*log(P(v)/P(kv)) = " + conditionalentropypkv );
            System.out.println("\nP(kw)*log(P(w)/P(kw)) = " + conditionalentropypkw );
            System.out.println("\nP(ky)*log(P(y)/P(ky)) = " + conditionalentropypky );
            System.out.println("\nP(k.)*log(P(.)/P(k.)) = " + conditionalentropypkdot );
            System.out.println("\nP(k,)*log(P(,)/P(k,)) = " + conditionalentropypkcomma );
            System.out.println("\nP(avacuum)*log(P(vacuum)/P(kvacuum)) = " + conditionalentropypkvacuum );
            System.out.println("\nP(la)*log(P(a)/P(la)) = " + conditionalentropypla );
            System.out.println("\nP(lb)*log(P(b)/P(lb)) = " + conditionalentropyplb );
            System.out.println("\nP(lc)*log(P(c)/P(lc)) = " + conditionalentropyplc );
            System.out.println("\nP(ld)*log(P(d)/P(ld)) = " + conditionalentropypld );
            System.out.println("\nP(le)*log(P(e)/P(le)) = " + conditionalentropyple );
            System.out.println("\nP(lf)*log(P(f)/P(lf)) = " + conditionalentropyplf );
            System.out.println("\nP(lg)*log(P(g)/P(lg)) = " + conditionalentropyplg );
            System.out.println("\nP(lh)*log(P(h)/P(lh)) = " + conditionalentropyplh );
            System.out.println("\nP(li)*log(P(i)/P(li)) = " + conditionalentropypli );
            System.out.println("\nP(lj)*log(P(j)/P(lj)) = " + conditionalentropyplj );
            System.out.println("\nP(lk)*log(P(k)/P(lk)) = " + conditionalentropyplk );
            System.out.println("\nP(ll)*log(P(l)/P(ll)) = " + conditionalentropypll );
            System.out.println("\nP(lm)*log(P(m)/P(lm)) = " + conditionalentropyplm );
            System.out.println("\nP(ln)*log(P(n)/P(ln)) = " + conditionalentropypln );
            System.out.println("\nP(lo)*log(P(o)/P(lo)) = " + conditionalentropyplo );
            System.out.println("\nP(lp)*log(P(p)/P(lp)) = " + conditionalentropyplp );
            System.out.println("\nP(lr)*log(P(r)/P(lr)) = " + conditionalentropyplr );
            System.out.println("\nP(ls)*log(P(s)/P(ls)) = " + conditionalentropypls );
            System.out.println("\nP(lt)*log(P(t)/P(lt)) = " + conditionalentropyplt );
            System.out.println("\nP(lu)*log(P(u)/P(lu)) = " + conditionalentropyplu );
            System.out.println("\nP(lv)*log(P(v)/P(lv)) = " + conditionalentropyplv );
            System.out.println("\nP(lw)*log(P(w)/P(lw)) = " + conditionalentropyplw );
            System.out.println("\nP(ly)*log(P(y)/P(ly)) = " + conditionalentropyply );
            System.out.println("\nP(lz)*log(P(z)/P(lz)) = " + conditionalentropyplz );
            System.out.println("\nP(l.)*log(P(.)/P(l.)) = " + conditionalentropypldot );
            System.out.println("\nP(l,)*log(P(,)/P(l,)) = " + conditionalentropyplcomma );
            System.out.println("\nP(lvacuum)*log(P(vacuum)/P(lvacuum)) = " + conditionalentropyplvacuum );
            System.out.println("\nP(ma)*log(P(a)/P(ma)) = " + conditionalentropypma );
            System.out.println("\nP(mb)*log(P(b)/P(mb)) = " + conditionalentropypmb );
            System.out.println("\nP(mc)*log(P(c)/P(mc)) = " + conditionalentropypmc );
            System.out.println("\nP(md)*log(P(d)/P(md)) = " + conditionalentropypmd );
            System.out.println("\nP(me)*log(P(e)/P(me)) = " + conditionalentropypme );
            System.out.println("\nP(mf)*log(P(f)/P(mf)) = " + conditionalentropypmf );
            System.out.println("\nP(mh)*log(P(h)/P(mh)) = " + conditionalentropypmh );
            System.out.println("\nP(mi)*log(P(i)/P(mi)) = " + conditionalentropypmi );
            System.out.println("\nP(ml)*log(P(l)/P(ml)) = " + conditionalentropypml );
            System.out.println("\nP(mm)*log(P(m)/P(mm)) = " + conditionalentropypmm );
            System.out.println("\nP(mn)*log(P(n)/P(mn)) = " + conditionalentropypmn );
            System.out.println("\nP(mo)*log(P(o)/P(mo)) = " + conditionalentropypmo );
            System.out.println("\nP(mp)*log(P(p)/P(mp)) = " + conditionalentropypmp );
            System.out.println("\nP(mr)*log(P(r)/P(mr)) = " + conditionalentropypmr );
            System.out.println("\nP(ms)*log(P(s)/P(ms)) = " + conditionalentropypms );
            System.out.println("\nP(mt)*log(P(t)/P(mt)) = " + conditionalentropypmt );
            System.out.println("\nP(mu)*log(P(u)/P(mu)) = " + conditionalentropypmu );
            System.out.println("\nP(mw)*log(P(w)/P(mw)) = " + conditionalentropypmw );
            System.out.println("\nP(my)*log(P(y)/P(my)) = " + conditionalentropypmy );
            System.out.println("\nP(m.)*log(P(.)/P(m.)) = " + conditionalentropypmdot );
            System.out.println("\nP(m,)*log(P(,)/P(m,)) = " + conditionalentropypmcomma );
            System.out.println("\nP(mvacuum)*log(P(vacuum)/P(mvacuum)) = " + conditionalentropypmvacuum );
            System.out.println("\nP(na)*log(P(a)/P(na)) = " + conditionalentropypna );
            System.out.println("\nP(nb)*log(P(b)/P(nb)) = " + conditionalentropypnb );
            System.out.println("\nP(nc)*log(P(c)/P(nc)) = " + conditionalentropypnc );
            System.out.println("\nP(nd)*log(P(d)/P(nd)) = " + conditionalentropypnd );
            System.out.println("\nP(ne)*log(P(e)/P(ne)) = " + conditionalentropypne );
            System.out.println("\nP(nf)*log(P(f)/P(nf)) = " + conditionalentropypnf );
            System.out.println("\nP(ng)*log(P(g)/P(ng)) = " + conditionalentropypng );
            System.out.println("\nP(nh)*log(P(h)/P(nh)) = " + conditionalentropypnh );
            System.out.println("\nP(ni)*log(P(i)/P(ni)) = " + conditionalentropypni );
            System.out.println("\nP(nj)*log(P(j)/P(nj)) = " + conditionalentropypnj );
            System.out.println("\nP(nk)*log(P(k)/P(nk)) = " + conditionalentropypnk );
            System.out.println("\nP(nl)*log(P(l)/P(nl)) = " + conditionalentropypnl );
            System.out.println("\nP(nm)*log(P(m)/P(nm)) = " + conditionalentropypnm );
            System.out.println("\nP(nn)*log(P(n)/P(nn)) = " + conditionalentropypnn );
            System.out.println("\nP(no)*log(P(o)/P(no)) = " + conditionalentropypno );
            System.out.println("\nP(np)*log(P(p)/P(np)) = " + conditionalentropypnp );
            System.out.println("\nP(nq)*log(P(q)/P(nq)) = " + conditionalentropypnq );
            System.out.println("\nP(nr)*log(P(r)/P(nr)) = " + conditionalentropypnr );
            System.out.println("\nP(ns)*log(P(s)/P(ns)) = " + conditionalentropypns );
            System.out.println("\nP(nt)*log(P(t)/P(nt)) = " + conditionalentropypnt );
            System.out.println("\nP(nu)*log(P(u)/P(nu)) = " + conditionalentropypnu );
            System.out.println("\nP(nv)*log(P(v)/P(nv)) = " + conditionalentropypnv );
            System.out.println("\nP(nw)*log(P(w)/P(nw)) = " + conditionalentropypnw );
            System.out.println("\nP(nx)*log(P(x)/P(nx)) = " + conditionalentropypnx );
            System.out.println("\nP(ny)*log(P(y)/P(ny)) = " + conditionalentropypny );
            System.out.println("\nP(nz)*log(P(z)/P(nz)) = " + conditionalentropypnz );
            System.out.println("\nP(n.)*log(P(.)/P(n.)) = " + conditionalentropypndot );
            System.out.println("\nP(n,)*log(P(,)/P(n,)) = " + conditionalentropypncomma );
            System.out.println("\nP(nvacuum)*log(P(vacuum)/P(nvacuum)) = " + conditionalentropypnvacuum );
            System.out.println("\nP(oa)*log(P(a)/P(oa)) = " + conditionalentropypoa );
            System.out.println("\nP(ob)*log(P(b)/P(ob)) = " + conditionalentropypob );
            System.out.println("\nP(oc)*log(P(c)/P(oc)) = " + conditionalentropypoc );
            System.out.println("\nP(od)*log(P(d)/P(od)) = " + conditionalentropypod );
            System.out.println("\nP(oe)*log(P(e)/P(oe)) = " + conditionalentropypoe );
            System.out.println("\nP(of)*log(P(f)/P(of)) = " + conditionalentropypof );
            System.out.println("\nP(og)*log(P(g)/P(og)) = " + conditionalentropypog );
            System.out.println("\nP(oh)*log(P(h)/P(oh)) = " + conditionalentropypoh );
            System.out.println("\nP(oi)*log(P(i)/P(oi)) = " + conditionalentropypoi );
            System.out.println("\nP(oj)*log(P(j)/P(oj)) = " + conditionalentropypoj );
            System.out.println("\nP(ok)*log(P(k)/P(ok)) = " + conditionalentropypok );
            System.out.println("\nP(ol)*log(P(l)/P(ol)) = " + conditionalentropypol );
            System.out.println("\nP(om)*log(P(m)/P(om)) = " + conditionalentropypom );
            System.out.println("\nP(on)*log(P(n)/P(on)) = " + conditionalentropypon );
            System.out.println("\nP(oo)*log(P(o)/P(oo)) = " + conditionalentropypoo );
            System.out.println("\nP(op)*log(P(p)/P(op)) = " + conditionalentropypop );
            System.out.println("\nP(oq)*log(P(q)/P(oq)) = " + conditionalentropypoq );
            System.out.println("\nP(or)*log(P(r)/P(or)) = " + conditionalentropypor );
            System.out.println("\nP(os)*log(P(s)/P(os)) = " + conditionalentropypos );
            System.out.println("\nP(ot)*log(P(t)/P(ot)) = " + conditionalentropypot );
            System.out.println("\nP(ou)*log(P(u)/P(ou)) = " + conditionalentropypou );
            System.out.println("\nP(ov)*log(P(v)/P(ov)) = " + conditionalentropypov );
            System.out.println("\nP(ow)*log(P(w)/P(ow)) = " + conditionalentropypow );
            System.out.println("\nP(ox)*log(P(x)/P(ox)) = " + conditionalentropypox );
            System.out.println("\nP(oy)*log(P(y)/P(oy)) = " + conditionalentropypoy );
            System.out.println("\nP(oz)*log(P(z)/P(oz)) = " + conditionalentropypoz );
            System.out.println("\nP(o.)*log(P(.)/P(o.)) = " + conditionalentropypodot );
            System.out.println("\nP(o,)*log(P(,)/P(o,)) = " + conditionalentropypocomma );
            System.out.println("\nP(ovacuum)*log(P(vacuum)/P(ovacuum)) = " + conditionalentropypovacuum );
            System.out.println("\nP(pa)*log(P(a)/P(pa)) = " + conditionalentropyppa );
            System.out.println("\nP(pb)*log(P(b)/P(pb)) = " + conditionalentropyppb );
            System.out.println("\nP(pd)*log(P(d)/P(pd)) = " + conditionalentropyppd );
            System.out.println("\nP(pe)*log(P(e)/P(pe)) = " + conditionalentropyppe );
            System.out.println("\nP(pf)*log(P(f)/P(pf)) = " + conditionalentropyppf );
            System.out.println("\nP(ph)*log(P(h)/P(ph)) = " + conditionalentropypph );
            System.out.println("\nP(pi)*log(P(i)/P(pi)) = " + conditionalentropyppi );
            System.out.println("\nP(pk)*log(P(k)/P(pk)) = " + conditionalentropyppk );
            System.out.println("\nP(pl)*log(P(l)/P(pl)) = " + conditionalentropyppl );
            System.out.println("\nP(pm)*log(P(m)/P(pm)) = " + conditionalentropyppm );
            System.out.println("\nP(po)*log(P(o)/P(po)) = " + conditionalentropyppo );
            System.out.println("\nP(pp)*log(P(p)/P(pp)) = " + conditionalentropyppp );
            System.out.println("\nP(pr)*log(P(r)/P(pr)) = " + conditionalentropyppr );
            System.out.println("\nP(ps)*log(P(s)/P(ps)) = " + conditionalentropypps );
            System.out.println("\nP(pt)*log(P(t)/P(pt)) = " + conditionalentropyppt );
            System.out.println("\nP(pu)*log(P(u)/P(pu)) = " + conditionalentropyppu );
            System.out.println("\nP(pw)*log(P(w)/P(pw)) = " + conditionalentropyppw );
            System.out.println("\nP(py)*log(P(y)/P(py)) = " + conditionalentropyppy );
            System.out.println("\nP(p.)*log(P(.)/P(p.)) = " + conditionalentropyppdot );
            System.out.println("\nP(p,)*log(P(,)/P(p,)) = " + conditionalentropyppcomma );
            System.out.println("\nP(pvacuum)*log(P(vacuum)/P(pvacuum)) = " + conditionalentropyppvacuum );
            System.out.println("\nP(qs)*log(P(s)/P(qs)) = " + conditionalentropypqs );
            System.out.println("\nP(qu)*log(P(u)/P(qu)) = " + conditionalentropypqu );
            System.out.println("\nP(q.)*log(P(.)/P(q.)) = " + conditionalentropypqdot );
            System.out.println("\nP(q,)*log(P(,)/P(q,)) = " + conditionalentropypqcomma );
            System.out.println("\nP(qvacuum)*log(P(vacuum)/P(qvacuum)) = " + conditionalentropypqvacuum );
            System.out.println("\nP(ra)*log(P(a)/P(ra)) = " + conditionalentropypra );
            System.out.println("\nP(rb)*log(P(b)/P(rb)) = " + conditionalentropyprb );
            System.out.println("\nP(rc)*log(P(c)/P(rc)) = " + conditionalentropyprc );
            System.out.println("\nP(rd)*log(P(d)/P(rd)) = " + conditionalentropyprd );
            System.out.println("\nP(re)*log(P(e)/P(re)) = " + conditionalentropypre );
            System.out.println("\nP(rf)*log(P(f)/P(rf)) = " + conditionalentropyprf );
            System.out.println("\nP(rg)*log(P(g)/P(rg)) = " + conditionalentropyprg );
            System.out.println("\nP(rh)*log(P(h)/P(rh)) = " + conditionalentropyprh );
            System.out.println("\nP(ri)*log(P(i)/P(ri)) = " + conditionalentropypri );
            System.out.println("\nP(rj)*log(P(j)/P(rj)) = " + conditionalentropyprj );
            System.out.println("\nP(rk)*log(P(k)/P(rk)) = " + conditionalentropyprk );
            System.out.println("\nP(rl)*log(P(l)/P(rl)) = " + conditionalentropyprl );
            System.out.println("\nP(rm)*log(P(m)/P(rm)) = " + conditionalentropyprm );
            System.out.println("\nP(rn)*log(P(n)/P(rn)) = " + conditionalentropyprn );
            System.out.println("\nP(ro)*log(P(o)/P(ro)) = " + conditionalentropypro );
            System.out.println("\nP(rp)*log(P(p)/P(rp)) = " + conditionalentropyprp );
            System.out.println("\nP(rq)*log(P(q)/P(rq)) = " + conditionalentropyprq );
            System.out.println("\nP(rr)*log(P(r)/P(rr)) = " + conditionalentropyprr );
            System.out.println("\nP(rs)*log(P(s)/P(rs)) = " + conditionalentropyprs );
            System.out.println("\nP(rt)*log(P(t)/P(rt)) = " + conditionalentropyprt );
            System.out.println("\nP(ru)*log(P(u)/P(ru)) = " + conditionalentropypru );
            System.out.println("\nP(rv)*log(P(v)/P(rv)) = " + conditionalentropyprv );
            System.out.println("\nP(rw)*log(P(w)/P(rw)) = " + conditionalentropyprw );
            System.out.println("\nP(ry)*log(P(y)/P(ry)) = " + conditionalentropypry );
            System.out.println("\nP(rz)*log(P(z)/P(rz)) = " + conditionalentropyprz );
            System.out.println("\nP(r.)*log(P(.)/P(r.)) = " + conditionalentropyprdot );
            System.out.println("\nP(r,)*log(P(,)/P(r,)) = " + conditionalentropyprcomma );
            System.out.println("\nP(rvacuum)*log(P(vacuum)/P(rvacuum)) = " + conditionalentropyprvacuum );
            System.out.println("\nP(sa)*log(P(a)/P(sa)) = " + conditionalentropypsa );
            System.out.println("\nP(sb)*log(P(b)/P(sb)) = " + conditionalentropypsb );
            System.out.println("\nP(sc)*log(P(c)/P(sc)) = " + conditionalentropypsc );
            System.out.println("\nP(sd)*log(P(d)/P(sd)) = " + conditionalentropypsd );
            System.out.println("\nP(se)*log(P(e)/P(se)) = " + conditionalentropypse );
            System.out.println("\nP(sf)*log(P(f)/P(sf)) = " + conditionalentropypsf );
            System.out.println("\nP(sg)*log(P(g)/P(sg)) = " + conditionalentropypsg );
            System.out.println("\nP(sh)*log(P(h)/P(sh)) = " + conditionalentropypsh );
            System.out.println("\nP(si)*log(P(i)/P(si)) = " + conditionalentropypsi );
            System.out.println("\nP(sj)*log(P(j)/P(sj)) = " + conditionalentropypsj );
            System.out.println("\nP(sk)*log(P(k)/P(sk)) = " + conditionalentropypsk );
            System.out.println("\nP(sl)*log(P(l)/P(sl)) = " + conditionalentropypsl );
            System.out.println("\nP(sm)*log(P(m)/P(sm)) = " + conditionalentropypsm );
            System.out.println("\nP(sn)*log(P(n)/P(sn)) = " + conditionalentropypsn );
            System.out.println("\nP(so)*log(P(o)/P(so)) = " + conditionalentropypso );
            System.out.println("\nP(sp)*log(P(p)/P(sp)) = " + conditionalentropypsp );
            System.out.println("\nP(sq)*log(P(q)/P(sq)) = " + conditionalentropypsq );
            System.out.println("\nP(sr)*log(P(r)/P(sr)) = " + conditionalentropypsr );
            System.out.println("\nP(ss)*log(P(s)/P(ss)) = " + conditionalentropypss );
            System.out.println("\nP(st)*log(P(t)/P(st)) = " + conditionalentropypst );
            System.out.println("\nP(su)*log(P(u)/P(su)) = " + conditionalentropypsu );
            System.out.println("\nP(sv)*log(P(v)/P(sv)) = " + conditionalentropypsv );
            System.out.println("\nP(sw)*log(P(w)/P(sw)) = " + conditionalentropypsw );
            System.out.println("\nP(sy)*log(P(y)/P(sy)) = " + conditionalentropypsy );
            System.out.println("\nP(s.)*log(P(.)/P(s.)) = " + conditionalentropypsdot );
            System.out.println("\nP(s,)*log(P(,)/P(s,)) = " + conditionalentropypscomma );
            System.out.println("\nP(svacuum)*log(P(vacuum)/P(svacuum)) = " + conditionalentropypsvacuum );
            System.out.println("\nP(ta)*log(P(a)/P(ta)) = " + conditionalentropypta );
            System.out.println("\nP(tb)*log(P(b)/P(tb)) = " + conditionalentropyptb );
            System.out.println("\nP(tc)*log(P(c)/P(tc)) = " + conditionalentropyptc );
            System.out.println("\nP(td)*log(P(d)/P(td)) = " + conditionalentropyptd );
            System.out.println("\nP(te)*log(P(e)/P(te)) = " + conditionalentropypte );
            System.out.println("\nP(tf)*log(P(f)/P(tf)) = " + conditionalentropyptf );
            System.out.println("\nP(tg)*log(P(g)/P(tg)) = " + conditionalentropyptg );
            System.out.println("\nP(th)*log(P(h)/P(th)) = " + conditionalentropypth );
            System.out.println("\nP(ti)*log(P(i)/P(ti)) = " + conditionalentropypti );
            System.out.println("\nP(tj)*log(P(j)/P(tj)) = " + conditionalentropyptj );
            System.out.println("\nP(tk)*log(P(k)/P(tk)) = " + conditionalentropyptk );
            System.out.println("\nP(tl)*log(P(l)/P(tl)) = " + conditionalentropyptl );
            System.out.println("\nP(tm)*log(P(m)/P(tm)) = " + conditionalentropyptm );
            System.out.println("\nP(tn)*log(P(n)/P(tn)) = " + conditionalentropyptn );
            System.out.println("\nP(to)*log(P(o)/P(to)) = " + conditionalentropypto );
            System.out.println("\nP(tp)*log(P(p)/P(tp)) = " + conditionalentropyptp );
            System.out.println("\nP(tr)*log(P(r)/P(tr)) = " + conditionalentropyptr );
            System.out.println("\nP(ts)*log(P(s)/P(ts)) = " + conditionalentropypts );
            System.out.println("\nP(tt)*log(P(t)/P(tt)) = " + conditionalentropyptt );
            System.out.println("\nP(tu)*log(P(u)/P(tu)) = " + conditionalentropyptu );
            System.out.println("\nP(tv)*log(P(v)/P(tv)) = " + conditionalentropyptv );
            System.out.println("\nP(tw)*log(P(w)/P(tw)) = " + conditionalentropyptw );
            System.out.println("\nP(ty)*log(P(y)/P(ty)) = " + conditionalentropypty );
            System.out.println("\nP(tz)*log(P(z)/P(tz)) = " + conditionalentropyptz );
            System.out.println("\nP(t.)*log(P(.)/P(t.)) = " + conditionalentropyptdot );
            System.out.println("\nP(t,)*log(P(,)/P(t,)) = " + conditionalentropyptcomma );
            System.out.println("\nP(tvacuum)*log(P(vacuum)/P(tvacuum)) = " + conditionalentropyptvacuum );
            System.out.println("\nP(ua)*log(P(a)/P(ua)) = " + conditionalentropypua );
            System.out.println("\nP(ub)*log(P(b)/P(ub)) = " + conditionalentropypub );
            System.out.println("\nP(uc)*log(P(c)/P(uc)) = " + conditionalentropypuc );
            System.out.println("\nP(ud)*log(P(d)/P(ud)) = " + conditionalentropypud );
            System.out.println("\nP(ue)*log(P(e)/P(ue)) = " + conditionalentropypue );
            System.out.println("\nP(uf)*log(P(f)/P(uf)) = " + conditionalentropypuf );
            System.out.println("\nP(ug)*log(P(g)/P(ug)) = " + conditionalentropypug );
            System.out.println("\nP(uh)*log(P(h)/P(uh)) = " + conditionalentropypuh );
            System.out.println("\nP(ui)*log(P(i)/P(ui)) = " + conditionalentropypui );
            System.out.println("\nP(uk)*log(P(k)/P(uk)) = " + conditionalentropypuk );
            System.out.println("\nP(ul)*log(P(l)/P(ul)) = " + conditionalentropypul );
            System.out.println("\nP(um)*log(P(m)/P(um)) = " + conditionalentropypum );
            System.out.println("\nP(un)*log(P(n)/P(un)) = " + conditionalentropypun );
            System.out.println("\nP(uo)*log(P(o)/P(uo)) = " + conditionalentropypuo );
            System.out.println("\nP(up)*log(P(p)/P(up)) = " + conditionalentropypup );
            System.out.println("\nP(ur)*log(P(r)/P(ur)) = " + conditionalentropypur );
            System.out.println("\nP(us)*log(P(s)/P(us)) = " + conditionalentropypus );
            System.out.println("\nP(ut)*log(P(t)/P(ut)) = " + conditionalentropyput );
            System.out.println("\nP(uu)*log(P(u)/P(uu)) = " + conditionalentropypuu );
            System.out.println("\nP(uv)*log(P(v)/P(uv)) = " + conditionalentropypuv );
            System.out.println("\nP(ux)*log(P(x)/P(ux)) = " + conditionalentropypux );
            System.out.println("\nP(uy)*log(P(y)/P(uy)) = " + conditionalentropypuy );
            System.out.println("\nP(uz)*log(P(z)/P(uz)) = " + conditionalentropypuz );
            System.out.println("\nP(u.)*log(P(.)/P(u.)) = " + conditionalentropypudot );
            System.out.println("\nP(u,)*log(P(,)/P(u,)) = " + conditionalentropypucomma );
            System.out.println("\nP(uvacuum)*log(P(vacuum)/P(uvacuum)) = " + conditionalentropypuvacuum );
            System.out.println("\nP(va)*log(P(a)/P(va)) = " + conditionalentropypva );
            System.out.println("\nP(vd)*log(P(d)/P(vd)) = " + conditionalentropypvd );
            System.out.println("\nP(ve)*log(P(e)/P(ve)) = " + conditionalentropypve );
            System.out.println("\nP(vi)*log(P(i)/P(vi)) = " + conditionalentropypvi );
            System.out.println("\nP(vl)*log(P(l)/P(vl)) = " + conditionalentropypvl );
            System.out.println("\nP(vo)*log(P(o)/P(vo)) = " + conditionalentropypvo );
            System.out.println("\nP(vs)*log(P(s)/P(vs)) = " + conditionalentropypvs );
            System.out.println("\nP(vu)*log(P(u)/P(vu)) = " + conditionalentropypvu );
            System.out.println("\nP(vv)*log(P(v)/P(vv)) = " + conditionalentropypvv );
            System.out.println("\nP(vy)*log(P(y)/P(vy)) = " + conditionalentropypvy );
            System.out.println("\nP(v.)*log(P(.)/P(v.)) = " + conditionalentropypvdot );
            System.out.println("\nP(v,)*log(P(,)/P(v,)) = " + conditionalentropypvcomma );
            System.out.println("\nP(vvacuum)*log(P(vacuum)/P(vvacuum)) = " + conditionalentropypvvacuum );
            System.out.println("\nP(wa)*log(P(a)/P(wa)) = " + conditionalentropypwa );
            System.out.println("\nP(wb)*log(P(b)/P(wb)) = " + conditionalentropypwb );
            System.out.println("\nP(wc)*log(P(c)/P(wc)) = " + conditionalentropypwc );
            System.out.println("\nP(wd)*log(P(d)/P(wd)) = " + conditionalentropypwd );
            System.out.println("\nP(we)*log(P(e)/P(we)) = " + conditionalentropypwe );
            System.out.println("\nP(wf)*log(P(f)/P(wf)) = " + conditionalentropypwf );
            System.out.println("\nP(wg)*log(P(g)/P(wg)) = " + conditionalentropypwg );
            System.out.println("\nP(wh)*log(P(h)/P(wh)) = " + conditionalentropypwh );
            System.out.println("\nP(wi)*log(P(i)/P(wi)) = " + conditionalentropypwi );
            System.out.println("\nP(wk)*log(P(k)/P(wk)) = " + conditionalentropypwk );
            System.out.println("\nP(wl)*log(P(l)/P(wl)) = " + conditionalentropypwl );
            System.out.println("\nP(wm)*log(P(m)/P(wm)) = " + conditionalentropypwm );
            System.out.println("\nP(wn)*log(P(n)/P(wn)) = " + conditionalentropypwn );
            System.out.println("\nP(wo)*log(P(o)/P(wo)) = " + conditionalentropypwo );
            System.out.println("\nP(wp)*log(P(p)/P(wp)) = " + conditionalentropypwp );
            System.out.println("\nP(wr)*log(P(r)/P(wr)) = " + conditionalentropypwr );
            System.out.println("\nP(ws)*log(P(s)/P(ws)) = " + conditionalentropypws );
            System.out.println("\nP(wt)*log(P(t)/P(wt)) = " + conditionalentropypwt );
            System.out.println("\nP(wu)*log(P(u)/P(wu)) = " + conditionalentropypwu );
            System.out.println("\nP(ww)*log(P(w)/P(ww)) = " + conditionalentropypww );
            System.out.println("\nP(wy)*log(P(y)/P(wy)) = " + conditionalentropypwy );
            System.out.println("\nP(w.)*log(P(.)/P(w.)) = " + conditionalentropypwdot );
            System.out.println("\nP(w,)*log(P(,)/P(w,)) = " + conditionalentropypwcomma );
            System.out.println("\nP(wvacuum)*log(P(vacuum)/P(wvacuum)) = " + conditionalentropypwvacuum );
            System.out.println("\nP(xa)*log(P(a)/P(xa)) = " + conditionalentropypxa );
            System.out.println("\nP(xc)*log(P(c)/P(xc)) = " + conditionalentropypxc );
            System.out.println("\nP(xe)*log(P(e)/P(xe)) = " + conditionalentropypxe );
            System.out.println("\nP(xh)*log(P(h)/P(xh)) = " + conditionalentropypxh );
            System.out.println("\nP(xi)*log(P(i)/P(xi)) = " + conditionalentropypxi );
            System.out.println("\nP(xo)*log(P(o)/P(xo)) = " + conditionalentropypxo );
            System.out.println("\nP(xp)*log(P(p)/P(xp)) = " + conditionalentropypxp );
            System.out.println("\nP(xt)*log(P(t)/P(xt)) = " + conditionalentropypxt );
            System.out.println("\nP(xu)*log(P(u)/P(xu)) = " + conditionalentropypxu );
            System.out.println("\nP(xy)*log(P(y)/P(xy)) = " + conditionalentropypxy );
            System.out.println("\nP(x.)*log(P(.)/P(x.)) = " + conditionalentropypxdot );
            System.out.println("\nP(x,)*log(P(,)/P(x,)) = " + conditionalentropypxcomma );
            System.out.println("\nP(xvacuum)*log(P(vacuum)/P(xvacuum)) = " + conditionalentropypxvacuum );
            System.out.println("\nP(ya)*log(P(a)/P(ya)) = " + conditionalentropypya );
            System.out.println("\nP(yb)*log(P(b)/P(yb)) = " + conditionalentropypyb );
            System.out.println("\nP(yc)*log(P(c)/P(yc)) = " + conditionalentropypyc );
            System.out.println("\nP(yd)*log(P(d)/P(yd)) = " + conditionalentropypyd );
            System.out.println("\nP(ye)*log(P(e)/P(ye)) = " + conditionalentropypye );
            System.out.println("\nP(yf)*log(P(f)/P(yf)) = " + conditionalentropypyf );
            System.out.println("\nP(yg)*log(P(g)/P(yg)) = " + conditionalentropypyg );
            System.out.println("\nP(yh)*log(P(h)/P(yh)) = " + conditionalentropypyh );
            System.out.println("\nP(yi)*log(P(i)/P(yi)) = " + conditionalentropypyi );
            System.out.println("\nP(yj)*log(P(j)/P(yj)) = " + conditionalentropypyj );
            System.out.println("\nP(yl)*log(P(l)/P(yl)) = " + conditionalentropypyl );
            System.out.println("\nP(ym)*log(P(m)/P(ym)) = " + conditionalentropypym );
            System.out.println("\nP(yn)*log(P(n)/P(yn)) = " + conditionalentropypyn );
            System.out.println("\nP(yo)*log(P(o)/P(yo)) = " + conditionalentropypyo );
            System.out.println("\nP(yp)*log(P(p)/P(yp)) = " + conditionalentropypyp );
            System.out.println("\nP(yr)*log(P(r)/P(yr)) = " + conditionalentropypyr );
            System.out.println("\nP(ys)*log(P(s)/P(ys)) = " + conditionalentropypys );
            System.out.println("\nP(yt)*log(P(t)/P(yt)) = " + conditionalentropypyt );
            System.out.println("\nP(yu)*log(P(u)/P(yu)) = " + conditionalentropypyu );
            System.out.println("\nP(yv)*log(P(v)/P(yv)) = " + conditionalentropypyv );
            System.out.println("\nP(yw)*log(P(w)/P(yw)) = " + conditionalentropypyw );
            System.out.println("\nP(yx)*log(P(x)/P(yx)) = " + conditionalentropypyx );
            System.out.println("\nP(y.)*log(P(.)/P(y.)) = " + conditionalentropypydot );
            System.out.println("\nP(y,)*log(P(,)/P(y,)) = " + conditionalentropypycomma );
            System.out.println("\nP(yvacuum)*log(P(vacuum)/P(yvacuum)) = " + conditionalentropypyvacuum );
            System.out.println("\nP(za)*log(P(a)/P(za)) = " + conditionalentropypza );
            System.out.println("\nP(ze)*log(P(e)/P(ze)) = " + conditionalentropypze );
            System.out.println("\nP(zh)*log(P(h)/P(zh)) = " + conditionalentropypzh );
            System.out.println("\nP(zi)*log(P(i)/P(zi)) = " + conditionalentropypzi );
            System.out.println("\nP(zl)*log(P(l)/P(zl)) = " + conditionalentropypzl );
            System.out.println("\nP(zm)*log(P(m)/P(zm)) = " + conditionalentropypzm );
            System.out.println("\nP(zo)*log(P(o)/P(zo)) = " + conditionalentropypzo );
            System.out.println("\nP(zy)*log(P(y)/P(zy)) = " + conditionalentropypzy );
            System.out.println("\nP(zz)*log(P(z)/P(zz)) = " + conditionalentropypzz );
            System.out.println("\nP(z,)*log(P(,)/P(z,)) = " + conditionalentropypzcomma );
            System.out.println("\nP(zvacuum)*log(P(vacuum)/P(zvacuum)) = " + conditionalentropypzvacuum );
            System.out.println("\nP(.k)*log(P(k)/P(.k)) = " + conditionalentropypdotk );
            System.out.println("\nP(.m)*log(P(m)/P(.m)) = " + conditionalentropypdotm );
            System.out.println("\nP(.n)*log(P(n)/P(.n)) = " + conditionalentropypdotn );
            System.out.println("\nP(.,)*log(P(,)/P(.,)) = " + conditionalentropypdotcomma );
            System.out.println("\nP(.vacuum)*log(P(vacuum)/P(.vacuum)) = " + conditionalentropypdotvacuum );
            System.out.println("\nP(,vacuum)*log(P(vacuum)/P(,vacuum)) = " + conditionalentropypcommavacuum );
            System.out.println("\nP(vacuuma)*log(P(a)/P(vacuuma)) = " + conditionalentropypvacuuma );
            System.out.println("\nP(vacuumb)*log(P(b)/P(vacuumb)) = " + conditionalentropypvacuumb  );
            System.out.println("\nP(vacuumc)*log(P(c)/P(vacuumc)) = " + conditionalentropypvacuumc  );
            System.out.println("\nP(vacuumd)*log(P(d)/P(vacuumd)) = " + conditionalentropypvacuumd  );
            System.out.println("\nP(vacuume)*log(P(e)/P(vacuume)) = " + conditionalentropypvacuume  );
            System.out.println("\nP(vacuumf)*log(P(f)/P(vacuumf)) = " + conditionalentropypvacuumf  );
            System.out.println("\nP(vacuumg)*log(P(g)/P(vacuumg)) = " + conditionalentropypvacuumg  );
            System.out.println("\nP(vacuumh)*log(P(h)/P(vacuumh)) = " + conditionalentropypvacuumh  );
            System.out.println("\nP(vacuumi)*log(P(i)/P(vacuumi)) = " + conditionalentropypvacuumi  );
            System.out.println("\nP(vacuumj)*log(P(j)/P(vacuumj)) = " + conditionalentropypvacuumj  );
            System.out.println("\nP(vacuumk)*log(P(k)/P(vacuumk)) = " + conditionalentropypvacuumk  );
            System.out.println("\nP(vacuuml)*log(P(l)/P(vacuuml)) = " + conditionalentropypvacuuml  );
            System.out.println("\nP(vacuumm)*log(P(m)/P(vacuumm)) = " + conditionalentropypvacuumm  );
            System.out.println("\nP(vacuumn)*log(P(n)/P(vacuumn)) = " + conditionalentropypvacuumn  );
            System.out.println("\nP(vacuumo)*log(P(o)/P(vacuumo)) = " + conditionalentropypvacuumo  );
            System.out.println("\nP(vacuump)*log(P(p)/P(vacuump)) = " + conditionalentropypvacuump  );
            System.out.println("\nP(vacuumq)*log(P(q)/P(vacuumq)) = " + conditionalentropypvacuumq  );
            System.out.println("\nP(vacuumr)*log(P(r)/P(vacuumr)) = " + conditionalentropypvacuumr  );
            System.out.println("\nP(vacuums)*log(P(s)/P(vacuums)) = " + conditionalentropypvacuums  );
            System.out.println("\nP(vacuumt)*log(P(t)/P(vacuumt)) = " + conditionalentropypvacuumt  );
            System.out.println("\nP(vacuumu)*log(P(u)/P(vacuumu)) = " + conditionalentropypvacuumu  );
            System.out.println("\nP(vacuumv)*log(P(v)/P(vacuumv)) = " + conditionalentropypvacuumv  );
            System.out.println("\nP(vacuumw)*log(P(w)/P(vacuumw)) = " + conditionalentropypvacuumw  );
            System.out.println("\nP(vacuumx)*log(P(x)/P(vacuumx)) = " + conditionalentropypvacuumx  );
            System.out.println("\nP(vacuumy)*log(P(y)/P(vacuumy)) = " + conditionalentropypvacuumy  );
            System.out.println("\nP(vacuumz)*log(P(z)/P(vacuumz)) = " + conditionalentropypvacuumz  );
            System.out.println("\nP(vacuum.)*log(P(.)/P(vacuum.)) = " + conditionalentropypvacuumdot  );
            System.out.println("\nP(vacuum,)*log(P(,)/P(vacuum,)) = " + conditionalentropypvacuumcomma  );
            System.out.println("\nP(vacuumvacuum)*log(P(vacuum)/P(vacuumvacuum)) = " + conditionalentropypvacuumvacuum  );
            System.out.println("\nThe sum of the conditional H(s) is = " + sumconditionalentropy );     
       
            }

            private static void fixedlengthofcodepercharacterinthetext() 
                    
            {
                
            double sizeofthealphabetmessage = 29*5;
            double sizeofthecharacters = 29*8;
            double sizeofthecodes = 29*5;
            double tableofthecodes = sizeofthecharacters+sizeofthecodes;
            double totalsizeofthealphabetmessage = sizeofthealphabetmessage+tableofthecodes;
            
            System.out.println("\nSize of the alphabet message is : 29.0*5.0 = " + sizeofthealphabetmessage + " bits ");
            System.out.println("\nSize of the characters is : 29.0*8.0 = " + sizeofthecharacters + " bits ");
            System.out.println("\nSize of the codes is : 29.0*5.0 = " + sizeofthecodes + " bits ");
            System.out.println("\nTable of the codes is : Size of the characters + Size of the codes = " + tableofthecodes + " bits ");
            System.out.println("\nTotal size of the alphabet message is : Size of the alphabet message + Table of the codes = " + totalsizeofthealphabetmessage + " bits "); 
            System.out.println(); 
            
            try    
        
            {

            File file = new File("Snomannen-by-Nesbo-Jo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+©()’?«»:–;…!&-]" , " ").replaceAll("Æ" , "AE").replaceAll("Ø" , "O").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u"); 
            
            readLine = readLine.toLowerCase();
            
            readLine = readLine.replaceAll("a" , "00000").replaceAll("b" , "00001").replaceAll("c" , "00010").replaceAll("d" , "00011").replaceAll("e" , "00100").replaceAll("f" , "00101").replaceAll("g" , "00110").replaceAll("h" , "00111").replaceAll("i" , "01000").replaceAll("j" , "01001").replaceAll("k" , "01010").replaceAll("l" , "01011").replaceAll("m" , "01100").replaceAll("n" , "01101").replaceAll("o" , "01110").replaceAll("p" , "01111").replaceAll("q" , "10000").replaceAll("r" , "10001").replaceAll("s" , "10010").replaceAll("t" , "10011").replaceAll("u" , "10100").replaceAll("v" , "10101").replaceAll("w" , "10110").replaceAll("x" , "10111").replaceAll("y" , "11000").replaceAll("z" , "11001").replaceAll("." , "11010").replaceAll("," , "11011").replaceAll(" " , "11100");
          
            System.out.println(readLine);
 
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");
            
            }

            private static void fixedlengthofcodeperpairofcharactersinthetext2() 
    
            {
                
            double sizeofthealphabetmessage = 841*10;
            double sizeofthecharacters = 841*8;
            double sizeofthecodes = 841*10;
            double tableofthecodes = sizeofthecharacters+sizeofthecodes;
            double totalsizeofthealphabetmessage = sizeofthealphabetmessage+tableofthecodes;
            
            System.out.println("\nSize of the alphabet message is : 841.0*10.0 = " + sizeofthealphabetmessage + " bits ");
            System.out.println("\nSize of the characters is : 841.0*8.0 = " + sizeofthecharacters + " bits ");
            System.out.println("\nSize of the codes is : 841.0*10.0 = " + sizeofthecodes + " bits ");
            System.out.println("\nTable of the codes is : Size of the characters + Size of the codes = " + tableofthecodes + " bits ");
            System.out.println("\nTotal size of the alphabet message is : Size of the alphabet message + Table of the codes = " + totalsizeofthealphabetmessage + " bits ");  
            System.out.println();  
            
            try    
        
            {

            File file = new File("The-Snowman-by-Jo-Nesbo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+'–’‘:©«»—”“/?…!();&-]" , " ").replace("]" , " ").replace("[", " ").replaceAll("Ø" , "O").replaceAll("[ÌÍÎÏ]" , "I").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("Ç" , "C").replaceAll("ç" , "c").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[ìíîï]", "i").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u").replaceAll("œ" , "oe"); 
            
            readLine = readLine.toLowerCase();
            
            readLine = readLine.replaceAll("aa" , "0000000000").replaceAll("ab" , "0000000001").replaceAll("ac" , "0000000010").replaceAll("ad" , "0000000011").replaceAll("ae" , "0000000100").replaceAll("af" , "0000000101").replaceAll("ag" , "0000000110").replaceAll("ah" , "0000000111").replaceAll("ai" , "0000001000").replaceAll("aj" , "0000001001").replaceAll("ak" , "0000001010").replaceAll("al" , "0000001011").replaceAll("am" , "0000001100").replaceAll("an" , "0000001101").replaceAll("ao" , "0000001110").replaceAll("ap" , "0000001111").replaceAll("aq" , "0000010000").replaceAll("ar" , "0000010001").replaceAll("as" , "0000010010").replaceAll("at" , "0000010011").replaceAll("au" , "0000010100").replaceAll("av" , "0000010101").replaceAll("aw" , "0000010110").replaceAll("ax" , "0000010111").replaceAll("ay" , "0000011000").replaceAll("az" , "0000011001").replaceAll("a." , "0000011010").replaceAll("a," , "0000011011").replaceAll("a " , "0000011100"); 
            readLine = readLine.replaceAll("ba" , "0000011101").replaceAll("bb" , "0000011110").replaceAll("bc" , "0000011111").replaceAll("be" , "0000100000").replaceAll("bf" , "0000100001").replaceAll("bi" , "0000100010").replaceAll("bj" , "0000100011").replaceAll("bl" , "0000100100").replaceAll("bm" , "0000100101").replaceAll("bn" , "0000100110").replaceAll("bo" , "0000100111").replaceAll("br" , "0000101000").replaceAll("bs" , "0000101001").replaceAll("bt" , "0000101010").replaceAll("bu" , "0000101011").replaceAll("bv" , "0000101100").replaceAll("bw" , "0000101101").replaceAll("by" , "0000101110").replaceAll("b." , "0000101111").replaceAll("b," , "0000110000").replaceAll("b " , "0000110001"); 
            readLine = readLine.replaceAll("ca" , "0000110010").replaceAll("cc" , "0000110011").replaceAll("cd" , "0000110100").replaceAll("ce" , "0000110101").replaceAll("ch" , "0000110110").replaceAll("ci" , "0000110111").replaceAll("ck" , "0000111000").replaceAll("cl" , "0000111001").replaceAll("co" , "0000111010").replaceAll("cq" , "0000111011").replaceAll("cr" , "0000111100").replaceAll("cs" , "0000111101").replaceAll("ct" , "0000111110").replaceAll("cu" , "0000111111").replaceAll("cv" , "0001000000").replaceAll("cy" , "0001000001").replaceAll("c." , "0001000010").replaceAll("c," , "0001000011").replaceAll("c " , "0001000100");
            readLine = readLine.replaceAll("da" , "0001000101").replaceAll("db" , "0001000110").replaceAll("dc" , "0001000111").replaceAll("dd" , "0001001000").replaceAll("de" , "0001001001").replaceAll("df" , "0001001010").replaceAll("dg" , "0001001011").replaceAll("dh" , "0001001100").replaceAll("di" , "0001001101").replaceAll("dj" , "0001001110").replaceAll("dk" , "0001001111").replaceAll("dl" , "0001010000").replaceAll("dm" , "0001010001").replaceAll("dn" , "0001010010").replaceAll("do" , "0001010011").replaceAll("dp" , "0001010100").replaceAll("dr" , "0001010101").replaceAll("ds" , "0001010110").replaceAll("dt" , "0001010111").replaceAll("du" , "0001011000").replaceAll("dv" , "0001011001").replaceAll("dw" , "0001011010").replaceAll("dy" , "0001011011").replaceAll("d." , "0001011100").replaceAll("d," , "0001011101").replaceAll("d " , "0001011110"); 
            readLine = readLine.replaceAll("ea" , "0001011111").replaceAll("eb" , "0001100000").replaceAll("ec" , "0001100001").replaceAll("ed" , "0001100010").replaceAll("ee" , "0001100011").replaceAll("ef" , "0001100100").replaceAll("eg" , "0001100101").replaceAll("eh" , "0001100110").replaceAll("ei" , "0001100111").replaceAll("ej" , "0001101000").replaceAll("ek" , "0001101001").replaceAll("el" , "0001101010").replaceAll("em" , "0001101011").replaceAll("en" , "0001101100").replaceAll("eo" , "0001101101").replaceAll("ep" , "0001101110").replaceAll("eq" , "0001101111").replaceAll("er" , "0001110000").replaceAll("es" , "0001110001").replaceAll("et" , "0001110010").replaceAll("eu" , "0001110011").replaceAll("ev" , "0001110100").replaceAll("ew" , "0001110101").replaceAll("ex" , "0001110110").replaceAll("ey" , "0001110111").replaceAll("ez" , "0001111000").replaceAll("e." , "0001111001").replaceAll("e," , "0001111010").replaceAll("e " , "0001111011"); 
            readLine = readLine.replaceAll("fa" , "0001111100").replaceAll("fb" , "0001111101").replaceAll("fc" , "0001111110").replaceAll("fe" , "0001111111").replaceAll("ff" , "0010000000").replaceAll("fh" , "0010000001").replaceAll("fi" , "0010000010").replaceAll("fj" , "0010000011").replaceAll("fl" , "0010000100").replaceAll("fn" , "0010000101").replaceAll("fo" , "0010000110").replaceAll("fr" , "0010000111").replaceAll("fs" , "0010001000").replaceAll("ft" , "0010001001").replaceAll("fu" , "0010001010").replaceAll("fw" , "0010001011").replaceAll("fy" , "0010001100").replaceAll("f." , "0010001101").replaceAll("f," , "0010001110").replaceAll("f " , "0010001111");
            readLine = readLine.replaceAll("ga" , "0010010000").replaceAll("gb" , "0010010001").replaceAll("gd" , "0010010010").replaceAll("ge" , "0010010011").replaceAll("gf" , "0010010100").replaceAll("gg" , "0010010101").replaceAll("gh" , "0010010110").replaceAll("gi" , "0010010111").replaceAll("gj" , "0010011000").replaceAll("gl" , "0010011001").replaceAll("gm" , "0010011010").replaceAll("gn" , "0010011011").replaceAll("go" , "0010011100").replaceAll("gp" , "0010011101").replaceAll("gr" , "0010011110").replaceAll("gs" , "0010011111").replaceAll("gt" , "0010100000").replaceAll("gu" , "0010100001").replaceAll("gv" , "0010100010").replaceAll("gy" , "0010100011").replaceAll("gz" , "0010100100").replaceAll("g." , "0010100101").replaceAll("g," , "0010100110").replaceAll("g " , "0010100111"); 
            readLine = readLine.replaceAll("ha" , "0010101000").replaceAll("hb" , "0010101001").replaceAll("hc" , "0010101010").replaceAll("hd" , "0010101011").replaceAll("he" , "0010101100").replaceAll("hf" , "0010101101").replaceAll("hh" , "0010101110").replaceAll("hi" , "0010101111").replaceAll("hl" , "0010110000").replaceAll("hm" , "0010110001").replaceAll("hn" , "0010110010").replaceAll("ho" , "0010110011").replaceAll("hp" , "0010110100").replaceAll("hq" , "0010110101").replaceAll("hr" , "0010110110").replaceAll("hs" , "0010110111").replaceAll("ht" , "0010111000").replaceAll("hu" , "0010111001").replaceAll("hv" , "0010111010").replaceAll("hw" , "0010111011").replaceAll("hy" , "0010111100").replaceAll("h." , "0010111101").replaceAll("h," , "0010111110").replaceAll("h " , "0010111111"); 
            readLine = readLine.replaceAll("ia" , "0011000000").replaceAll("ib" , "0011000001").replaceAll("ic" , "0011000010").replaceAll("id" , "0011000011").replaceAll("ie" , "0011000100").replaceAll("if" , "0011000101").replaceAll("ig" , "0011000110").replaceAll("ih" , "0011000111").replaceAll("ii" , "0011001000").replaceAll("ij" , "0011001001").replaceAll("ik" , "0011001010").replaceAll("il" , "0011001011").replaceAll("im" , "0011001100").replaceAll("in" , "0011001101").replaceAll("io" , "0011001110").replaceAll("ip" , "0011001111").replaceAll("iq" , "0011010000").replaceAll("ir" , "0011010001").replaceAll("is" , "0011010010").replaceAll("it" , "0011010011").replaceAll("iu" , "0011010100").replaceAll("iv" , "0011010101").replaceAll("ix" , "0011010110").replaceAll("iz" , "0011010111").replaceAll("i." , "0011011000").replaceAll("i," , "0011011001").replaceAll("i " , "0011011010"); 
            readLine = readLine.replaceAll("ja" , "0011011011").replaceAll("je" , "0011011100").replaceAll("ji" , "0011011101").replaceAll("jo" , "0011011110").replaceAll("ju" , "0011011111").replaceAll("j." , "0011100000");
            readLine = readLine.replaceAll("ka" , "0011100001").replaceAll("kb" , "0011100010").replaceAll("kc" , "0011100011").replaceAll("kd" , "0011100100").replaceAll("ke" , "0011100101").replaceAll("kf" , "0011100110").replaceAll("kg" , "0011100111").replaceAll("kh" , "0011101000").replaceAll("ki" , "0011101001").replaceAll("kj" , "0011101010").replaceAll("kk" , "0011101011").replaceAll("kl" , "0011101100").replaceAll("km" , "0011101101").replaceAll("kn" , "0011101110").replaceAll("ko" , "0011101111").replaceAll("kp" , "0011110000").replaceAll("kr" , "0011110001").replaceAll("ks" , "0011110010").replaceAll("kt" , "0011110011").replaceAll("ku" , "0011110100").replaceAll("kv" , "0011110101").replaceAll("kw" , "0011110110").replaceAll("ky" , "0011110111").replaceAll("k." , "0011111000").replaceAll("k," , "0011111001").replaceAll("k " , "0011111010"); 
            readLine = readLine.replaceAll("la" , "0011111011").replaceAll("lb" , "0011111100").replaceAll("lc" , "0011111101").replaceAll("ld" , "0011111110").replaceAll("le" , "0011111111").replaceAll("lf" , "0100000000").replaceAll("lg" , "0100000001").replaceAll("lh" , "0100000010").replaceAll("li" , "0100000011").replaceAll("lj" , "0100000100").replaceAll("lk" , "0100000101").replaceAll("ll" , "0100000110").replaceAll("lm" , "0100000111").replaceAll("ln" , "0100001000").replaceAll("lo" , "0100001001").replaceAll("lp" , "0100001010").replaceAll("lr" , "0100001011").replaceAll("ls" , "0100001100").replaceAll("lt" , "0100001101").replaceAll("lu" , "0100001110").replaceAll("lv" , "0100001111").replaceAll("lw" , "0100010000").replaceAll("ly" , "0100010001").replaceAll("lz" , "0100010010").replaceAll("l." , "0100010011").replaceAll("l," , "0100010100").replaceAll("l " , "0100010101"); 
            readLine = readLine.replaceAll("ma" , "0100010110").replaceAll("mb" , "0100010111").replaceAll("mc" , "0100011000").replaceAll("md" , "0100011001").replaceAll("me" , "0100011010").replaceAll("mf" , "0100011011").replaceAll("mh" , "0100011100").replaceAll("mi" , "0100011101").replaceAll("ml" , "0100011110").replaceAll("mm" , "0100011111").replaceAll("mn" , "0100100000").replaceAll("mo" , "0100100001").replaceAll("mp" , "0100100010").replaceAll("mr" , "0100100011").replaceAll("ms" , "0100100100").replaceAll("mt" , "0100100101").replaceAll("mu" , "0100100110").replaceAll("mw" , "0100100111").replaceAll("my" , "0100101000").replaceAll("m." , "0100101001").replaceAll("m," , "0100101010").replaceAll("m " , "0100101011"); 
            readLine = readLine.replaceAll("na" , "0100101100").replaceAll("nb" , "0100101101").replaceAll("nc" , "0100101110").replaceAll("nd" , "0100101111").replaceAll("ne" , "0100110000").replaceAll("nf" , "0100110001").replaceAll("ng" , "0100110010").replaceAll("nh" , "0100110011").replaceAll("ni" , "0100110100").replaceAll("nj" , "0100110101").replaceAll("nk" , "0100110110").replaceAll("nl" , "0100110111").replaceAll("nm" , "0100111000").replaceAll("nn" , "0100111001").replaceAll("no" , "0100111010").replaceAll("np" , "0100111011").replaceAll("nq" , "0100111100").replaceAll("nr" , "0100111101").replaceAll("ns" , "0100111110").replaceAll("nt" , "0100111111").replaceAll("nu" , "0101000000").replaceAll("nv" , "0101000001").replaceAll("nw" , "0101000010").replaceAll("nx" , "0101000011").replaceAll("ny" , "0101000100").replaceAll("nz" , "0101000101").replaceAll("n." , "0101000110").replaceAll("n," , "0101000111").replaceAll("n " , "0101001000"); 
            readLine = readLine.replaceAll("oa" , "0101001001").replaceAll("ob" , "0101001010").replaceAll("oc" , "0101001011").replaceAll("od" , "0101001100").replaceAll("oe" , "0101001101").replaceAll("of" , "0101001110").replaceAll("og" , "0101001111").replaceAll("oh" , "0101010000").replaceAll("oi" , "0101010001").replaceAll("oj" , "0101010010").replaceAll("ok" , "0101010011").replaceAll("ol" , "0101010100").replaceAll("om" , "0101010101").replaceAll("on" , "0101010110").replaceAll("oo" , "0101010111").replaceAll("op" , "0101011000").replaceAll("oq" , "0101011001").replaceAll("or" , "0101011010").replaceAll("os" , "0101011011").replaceAll("ot" , "0101011100").replaceAll("ou" , "0101011101").replaceAll("ov" , "0101011110").replaceAll("ow" , "0101011111").replaceAll("ox" , "0101100000").replaceAll("oy" , "0101100001").replaceAll("oz" , "0101100010").replaceAll("o." , "0101100011").replaceAll("o," , "0101100100").replaceAll("o " , "0101100101"); 
            readLine = readLine.replaceAll("pa" , "0101100110").replaceAll("pb" , "0101100111").replaceAll("pd" , "0101101000").replaceAll("pe" , "0101101001").replaceAll("pf" , "0101101010").replaceAll("ph" , "0101101011").replaceAll("pi" , "0101101100").replaceAll("pk" , "0101101101").replaceAll("pl" , "0101101110").replaceAll("pm" , "0101101111").replaceAll("po" , "0101110000").replaceAll("pp" , "0101110001").replaceAll("pr" , "0101110010").replaceAll("ps" , "0101110011").replaceAll("pt" , "0101110100").replaceAll("pu" , "0101110101").replaceAll("pw" , "0101110110").replaceAll("py" , "0101110111").replaceAll("p." , "0101111000").replaceAll("p," , "0101111001").replaceAll("p " , "0101111010"); 
            readLine = readLine.replaceAll("qs" , "0101111011").replaceAll("qu" , "0101111100").replaceAll("q." , "0101111101").replaceAll("q," , "0101111110").replaceAll("q " , "0101111111");
            readLine = readLine.replaceAll("ra" , "0110000000").replaceAll("rb" , "0110000001").replaceAll("rc" , "0110000010").replaceAll("rd" , "0110000011").replaceAll("re" , "0110000100").replaceAll("rf" , "0110000101").replaceAll("rg" , "0110000110").replaceAll("rh" , "0110000111").replaceAll("ri" , "0110001000").replaceAll("rj" , "0110001001").replaceAll("rk" , "0110001010").replaceAll("rl" , "0110001011").replaceAll("rm" , "0110001100").replaceAll("rn" , "0110001101").replaceAll("ro" , "0110001110").replaceAll("rp" , "0110001111").replaceAll("rq" , "0110010000").replaceAll("rr" , "0110010001").replaceAll("rs" , "0110010010").replaceAll("rt" , "0110010011").replaceAll("ru" , "0110010100").replaceAll("rv" , "0110010101").replaceAll("rw" , "0110010110").replaceAll("ry" , "0110010111").replaceAll("rz" , "0110011000").replaceAll("r." , "0110011001").replaceAll("r," , "0110011010").replaceAll("r " , "0110011011"); 
            readLine = readLine.replaceAll("sa" , "0110011100").replaceAll("sb" , "0110011101").replaceAll("sc" , "0110011110").replaceAll("sd" , "0110011111").replaceAll("se" , "0110100000").replaceAll("sf" , "0110100001").replaceAll("sg" , "0110100010").replaceAll("sh" , "0110100011").replaceAll("si" , "0110100100").replaceAll("sj" , "0110100101").replaceAll("sk" , "0110100110").replaceAll("sl" , "0110100111").replaceAll("sm" , "0110101000").replaceAll("sn" , "0110101001").replaceAll("so" , "0110101010").replaceAll("sp" , "0110101011").replaceAll("sq" , "0110101100").replaceAll("sr" , "0110101101").replaceAll("ss" , "0110101110").replaceAll("st" , "0110101111").replaceAll("su" , "0110110000").replaceAll("sv" , "0110110001").replaceAll("sw" , "0110110010").replaceAll("sy" , "0110110011").replaceAll("s." , "0110110100").replaceAll("s," , "0110110101").replaceAll("s " , "0110110110"); 
            readLine = readLine.replaceAll("ta" , "0110110111").replaceAll("tb" , "0110111000").replaceAll("tc" , "0110111001").replaceAll("td" , "0110111010").replaceAll("te" , "0110111011").replaceAll("tf" , "0110111100").replaceAll("tg" , "0110111101").replaceAll("th" , "0110111110").replaceAll("ti" , "0110111111").replaceAll("tj" , "0111000000").replaceAll("tk" , "0111000001").replaceAll("tl" , "0111000010").replaceAll("tm" , "0111000011").replaceAll("tn" , "0111000100").replaceAll("to" , "0111000101").replaceAll("tp" , "0111000110").replaceAll("tr" , "0111000111").replaceAll("ts" , "0111001000").replaceAll("tt" , "0111001001").replaceAll("tu" , "0111001010").replaceAll("tv" , "0111001011").replaceAll("tw" , "0111001100").replaceAll("ty" , "0111001101").replaceAll("tz" , "0111001110").replaceAll("t." , "0111001111").replaceAll("t," , "0111010000").replaceAll("t " , "0111010001"); 
            readLine = readLine.replaceAll("ua" , "0111010010").replaceAll("ub" , "0111010011").replaceAll("uc" , "0111010100").replaceAll("ud" , "0111010101").replaceAll("ue" , "0111010110").replaceAll("uf" , "0111010111").replaceAll("ug" , "0111011000").replaceAll("uh" , "0111011001").replaceAll("ui" , "0111011010").replaceAll("uk" , "0111011011").replaceAll("ul" , "0111011100").replaceAll("um" , "0111011101").replaceAll("un" , "0111011110").replaceAll("uo" , "0111011111").replaceAll("up" , "0111100000").replaceAll("ur" , "0111100001").replaceAll("us" , "0111100010").replaceAll("ut" , "0111100011").replaceAll("uu" , "0111100100").replaceAll("uv" , "0111100101").replaceAll("ux" , "0111100110").replaceAll("uy" , "0111100111").replaceAll("uz" , "0111101000").replaceAll("u." , "0111101001").replaceAll("u," , "0111101010").replaceAll("u " , "0111101011"); 
            readLine = readLine.replaceAll("va" , "0111101100").replaceAll("vd" , "0111101101").replaceAll("ve" , "0111101110").replaceAll("vi" , "0111101111").replaceAll("vl" , "0111110000").replaceAll("vo" , "0111110001").replaceAll("vs" , "0111110010").replaceAll("vu" , "0111110011").replaceAll("vv" , "0111110100").replaceAll("vy" , "0111110101").replaceAll("v." , "0111110110").replaceAll("v," , "0111110111").replaceAll("v " , "0111111000");
            readLine = readLine.replaceAll("wa" , "0111111001").replaceAll("wb" , "0111111010").replaceAll("wc" , "0111111011").replaceAll("wd" , "0111111100").replaceAll("we" , "0111111101").replaceAll("wf" , "0111111110").replaceAll("wg" , "0111111111").replaceAll("wh" , "1000000000").replaceAll("wi" , "1000000001").replaceAll("wk" , "1000000010").replaceAll("wl" , "1000000011").replaceAll("wm" , "1000000100").replaceAll("wn" , "1000000101").replaceAll("wo" , "1000000110").replaceAll("wp" , "1000000111").replaceAll("wr" , "1000001000").replaceAll("ws" , "1000001001").replaceAll("wt" , "1000001010").replaceAll("wu" , "1000001011").replaceAll("ww" , "1000001100").replaceAll("wy" , "1000001101").replaceAll("w." , "1000001110").replaceAll("w," , "1000001111").replaceAll("w " , "1000010000"); 
            readLine = readLine.replaceAll("xa" , "1000010001").replaceAll("xc" , "1000010010").replaceAll("xe" , "1000010011").replaceAll("xh" , "1000010100").replaceAll("xi" , "1000010101").replaceAll("xo" , "1000010110").replaceAll("xp" , "1000010111").replaceAll("xt" , "1000011000").replaceAll("xu" , "1000011001").replaceAll("xy" , "1000011010").replaceAll("x." , "1000011011").replaceAll("x," , "1000011100").replaceAll("x " , "1000011101");
            readLine = readLine.replaceAll("ya" , "1000011110").replaceAll("yb" , "1000011111").replaceAll("yc" , "1000100000").replaceAll("yd" , "1000100001").replaceAll("ye" , "1000100010").replaceAll("yf" , "1000100011").replaceAll("yg" , "1000100100").replaceAll("yh" , "1000100101").replaceAll("yi" , "1000100110").replaceAll("yj" , "1000100111").replaceAll("yl" , "1000101000").replaceAll("ym" , "1000101001").replaceAll("yn" , "1000101010").replaceAll("yo" , "1000101011").replaceAll("yp" , "1000101100").replaceAll("yr" , "1000101101").replaceAll("ys" , "1000101110").replaceAll("yt" , "1000101111").replaceAll("yu" , "1000110000").replaceAll("yv" , "1000110001").replaceAll("yw" , "1000110010").replaceAll("yx" , "1000110011").replaceAll("y." , "1000110100").replaceAll("y," , "1000110101").replaceAll("y " , "1000110110"); 
            readLine = readLine.replaceAll("za" , "1000110111").replaceAll("ze" , "1000111000").replaceAll("zh" , "1000111001").replaceAll("zi" , "1000111010").replaceAll("zl" , "1000111011").replaceAll("zm" , "1000111100").replaceAll("zo" , "1000111101").replaceAll("zy" , "1000111110").replaceAll("zz" , "1000111111").replaceAll("z," , "1001000000").replaceAll("z " , "1001000001");
            readLine = readLine.replaceAll(".k" , "1001000010").replaceAll(".m" , "1001000011").replaceAll(".n" , "1001000100").replaceAll(".," , "1001000101").replaceAll(". " , "1001000110");
            readLine = readLine.replaceAll(", " , "1001000111");
            readLine = readLine.replaceAll(" a" , "1001001000").replaceAll(" b" , "1001001001").replaceAll(" c" , "1001001010").replaceAll(" d" , "1001001011").replaceAll(" e" , "1001001100").replaceAll(" f" , "1001001101").replaceAll(" g" , "1001001110").replaceAll(" h" , "1001001111").replaceAll(" i" , "1001010000").replaceAll(" j" , "1001010001").replaceAll(" k" , "1001010010").replaceAll(" l" , "1001010011").replaceAll(" m" , "1001010100").replaceAll(" n" , "1001010101").replaceAll(" o" , "1001010110").replaceAll(" p" , "1001010111").replaceAll(" q" , "1001011000").replaceAll(" r" , "1001011001").replaceAll(" s" , "1001011010").replaceAll(" t" , "1001011011").replaceAll(" u" , "1001011100").replaceAll(" v" , "1001011101").replaceAll(" w" , "1001011110").replaceAll(" x" , "1001011111").replaceAll(" y" , "1001100000").replaceAll(" z" , "1001100001").replaceAll(" ." , "1001100010").replaceAll(" ," , "1001100011").replaceAll("  " , "1001100100"); 
            
            System.out.println(readLine);
  
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");   
        
            }

            private static void fixedlengthofcodepercharacterinthetext1() 
                    
            {
                
            double sizeofthealphabetmessage = 29*5;
            double sizeofthecharacters = 29*8;
            double sizeofthecodes = 29*5;
            double tableofthecodes = sizeofthecharacters+sizeofthecodes;
            double totalsizeofthealphabetmessage = sizeofthealphabetmessage+tableofthecodes;
            
            System.out.println("\nSize of the alphabet message is : 29.0*5.0 = " + sizeofthealphabetmessage + " bits ");
            System.out.println("\nSize of the characters is : 29.0*8.0 = " + sizeofthecharacters + " bits ");
            System.out.println("\nSize of the codes is : 29.0*5.0 = " + sizeofthecodes + " bits ");
            System.out.println("\nTable of the codes is : Size of the characters + Size of the codes = " + tableofthecodes + " bits ");
            System.out.println("\nTotal size of the alphabet message is : Size of the alphabet message + Table of the codes = " + totalsizeofthealphabetmessage + " bits "); 
            System.out.println();     
                
            try    
        
            {

            File file = new File("Le-bonhomme-de-neige-by-Nesbo_-Jo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+'–’:©«»—”“/?…!();&-]" , " ").replace("]" , " ").replace("[", " ").replaceAll("Ø" , "O").replaceAll("[ÌÍÎÏ]" , "I").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("Ç" , "C").replaceAll("ç" , "c").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[ìíîï]", "i").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u").replaceAll("œ" , "oe"); 
            
            readLine = readLine.toLowerCase();
            
            readLine = readLine.replaceAll("a" , "00000").replaceAll("b" , "00001").replaceAll("c" , "00010").replaceAll("d" , "00011").replaceAll("e" , "00100").replaceAll("f" , "00101").replaceAll("g" , "00110").replaceAll("h" , "00111").replaceAll("i" , "01000").replaceAll("j" , "01001").replaceAll("k" , "01010").replaceAll("l" , "01011").replaceAll("m" , "01100").replaceAll("n" , "01101").replaceAll("o" , "01110").replaceAll("p" , "01111").replaceAll("q" , "10000").replaceAll("r" , "10001").replaceAll("s" , "10010").replaceAll("t" , "10011").replaceAll("u" , "10100").replaceAll("v" , "10101").replaceAll("w" , "10110").replaceAll("x" , "10111").replaceAll("y" , "11000").replaceAll("z" , "11001").replaceAll("." , "11010").replaceAll("," , "11011").replaceAll(" " , "11100");
          
            System.out.println(readLine);
   
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");   
        
            }

            private static void fixedlengthofcodepercharacterinthetext2() 
    
            {
                
            double sizeofthealphabetmessage = 29*5;
            double sizeofthecharacters = 29*8;
            double sizeofthecodes = 29*5;
            double tableofthecodes = sizeofthecharacters+sizeofthecodes;
            double totalsizeofthealphabetmessage = sizeofthealphabetmessage+tableofthecodes;
            
            System.out.println("\nSize of the alphabet message is : 29.0*5.0 = " + sizeofthealphabetmessage + " bits ");
            System.out.println("\nSize of the characters is : 29.0*8.0 = " + sizeofthecharacters + " bits ");
            System.out.println("\nSize of the codes is : 29.0*5.0 = " + sizeofthecodes + " bits ");
            System.out.println("\nTable of the codes is : Size of the characters + Size of the codes = " + tableofthecodes + " bits ");
            System.out.println("\nTotal size of the alphabet message is : Size of the alphabet message + Table of the codes = " + totalsizeofthealphabetmessage + " bits "); 
            System.out.println();      
                
            try    
        
            {

            File file = new File("The-Snowman-by-Jo-Nesbo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+'–’‘:©«»—”“/?…!();&-]" , " ").replace("]" , " ").replace("[", " ").replaceAll("Ø" , "O").replaceAll("[ÌÍÎÏ]" , "I").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("Ç" , "C").replaceAll("ç" , "c").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[ìíîï]", "i").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u").replaceAll("œ" , "oe"); 
            
            readLine = readLine.toLowerCase();
            
            readLine = readLine.replaceAll("a" , "00000").replaceAll("b" , "00001").replaceAll("c" , "00010").replaceAll("d" , "00011").replaceAll("e" , "00100").replaceAll("f" , "00101").replaceAll("g" , "00110").replaceAll("h" , "00111").replaceAll("i" , "01000").replaceAll("j" , "01001").replaceAll("k" , "01010").replaceAll("l" , "01011").replaceAll("m" , "01100").replaceAll("n" , "01101").replaceAll("o" , "01110").replaceAll("p" , "01111").replaceAll("q" , "10000").replaceAll("r" , "10001").replaceAll("s" , "10010").replaceAll("t" , "10011").replaceAll("u" , "10100").replaceAll("v" , "10101").replaceAll("w" , "10110").replaceAll("x" , "10111").replaceAll("y" , "11000").replaceAll("z" , "11001").replaceAll("." , "11010").replaceAll("," , "11011").replaceAll(" " , "11100");
          
            System.out.println(readLine);
  
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");    
        
            }

            private static void fixedlengthofcodeperpairofcharactersinthetext() 
    
            {
                
            double sizeofthealphabetmessage = 841*10;
            double sizeofthecharacters = 841*8;
            double sizeofthecodes = 841*10;
            double tableofthecodes = sizeofthecharacters+sizeofthecodes;
            double totalsizeofthealphabetmessage = sizeofthealphabetmessage+tableofthecodes;
            
            System.out.println("\nSize of the alphabet message is : 841.0*10.0 = " + sizeofthealphabetmessage + " bits ");
            System.out.println("\nSize of the characters is : 841.0*8.0 = " + sizeofthecharacters + " bits ");
            System.out.println("\nSize of the codes is : 841.0*10.0 = " + sizeofthecodes + " bits ");
            System.out.println("\nTable of the codes is : Size of the characters + Size of the codes = " + tableofthecodes + " bits ");
            System.out.println("\nTotal size of the alphabet message is : Size of the alphabet message + Table of the codes = " + totalsizeofthealphabetmessage + " bits ");  
            System.out.println(); 
                
            try    
        
            {

            File file = new File("Snomannen-by-Nesbo-Jo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+©()’?«»:–;…!&-]" , " ").replaceAll("Æ" , "AE").replaceAll("Ø" , "O").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u"); 
            
            readLine = readLine.toLowerCase();
            
            readLine = readLine.replaceAll("aa" , "0000000000").replaceAll("ab" , "0000000001").replaceAll("ac" , "0000000010").replaceAll("ad" , "0000000011").replaceAll("ae" , "0000000100").replaceAll("af" , "0000000101").replaceAll("ag" , "0000000110").replaceAll("ah" , "0000000111").replaceAll("ai" , "0000001000").replaceAll("aj" , "0000001001").replaceAll("ak" , "0000001010").replaceAll("al" , "0000001011").replaceAll("am" , "0000001100").replaceAll("an" , "0000001101").replaceAll("ao" , "0000001110").replaceAll("ap" , "0000001111").replaceAll("ar" , "0000010000").replaceAll("as" , "0000010001").replaceAll("at" , "0000010010").replaceAll("au" , "0000010011").replaceAll("av" , "0000010100").replaceAll("aw" , "0000010101").replaceAll("ax" , "0000010110").replaceAll("ay" , "0000010111").replaceAll("az" , "0000011000").replaceAll("a." , "0000011001").replaceAll("a," , "0000011010").replaceAll("a " , "0000011011"); 
            readLine = readLine.replaceAll("ba" , "0000011100").replaceAll("bb" , "0000011101").replaceAll("bd" , "0000011110").replaceAll("be" , "0000011111").replaceAll("bh" , "0000100000").replaceAll("bi" , "0000100001").replaceAll("bj" , "0000100010").replaceAll("bl" , "0000100011").replaceAll("bm" , "0000100100").replaceAll("bn" , "0000100101").replaceAll("bo" , "0000100110").replaceAll("br" , "0000100111").replaceAll("bs" , "0000101000").replaceAll("bu" , "0000101001").replaceAll("by" , "0000101010").replaceAll("b." , "0000101011").replaceAll("b," , "0000101100").replaceAll("b " , "0000101101"); 
            readLine = readLine.replaceAll("ca" , "0000101110").replaceAll("cc" , "0000101111").replaceAll("cd" , "0000110000").replaceAll("ce" , "0000110001").replaceAll("ch" , "0000110010").replaceAll("ci" , "0000110011").replaceAll("ck" , "0000110100").replaceAll("cl" , "0000110101").replaceAll("co" , "0000110110").replaceAll("cr" , "0000110111").replaceAll("cs" , "0000111000").replaceAll("ct" , "0000111001").replaceAll("cu" , "0000111010").replaceAll("cv" , "0000111011").replaceAll("c," , "0000111100").replaceAll("c " , "0000111101"); 
            readLine = readLine.replaceAll("da" , "0000111110").replaceAll("db" , "0000111111").replaceAll("dc" , "0001000000").replaceAll("dd" , "0001000001").replaceAll("de" , "0001000010").replaceAll("df" , "0001000011").replaceAll("dg" , "0001000100").replaceAll("dh" , "0001000101").replaceAll("di" , "0001000110").replaceAll("dj" , "0001000111").replaceAll("dk" , "0001001000").replaceAll("dl" , "0001001001").replaceAll("dm" , "0001001010").replaceAll("dn" , "0001001011").replaceAll("do" , "0001001100").replaceAll("dp" , "0001001101").replaceAll("dr" , "0001001110").replaceAll("ds" , "0001001111").replaceAll("dt" , "0001010000").replaceAll("du" , "0001010001").replaceAll("dv" , "0001010010").replaceAll("dw" , "0001010011").replaceAll("dy" , "0001010100").replaceAll("d." , "0001010101").replaceAll("d," , "0001010110").replaceAll("d " , "0001010111"); 
            readLine = readLine.replaceAll("ea" , "0001011000").replaceAll("eb" , "0001011001").replaceAll("ec" , "0001011010").replaceAll("ed" , "0001011011").replaceAll("ee" , "0001011100").replaceAll("ef" , "0001011101").replaceAll("eg" , "0001011110").replaceAll("eh" , "0001011111").replaceAll("ei" , "0001100000").replaceAll("ej" , "0001100001").replaceAll("ek" , "0001100010").replaceAll("el" , "0001100011").replaceAll("em" , "0001100100").replaceAll("en" , "0001100101").replaceAll("eo" , "0001100110").replaceAll("ep" , "0001100111").replaceAll("er" , "0001101000").replaceAll("es" , "0001101001").replaceAll("et" , "0001101010").replaceAll("eu" , "0001101011").replaceAll("ev" , "0001101100").replaceAll("ex" , "0001101101").replaceAll("ey" , "0001101110").replaceAll("e." , "0001101111").replaceAll("e," , "0001110000").replaceAll("e " , "0001110001"); 
            readLine = readLine.replaceAll("fa" , "0001110010").replaceAll("fb" , "0001110011").replaceAll("fe" , "0001110100").replaceAll("ff" , "0001110101").replaceAll("fi" , "0001110110").replaceAll("fj" , "0001110111").replaceAll("fl" , "0001111000").replaceAll("fm" , "0001111001").replaceAll("fn" , "0001111010").replaceAll("fo" , "0001111011").replaceAll("fr" , "0001111100").replaceAll("fs" , "0001111101").replaceAll("ft" , "0001111110").replaceAll("fu" , "0001111111").replaceAll("fy" , "0010000000").replaceAll("f." , "0010000001").replaceAll("f," , "0010000010").replaceAll("f " , "0010000011"); 
            readLine = readLine.replaceAll("ga" , "0010000100").replaceAll("gb" , "0010000101").replaceAll("gd" , "0010000110").replaceAll("ge" , "0010000111").replaceAll("gf" , "0010001000").replaceAll("gg" , "0010001001").replaceAll("gh" , "0010001010").replaceAll("gi" , "0010001011").replaceAll("gj" , "0010001100").replaceAll("gk" , "0010001101").replaceAll("gl" , "0010001110").replaceAll("gm" , "0010001111").replaceAll("gn" , "0010010000").replaceAll("go" , "0010010001").replaceAll("gp" , "0010010010").replaceAll("gr" , "0010010011").replaceAll("gs" , "0010010100").replaceAll("gt" , "0010010101").replaceAll("gu" , "0010010110").replaceAll("gv" , "0010010111").replaceAll("gw" , "0010011000").replaceAll("gy" , "0010011001").replaceAll("g." , "0010011010").replaceAll("g," , "0010011011").replaceAll("g " , "0010011100"); 
            readLine = readLine.replaceAll("ha" , "0010011101").replaceAll("hb" , "0010011110").replaceAll("hc" , "0010011111").replaceAll("hd" , "0010100000").replaceAll("he" , "0010100001").replaceAll("hi" , "0010100010").replaceAll("hj" , "0010100011").replaceAll("hl" , "0010100100").replaceAll("hn" , "0010100101").replaceAll("ho" , "0010100110").replaceAll("hr" , "0010100111").replaceAll("ht" , "0010101000").replaceAll("hu" , "0010101001").replaceAll("hv" , "0010101010").replaceAll("hy" , "0010101011").replaceAll("h." , "0010101100").replaceAll("h," , "0010101101").replaceAll("h " , "0010101110"); 
            readLine = readLine.replaceAll("ia" , "0010101111").replaceAll("ib" , "0010110000").replaceAll("ic" , "0010110001").replaceAll("id" , "0010110010").replaceAll("ie" , "0010110011").replaceAll("if" , "0010110100").replaceAll("ig" , "0010110101").replaceAll("ih" , "0010110110").replaceAll("ii" , "0010110111").replaceAll("ik" , "0010111000").replaceAll("il" , "0010111001").replaceAll("im" , "0010111010").replaceAll("in" , "0010111011").replaceAll("io" , "0010111100").replaceAll("ip" , "0010111101").replaceAll("iq" , "0010111110").replaceAll("ir" , "0010111111").replaceAll("is" , "0011000000").replaceAll("it" , "0011000001").replaceAll("iu" , "0011000010").replaceAll("iv" , "0011000011").replaceAll("iz" , "0011000100").replaceAll("i." , "0011000101").replaceAll("i," , "0011000110").replaceAll("i " , "0011000111"); 
            readLine = readLine.replaceAll("ja" , "0011001000").replaceAll("je" , "0011001001").replaceAll("ji" , "0011001010").replaceAll("jo" , "0011001011").replaceAll("jr" , "0011001100").replaceAll("ju" , "0011001101").replaceAll("jy" , "0011001110").replaceAll("j." , "0011001111").replaceAll("j," , "0011010000").replaceAll("j " , "0011010001");
            readLine = readLine.replaceAll("ka" , "0011010010").replaceAll("kb" , "0011010011").replaceAll("kd" , "0011010100").replaceAll("ke" , "0011010101").replaceAll("kf" , "0011010110").replaceAll("kg" , "0011010111").replaceAll("kh" , "0011011000").replaceAll("ki" , "0011011001").replaceAll("kj" , "0011011010").replaceAll("kk" , "0011011011").replaceAll("kl" , "0011011100").replaceAll("km" , "0011011101").replaceAll("kn" , "0011011110").replaceAll("ko" , "0011011111").replaceAll("kp" , "0011100000").replaceAll("kr" , "0011100001").replaceAll("ks" , "0011100010").replaceAll("kt" , "0011100011").replaceAll("ku" , "0011100100").replaceAll("kv" , "0011100101").replaceAll("ky" , "0011100110").replaceAll("k." , "0011100111").replaceAll("k," , "0011101000").replaceAll("k " , "0011101001"); 
            readLine = readLine.replaceAll("la" , "0011101010").replaceAll("lb" , "0011101011").replaceAll("lc" , "0011101100").replaceAll("ld" , "0011101101").replaceAll("le" , "0011101110").replaceAll("lf" , "0011101111").replaceAll("lg" , "0011110000").replaceAll("lh" , "0011110001").replaceAll("li" , "0011110010").replaceAll("lj" , "0011110011").replaceAll("lk" , "0011110100").replaceAll("ll" , "0011110101").replaceAll("lm" , "0011110110").replaceAll("ln" , "0011110111").replaceAll("lo" , "0011111000").replaceAll("lp" , "0011111001").replaceAll("lr" , "0011111010").replaceAll("ls" , "0011111011").replaceAll("lt" , "0011111100").replaceAll("lu" , "0011111101").replaceAll("lv" , "0011111110").replaceAll("lw" , "0011111111").replaceAll("ly" , "0100000000").replaceAll("lz" , "0100000001").replaceAll("l." , "0100000010").replaceAll("l," , "0100000011").replaceAll("l " , "0100000100"); 
            readLine = readLine.replaceAll("ma" , "0100000101").replaceAll("mb" , "0100000110").replaceAll("md" , "0100000111").replaceAll("me" , "0100001000").replaceAll("mf" , "0100001001").replaceAll("mg" , "0100001010").replaceAll("mh" , "0100001011").replaceAll("mi" , "0100001100").replaceAll("mk" , "0100001101").replaceAll("ml" , "0100001110").replaceAll("mm" , "0100001111").replaceAll("mn" , "0100010000").replaceAll("mo" , "0100010001").replaceAll("mp" , "0100010010").replaceAll("mr" , "0100010011").replaceAll("ms" , "0100010100").replaceAll("mt" , "0100010101").replaceAll("mu" , "0100010110").replaceAll("mv" , "0100010111").replaceAll("mw" , "0100011000").replaceAll("my" , "0100011001").replaceAll("m." , "0100011010").replaceAll("m," , "0100011011").replaceAll("m " , "0100011100"); 
            readLine = readLine.replaceAll("na" , "0100011101").replaceAll("nb" , "0100011110").replaceAll("nc" , "0100011111").replaceAll("nd" , "0100100000").replaceAll("ne" , "0100100001").replaceAll("nf" , "0100100010").replaceAll("ng" , "0100100011").replaceAll("nh" , "0100100100").replaceAll("ni" , "0100100101").replaceAll("nj" , "0100100110").replaceAll("nk" , "0100100111").replaceAll("nl" , "0100101000").replaceAll("nm" , "0100101001").replaceAll("nn" , "0100101010").replaceAll("no" , "0100101011").replaceAll("np" , "0100101100").replaceAll("nr" , "0100101101").replaceAll("ns" , "0100101110").replaceAll("nt" , "0100101111").replaceAll("nu" , "0100110000").replaceAll("nv" , "0100110001").replaceAll("nx" , "0100110010").replaceAll("ny" , "0100110011").replaceAll("nz" , "0100110100").replaceAll("n." , "0100110101").replaceAll("n," , "0100110110").replaceAll("n " , "0100110111"); 
            readLine = readLine.replaceAll("oa" , "0100111000").replaceAll("ob" , "0100111001").replaceAll("oc" , "0100111010").replaceAll("od" , "0100111011").replaceAll("oe" , "0100111100").replaceAll("of" , "0100111101").replaceAll("og" , "0100111110").replaceAll("oh" , "0100111111").replaceAll("oi" , "0101000000").replaceAll("oj" , "0101000001").replaceAll("ok" , "0101000010").replaceAll("ol" , "0101000011").replaceAll("om" , "0101000100").replaceAll("on" , "0101000101").replaceAll("oo" , "0101000110").replaceAll("op" , "0101000111").replaceAll("or" , "0101001000").replaceAll("os" , "0101001001").replaceAll("ot" , "0101001010").replaceAll("ou" , "0101001011").replaceAll("ov" , "0101001100").replaceAll("ow" , "0101001101").replaceAll("ox" , "0101001110").replaceAll("oy" , "0101001111").replaceAll("o." , "0101010000").replaceAll("o," , "0101010001").replaceAll("o " , "0101010010"); 
            readLine = readLine.replaceAll("pa" , "0101010011").replaceAll("pb" , "0101010100").replaceAll("pc" , "0101010101").replaceAll("pd" , "0101010110").replaceAll("pe" , "0101010111").replaceAll("pf" , "0101011000").replaceAll("pg" , "0101011001").replaceAll("ph" , "0101011010").replaceAll("pi" , "0101011011").replaceAll("pj" , "0101011100").replaceAll("pk" , "0101011101").replaceAll("pl" , "0101011110").replaceAll("pm" , "0101011111").replaceAll("pn" , "0101100000").replaceAll("po" , "0101100001").replaceAll("pp" , "0101100010").replaceAll("pr" , "0101100011").replaceAll("ps" , "0101100100").replaceAll("pt" , "0101100101").replaceAll("pu" , "0101100110").replaceAll("pv" , "0101100111").replaceAll("py" , "0101101000").replaceAll("p." , "0101101001").replaceAll("p," , "0101101010").replaceAll("p " , "0101101011"); 
            readLine = readLine.replaceAll("qu" , "0101101100").replaceAll("q " , "0101101101");
            readLine = readLine.replaceAll("ra" , "0101101110").replaceAll("rb" , "0101101111").replaceAll("rc" , "0101110000").replaceAll("rd" , "0101110001").replaceAll("re" , "0101110010").replaceAll("rf" , "0101110011").replaceAll("rg" , "0101110100").replaceAll("rh" , "0101110101").replaceAll("ri" , "0101110110").replaceAll("rj" , "0101110111").replaceAll("rk" , "0101111000").replaceAll("rl" , "0101111001").replaceAll("rm" , "0101111010").replaceAll("rn" , "0101111011").replaceAll("ro" , "0101111100").replaceAll("rp" , "0101111101").replaceAll("rr" , "0101111110").replaceAll("rs" , "0101111111").replaceAll("rt" , "0110000000").replaceAll("ru" , "0110000001").replaceAll("rv" , "0110000010").replaceAll("rw" , "0110000011").replaceAll("ry" , "0110000100").replaceAll("r." , "0110000101").replaceAll("r," , "0110000110").replaceAll("r " , "0110000111"); 
            readLine = readLine.replaceAll("sa" , "0110001000").replaceAll("sb" , "0110001001").replaceAll("sc" , "0110001010").replaceAll("sd" , "0110001011").replaceAll("se" , "0110001100").replaceAll("sf" , "0110001101").replaceAll("sg" , "0110001110").replaceAll("sh" , "0110001111").replaceAll("si" , "0110010000").replaceAll("sj" , "0110010001").replaceAll("sk" , "0110010010").replaceAll("sl" , "0110010011").replaceAll("sm" , "0110010100").replaceAll("sn" , "0110010101").replaceAll("so" , "0110010110").replaceAll("sp" , "0110010111").replaceAll("sr" , "0110011000").replaceAll("ss" , "0110011001").replaceAll("st" , "0110011010").replaceAll("su" , "0110011011").replaceAll("sv" , "0110011100").replaceAll("sw" , "0110011101").replaceAll("sy" , "0110011110").replaceAll("s." , "0110011111").replaceAll("s," , "0110100000").replaceAll("s " , "0110100001"); 
            readLine = readLine.replaceAll("ta" , "0110100010").replaceAll("tb" , "0110100011").replaceAll("tc" , "0110100100").replaceAll("td" , "0110100101").replaceAll("te" , "0110100110").replaceAll("tf" , "0110100111").replaceAll("tg" , "0110101000").replaceAll("th" , "0110101001").replaceAll("ti" , "0110101010").replaceAll("tj" , "0110101011").replaceAll("tk" , "0110101100").replaceAll("tl" , "0110101101").replaceAll("tm" , "0110101110").replaceAll("tn" , "0110101111").replaceAll("to" , "0110110000").replaceAll("tp" , "0110110001").replaceAll("tr" , "0110110010").replaceAll("ts" , "0110110011").replaceAll("tt" , "0110110100").replaceAll("tu" , "0110110101").replaceAll("tv" , "0110110110").replaceAll("tw" , "0110110111").replaceAll("ty" , "0110111000").replaceAll("tz" , "0110111001").replaceAll("t." , "0110111010").replaceAll("t," , "0110111011").replaceAll("t " , "0110111100"); 
            readLine = readLine.replaceAll("ua" , "0110111101").replaceAll("ub" , "0110111110").replaceAll("uc" , "0110111111").replaceAll("ud" , "0111000000").replaceAll("ue" , "0111000001").replaceAll("uf" , "0111000010").replaceAll("ug" , "0111000011").replaceAll("uh" , "0111000100").replaceAll("ui" , "0111000101").replaceAll("uj" , "0111000110").replaceAll("uk" , "0111000111").replaceAll("ul" , "0111001000").replaceAll("um" , "0111001001").replaceAll("un" , "0111001010").replaceAll("uo" , "0111001011").replaceAll("up" , "0111001100").replaceAll("ur" , "0111001101").replaceAll("us" , "0111001110").replaceAll("ut" , "0111001111").replaceAll("uu" , "0111010000").replaceAll("uv" , "0111010001").replaceAll("ux" , "0111010010").replaceAll("uz" , "0111010011").replaceAll("u." , "0111010100").replaceAll("u," , "0111010101").replaceAll("u " , "0111010110"); 
            readLine = readLine.replaceAll("va" , "0111010111").replaceAll("vb" , "0111011000").replaceAll("vd" , "0111011001").replaceAll("ve" , "0111011010").replaceAll("vf" , "0111011011").replaceAll("vg" , "0111011100").replaceAll("vh" , "0111011101").replaceAll("vi" , "0111011110").replaceAll("vj" , "0111011111").replaceAll("vk" , "0111100000").replaceAll("vl" , "0111100001").replaceAll("vm" , "0111100010").replaceAll("vn" , "0111100011").replaceAll("vo" , "0111100100").replaceAll("vp" , "0111100101").replaceAll("vr" , "0111100110").replaceAll("vs" , "0111100111").replaceAll("vt" , "0111101000").replaceAll("vu" , "0111101001").replaceAll("vv" , "0111101010").replaceAll("v." , "0111101011").replaceAll("v," , "0111101100").replaceAll("v " , "0111101101"); 
            readLine = readLine.replaceAll("wa" , "0111101110").replaceAll("wb" , "0111101111").replaceAll("wd" , "0111110000").replaceAll("we" , "0111110001").replaceAll("wh" , "0111110010").replaceAll("wi" , "0111110011").replaceAll("wl" , "0111110100").replaceAll("wn" , "0111110101").replaceAll("wo" , "0111110110").replaceAll("ww" , "0111110111").replaceAll("w." , "0111111000").replaceAll("w " , "0111111001");
            readLine = readLine.replaceAll("xa" , "0111111010").replaceAll("xe" , "0111111011").replaceAll("xi" , "0111111100").replaceAll("xl" , "0111111101").replaceAll("xy" , "0111111110").replaceAll("x." , "0111111111").replaceAll("x," , "1000000000").replaceAll("x " , "1000000001");
            readLine = readLine.replaceAll("ya" , "1000000010").replaceAll("yb" , "1000000011").replaceAll("yc" , "1000000100").replaceAll("yd" , "1000000101").replaceAll("ye" , "1000000110").replaceAll("yf" , "1000000111").replaceAll("yg" , "1000001000").replaceAll("yh" , "1000001001").replaceAll("yj" , "1000001010").replaceAll("yk" , "1000001011").replaceAll("yl" , "1000001100").replaceAll("ym" , "1000001101").replaceAll("yn" , "1000001110").replaceAll("yo" , "1000001111").replaceAll("yp" , "1000010000").replaceAll("yr" , "1000010001").replaceAll("ys" , "1000010010").replaceAll("yt" , "1000010011").replaceAll("yu" , "1000010100").replaceAll("yv" , "1000010101").replaceAll("y." , "1000010110").replaceAll("y," , "1000010111").replaceAll("y " , "1000011000"); 
            readLine = readLine.replaceAll("za" , "1000011001").replaceAll("ze" , "1000011010").replaceAll("zh" , "1000011011").replaceAll("zi" , "1000011100").replaceAll("zo" , "1000011101").replaceAll("zy" , "1000011110").replaceAll("zz" , "1000011111").replaceAll("z " , "1000100000");
            readLine = readLine.replaceAll(".a" , "1000100001").replaceAll(".j" , "1000100010").replaceAll(".n" , "1000100011").replaceAll(".," , "1000100100").replaceAll(". " , "1000100101");
            readLine = readLine.replaceAll(", " , "1000100110");
            readLine = readLine.replaceAll(" a" , "1000100111").replaceAll(" b" , "1000101000").replaceAll(" c" , "1000101001").replaceAll(" d" , "1000101010").replaceAll(" e" , "1000101011").replaceAll(" f" , "1000101100").replaceAll(" g" , "1000101101").replaceAll(" h" , "1000101110").replaceAll(" i" , "1000101111").replaceAll(" j" , "1000110000").replaceAll(" k" , "1000110001").replaceAll(" l" , "1000110010").replaceAll(" m" , "1000110011").replaceAll(" n" , "1000110100").replaceAll(" o" , "1000110101").replaceAll(" p" , "1000110110").replaceAll(" q" , "1000110111").replaceAll(" r" , "1000111000").replaceAll(" s" , "1000111001").replaceAll(" t" , "1000111010").replaceAll(" u" , "1000111011").replaceAll(" v" , "1000111100").replaceAll(" w" , "1000111101").replaceAll(" x" , "1000111110").replaceAll(" y" , "1000111111").replaceAll(" z" , "1001000000").replaceAll(" ." , "1001000001").replaceAll(" ," , "1001000010").replaceAll("  " , "1001000011"); 
            
            System.out.println(readLine);
   
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");    
       
            }

            private static void fixedlengthofcodeperpairofcharactersinthetext1() 
            
            {
                
            double sizeofthealphabetmessage = 841*10;
            double sizeofthecharacters = 841*8;
            double sizeofthecodes = 841*10;
            double tableofthecodes = sizeofthecharacters+sizeofthecodes;
            double totalsizeofthealphabetmessage = sizeofthealphabetmessage+tableofthecodes;
            
            System.out.println("\nSize of the alphabet message is : 841.0*10.0 = " + sizeofthealphabetmessage + " bits ");
            System.out.println("\nSize of the characters is : 841.0*8.0 = " + sizeofthecharacters + " bits ");
            System.out.println("\nSize of the codes is : 841.0*10.0 = " + sizeofthecodes + " bits ");
            System.out.println("\nTable of the codes is : Size of the characters + Size of the codes = " + tableofthecodes + " bits ");
            System.out.println("\nTotal size of the alphabet message is : Size of the alphabet message + Table of the codes = " + totalsizeofthealphabetmessage + " bits ");  
            System.out.println();     
                
            try    
        
            {

            File file = new File("Le-bonhomme-de-neige-by-Nesbo_-Jo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+'–’:©«»—”“/?…!();&-]" , " ").replace("]" , " ").replace("[", " ").replaceAll("Ø" , "O").replaceAll("[ÌÍÎÏ]" , "I").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("Ç" , "C").replaceAll("ç" , "c").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[ìíîï]", "i").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u").replaceAll("œ" , "oe"); 
            
            readLine = readLine.toLowerCase();
            
            readLine = readLine.replaceAll("aa" , "0000000000").replaceAll("ab" , "0000000001").replaceAll("ac" , "0000000010").replaceAll("ad" , "0000000011").replaceAll("ae" , "0000000100").replaceAll("af" , "0000000101").replaceAll("ag" , "0000000110").replaceAll("ah" , "0000000111").replaceAll("ai" , "0000001000").replaceAll("aj" , "0000001001").replaceAll("ak" , "0000001010").replaceAll("al" , "0000001011").replaceAll("am" , "0000001100").replaceAll("an" , "0000001101").replaceAll("ao" , "0000001110").replaceAll("ap" , "0000001111").replaceAll("aq" , "0000010000").replaceAll("ar" , "0000010001").replaceAll("as" , "0000010010").replaceAll("at" , "0000010011").replaceAll("au" , "0000010100").replaceAll("av" , "0000010101").replaceAll("aw" , "0000010110").replaceAll("ax" , "0000010111").replaceAll("ay" , "0000011000").replaceAll("az" , "0000011001").replaceAll("a." , "0000011010").replaceAll("a," , "0000011011").replaceAll("a " , "0000011100"); 
            readLine = readLine.replaceAll("ba" , "0000011101").replaceAll("bb" , "0000011110").replaceAll("bc" , "0000011111").replaceAll("bd" , "0000100000").replaceAll("be" , "0000100001").replaceAll("bi" , "0000100010").replaceAll("bj" , "0000100011").replaceAll("bl" , "0000100100").replaceAll("bm" , "0000100101").replaceAll("bo" , "0000100110").replaceAll("br" , "0000100111").replaceAll("bs" , "0000101000").replaceAll("bt" , "0000101001").replaceAll("bu" , "0000101010").replaceAll("by" , "0000101011").replaceAll("b." , "0000101100").replaceAll("b," , "0000101101").replaceAll("b " , "0000101110"); 
            readLine = readLine.replaceAll("ca" , "0000101111").replaceAll("cc" , "0000110000").replaceAll("cd" , "0000110001").replaceAll("ce" , "0000110010").replaceAll("ch" , "0000110011").replaceAll("ci" , "0000110100").replaceAll("ck" , "0000110101").replaceAll("cl" , "0000110110").replaceAll("cm" , "0000110111").replaceAll("co" , "0000111000").replaceAll("cq" , "0000111001").replaceAll("cr" , "0000111010").replaceAll("cs" , "0000111011").replaceAll("ct" , "0000111100").replaceAll("cu" , "0000111101").replaceAll("cv" , "0000111110").replaceAll("cy" , "0000111111").replaceAll("c." , "0001000000").replaceAll("c," , "0001000001").replaceAll("c " , "0001000010");      
            readLine = readLine.replaceAll("da" , "0001000011").replaceAll("db" , "0001000100").replaceAll("dc" , "0001000101").replaceAll("dd" , "0001000110").replaceAll("de" , "0001000111").replaceAll("dg" , "0001001000").replaceAll("dh" , "0001001001").replaceAll("di" , "0001001010").replaceAll("dj" , "0001001011").replaceAll("dk" , "0001001100").replaceAll("dl" , "0001001101").replaceAll("dm" , "0001001110").replaceAll("dn" , "0001001111").replaceAll("do" , "0001010000").replaceAll("dr" , "0001010001").replaceAll("ds" , "0001010010").replaceAll("dt" , "0001010011").replaceAll("du" , "0001010100").replaceAll("dv" , "0001010101").replaceAll("dw" , "0001010110").replaceAll("dy" , "0001010111").replaceAll("d." , "0001011000").replaceAll("d," , "0001011001").replaceAll("d " , "0001011010"); 
            readLine = readLine.replaceAll("ea" , "0001011011").replaceAll("eb" , "0001011100").replaceAll("ec" , "0001011101").replaceAll("ed" , "0001011110").replaceAll("ee" , "0001011111").replaceAll("ef" , "0001100000").replaceAll("eg" , "0001100001").replaceAll("eh" , "0001100010").replaceAll("ei" , "0001100011").replaceAll("ej" , "0001100100").replaceAll("ek" , "0001100101").replaceAll("el" , "0001100110").replaceAll("em" , "0001100111").replaceAll("en" , "0001101000").replaceAll("eo" , "0001101001").replaceAll("ep" , "0001101010").replaceAll("eq" , "0001101011").replaceAll("er" , "0001101100").replaceAll("es" , "0001101101").replaceAll("et" , "0001101110").replaceAll("eu" , "0001101111").replaceAll("ev" , "0001110000").replaceAll("ew" , "0001110001").replaceAll("ex" , "0001110010").replaceAll("ey" , "0001110011").replaceAll("ez" , "0001110100").replaceAll("e." , "0001110101").replaceAll("e," , "0001110110").replaceAll("e " , "0001110111"); 
            readLine = readLine.replaceAll("fa" , "0001111000").replaceAll("fb" , "0001111001").replaceAll("fe" , "0001111010").replaceAll("ff" , "0001111011").replaceAll("fh" , "0001111100").replaceAll("fi" , "0001111101").replaceAll("fj" , "0001111110").replaceAll("fl" , "0001111111").replaceAll("fo" , "0010000000").replaceAll("fr" , "0010000001").replaceAll("fs" , "0010000010").replaceAll("ft" , "0010000011").replaceAll("fu" , "0010000100").replaceAll("f." , "0010000101").replaceAll("f," , "0010000110").replaceAll("f " , "0010000111"); 
            readLine = readLine.replaceAll("ga" , "0010001000").replaceAll("gb" , "0010001001").replaceAll("gd" , "0010001010").replaceAll("ge" , "0010001011").replaceAll("gg" , "0010001100").replaceAll("gh" , "0010001101").replaceAll("gi" , "0010001110").replaceAll("gj" , "0010001111").replaceAll("gl" , "0010010000").replaceAll("gm" , "0010010001").replaceAll("gn" , "0010010010").replaceAll("go" , "0010010011").replaceAll("gr" , "0010010100").replaceAll("gs" , "0010010101").replaceAll("gt" , "0010010110").replaceAll("gu" , "0010010111").replaceAll("gv" , "0010011000").replaceAll("gy" , "0010011001").replaceAll("gz" , "0010011010").replaceAll("g." , "0010011011").replaceAll("g," , "0010011100").replaceAll("g " , "0010011101"); 
            readLine = readLine.replaceAll("ha" , "0010011110").replaceAll("he" , "0010011111").replaceAll("hi" , "0010100000").replaceAll("hl" , "0010100001").replaceAll("hm" , "0010100010").replaceAll("hn" , "0010100011").replaceAll("ho" , "0010100100").replaceAll("hr" , "0010100101").replaceAll("ht" , "0010100110").replaceAll("hu" , "0010100111").replaceAll("hv" , "0010101000").replaceAll("hy" , "0010101001").replaceAll("h." , "0010101010").replaceAll("h," , "0010101011").replaceAll("h " , "0010101100"); 
            readLine = readLine.replaceAll("ia" , "0010101101").replaceAll("ib" , "0010101110").replaceAll("ic" , "0010101111").replaceAll("id" , "0010110000").replaceAll("ie" , "0010110001").replaceAll("if" , "0010110010").replaceAll("ig" , "0010110011").replaceAll("ih" , "0010110100").replaceAll("ii" , "0010110101").replaceAll("ij" , "0010110110").replaceAll("ik" , "0010110111").replaceAll("il" , "0010111000").replaceAll("im" , "0010111001").replaceAll("in" , "0010111010").replaceAll("io" , "0010111011").replaceAll("ip" , "0010111100").replaceAll("iq" , "0010111101").replaceAll("ir" , "0010111110").replaceAll("is" , "0010111111").replaceAll("it" , "0011000000").replaceAll("iu" , "0011000001").replaceAll("iv" , "0011000010").replaceAll("ix" , "0011000011").replaceAll("iz" , "0011000100").replaceAll("i." , "0011000101").replaceAll("i," , "0011000110").replaceAll("i " , "0011000111"); 
            readLine = readLine.replaceAll("ja" , "0011001000").replaceAll("je" , "0011001001").replaceAll("ji" , "0011001010").replaceAll("jo" , "0011001011").replaceAll("ju" , "0011001100").replaceAll("j." , "0011001101").replaceAll("j " , "0011001110");
            readLine = readLine.replaceAll("ka" , "0011001111").replaceAll("ke" , "0011010000").replaceAll("kh" , "0011010001").replaceAll("ki" , "0011010010").replaceAll("kj" , "0011010011").replaceAll("kk" , "0011010100").replaceAll("kl" , "0011010101").replaceAll("km" , "0011010110").replaceAll("kn" , "0011010111").replaceAll("ko" , "0011011000").replaceAll("kp" , "0011011001").replaceAll("kr" , "0011011010").replaceAll("ks" , "0011011011").replaceAll("kt" , "0011011100").replaceAll("ku" , "0011011101").replaceAll("kv" , "0011011110").replaceAll("ky" , "0011011111").replaceAll("k." , "0011100000").replaceAll("k," , "0011100001").replaceAll("k " , "0011100010"); 
            readLine = readLine.replaceAll("la" , "0011100011").replaceAll("lb" , "0011100100").replaceAll("lc" , "0011100101").replaceAll("ld" , "0011100110").replaceAll("le" , "0011100111").replaceAll("lf" , "0011101000").replaceAll("lg" , "0011101001").replaceAll("lh" , "0011101010").replaceAll("li" , "0011101011").replaceAll("lj" , "0011101100").replaceAll("lk" , "0011101101").replaceAll("ll" , "0011101110").replaceAll("lm" , "0011101111").replaceAll("ln" , "0011110000").replaceAll("lo" , "0011110001").replaceAll("lp" , "0011110010").replaceAll("lq" , "0011110011").replaceAll("lr" , "0011110100").replaceAll("ls" , "0011110101").replaceAll("lt" , "0011110110").replaceAll("lu" , "0011110111").replaceAll("lv" , "0011111000").replaceAll("ly" , "0011111001").replaceAll("lz" , "0011111010").replaceAll("l." , "0011111011").replaceAll("l," , "0011111100").replaceAll("l " , "0011111101"); 
            readLine = readLine.replaceAll("ma" , "0011111110").replaceAll("mb" , "0011111111").replaceAll("md" , "0100000000").replaceAll("me" , "0100000001").replaceAll("mi" , "0100000010").replaceAll("ml" , "0100000011").replaceAll("mm" , "0100000100").replaceAll("mn" , "0100000101").replaceAll("mo" , "0100000110").replaceAll("mp" , "0100000111").replaceAll("ms" , "0100001000").replaceAll("mu" , "0100001001").replaceAll("mw" , "0100001010").replaceAll("my" , "0100001011").replaceAll("m." , "0100001100").replaceAll("m," , "0100001101").replaceAll("m " , "0100001110");    
            readLine = readLine.replaceAll("na" , "0100001111").replaceAll("nb" , "0100010000").replaceAll("nc" , "0100010001").replaceAll("nd" , "0100010010").replaceAll("ne" , "0100010011").replaceAll("nf" , "0100010100").replaceAll("ng" , "0100010101").replaceAll("nh" , "0100010110").replaceAll("ni" , "0100010111").replaceAll("nj" , "0100011000").replaceAll("nk" , "0100011001").replaceAll("nl" , "0100011010").replaceAll("nm" , "0100011011").replaceAll("nn" , "0100011100").replaceAll("no" , "0100011101").replaceAll("np" , "0100011110").replaceAll("nq" , "0100011111").replaceAll("nr" , "0100100000").replaceAll("ns" , "0100100001").replaceAll("nt" , "0100100010").replaceAll("nu" , "0100100011").replaceAll("nv" , "0100100100").replaceAll("nx" , "0100100101").replaceAll("ny" , "0100100110").replaceAll("nz" , "0100100111").replaceAll("n." , "0100101000").replaceAll("n," , "0100101001").replaceAll("n " , "0100101010");
            readLine = readLine.replaceAll("oa" , "0100101011").replaceAll("ob" , "0100101100").replaceAll("oc" , "0100101101").replaceAll("od" , "0100101110").replaceAll("oe" , "0100101111").replaceAll("of" , "0100110000").replaceAll("og" , "0100110001").replaceAll("oh" , "0100110010").replaceAll("oi" , "0100110011").replaceAll("oj" , "0100110100").replaceAll("ok" , "0100110101").replaceAll("ol" , "0100110110").replaceAll("om" , "0100110111").replaceAll("on" , "0100111000").replaceAll("oo" , "0100111001").replaceAll("op" , "0100111010").replaceAll("oq" , "0100111011").replaceAll("or" , "0100111100").replaceAll("os" , "0100111101").replaceAll("ot" , "0100111110").replaceAll("ou" , "0100111111").replaceAll("ov" , "0101000000").replaceAll("ow" , "0101000001").replaceAll("ox" , "0101000010").replaceAll("oy" , "0101000011").replaceAll("o." , "0101000100").replaceAll("o," , "0101000101").replaceAll("o " , "0101000110"); 
            readLine = readLine.replaceAll("pa" , "0101000111").replaceAll("pc" , "0101001000").replaceAll("pe" , "0101001001").replaceAll("ph" , "0101001010").replaceAll("pi" , "0101001011").replaceAll("pk" , "0101001100").replaceAll("pl" , "0101001101").replaceAll("pn" , "0101001110").replaceAll("po" , "0101001111").replaceAll("pp" , "0101010000").replaceAll("pr" , "0101010001").replaceAll("ps" , "0101010010").replaceAll("pt" , "0101010011").replaceAll("pu" , "0101010100").replaceAll("py" , "0101010101").replaceAll("p." , "0101010110").replaceAll("p," , "0101010111").replaceAll("p " , "0101011000"); 
            readLine = readLine.replaceAll("qi" , "0101011001").replaceAll("qu" , "0101011010").replaceAll("q." , "0101011011").replaceAll("q," , "0101011100").replaceAll("q " , "0101011101");
            readLine = readLine.replaceAll("ra" , "0101011110").replaceAll("rb" , "0101011111").replaceAll("rc" , "0101100000").replaceAll("rd" , "0101100001").replaceAll("re" , "0101100010").replaceAll("rf" , "0101100011").replaceAll("rg" , "0101100100").replaceAll("rh" , "0101100101").replaceAll("ri" , "0101100110").replaceAll("rj" , "0101100111").replaceAll("rk" , "0101101000").replaceAll("rl" , "0101101001").replaceAll("rm" , "0101101010").replaceAll("rn" , "0101101011").replaceAll("ro" , "0101101100").replaceAll("rp" , "0101101101").replaceAll("rq" , "0101101110").replaceAll("rr" , "0101101111").replaceAll("rs" , "0101110000").replaceAll("rt" , "0101110001").replaceAll("ru" , "0101110010").replaceAll("rv" , "0101110011").replaceAll("rw" , "0101110100").replaceAll("ry" , "0101110101").replaceAll("rz" , "0101110110").replaceAll("r." , "0101110111").replaceAll("r," , "0101111000").replaceAll("r " , "0101111001"); 
            readLine = readLine.replaceAll("sa" , "0101111010").replaceAll("sb" , "0101111011").replaceAll("sc" , "0101111100").replaceAll("sd" , "0101111101").replaceAll("se" , "0101111110").replaceAll("sf" , "0101111111").replaceAll("sg" , "0110000000").replaceAll("sh" , "0110000001").replaceAll("si" , "0110000010").replaceAll("sj" , "0110000011").replaceAll("sk" , "0110000100").replaceAll("sl" , "0110000101").replaceAll("sm" , "0110000110").replaceAll("sn" , "0110000111").replaceAll("so" , "0110001000").replaceAll("sp" , "0110001001").replaceAll("sq" , "0110001010").replaceAll("sr" , "0110001011").replaceAll("ss" , "0110001100").replaceAll("st" , "0110001101").replaceAll("su" , "0110001110").replaceAll("sv" , "0110001111").replaceAll("sw" , "0110010000").replaceAll("sy" , "0110010001").replaceAll("s." , "0110010010").replaceAll("s," , "0110010011").replaceAll("s " , "0110010100"); 
            readLine = readLine.replaceAll("ta" , "0110010101").replaceAll("tb" , "0110010110").replaceAll("tc" , "0110010111").replaceAll("te" , "0110011000").replaceAll("th" , "0110011001").replaceAll("ti" , "0110011010").replaceAll("tj" , "0110011011").replaceAll("tk" , "0110011100").replaceAll("tl" , "0110011101").replaceAll("tm" , "0110011110").replaceAll("tn" , "0110011111").replaceAll("to" , "0110100000").replaceAll("tr" , "0110100001").replaceAll("ts" , "0110100010").replaceAll("tt" , "0110100011").replaceAll("tu" , "0110100100").replaceAll("tv" , "0110100101").replaceAll("tw" , "0110100110").replaceAll("ty" , "0110100111").replaceAll("tz" , "0110101000").replaceAll("t." , "0110101001").replaceAll("t," , "0110101010").replaceAll("t " , "0110101011"); 
            readLine = readLine.replaceAll("ua" , "0110101100").replaceAll("ub" , "0110101101").replaceAll("uc" , "0110101110").replaceAll("ud" , "0110101111").replaceAll("ue" , "0110110000").replaceAll("uf" , "0110110001").replaceAll("ug" , "0110110010").replaceAll("uh" , "0110110011").replaceAll("ui" , "0110110100").replaceAll("uj" , "0110110101").replaceAll("uk" , "0110110110").replaceAll("ul" , "0110110111").replaceAll("um" , "0110111000").replaceAll("un" , "0110111001").replaceAll("uo" , "0110111010").replaceAll("up" , "0110111011").replaceAll("uq" , "0110111100").replaceAll("ur" , "0110111101").replaceAll("us" , "0110111110").replaceAll("ut" , "0110111111").replaceAll("uv" , "0111000000").replaceAll("ux" , "0111000001").replaceAll("uy" , "0111000010").replaceAll("uz" , "0111000011").replaceAll("u." , "0111000100").replaceAll("u," , "0111000101").replaceAll("u " , "0111000110"); 
            readLine = readLine.replaceAll("va" , "0111000111").replaceAll("vd" , "0111001000").replaceAll("ve" , "0111001001").replaceAll("vg" , "0111001010").replaceAll("vi" , "0111001011").replaceAll("vl" , "0111001100").replaceAll("vo" , "0111001101").replaceAll("vr" , "0111001110").replaceAll("vu" , "0111001111").replaceAll("v." , "0111010000").replaceAll("v," , "0111010001").replaceAll("v " , "0111010010");
            readLine = readLine.replaceAll("wa" , "0111010011").replaceAll("wb" , "0111010100").replaceAll("wd" , "0111010101").replaceAll("we" , "0111010110").replaceAll("wh" , "0111010111").replaceAll("wi" , "0111011000").replaceAll("wl" , "0111011001").replaceAll("wn" , "0111011010").replaceAll("wo" , "0111011011").replaceAll("w." , "0111011100").replaceAll("w," , "0111011101").replaceAll("w " , "0111011110");
            readLine = readLine.replaceAll("xa" , "0111011111").replaceAll("xc" , "0111100000").replaceAll("xe" , "0111100001").replaceAll("xh" , "0111100010").replaceAll("xi" , "0111100011").replaceAll("xo" , "0111100100").replaceAll("xp" , "0111100101").replaceAll("xq" , "0111100110").replaceAll("xt" , "0111100111").replaceAll("xu" , "0111101000").replaceAll("xy" , "0111101001").replaceAll("x." , "0111101010").replaceAll("x," , "0111101011").replaceAll("x " , "0111101100");
            readLine = readLine.replaceAll("ya" , "0111101101").replaceAll("yb" , "0111101110").replaceAll("yc" , "0111101111").replaceAll("yd" , "0111110000").replaceAll("ye" , "0111110001").replaceAll("yg" , "0111110010").replaceAll("yj" , "0111110011").replaceAll("yl" , "0111110100").replaceAll("ym" , "0111110101").replaceAll("yn" , "0111110110").replaceAll("yo" , "0111110111").replaceAll("yp" , "0111111000").replaceAll("yr" , "0111111001").replaceAll("ys" , "0111111010").replaceAll("yt" , "0111111011").replaceAll("yu" , "0111111100").replaceAll("yv" , "0111111101").replaceAll("yx" , "0111111110").replaceAll("y." , "0111111111").replaceAll("y," , "1000000000").replaceAll("y " , "1000000001"); 
            readLine = readLine.replaceAll("za" , "1000000010").replaceAll("ze" , "1000000011").replaceAll("zh" , "1000000100").replaceAll("zi" , "1000000101").replaceAll("zl" , "1000000110").replaceAll("zo" , "1000000111").replaceAll("zu" , "1000001000").replaceAll("zy" , "1000001001").replaceAll("zz" , "1000001010").replaceAll("z." , "1000001011").replaceAll("z," , "1000001100").replaceAll("z " , "1000001101");
            readLine = readLine.replaceAll(".." , "1000001110").replaceAll(".," , "1000001111").replaceAll(". " , "1000010000");
            readLine = readLine.replaceAll(", " , "1000010001");
            readLine = readLine.replaceAll(" a" , "1000010010").replaceAll(" b" , "1000010011").replaceAll(" c" , "1000010100").replaceAll(" d" , "1000010101").replaceAll(" e" , "1000010110").replaceAll(" f" , "1000010111").replaceAll(" g" , "1000011000").replaceAll(" h" , "1000011001").replaceAll(" i" , "1000011010").replaceAll(" j" , "1000011011").replaceAll(" k" , "1000011100").replaceAll(" l" , "1000011101").replaceAll(" m" , "1000011110").replaceAll(" n" , "1000011111").replaceAll(" o" , "1000100000").replaceAll(" p" , "1000100001").replaceAll(" q" , "1000100010").replaceAll(" r" , "1000100011").replaceAll(" s" , "1000100100").replaceAll(" t" , "1000100101").replaceAll(" u" , "1000100110").replaceAll(" v" , "1000100111").replaceAll(" w" , "1000101000").replaceAll(" x" , "1000101001").replaceAll(" y" , "1000101010").replaceAll(" z" , "1000101011").replaceAll(" ." , "1000101100").replaceAll(" ," , "1000101101").replaceAll("  " , "1000101110"); 
            
            System.out.println(readLine);       
   
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");    
        
            }

            private static void generateshannonfanoencoding() 
            
            {
                
            double pa = 4782.0/94693.0;  
            double pb = 2689.0/94693.0;
            double pc = 374.0/94693.0;
            double pd = 4186.0/94693.0;
            double pe = 4850.0/94693.0;
            double pf = 2986.0/94693.0;
            double pg = 3934.0/94693.0;
            double ph = 4117.0/94693.0;
            double pi = 4279.0/94693.0;
            double pj = 2767.0/94693.0;  
            double pk = 4083.0/94693.0;
            double pl = 4076.0/94693.0;
            double pm = 3731.0/94693.0;
            double pn = 4495.0/94693.0;
            double po = 4288.0/94693.0;
            double pp = 3191.0/94693.0;
            double pq = 10.0/94693.0;  
            double pr = 4607.0/94693.0;
            double ps = 4419.0/94693.0;
            double pt = 4564.0/94693.0;
            double pu = 3412.0/94693.0;
            double pv = 3682.0/94693.0;
            double pw = 81.0/94693.0;
            double px = 36.0/94693.0;  
            double py = 2679.0/94693.0;
            double pz = 30.0/94693.0;
            double pdot = 4445.0/94693.0;
            double pcomma = 2867.0/94693.0;
            double pvacuum = 5033.0/94693.0;
            
            double lengthpa = Math.log(1/pa);  
            double lengthpb = Math.log(1/pb); 
            double lengthpc = Math.log(1/pc); 
            double lengthpd = Math.log(1/pd); 
            double lengthpe = Math.log(1/pe); 
            double lengthpf = Math.log(1/pf); 
            double lengthpg = Math.log(1/pg); 
            double lengthph = Math.log(1/ph); 
            double lengthpi = Math.log(1/pi); 
            double lengthpj = Math.log(1/pj);  
            double lengthpk = Math.log(1/pk); 
            double lengthpl = Math.log(1/pl); 
            double lengthpm = Math.log(1/pm); 
            double lengthpn = Math.log(1/pn); 
            double lengthpo = Math.log(1/po); 
            double lengthpp = Math.log(1/pp); 
            double lengthpq = Math.log(1/pq);   
            double lengthpr = Math.log(1/pr); 
            double lengthps = Math.log(1/ps); 
            double lengthpt = Math.log(1/pt); 
            double lengthpu = Math.log(1/pu); 
            double lengthpv = Math.log(1/pv); 
            double lengthpw = Math.log(1/pw); 
            double lengthpx = Math.log(1/px);   
            double lengthpy = Math.log(1/py); 
            double lengthpz = Math.log(1/pz); 
            double lengthpdot = Math.log(1/pdot);
            double lengthpcomma = Math.log(1/pcomma);
            double lengthpvacuum = Math.log(1/pvacuum);
            
            int llengthpa = (int) lengthpa+1;
            int llengthpb = (int) lengthpb+1;
            int llengthpc = (int) lengthpc+1;
            int llengthpd = (int) lengthpd+1;
            int llengthpe = (int) lengthpe+1;
            int llengthpf = (int) lengthpf+1;
            int llengthpg = (int) lengthpg+1;
            int llengthph = (int) lengthph+1;
            int llengthpi = (int) lengthpi+1;
            int llengthpj = (int) lengthpj+1;
            int llengthpk = (int) lengthpk+1;
            int llengthpl = (int) lengthpl+1;
            int llengthpm = (int) lengthpm+1;
            int llengthpn = (int) lengthpn+1;
            int llengthpo = (int) lengthpo+1;
            int llengthpp = (int) lengthpp+1;
            int llengthpq = (int) lengthpq+1;
            int llengthpr = (int) lengthpr+1;
            int llengthps = (int) lengthps+1;
            int llengthpt = (int) lengthpt+1;
            int llengthpu = (int) lengthpu+1;
            int llengthpv = (int) lengthpv+1;
            int llengthpw = (int) lengthpw+1;
            int llengthpx = (int) lengthpx+1;
            int llengthpy = (int) lengthpy+1;
            int llengthpz = (int) lengthpz+1;
            int llengthpdot = (int) lengthpdot+1;
            int llengthpcomma = (int) lengthpcomma+1;
            int llengthpvacuum = (int) lengthpvacuum+1;
            
            System.out.println("\nThe length of the bits for P(a) is = " + llengthpa );  
            System.out.println("\nThe length of the bits for P(b) is = " + llengthpb );  
            System.out.println("\nThe length of the bits for P(c) is = " + llengthpc );  
            System.out.println("\nThe length of the bits for P(d) is = " + llengthpd );  
            System.out.println("\nThe length of the bits for P(e) is = " + llengthpe );  
            System.out.println("\nThe length of the bits for P(f) is = " + llengthpf );  
            System.out.println("\nThe length of the bits for P(g) is = " + llengthpg );  
            System.out.println("\nThe length of the bits for P(h) is = " + llengthph );  
            System.out.println("\nThe length of the bits for P(i) is = " + llengthpi );  
            System.out.println("\nThe length of the bits for P(j) is = " + llengthpj );  
            System.out.println("\nThe length of the bits for P(k) is = " + llengthpk );  
            System.out.println("\nThe length of the bits for P(l) is = " + llengthpl );  
            System.out.println("\nThe length of the bits for P(m) is = " + llengthpm );  
            System.out.println("\nThe length of the bits for P(n) is = " + llengthpn );  
            System.out.println("\nThe length of the bits for P(o) is = " + llengthpo );  
            System.out.println("\nThe length of the bits for P(p) is = " + llengthpp );  
            System.out.println("\nThe length of the bits for P(q) is = " + llengthpq );  
            System.out.println("\nThe length of the bits for P(r) is = " + llengthpr );  
            System.out.println("\nThe length of the bits for P(s) is = " + llengthps );  
            System.out.println("\nThe length of the bits for P(t) is = " + llengthpt );  
            System.out.println("\nThe length of the bits for P(u) is = " + llengthpu );  
            System.out.println("\nThe length of the bits for P(v) is = " + llengthpv );  
            System.out.println("\nThe length of the bits for P(w) is = " + llengthpw );  
            System.out.println("\nThe length of the bits for P(x) is = " + llengthpx );  
            System.out.println("\nThe length of the bits for P(y) is = " + llengthpy );  
            System.out.println("\nThe length of the bits for P(z) is = " + llengthpz );  
            System.out.println("\nThe length of the bits for P(.) is = " + llengthpdot );  
            System.out.println("\nThe length of the bits for P(,) is = " + llengthpcomma );  
            System.out.println("\nThe length of the bits for P(vacuum) is = " + llengthpvacuum );  
            
            double shannonfanopE = 0.0000000000000000;
            double shannonfanopvacuum = shannonfanopE+pvacuum;
            double shannonfanope = shannonfanopvacuum+pe;
            double shannonfanopa = shannonfanope+pa;
            double shannonfanopr = shannonfanopa+pr;
            double shannonfanopt = shannonfanopr+pt;
            double shannonfanopn = shannonfanopt+pn;
            double shannonfanopdot = shannonfanopn+pdot;
            double shannonfanops = shannonfanopdot+ps;
            double shannonfanopo = shannonfanops+po;
            double shannonfanopi = shannonfanopo+pi;
            double shannonfanopd = shannonfanopi+pd;
            double shannonfanoph = shannonfanopd+ph;
            double shannonfanopk = shannonfanoph+pk;
            double shannonfanopl = shannonfanopk+pl;
            double shannonfanopg = shannonfanopl+pg;
            double shannonfanopm = shannonfanopg+pm;
            double shannonfanopv = shannonfanopm+pv;
            double shannonfanopu = shannonfanopv+pu;
            double shannonfanopp = shannonfanopu+pp;
            double shannonfanopf = shannonfanopp+pf;
            double shannonfanopcomma = shannonfanopf+pcomma;
            double shannonfanopj = shannonfanopcomma+pj;
            double shannonfanopb = shannonfanopj+pb;
            double shannonfanopy = shannonfanopb+py;
            double shannonfanopc = shannonfanopy+pc;
            double shannonfanopw = shannonfanopc+pw;
            double shannonfanopx = shannonfanopw+px;
            double shannonfanopz = shannonfanopx+pz;
            double shannonfanopq = shannonfanopz+pq;
            
            double symbollengthpa = 3*pa;
            double symbollengthpb = 4*pb;
            double symbollengthpc = 6*pc;
            double symbollengthpd = 4*pd;
            double symbollengthpe = 3*pe;
            double symbollengthpf = 4*pf;
            double symbollengthpg = 4*pg;
            double symbollengthph = 4*ph;
            double symbollengthpi = 4*pi;
            double symbollengthpj = 4*pj;
            double symbollengthpk = 4*pk;
            double symbollengthpl = 4*pl;
            double symbollengthpm = 4*pm;
            double symbollengthpn = 4*pn;
            double symbollengthpo = 4*po;
            double symbollengthpp = 4*pp;
            double symbollengthpq = 10*pq;
            double symbollengthpr = 4*pr;
            double symbollengthps = 4*ps;
            double symbollengthpt = 4*pt;
            double symbollengthpu = 4*pu;
            double symbollengthpv = 4*pv;
            double symbollengthpw = 8*pw;
            double symbollengthpx = 8*px;
            double symbollengthpy = 4*py;
            double symbollengthpz = 9*pz;
            double symbollengthpdot = 4*pdot;
            double symbollengthpcomma = 4*pcomma;
            double symbollengthpvacuum = 3*pvacuum;
            double L = symbollengthpa+symbollengthpb+symbollengthpc+symbollengthpd+symbollengthpe+symbollengthpf+symbollengthpg+symbollengthph+symbollengthpi+symbollengthpj
                      +symbollengthpk+symbollengthpl+symbollengthpm+symbollengthpn+symbollengthpo+symbollengthpp+symbollengthpq+symbollengthpr+symbollengthps+symbollengthpt
                      +symbollengthpu+symbollengthpv+symbollengthpw+symbollengthpx+symbollengthpy+symbollengthpz+symbollengthpdot+symbollengthpcomma+symbollengthpvacuum;
  
            StringBuilder binarycodepa = new StringBuilder();
            StringBuilder binarycodepb = new StringBuilder();
            StringBuilder binarycodepc = new StringBuilder();
            StringBuilder binarycodepd = new StringBuilder();
            StringBuilder binarycodepe = new StringBuilder();
            StringBuilder binarycodepf = new StringBuilder();
            StringBuilder binarycodepg = new StringBuilder();
            StringBuilder binarycodeph = new StringBuilder();
            StringBuilder binarycodepi = new StringBuilder();
            StringBuilder binarycodepj = new StringBuilder();
            StringBuilder binarycodepk = new StringBuilder();
            StringBuilder binarycodepl = new StringBuilder();
            StringBuilder binarycodepm = new StringBuilder();
            StringBuilder binarycodepn = new StringBuilder();
            StringBuilder binarycodepo = new StringBuilder();
            StringBuilder binarycodepp = new StringBuilder();
            StringBuilder binarycodepq = new StringBuilder();
            StringBuilder binarycodepr = new StringBuilder();
            StringBuilder binarycodeps = new StringBuilder();
            StringBuilder binarycodept = new StringBuilder();
            StringBuilder binarycodepu = new StringBuilder();
            StringBuilder binarycodepv = new StringBuilder();
            StringBuilder binarycodepw = new StringBuilder();
            StringBuilder binarycodepx = new StringBuilder();
            StringBuilder binarycodepy = new StringBuilder();
            StringBuilder binarycodepz = new StringBuilder();
            StringBuilder binarycodepdot = new StringBuilder();
            StringBuilder binarycodepcomma = new StringBuilder();
            StringBuilder binarycodepvacuum = new StringBuilder();
             
            binarycodepa.append("0.");
            binarycodepb.append("0.");
            binarycodepc.append("0.");
            binarycodepd.append("0.");
            binarycodepe.append("0.");
            binarycodepf.append("0.");
            binarycodepg.append("0.");
            binarycodeph.append("0.");
            binarycodepi.append("0.");
            binarycodepj.append("0.");
            binarycodepk.append("0.");
            binarycodepl.append("0.");
            binarycodepm.append("0.");
            binarycodepn.append("0.");
            binarycodepo.append("0.");
            binarycodepp.append("0.");
            binarycodepq.append("0.");
            binarycodepr.append("0.");
            binarycodeps.append("0.");
            binarycodept.append("0.");
            binarycodepu.append("0.");
            binarycodepv.append("0.");
            binarycodepw.append("0.");
            binarycodepx.append("0.");
            binarycodepy.append("0.");
            binarycodepz.append("0.");
            binarycodepdot.append("0.");
            binarycodepcomma.append("0.");
            binarycodepvacuum.append("0.");
            
            for(int i=0; i<10; i++)
                
            {    
            
            double bbinarycodepa = shannonfanopa*2;
            double bbinarycodepb = shannonfanopb*2;
            double bbinarycodepc = shannonfanopc*2;
            double bbinarycodepd = shannonfanopd*2;
            double bbinarycodepe = shannonfanope*2;
            double bbinarycodepf = shannonfanopf*2;
            double bbinarycodepg = shannonfanopg*2;
            double bbinarycodeph = shannonfanoph*2;
            double bbinarycodepi = shannonfanopi*2;
            double bbinarycodepj = shannonfanopj*2;
            double bbinarycodepk = shannonfanopk*2;
            double bbinarycodepl = shannonfanopl*2;
            double bbinarycodepm = shannonfanopm*2;
            double bbinarycodepn = shannonfanopn*2;
            double bbinarycodepo = shannonfanopo*2;
            double bbinarycodepp = shannonfanopp*2;
            double bbinarycodepq = shannonfanopq*2;
            double bbinarycodepr = shannonfanopr*2;
            double bbinarycodeps = shannonfanops*2;
            double bbinarycodept = shannonfanopt*2;
            double bbinarycodepu = shannonfanopu*2;
            double bbinarycodepv = shannonfanopv*2;
            double bbinarycodepw = shannonfanopw*2;
            double bbinarycodepx = shannonfanopx*2;
            double bbinarycodepy = shannonfanopy*2;
            double bbinarycodepz = shannonfanopz*2;
            double bbinarycodepdot = shannonfanopdot*2;
            double bbinarycodepcomma = shannonfanopcomma*2;
            double bbinarycodepvacuum = shannonfanopvacuum*2;
            
            if(bbinarycodepa>=1)
            
            {
                
            binarycodepa.append("1");
            shannonfanopa=bbinarycodepa-1;   
            
            }
            
            else
            
            {
                
            binarycodepa.append("0");
            shannonfanopa=bbinarycodepa;
                
            }
            
            if(bbinarycodepb>=1)
            
            {
                
            binarycodepb.append("1");
            shannonfanopb=bbinarycodepb-1;   
            
            }
            
            else
            
            {
                
            binarycodepb.append("0");
            shannonfanopb=bbinarycodepb;
                
            }
             
            if(bbinarycodepc>=1)
            
            {
                
            binarycodepc.append("1");
            shannonfanopc=bbinarycodepc-1;   
            
            }
            
            else
            
            {
                
            binarycodepc.append("0");
            shannonfanopc=bbinarycodepc;
                
            }
             
            if(bbinarycodepd>=1)
            
            {
                
            binarycodepd.append("1");
            shannonfanopd=bbinarycodepd-1;   
            
            }
             
            else
            
            {
                
            binarycodepd.append("0");
            shannonfanopd=bbinarycodepd;
                
            }
             
            if(bbinarycodepe>=1)
            
            {
                
            binarycodepe.append("1");
            shannonfanope=bbinarycodepe-1;   
            
            }
            
            else
            
            {
                
            binarycodepe.append("0");
            shannonfanope=bbinarycodepe;
                
            }
             
            if(bbinarycodepf>=1)
            
            {
                
            binarycodepf.append("1");
            shannonfanopf=bbinarycodepf-1;   
            
            }
            
            else
            
            {
                
            binarycodepf.append("0");
            shannonfanopf=bbinarycodepf;
                
            }
             
            if(bbinarycodepg>=1)
            
            {
                
            binarycodepg.append("1");
            shannonfanopg=bbinarycodepg-1;   
            
            }
            
            else
            
            {
                
            binarycodepg.append("0");
            shannonfanopg=bbinarycodepg;
                
            }
             
            if(bbinarycodeph>=1)
            
            {
                
            binarycodeph.append("1");
            shannonfanoph=bbinarycodeph-1;   
            
            }
            
            else
            
            {
                
            binarycodeph.append("0");
            shannonfanoph=bbinarycodeph;
                
            }
             
            if(bbinarycodepi>=1)
            
            {
                
            binarycodepi.append("1");
            shannonfanopi=bbinarycodepi-1;   
            
            }
            
            else
            
            {
                
            binarycodepi.append("0");
            shannonfanopi=bbinarycodepi;
                
            }
             
            if(bbinarycodepj>=1)
            
            {
                
            binarycodepj.append("1");
            shannonfanopj=bbinarycodepj-1;   
            
            }
            
            else
            
            {
                
            binarycodepj.append("0");
            shannonfanopj=bbinarycodepj;
                
            } 
             
            if(bbinarycodepk>=1)
            
            {
                
            binarycodepk.append("1");
            shannonfanopk=bbinarycodepk-1;   
            
            }
            
            else
            
            {
                
            binarycodepk.append("0");
            shannonfanopk=bbinarycodepk;
                
            }
            
            if(bbinarycodepl>=1)
            
            {
                
            binarycodepl.append("1");
            shannonfanopl=bbinarycodepl-1;   
            
            }
             
            else
            
            {
                
            binarycodepl.append("0");
            shannonfanopl=bbinarycodepl;
                
            }
             
            if(bbinarycodepm>=1)
            
            {
                
            binarycodepm.append("1");
            shannonfanopm=bbinarycodepm-1;   
            
            }
            
            else
            
            {
                
            binarycodepm.append("0");
            shannonfanopm=bbinarycodepm;
                
            }
             
            if(bbinarycodepn>=1)
            
            {
                
            binarycodepn.append("1");
            shannonfanopn=bbinarycodepn-1;   
            
            }
            
            else
            
            {
                
            binarycodepn.append("0");
            shannonfanopn=bbinarycodepn;
                
            }
             
            if(bbinarycodepo>=1)
            
            {
                
            binarycodepo.append("1");
            shannonfanopo=bbinarycodepo-1;   
            
            }
            
            else
            
            {
                
            binarycodepo.append("0");
            shannonfanopo=bbinarycodepo;
                
            }
             
            if(bbinarycodepp>=1)
            
            {
                
            binarycodepp.append("1");
            shannonfanopp=bbinarycodepp-1;   
            
            }
            
            else
            
            {
                
            binarycodepp.append("0");
            shannonfanopp=bbinarycodepp;
                
            }
             
            if(bbinarycodepq>=1)
            
            {
                
            binarycodepq.append("1");
            shannonfanopq=bbinarycodepq-1;   
            
            }
            
            else
            
            {
                
            binarycodepq.append("0");
            shannonfanopq=bbinarycodepq;
                
            }
             
            if(bbinarycodepr>=1)
            
            {
                
            binarycodepr.append("1");
            shannonfanopr=bbinarycodepr-1;   
            
            }
            
            else
            
            {
                
            binarycodepr.append("0");
            shannonfanopr=bbinarycodepr;
                
            }
             
            if(bbinarycodeps>=1)
            
            {
                
            binarycodeps.append("1");
            shannonfanops=bbinarycodeps-1;   
            
            }
            
            else
            
            {
                
            binarycodeps.append("0");
            shannonfanops=bbinarycodeps;
                
            }
             
            if(bbinarycodept>=1)
            
            {
                
            binarycodept.append("1");
            shannonfanopt=bbinarycodept-1;   
            
            }
            
            else
            
            {
                
            binarycodept.append("0");
            shannonfanopt=bbinarycodept;
                
            } 
             
            if(bbinarycodepu>=1)
            
            {
                
            binarycodepu.append("1");
            shannonfanopu=bbinarycodepu-1;   
            
            }
            
            else
            
            {
                
            binarycodepu.append("0");
            shannonfanopu=bbinarycodepu;
                
            }
            
            if(bbinarycodepv>=1)
            
            {
                
            binarycodepv.append("1");
            shannonfanopv=bbinarycodepv-1;   
            
            }
            
            else
            
            {
                
            binarycodepv.append("0");
            shannonfanopv=bbinarycodepv;
                
            }
             
            if(bbinarycodepw>=1)
            
            {
                
            binarycodepw.append("1");
            shannonfanopw=bbinarycodepw-1;   
            
            }
            
            else
            
            {
                
            binarycodepw.append("0");
            shannonfanopw=bbinarycodepw;
                
            }
             
            if(bbinarycodepx>=1)
            
            {
                
            binarycodepx.append("1");
            shannonfanopx=bbinarycodepx-1;   
            
            }
            
            else
            
            {
                
            binarycodepx.append("0");
            shannonfanopx=bbinarycodepx;
                
            }
             
            if(bbinarycodepy>=1)
            
            {
                
            binarycodepy.append("1");
            shannonfanopy=bbinarycodepy-1;   
            
            }
            
            else
            
            {
                
            binarycodepy.append("0");
            shannonfanopy=bbinarycodepy;
                
            }
             
            if(bbinarycodepz>=1)
            
            {
                
            binarycodepz.append("1");
            shannonfanopz=bbinarycodepz-1;   
            
            }
            
            else
            
            {
                
            binarycodepz.append("0");
            shannonfanopz=bbinarycodepz;
                
            }
             
            if(bbinarycodepdot>=1)
            
            {
                
            binarycodepdot.append("1");
            shannonfanopdot=bbinarycodepdot-1;   
            
            }
            
            else
            
            {
                
            binarycodepdot.append("0");
            shannonfanopdot=bbinarycodepdot;
                
            }
             
            if(bbinarycodepcomma>=1)
            
            {
                
            binarycodepcomma.append("1");
            shannonfanopcomma=bbinarycodepcomma-1;   
            
            }
            
            else
            
            {
                
            binarycodepcomma.append("0");
            shannonfanopcomma=bbinarycodepcomma;
                
            }
             
            if(bbinarycodepvacuum>=1)
            
            {
                
            binarycodepvacuum.append("1");
            shannonfanopvacuum=bbinarycodepvacuum-1;   
            
            }
            
            else
            
            {
                
            binarycodepvacuum.append("0");
            shannonfanopvacuum=bbinarycodepvacuum;
                
            }
            
            }
            
            System.out.println("\nThe binary code of P(a) is = " + shannonfanopa + " -> " + binarycodepa.toString() + " -> variable length code -> 001" ); 
            System.out.println("\nThe binary code of P(b) is = " + shannonfanopb + " -> " + binarycodepb.toString() + " -> variable length code -> 1111" ); 
            System.out.println("\nThe binary code of P(c) is = " + shannonfanopc + " -> " + binarycodepc.toString() + " -> variable length code -> 111111" ); 
            System.out.println("\nThe binary code of P(d) is = " + shannonfanopd + " -> " + binarycodepd.toString() + " -> variable length code -> 1000" ); 
            System.out.println("\nThe binary code of P(e) is = " + shannonfanope + " -> " + binarycodepe.toString() + " -> variable length code -> 000" ); 
            System.out.println("\nThe binary code of P(f) is = " + shannonfanopf + " -> " + binarycodepf.toString() + " -> variable length code -> 1110" ); 
            System.out.println("\nThe binary code of P(g) is = " + shannonfanopg + " -> " + binarycodepg.toString() + " -> variable length code -> 1011" ); 
            System.out.println("\nThe binary code of P(h) is = " + shannonfanoph + " -> " + binarycodeph.toString() + " -> variable length code -> 1001" ); 
            System.out.println("\nThe binary code of P(i) is = " + shannonfanopi + " -> " + binarycodepi.toString() + " -> variable length code -> 0111" ); 
            System.out.println("\nThe binary code of P(j) is = " + shannonfanopj + " -> " + binarycodepj.toString() + " -> variable length code -> 1111" ); 
            System.out.println("\nThe binary code of P(k) is = " + shannonfanopk + " -> " + binarycodepk.toString() + " -> variable length code -> 1001" ); 
            System.out.println("\nThe binary code of P(l) is = " + shannonfanopl + " -> " + binarycodepl.toString() + " -> variable length code -> 1010" ); 
            System.out.println("\nThe binary code of P(m) is = " + shannonfanopm + " -> " + binarycodepm.toString() + " -> variable length code -> 1011" ); 
            System.out.println("\nThe binary code of P(n) is = " + shannonfanopn + " -> " + binarycodepn.toString() + " -> variable length code -> 0100" ); 
            System.out.println("\nThe binary code of P(o) is = " + shannonfanopo + " -> " + binarycodepo.toString() + " -> variable length code -> 0111" ); 
            System.out.println("\nThe binary code of P(p) is = " + shannonfanopp + " -> " + binarycodepp.toString() + " -> variable length code -> 1101" ); 
            System.out.println("\nThe binary code of P(q) is = " + shannonfanopq + " -> " + binarycodepq.toString() + " -> variable length code -> 1111111111" ); 
            System.out.println("\nThe binary code of P(r) is = " + shannonfanopr + " -> " + binarycodepr.toString() + " -> variable length code -> 0011" ); 
            System.out.println("\nThe binary code of P(s) is = " + shannonfanops + " -> " + binarycodeps.toString() + " -> variable length code -> 0110" ); 
            System.out.println("\nThe binary code of P(t) is = " + shannonfanopt + " -> " + binarycodept.toString() + " -> variable length code -> 0100" ); 
            System.out.println("\nThe binary code of P(u) is = " + shannonfanopu + " -> " + binarycodepu.toString() + " -> variable length code -> 1101" ); 
            System.out.println("\nThe binary code of P(v) is = " + shannonfanopv + " -> " + binarycodepv.toString() + " -> variable length code -> 1100" ); 
            System.out.println("\nThe binary code of P(w) is = " + shannonfanopw + " -> " + binarycodepw.toString() + " -> variable length code -> 11111111" ); 
            System.out.println("\nThe binary code of P(x) is = " + shannonfanopx + " -> " + binarycodepx.toString() + " -> variable length code -> 11111111" ); 
            System.out.println("\nThe binary code of P(y) is = " + shannonfanopy + " -> " + binarycodepy.toString() + " -> variable length code -> 1111" ); 
            System.out.println("\nThe binary code of P(z) is = " + shannonfanopz + " -> " + binarycodepz.toString() + " -> variable length code -> 111111111" ); 
            System.out.println("\nThe binary code of P(.) is = " + shannonfanopdot + " -> " + binarycodepdot.toString() + " -> variable length code -> 0101" ); 
            System.out.println("\nThe binary code of P(,) is = " + shannonfanopcomma + " -> " + binarycodepcomma.toString() + " -> variable length code -> 1110" ); 
            System.out.println("\nThe binary code of P(vacuum) is = " + shannonfanopvacuum + " -> " + binarycodepvacuum.toString() + " -> variable length code -> 000" ); 
            System.out.println("\nThe determination of the size for the compressed file is = H(s)/L = 3.1830823644416144/3.8601902991773422 = " + 3.1830823644416144/L ); 
            System.out.println("\nThe average symbol length of the code is = L = " + L ); 
            System.out.println("\nThe conclusion is that the file can be compressed without losses because the L>H(s) , 3.8601902991773422>3.1830823644416144" ); 
            System.out.println(); 
            
            try    
        
            {

            File file = new File("Snomannen-by-Nesbo-Jo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+©()’?«»:–;…!&-]" , " ").replaceAll("Æ" , "AE").replaceAll("Ø" , "O").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u"); 
            
            readLine = readLine.toLowerCase();
            
            readLine = readLine.replaceAll("a" , "001").replaceAll("b" , "1111").replaceAll("c" , "111111").replaceAll("d" , "1000").replaceAll("e" , "000").replaceAll("f" , "1110").replaceAll("g" , "1011").replaceAll("h" , "1001").replaceAll("i" , "0111").replaceAll("j" , "1111").replaceAll("k" , "1001").replaceAll("l" , "1010").replaceAll("m" , "1011").replaceAll("n" , "0100").replaceAll("o" , "0111").replaceAll("p" , "1101").replaceAll("q" , "1111111111").replaceAll("r" , "0011").replaceAll("s" , "0110").replaceAll("t" , "0100").replaceAll("u" , "1101").replaceAll("v" , "1100").replaceAll("w" , "11111111").replaceAll("x" , "11111111").replaceAll("y" , "1111").replaceAll("z" , "111111111").replaceAll("." , "0101").replaceAll("," , "1110").replaceAll(" " , "000");
          
            System.out.println(readLine);
 
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");
            
            }

            private static void generateshannonfanoencoding1() 
            
            {
                
            double pa = 4869.0/100811.0;  
            double pb = 2578.0/100811.0;
            double pc = 4129.0/100811.0;
            double pd = 4066.0/100811.0;
            double pe = 5004.0/100811.0;
            double pf = 2424.0/100811.0;
            double pg = 2556.0/100811.0;
            double ph = 3209.0/100811.0;
            double pi = 4807.0/100811.0;
            double pj = 1949.0/100811.0;  
            double pk = 994.0/100811.0;
            double pl = 4456.0/100811.0;
            double pm = 3829.0/100811.0;
            double pn = 4606.0/100811.0;
            double po = 4681.0/100811.0;
            double pp = 3961.0/100811.0;
            double pq = 3026.0/100811.0;
            double pr = 4733.0/100811.0;
            double ps = 4654.0/100811.0;  
            double pt = 4724.0/100811.0;
            double pu = 4645.0/100811.0;
            double pv = 3388.0/100811.0;
            double pw = 82.0/100811.0;
            double px = 1605.0/100811.0;
            double py = 2214.0/100811.0;
            double pz = 666.0/100811.0;
            double pdot = 4532.0/100811.0;
            double pcomma = 3239.0/100811.0;
            double pvacuum = 5185.0/100811.0;
            
            double lengthpa = Math.log(1/pa);  
            double lengthpb = Math.log(1/pb); 
            double lengthpc = Math.log(1/pc); 
            double lengthpd = Math.log(1/pd); 
            double lengthpe = Math.log(1/pe); 
            double lengthpf = Math.log(1/pf); 
            double lengthpg = Math.log(1/pg); 
            double lengthph = Math.log(1/ph); 
            double lengthpi = Math.log(1/pi); 
            double lengthpj = Math.log(1/pj);  
            double lengthpk = Math.log(1/pk); 
            double lengthpl = Math.log(1/pl); 
            double lengthpm = Math.log(1/pm); 
            double lengthpn = Math.log(1/pn); 
            double lengthpo = Math.log(1/po); 
            double lengthpp = Math.log(1/pp); 
            double lengthpq = Math.log(1/pq);   
            double lengthpr = Math.log(1/pr); 
            double lengthps = Math.log(1/ps); 
            double lengthpt = Math.log(1/pt); 
            double lengthpu = Math.log(1/pu); 
            double lengthpv = Math.log(1/pv); 
            double lengthpw = Math.log(1/pw); 
            double lengthpx = Math.log(1/px);   
            double lengthpy = Math.log(1/py); 
            double lengthpz = Math.log(1/pz); 
            double lengthpdot = Math.log(1/pdot);
            double lengthpcomma = Math.log(1/pcomma);
            double lengthpvacuum = Math.log(1/pvacuum);
            
            int llengthpa = (int) lengthpa+1;
            int llengthpb = (int) lengthpb+1;
            int llengthpc = (int) lengthpc+1;
            int llengthpd = (int) lengthpd+1;
            int llengthpe = (int) lengthpe+1;
            int llengthpf = (int) lengthpf+1;
            int llengthpg = (int) lengthpg+1;
            int llengthph = (int) lengthph+1;
            int llengthpi = (int) lengthpi+1;
            int llengthpj = (int) lengthpj+1;
            int llengthpk = (int) lengthpk+1;
            int llengthpl = (int) lengthpl+1;
            int llengthpm = (int) lengthpm+1;
            int llengthpn = (int) lengthpn+1;
            int llengthpo = (int) lengthpo+1;
            int llengthpp = (int) lengthpp+1;
            int llengthpq = (int) lengthpq+1;
            int llengthpr = (int) lengthpr+1;
            int llengthps = (int) lengthps+1;
            int llengthpt = (int) lengthpt+1;
            int llengthpu = (int) lengthpu+1;
            int llengthpv = (int) lengthpv+1;
            int llengthpw = (int) lengthpw+1;
            int llengthpx = (int) lengthpx+1;
            int llengthpy = (int) lengthpy+1;
            int llengthpz = (int) lengthpz+1;
            int llengthpdot = (int) lengthpdot+1;
            int llengthpcomma = (int) lengthpcomma+1;
            int llengthpvacuum = (int) lengthpvacuum+1;
            
            System.out.println("\nThe length of the bits for P(a) is = " + llengthpa );  
            System.out.println("\nThe length of the bits for P(b) is = " + llengthpb );  
            System.out.println("\nThe length of the bits for P(c) is = " + llengthpc );  
            System.out.println("\nThe length of the bits for P(d) is = " + llengthpd );  
            System.out.println("\nThe length of the bits for P(e) is = " + llengthpe );  
            System.out.println("\nThe length of the bits for P(f) is = " + llengthpf );  
            System.out.println("\nThe length of the bits for P(g) is = " + llengthpg );  
            System.out.println("\nThe length of the bits for P(h) is = " + llengthph );  
            System.out.println("\nThe length of the bits for P(i) is = " + llengthpi );  
            System.out.println("\nThe length of the bits for P(j) is = " + llengthpj );  
            System.out.println("\nThe length of the bits for P(k) is = " + llengthpk );  
            System.out.println("\nThe length of the bits for P(l) is = " + llengthpl );  
            System.out.println("\nThe length of the bits for P(m) is = " + llengthpm );  
            System.out.println("\nThe length of the bits for P(n) is = " + llengthpn );  
            System.out.println("\nThe length of the bits for P(o) is = " + llengthpo );  
            System.out.println("\nThe length of the bits for P(p) is = " + llengthpp );  
            System.out.println("\nThe length of the bits for P(q) is = " + llengthpq );  
            System.out.println("\nThe length of the bits for P(r) is = " + llengthpr );  
            System.out.println("\nThe length of the bits for P(s) is = " + llengthps );  
            System.out.println("\nThe length of the bits for P(t) is = " + llengthpt );  
            System.out.println("\nThe length of the bits for P(u) is = " + llengthpu );  
            System.out.println("\nThe length of the bits for P(v) is = " + llengthpv );  
            System.out.println("\nThe length of the bits for P(w) is = " + llengthpw );  
            System.out.println("\nThe length of the bits for P(x) is = " + llengthpx );  
            System.out.println("\nThe length of the bits for P(y) is = " + llengthpy );  
            System.out.println("\nThe length of the bits for P(z) is = " + llengthpz );  
            System.out.println("\nThe length of the bits for P(.) is = " + llengthpdot );  
            System.out.println("\nThe length of the bits for P(,) is = " + llengthpcomma );  
            System.out.println("\nThe length of the bits for P(vacuum) is = " + llengthpvacuum );  
            
            double shannonfanopE = 0.0000000000000000;
            double shannonfanopvacuum = shannonfanopE+pvacuum;
            double shannonfanope = shannonfanopvacuum+pe;
            double shannonfanopa = shannonfanope+pa;
            double shannonfanopi = shannonfanopa+pi;
            double shannonfanopr = shannonfanopi+pr;
            double shannonfanopt = shannonfanopr+pt;
            double shannonfanopo = shannonfanopt+po;
            double shannonfanops = shannonfanopo+ps;
            double shannonfanopu = shannonfanops+pu;
            double shannonfanopn = shannonfanopu+pn;
            double shannonfanopdot = shannonfanopn+pdot;
            double shannonfanopl = shannonfanopdot+pl;
            double shannonfanopc = shannonfanopl+pc;
            double shannonfanopd = shannonfanopc+pd;
            double shannonfanopp = shannonfanopd+pp;
            double shannonfanopm = shannonfanopp+pm;
            double shannonfanopv = shannonfanopm+pv;
            double shannonfanopcomma = shannonfanopv+pcomma;
            double shannonfanoph = shannonfanopcomma+ph;
            double shannonfanopq = shannonfanoph+pq;
            double shannonfanopb = shannonfanopq+pb;
            double shannonfanopg = shannonfanopb+pg;
            double shannonfanopf = shannonfanopg+pf;
            double shannonfanopy = shannonfanopf+py;
            double shannonfanopj = shannonfanopy+pj;
            double shannonfanopx = shannonfanopj+px;
            double shannonfanopk = shannonfanopx+pk;
            double shannonfanopz = shannonfanopk+pz;
            double shannonfanopw = shannonfanopz+pw;
            
            double symbollengthpa = 4*pa;
            double symbollengthpb = 4*pb;
            double symbollengthpc = 4*pc;
            double symbollengthpd = 4*pd;
            double symbollengthpe = 4*pe;
            double symbollengthpf = 4*pf;
            double symbollengthpg = 4*pg;
            double symbollengthph = 4*ph;
            double symbollengthpi = 4*pi;
            double symbollengthpj = 4*pj;
            double symbollengthpk = 5*pk;
            double symbollengthpl = 4*pl;
            double symbollengthpm = 4*pm;
            double symbollengthpn = 4*pn;
            double symbollengthpo = 4*po;
            double symbollengthpp = 4*pp;
            double symbollengthpq = 4*pq;
            double symbollengthpr = 4*pr;
            double symbollengthps = 4*ps;
            double symbollengthpt = 4*pt;
            double symbollengthpu = 4*pu;
            double symbollengthpv = 4*pv;
            double symbollengthpw = 8*pw;
            double symbollengthpx = 5*px;
            double symbollengthpy = 4*py;
            double symbollengthpz = 6*pz;
            double symbollengthpdot = 4*pdot;
            double symbollengthpcomma = 4*pcomma;
            double symbollengthpvacuum = 3*pvacuum;
            double L = symbollengthpa+symbollengthpb+symbollengthpc+symbollengthpd+symbollengthpe+symbollengthpf+symbollengthpg+symbollengthph+symbollengthpi+symbollengthpj
                      +symbollengthpk+symbollengthpl+symbollengthpm+symbollengthpn+symbollengthpo+symbollengthpp+symbollengthpq+symbollengthpr+symbollengthps+symbollengthpt
                      +symbollengthpu+symbollengthpv+symbollengthpw+symbollengthpx+symbollengthpy+symbollengthpz+symbollengthpdot+symbollengthpcomma+symbollengthpvacuum;
                   
            StringBuilder binarycodepa = new StringBuilder();
            StringBuilder binarycodepb = new StringBuilder();
            StringBuilder binarycodepc = new StringBuilder();
            StringBuilder binarycodepd = new StringBuilder();
            StringBuilder binarycodepe = new StringBuilder();
            StringBuilder binarycodepf = new StringBuilder();
            StringBuilder binarycodepg = new StringBuilder();
            StringBuilder binarycodeph = new StringBuilder();
            StringBuilder binarycodepi = new StringBuilder();
            StringBuilder binarycodepj = new StringBuilder();
            StringBuilder binarycodepk = new StringBuilder();
            StringBuilder binarycodepl = new StringBuilder();
            StringBuilder binarycodepm = new StringBuilder();
            StringBuilder binarycodepn = new StringBuilder();
            StringBuilder binarycodepo = new StringBuilder();
            StringBuilder binarycodepp = new StringBuilder();
            StringBuilder binarycodepq = new StringBuilder();
            StringBuilder binarycodepr = new StringBuilder();
            StringBuilder binarycodeps = new StringBuilder();
            StringBuilder binarycodept = new StringBuilder();
            StringBuilder binarycodepu = new StringBuilder();
            StringBuilder binarycodepv = new StringBuilder();
            StringBuilder binarycodepw = new StringBuilder();
            StringBuilder binarycodepx = new StringBuilder();
            StringBuilder binarycodepy = new StringBuilder();
            StringBuilder binarycodepz = new StringBuilder();
            StringBuilder binarycodepdot = new StringBuilder();
            StringBuilder binarycodepcomma = new StringBuilder();
            StringBuilder binarycodepvacuum = new StringBuilder();
             
            binarycodepa.append("0.");
            binarycodepb.append("0.");
            binarycodepc.append("0.");
            binarycodepd.append("0.");
            binarycodepe.append("0.");
            binarycodepf.append("0.");
            binarycodepg.append("0.");
            binarycodeph.append("0.");
            binarycodepi.append("0.");
            binarycodepj.append("0.");
            binarycodepk.append("0.");
            binarycodepl.append("0.");
            binarycodepm.append("0.");
            binarycodepn.append("0.");
            binarycodepo.append("0.");
            binarycodepp.append("0.");
            binarycodepq.append("0.");
            binarycodepr.append("0.");
            binarycodeps.append("0.");
            binarycodept.append("0.");
            binarycodepu.append("0.");
            binarycodepv.append("0.");
            binarycodepw.append("0.");
            binarycodepx.append("0.");
            binarycodepy.append("0.");
            binarycodepz.append("0.");
            binarycodepdot.append("0.");
            binarycodepcomma.append("0.");
            binarycodepvacuum.append("0.");
            
            for(int i=0; i<10; i++)
                
            {    
            
            double bbinarycodepa = shannonfanopa*2;
            double bbinarycodepb = shannonfanopb*2;
            double bbinarycodepc = shannonfanopc*2;
            double bbinarycodepd = shannonfanopd*2;
            double bbinarycodepe = shannonfanope*2;
            double bbinarycodepf = shannonfanopf*2;
            double bbinarycodepg = shannonfanopg*2;
            double bbinarycodeph = shannonfanoph*2;
            double bbinarycodepi = shannonfanopi*2;
            double bbinarycodepj = shannonfanopj*2;
            double bbinarycodepk = shannonfanopk*2;
            double bbinarycodepl = shannonfanopl*2;
            double bbinarycodepm = shannonfanopm*2;
            double bbinarycodepn = shannonfanopn*2;
            double bbinarycodepo = shannonfanopo*2;
            double bbinarycodepp = shannonfanopp*2;
            double bbinarycodepq = shannonfanopq*2;
            double bbinarycodepr = shannonfanopr*2;
            double bbinarycodeps = shannonfanops*2;
            double bbinarycodept = shannonfanopt*2;
            double bbinarycodepu = shannonfanopu*2;
            double bbinarycodepv = shannonfanopv*2;
            double bbinarycodepw = shannonfanopw*2;
            double bbinarycodepx = shannonfanopx*2;
            double bbinarycodepy = shannonfanopy*2;
            double bbinarycodepz = shannonfanopz*2;
            double bbinarycodepdot = shannonfanopdot*2;
            double bbinarycodepcomma = shannonfanopcomma*2;
            double bbinarycodepvacuum = shannonfanopvacuum*2;
            
            if(bbinarycodepa>=1)
            
            {
                
            binarycodepa.append("1");
            shannonfanopa=bbinarycodepa-1;   
            
            }
            
            else
            
            {
                
            binarycodepa.append("0");
            shannonfanopa=bbinarycodepa;
                
            }
            
            if(bbinarycodepb>=1)
            
            {
                
            binarycodepb.append("1");
            shannonfanopb=bbinarycodepb-1;   
            
            }
            
            else
            
            {
                
            binarycodepb.append("0");
            shannonfanopb=bbinarycodepb;
                
            }
             
            if(bbinarycodepc>=1)
            
            {
                
            binarycodepc.append("1");
            shannonfanopc=bbinarycodepc-1;   
            
            }
            
            else
            
            {
                
            binarycodepc.append("0");
            shannonfanopc=bbinarycodepc;
                
            }
             
            if(bbinarycodepd>=1)
            
            {
                
            binarycodepd.append("1");
            shannonfanopd=bbinarycodepd-1;   
            
            }
             
            else
            
            {
                
            binarycodepd.append("0");
            shannonfanopd=bbinarycodepd;
                
            }
             
            if(bbinarycodepe>=1)
            
            {
                
            binarycodepe.append("1");
            shannonfanope=bbinarycodepe-1;   
            
            }
            
            else
            
            {
                
            binarycodepe.append("0");
            shannonfanope=bbinarycodepe;
                
            }
             
            if(bbinarycodepf>=1)
            
            {
                
            binarycodepf.append("1");
            shannonfanopf=bbinarycodepf-1;   
            
            }
            
            else
            
            {
                
            binarycodepf.append("0");
            shannonfanopf=bbinarycodepf;
                
            }
             
            if(bbinarycodepg>=1)
            
            {
                
            binarycodepg.append("1");
            shannonfanopg=bbinarycodepg-1;   
            
            }
            
            else
            
            {
                
            binarycodepg.append("0");
            shannonfanopg=bbinarycodepg;
                
            }
             
            if(bbinarycodeph>=1)
            
            {
                
            binarycodeph.append("1");
            shannonfanoph=bbinarycodeph-1;   
            
            }
            
            else
            
            {
                
            binarycodeph.append("0");
            shannonfanoph=bbinarycodeph;
                
            }
             
            if(bbinarycodepi>=1)
            
            {
                
            binarycodepi.append("1");
            shannonfanopi=bbinarycodepi-1;   
            
            }
            
            else
            
            {
                
            binarycodepi.append("0");
            shannonfanopi=bbinarycodepi;
                
            }
             
            if(bbinarycodepj>=1)
            
            {
                
            binarycodepj.append("1");
            shannonfanopj=bbinarycodepj-1;   
            
            }
            
            else
            
            {
                
            binarycodepj.append("0");
            shannonfanopj=bbinarycodepj;
                
            } 
             
            if(bbinarycodepk>=1)
            
            {
                
            binarycodepk.append("1");
            shannonfanopk=bbinarycodepk-1;   
            
            }
            
            else
            
            {
                
            binarycodepk.append("0");
            shannonfanopk=bbinarycodepk;
                
            }
            
            if(bbinarycodepl>=1)
            
            {
                
            binarycodepl.append("1");
            shannonfanopl=bbinarycodepl-1;   
            
            }
             
            else
            
            {
                
            binarycodepl.append("0");
            shannonfanopl=bbinarycodepl;
                
            }
             
            if(bbinarycodepm>=1)
            
            {
                
            binarycodepm.append("1");
            shannonfanopm=bbinarycodepm-1;   
            
            }
            
            else
            
            {
                
            binarycodepm.append("0");
            shannonfanopm=bbinarycodepm;
                
            }
             
            if(bbinarycodepn>=1)
            
            {
                
            binarycodepn.append("1");
            shannonfanopn=bbinarycodepn-1;   
            
            }
            
            else
            
            {
                
            binarycodepn.append("0");
            shannonfanopn=bbinarycodepn;
                
            }
             
            if(bbinarycodepo>=1)
            
            {
                
            binarycodepo.append("1");
            shannonfanopo=bbinarycodepo-1;   
            
            }
            
            else
            
            {
                
            binarycodepo.append("0");
            shannonfanopo=bbinarycodepo;
                
            }
             
            if(bbinarycodepp>=1)
            
            {
                
            binarycodepp.append("1");
            shannonfanopp=bbinarycodepp-1;   
            
            }
            
            else
            
            {
                
            binarycodepp.append("0");
            shannonfanopp=bbinarycodepp;
                
            }
             
            if(bbinarycodepq>=1)
            
            {
                
            binarycodepq.append("1");
            shannonfanopq=bbinarycodepq-1;   
            
            }
            
            else
            
            {
                
            binarycodepq.append("0");
            shannonfanopq=bbinarycodepq;
                
            }
             
            if(bbinarycodepr>=1)
            
            {
                
            binarycodepr.append("1");
            shannonfanopr=bbinarycodepr-1;   
            
            }
            
            else
            
            {
                
            binarycodepr.append("0");
            shannonfanopr=bbinarycodepr;
                
            }
             
            if(bbinarycodeps>=1)
            
            {
                
            binarycodeps.append("1");
            shannonfanops=bbinarycodeps-1;   
            
            }
            
            else
            
            {
                
            binarycodeps.append("0");
            shannonfanops=bbinarycodeps;
                
            }
             
            if(bbinarycodept>=1)
            
            {
                
            binarycodept.append("1");
            shannonfanopt=bbinarycodept-1;   
            
            }
            
            else
            
            {
                
            binarycodept.append("0");
            shannonfanopt=bbinarycodept;
                
            } 
             
            if(bbinarycodepu>=1)
            
            {
                
            binarycodepu.append("1");
            shannonfanopu=bbinarycodepu-1;   
            
            }
            
            else
            
            {
                
            binarycodepu.append("0");
            shannonfanopu=bbinarycodepu;
                
            }
            
            if(bbinarycodepv>=1)
            
            {
                
            binarycodepv.append("1");
            shannonfanopv=bbinarycodepv-1;   
            
            }
            
            else
            
            {
                
            binarycodepv.append("0");
            shannonfanopv=bbinarycodepv;
                
            }
             
            if(bbinarycodepw>=1)
            
            {
                
            binarycodepw.append("1");
            shannonfanopw=bbinarycodepw-1;   
            
            }
            
            else
            
            {
                
            binarycodepw.append("0");
            shannonfanopw=bbinarycodepw;
                
            }
             
            if(bbinarycodepx>=1)
            
            {
                
            binarycodepx.append("1");
            shannonfanopx=bbinarycodepx-1;   
            
            }
            
            else
            
            {
                
            binarycodepx.append("0");
            shannonfanopx=bbinarycodepx;
                
            }
             
            if(bbinarycodepy>=1)
            
            {
                
            binarycodepy.append("1");
            shannonfanopy=bbinarycodepy-1;   
            
            }
            
            else
            
            {
                
            binarycodepy.append("0");
            shannonfanopy=bbinarycodepy;
                
            }
             
            if(bbinarycodepz>=1)
            
            {
                
            binarycodepz.append("1");
            shannonfanopz=bbinarycodepz-1;   
            
            }
            
            else
            
            {
                
            binarycodepz.append("0");
            shannonfanopz=bbinarycodepz;
                
            }
             
            if(bbinarycodepdot>=1)
            
            {
                
            binarycodepdot.append("1");
            shannonfanopdot=bbinarycodepdot-1;   
            
            }
            
            else
            
            {
                
            binarycodepdot.append("0");
            shannonfanopdot=bbinarycodepdot;
                
            }
             
            if(bbinarycodepcomma>=1)
            
            {
                
            binarycodepcomma.append("1");
            shannonfanopcomma=bbinarycodepcomma-1;   
            
            }
            
            else
            
            {
                
            binarycodepcomma.append("0");
            shannonfanopcomma=bbinarycodepcomma;
                
            }
             
            if(bbinarycodepvacuum>=1)
            
            {
                
            binarycodepvacuum.append("1");
            shannonfanopvacuum=bbinarycodepvacuum-1;   
            
            }
            
            else
            
            {
                
            binarycodepvacuum.append("0");
            shannonfanopvacuum=bbinarycodepvacuum;
                
            }
            
            }
            
            System.out.println("\nThe binary code of P(a) is = " + shannonfanopa + " -> " + binarycodepa.toString() + " -> variable length code -> 0010" ); 
            System.out.println("\nThe binary code of P(b) is = " + shannonfanopb + " -> " + binarycodepb.toString() + " -> variable length code -> 1110" ); 
            System.out.println("\nThe binary code of P(c) is = " + shannonfanopc + " -> " + binarycodepc.toString() + " -> variable length code -> 1001" ); 
            System.out.println("\nThe binary code of P(d) is = " + shannonfanopd + " -> " + binarycodepd.toString() + " -> variable length code -> 1010" ); 
            System.out.println("\nThe binary code of P(e) is = " + shannonfanope + " -> " + binarycodepe.toString() + " -> variable length code -> 0001" ); 
            System.out.println("\nThe binary code of P(f) is = " + shannonfanopf + " -> " + binarycodepf.toString() + " -> variable length code -> 1110" ); 
            System.out.println("\nThe binary code of P(g) is = " + shannonfanopg + " -> " + binarycodepg.toString() + " -> variable length code -> 1110" ); 
            System.out.println("\nThe binary code of P(h) is = " + shannonfanoph + " -> " + binarycodeph.toString() + " -> variable length code -> 1101" ); 
            System.out.println("\nThe binary code of P(i) is = " + shannonfanopi + " -> " + binarycodepi.toString() + " -> variable length code -> 0011" ); 
            System.out.println("\nThe binary code of P(j) is = " + shannonfanopj + " -> " + binarycodepj.toString() + " -> variable length code -> 1111" ); 
            System.out.println("\nThe binary code of P(k) is = " + shannonfanopk + " -> " + binarycodepk.toString() + " -> variable length code -> 11111" ); 
            System.out.println("\nThe binary code of P(l) is = " + shannonfanopl + " -> " + binarycodepl.toString() + " -> variable length code -> 1001" ); 
            System.out.println("\nThe binary code of P(m) is = " + shannonfanopm + " -> " + binarycodepm.toString() + " -> variable length code -> 1011" ); 
            System.out.println("\nThe binary code of P(n) is = " + shannonfanopn + " -> " + binarycodepn.toString() + " -> variable length code -> 0111" ); 
            System.out.println("\nThe binary code of P(o) is = " + shannonfanopo + " -> " + binarycodepo.toString() + " -> variable length code -> 0101" ); 
            System.out.println("\nThe binary code of P(p) is = " + shannonfanopp + " -> " + binarycodepp.toString() + " -> variable length code -> 1010" ); 
            System.out.println("\nThe binary code of P(q) is = " + shannonfanopq + " -> " + binarycodepq.toString() + " -> variable length code -> 1101" ); 
            System.out.println("\nThe binary code of P(r) is = " + shannonfanopr + " -> " + binarycodepr.toString() + " -> variable length code -> 0011" ); 
            System.out.println("\nThe binary code of P(s) is = " + shannonfanops + " -> " + binarycodeps.toString() + " -> variable length code -> 0110" ); 
            System.out.println("\nThe binary code of P(t) is = " + shannonfanopt + " -> " + binarycodept.toString() + " -> variable length code -> 0100" ); 
            System.out.println("\nThe binary code of P(u) is = " + shannonfanopu + " -> " + binarycodepu.toString() + " -> variable length code -> 0110" ); 
            System.out.println("\nThe binary code of P(v) is = " + shannonfanopv + " -> " + binarycodepv.toString() + " -> variable length code -> 1100" ); 
            System.out.println("\nThe binary code of P(w) is = " + shannonfanopw + " -> " + binarycodepw.toString() + " -> variable length code -> 11111111" ); 
            System.out.println("\nThe binary code of P(x) is = " + shannonfanopx + " -> " + binarycodepx.toString() + " -> variable length code -> 11111" ); 
            System.out.println("\nThe binary code of P(y) is = " + shannonfanopy + " -> " + binarycodepy.toString() + " -> variable length code -> 1111" ); 
            System.out.println("\nThe binary code of P(z) is = " + shannonfanopz + " -> " + binarycodepz.toString() + " -> variable length code -> 111111" ); 
            System.out.println("\nThe binary code of P(.) is = " + shannonfanopdot + " -> " + binarycodepdot.toString() + " -> variable length code -> 1000" ); 
            System.out.println("\nThe binary code of P(,) is = " + shannonfanopcomma + " -> " + binarycodepcomma.toString() + " -> variable length code -> 1100" ); 
            System.out.println("\nThe binary code of P(vacuum) is = " + shannonfanopvacuum + " -> " + binarycodepvacuum.toString() + " -> variable length code -> 000" ); 
            System.out.println("\nThe determination of the size for the compressed file is = H(s)/L = 3.263157716877365/3.99081449445001 = " + 3.263157716877365/L ); 
            System.out.println("\nThe average symbol length of the code is = L = " + L ); 
            System.out.println("\nThe conclusion is that the file can be compressed without losses because the L>H(s) , 3.99081449445001>3.263157716877365" ); 
            System.out.println(); 
            
            try    
        
            {

            File file = new File("Le-bonhomme-de-neige-by-Nesbo_-Jo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+'–’:©«»—”“/?…!();&-]" , " ").replace("]" , " ").replace("[", " ").replaceAll("Ø" , "O").replaceAll("[ÌÍÎÏ]" , "I").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("Ç" , "C").replaceAll("ç" , "c").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[ìíîï]", "i").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u").replaceAll("œ" , "oe"); 
            
            readLine = readLine.toLowerCase();
            
            readLine = readLine.replaceAll("a" , "0010").replaceAll("b" , "1110").replaceAll("c" , "1001").replaceAll("d" , "1010").replaceAll("e" , "0001").replaceAll("f" , "1110").replaceAll("g" , "1110").replaceAll("h" , "1101").replaceAll("i" , "0011").replaceAll("j" , "1111").replaceAll("k" , "11111").replaceAll("l" , "1001").replaceAll("m" , "1011").replaceAll("n" , "0111").replaceAll("o" , "0101").replaceAll("p" , "1010").replaceAll("q" , "1101").replaceAll("r" , "0011").replaceAll("s" , "0110").replaceAll("t" , "0100").replaceAll("u" , "0110").replaceAll("v" , "1100").replaceAll("w" , "11111111").replaceAll("x" , "11111").replaceAll("y" , "1111").replaceAll("z" , "111111").replaceAll("." , "1000").replaceAll("," , "1100").replaceAll(" " , "000");
          
            System.out.println(readLine);
   
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");  
       
            }

            private static void generateshannonfanoencoding2() 
                    
            {
                
            double pa = 4689.0/99499.0;  
            double pb = 2964.0/99499.0;
            double pc = 3342.0/99499.0;
            double pd = 4364.0/99499.0;
            double pe = 4714.0/99499.0;
            double pf = 3024.0/99499.0;
            double pg = 3446.0/99499.0;
            double ph = 4624.0/99499.0;
            double pi = 4468.0/99499.0;
            double pj = 777.0/99499.0;  
            double pk = 3014.0/99499.0;
            double pl = 3865.0/99499.0;
            double pm = 3456.0/99499.0;
            double pn = 4481.0/99499.0;
            double po = 4603.0/99499.0;
            double pp = 2946.0/99499.0;
            double pq = 424.0/99499.0;  
            double pr = 4360.0/99499.0;
            double ps = 4521.0/99499.0;
            double pt = 4573.0/99499.0;
            double pu = 3768.0/99499.0;
            double pv = 2322.0/99499.0;
            double pw = 3733.0/99499.0;
            double px = 577.0/99499.0;  
            double py = 3786.0/99499.0;
            double pz = 218.0/99499.0;
            double pdot = 4527.0/99499.0;
            double pcomma = 2897.0/99499.0;
            double pvacuum = 5016.0/99499.0;   
            
            double lengthpa = Math.log(1/pa);  
            double lengthpb = Math.log(1/pb); 
            double lengthpc = Math.log(1/pc); 
            double lengthpd = Math.log(1/pd); 
            double lengthpe = Math.log(1/pe); 
            double lengthpf = Math.log(1/pf); 
            double lengthpg = Math.log(1/pg); 
            double lengthph = Math.log(1/ph); 
            double lengthpi = Math.log(1/pi); 
            double lengthpj = Math.log(1/pj);  
            double lengthpk = Math.log(1/pk); 
            double lengthpl = Math.log(1/pl); 
            double lengthpm = Math.log(1/pm); 
            double lengthpn = Math.log(1/pn); 
            double lengthpo = Math.log(1/po); 
            double lengthpp = Math.log(1/pp); 
            double lengthpq = Math.log(1/pq);   
            double lengthpr = Math.log(1/pr); 
            double lengthps = Math.log(1/ps); 
            double lengthpt = Math.log(1/pt); 
            double lengthpu = Math.log(1/pu); 
            double lengthpv = Math.log(1/pv); 
            double lengthpw = Math.log(1/pw); 
            double lengthpx = Math.log(1/px);   
            double lengthpy = Math.log(1/py); 
            double lengthpz = Math.log(1/pz); 
            double lengthpdot = Math.log(1/pdot);
            double lengthpcomma = Math.log(1/pcomma);
            double lengthpvacuum = Math.log(1/pvacuum);
            
            int llengthpa = (int) lengthpa+1;
            int llengthpb = (int) lengthpb+1;
            int llengthpc = (int) lengthpc+1;
            int llengthpd = (int) lengthpd+1;
            int llengthpe = (int) lengthpe+1;
            int llengthpf = (int) lengthpf+1;
            int llengthpg = (int) lengthpg+1;
            int llengthph = (int) lengthph+1;
            int llengthpi = (int) lengthpi+1;
            int llengthpj = (int) lengthpj+1;
            int llengthpk = (int) lengthpk+1;
            int llengthpl = (int) lengthpl+1;
            int llengthpm = (int) lengthpm+1;
            int llengthpn = (int) lengthpn+1;
            int llengthpo = (int) lengthpo+1;
            int llengthpp = (int) lengthpp+1;
            int llengthpq = (int) lengthpq+1;
            int llengthpr = (int) lengthpr+1;
            int llengthps = (int) lengthps+1;
            int llengthpt = (int) lengthpt+1;
            int llengthpu = (int) lengthpu+1;
            int llengthpv = (int) lengthpv+1;
            int llengthpw = (int) lengthpw+1;
            int llengthpx = (int) lengthpx+1;
            int llengthpy = (int) lengthpy+1;
            int llengthpz = (int) lengthpz+1;
            int llengthpdot = (int) lengthpdot+1;
            int llengthpcomma = (int) lengthpcomma+1;
            int llengthpvacuum = (int) lengthpvacuum+1;
            
            System.out.println("\nThe length of the bits for P(a) is = " + llengthpa );  
            System.out.println("\nThe length of the bits for P(b) is = " + llengthpb );  
            System.out.println("\nThe length of the bits for P(c) is = " + llengthpc );  
            System.out.println("\nThe length of the bits for P(d) is = " + llengthpd );  
            System.out.println("\nThe length of the bits for P(e) is = " + llengthpe );  
            System.out.println("\nThe length of the bits for P(f) is = " + llengthpf );  
            System.out.println("\nThe length of the bits for P(g) is = " + llengthpg );  
            System.out.println("\nThe length of the bits for P(h) is = " + llengthph );  
            System.out.println("\nThe length of the bits for P(i) is = " + llengthpi );  
            System.out.println("\nThe length of the bits for P(j) is = " + llengthpj );  
            System.out.println("\nThe length of the bits for P(k) is = " + llengthpk );  
            System.out.println("\nThe length of the bits for P(l) is = " + llengthpl );  
            System.out.println("\nThe length of the bits for P(m) is = " + llengthpm );  
            System.out.println("\nThe length of the bits for P(n) is = " + llengthpn );  
            System.out.println("\nThe length of the bits for P(o) is = " + llengthpo );  
            System.out.println("\nThe length of the bits for P(p) is = " + llengthpp );  
            System.out.println("\nThe length of the bits for P(q) is = " + llengthpq );  
            System.out.println("\nThe length of the bits for P(r) is = " + llengthpr );  
            System.out.println("\nThe length of the bits for P(s) is = " + llengthps );  
            System.out.println("\nThe length of the bits for P(t) is = " + llengthpt );  
            System.out.println("\nThe length of the bits for P(u) is = " + llengthpu );  
            System.out.println("\nThe length of the bits for P(v) is = " + llengthpv );  
            System.out.println("\nThe length of the bits for P(w) is = " + llengthpw );  
            System.out.println("\nThe length of the bits for P(x) is = " + llengthpx );  
            System.out.println("\nThe length of the bits for P(y) is = " + llengthpy );  
            System.out.println("\nThe length of the bits for P(z) is = " + llengthpz );  
            System.out.println("\nThe length of the bits for P(.) is = " + llengthpdot );  
            System.out.println("\nThe length of the bits for P(,) is = " + llengthpcomma );  
            System.out.println("\nThe length of the bits for P(vacuum) is = " + llengthpvacuum );  
            
            double shannonfanopE = 0.0000000000000000;
            double shannonfanopvacuum = shannonfanopE+pvacuum;
            double shannonfanope = shannonfanopvacuum+pe;
            double shannonfanopa = shannonfanope+pa;
            double shannonfanoph = shannonfanopa+ph;
            double shannonfanopo = shannonfanoph+po;
            double shannonfanopt = shannonfanopo+pt;
            double shannonfanopdot = shannonfanopt+pdot;
            double shannonfanops = shannonfanopdot+ps;
            double shannonfanopn = shannonfanops+pn;
            double shannonfanopi = shannonfanopn+pi;
            double shannonfanopd = shannonfanopi+pd;
            double shannonfanopr = shannonfanopd+pr;
            double shannonfanopl = shannonfanopr+pl;
            double shannonfanopy = shannonfanopl+py;
            double shannonfanopu = shannonfanopy+pu;
            double shannonfanopw = shannonfanopu+pw;
            double shannonfanopm = shannonfanopw+pm;
            double shannonfanopg = shannonfanopm+pg;
            double shannonfanopc = shannonfanopg+pc;
            double shannonfanopf = shannonfanopc+pf;
            double shannonfanopk = shannonfanopf+pk;
            double shannonfanopb = shannonfanopk+pb;
            double shannonfanopp = shannonfanopb+pp;
            double shannonfanopcomma = shannonfanopp+pcomma;
            double shannonfanopv = shannonfanopcomma+pv;
            double shannonfanopj = shannonfanopv+pj;
            double shannonfanopx = shannonfanopj+px;
            double shannonfanopq = shannonfanopx+pq;
            double shannonfanopz = shannonfanopq+pz;
            
            double symbollengthpa = 4*pa;
            double symbollengthpb = 4*pb;
            double symbollengthpc = 4*pc;
            double symbollengthpd = 4*pd;
            double symbollengthpe = 4*pe;
            double symbollengthpf = 4*pf;
            double symbollengthpg = 4*pg;
            double symbollengthph = 4*ph;
            double symbollengthpi = 4*pi;
            double symbollengthpj = 5*pj;
            double symbollengthpk = 4*pk;
            double symbollengthpl = 4*pl;
            double symbollengthpm = 4*pm;
            double symbollengthpn = 4*pn;
            double symbollengthpo = 4*po;
            double symbollengthpp = 4*pp;
            double symbollengthpq = 6*pq;
            double symbollengthpr = 4*pr;
            double symbollengthps = 4*ps;
            double symbollengthpt = 4*pt;
            double symbollengthpu = 4*pu;
            double symbollengthpv = 4*pv;
            double symbollengthpw = 4*pw;
            double symbollengthpx = 6*px;
            double symbollengthpy = 4*py;
            double symbollengthpz = 7*pz;
            double symbollengthpdot = 4*pdot;
            double symbollengthpcomma = 4*pcomma;
            double symbollengthpvacuum = 3*pvacuum;
            double L = symbollengthpa+symbollengthpb+symbollengthpc+symbollengthpd+symbollengthpe+symbollengthpf+symbollengthpg+symbollengthph+symbollengthpi+symbollengthpj
                      +symbollengthpk+symbollengthpl+symbollengthpm+symbollengthpn+symbollengthpo+symbollengthpp+symbollengthpq+symbollengthpr+symbollengthps+symbollengthpt
                      +symbollengthpu+symbollengthpv+symbollengthpw+symbollengthpx+symbollengthpy+symbollengthpz+symbollengthpdot+symbollengthpcomma+symbollengthpvacuum;
                   
            StringBuilder binarycodepa = new StringBuilder();
            StringBuilder binarycodepb = new StringBuilder();
            StringBuilder binarycodepc = new StringBuilder();
            StringBuilder binarycodepd = new StringBuilder();
            StringBuilder binarycodepe = new StringBuilder();
            StringBuilder binarycodepf = new StringBuilder();
            StringBuilder binarycodepg = new StringBuilder();
            StringBuilder binarycodeph = new StringBuilder();
            StringBuilder binarycodepi = new StringBuilder();
            StringBuilder binarycodepj = new StringBuilder();
            StringBuilder binarycodepk = new StringBuilder();
            StringBuilder binarycodepl = new StringBuilder();
            StringBuilder binarycodepm = new StringBuilder();
            StringBuilder binarycodepn = new StringBuilder();
            StringBuilder binarycodepo = new StringBuilder();
            StringBuilder binarycodepp = new StringBuilder();
            StringBuilder binarycodepq = new StringBuilder();
            StringBuilder binarycodepr = new StringBuilder();
            StringBuilder binarycodeps = new StringBuilder();
            StringBuilder binarycodept = new StringBuilder();
            StringBuilder binarycodepu = new StringBuilder();
            StringBuilder binarycodepv = new StringBuilder();
            StringBuilder binarycodepw = new StringBuilder();
            StringBuilder binarycodepx = new StringBuilder();
            StringBuilder binarycodepy = new StringBuilder();
            StringBuilder binarycodepz = new StringBuilder();
            StringBuilder binarycodepdot = new StringBuilder();
            StringBuilder binarycodepcomma = new StringBuilder();
            StringBuilder binarycodepvacuum = new StringBuilder();
             
            binarycodepa.append("0.");
            binarycodepb.append("0.");
            binarycodepc.append("0.");
            binarycodepd.append("0.");
            binarycodepe.append("0.");
            binarycodepf.append("0.");
            binarycodepg.append("0.");
            binarycodeph.append("0.");
            binarycodepi.append("0.");
            binarycodepj.append("0.");
            binarycodepk.append("0.");
            binarycodepl.append("0.");
            binarycodepm.append("0.");
            binarycodepn.append("0.");
            binarycodepo.append("0.");
            binarycodepp.append("0.");
            binarycodepq.append("0.");
            binarycodepr.append("0.");
            binarycodeps.append("0.");
            binarycodept.append("0.");
            binarycodepu.append("0.");
            binarycodepv.append("0.");
            binarycodepw.append("0.");
            binarycodepx.append("0.");
            binarycodepy.append("0.");
            binarycodepz.append("0.");
            binarycodepdot.append("0.");
            binarycodepcomma.append("0.");
            binarycodepvacuum.append("0.");
            
            for(int i=0; i<10; i++)
                
            {    
            
            double bbinarycodepa = shannonfanopa*2;
            double bbinarycodepb = shannonfanopb*2;
            double bbinarycodepc = shannonfanopc*2;
            double bbinarycodepd = shannonfanopd*2;
            double bbinarycodepe = shannonfanope*2;
            double bbinarycodepf = shannonfanopf*2;
            double bbinarycodepg = shannonfanopg*2;
            double bbinarycodeph = shannonfanoph*2;
            double bbinarycodepi = shannonfanopi*2;
            double bbinarycodepj = shannonfanopj*2;
            double bbinarycodepk = shannonfanopk*2;
            double bbinarycodepl = shannonfanopl*2;
            double bbinarycodepm = shannonfanopm*2;
            double bbinarycodepn = shannonfanopn*2;
            double bbinarycodepo = shannonfanopo*2;
            double bbinarycodepp = shannonfanopp*2;
            double bbinarycodepq = shannonfanopq*2;
            double bbinarycodepr = shannonfanopr*2;
            double bbinarycodeps = shannonfanops*2;
            double bbinarycodept = shannonfanopt*2;
            double bbinarycodepu = shannonfanopu*2;
            double bbinarycodepv = shannonfanopv*2;
            double bbinarycodepw = shannonfanopw*2;
            double bbinarycodepx = shannonfanopx*2;
            double bbinarycodepy = shannonfanopy*2;
            double bbinarycodepz = shannonfanopz*2;
            double bbinarycodepdot = shannonfanopdot*2;
            double bbinarycodepcomma = shannonfanopcomma*2;
            double bbinarycodepvacuum = shannonfanopvacuum*2;
            
            if(bbinarycodepa>=1)
            
            {
                
            binarycodepa.append("1");
            shannonfanopa=bbinarycodepa-1;   
            
            }
            
            else
            
            {
                
            binarycodepa.append("0");
            shannonfanopa=bbinarycodepa;
                
            }
            
            if(bbinarycodepb>=1)
            
            {
                
            binarycodepb.append("1");
            shannonfanopb=bbinarycodepb-1;   
            
            }
            
            else
            
            {
                
            binarycodepb.append("0");
            shannonfanopb=bbinarycodepb;
                
            }
             
            if(bbinarycodepc>=1)
            
            {
                
            binarycodepc.append("1");
            shannonfanopc=bbinarycodepc-1;   
            
            }
            
            else
            
            {
                
            binarycodepc.append("0");
            shannonfanopc=bbinarycodepc;
                
            }
             
            if(bbinarycodepd>=1)
            
            {
                
            binarycodepd.append("1");
            shannonfanopd=bbinarycodepd-1;   
            
            }
             
            else
            
            {
                
            binarycodepd.append("0");
            shannonfanopd=bbinarycodepd;
                
            }
             
            if(bbinarycodepe>=1)
            
            {
                
            binarycodepe.append("1");
            shannonfanope=bbinarycodepe-1;   
            
            }
            
            else
            
            {
                
            binarycodepe.append("0");
            shannonfanope=bbinarycodepe;
                
            }
             
            if(bbinarycodepf>=1)
            
            {
                
            binarycodepf.append("1");
            shannonfanopf=bbinarycodepf-1;   
            
            }
            
            else
            
            {
                
            binarycodepf.append("0");
            shannonfanopf=bbinarycodepf;
                
            }
             
            if(bbinarycodepg>=1)
            
            {
                
            binarycodepg.append("1");
            shannonfanopg=bbinarycodepg-1;   
            
            }
            
            else
            
            {
                
            binarycodepg.append("0");
            shannonfanopg=bbinarycodepg;
                
            }
             
            if(bbinarycodeph>=1)
            
            {
                
            binarycodeph.append("1");
            shannonfanoph=bbinarycodeph-1;   
            
            }
            
            else
            
            {
                
            binarycodeph.append("0");
            shannonfanoph=bbinarycodeph;
                
            }
             
            if(bbinarycodepi>=1)
            
            {
                
            binarycodepi.append("1");
            shannonfanopi=bbinarycodepi-1;   
            
            }
            
            else
            
            {
                
            binarycodepi.append("0");
            shannonfanopi=bbinarycodepi;
                
            }
             
            if(bbinarycodepj>=1)
            
            {
                
            binarycodepj.append("1");
            shannonfanopj=bbinarycodepj-1;   
            
            }
            
            else
            
            {
                
            binarycodepj.append("0");
            shannonfanopj=bbinarycodepj;
                
            } 
             
            if(bbinarycodepk>=1)
            
            {
                
            binarycodepk.append("1");
            shannonfanopk=bbinarycodepk-1;   
            
            }
            
            else
            
            {
                
            binarycodepk.append("0");
            shannonfanopk=bbinarycodepk;
                
            }
            
            if(bbinarycodepl>=1)
            
            {
                
            binarycodepl.append("1");
            shannonfanopl=bbinarycodepl-1;   
            
            }
             
            else
            
            {
                
            binarycodepl.append("0");
            shannonfanopl=bbinarycodepl;
                
            }
             
            if(bbinarycodepm>=1)
            
            {
                
            binarycodepm.append("1");
            shannonfanopm=bbinarycodepm-1;   
            
            }
            
            else
            
            {
                
            binarycodepm.append("0");
            shannonfanopm=bbinarycodepm;
                
            }
             
            if(bbinarycodepn>=1)
            
            {
                
            binarycodepn.append("1");
            shannonfanopn=bbinarycodepn-1;   
            
            }
            
            else
            
            {
                
            binarycodepn.append("0");
            shannonfanopn=bbinarycodepn;
                
            }
             
            if(bbinarycodepo>=1)
            
            {
                
            binarycodepo.append("1");
            shannonfanopo=bbinarycodepo-1;   
            
            }
            
            else
            
            {
                
            binarycodepo.append("0");
            shannonfanopo=bbinarycodepo;
                
            }
             
            if(bbinarycodepp>=1)
            
            {
                
            binarycodepp.append("1");
            shannonfanopp=bbinarycodepp-1;   
            
            }
            
            else
            
            {
                
            binarycodepp.append("0");
            shannonfanopp=bbinarycodepp;
                
            }
             
            if(bbinarycodepq>=1)
            
            {
                
            binarycodepq.append("1");
            shannonfanopq=bbinarycodepq-1;   
            
            }
            
            else
            
            {
                
            binarycodepq.append("0");
            shannonfanopq=bbinarycodepq;
                
            }
             
            if(bbinarycodepr>=1)
            
            {
                
            binarycodepr.append("1");
            shannonfanopr=bbinarycodepr-1;   
            
            }
            
            else
            
            {
                
            binarycodepr.append("0");
            shannonfanopr=bbinarycodepr;
                
            }
             
            if(bbinarycodeps>=1)
            
            {
                
            binarycodeps.append("1");
            shannonfanops=bbinarycodeps-1;   
            
            }
            
            else
            
            {
                
            binarycodeps.append("0");
            shannonfanops=bbinarycodeps;
                
            }
             
            if(bbinarycodept>=1)
            
            {
                
            binarycodept.append("1");
            shannonfanopt=bbinarycodept-1;   
            
            }
            
            else
            
            {
                
            binarycodept.append("0");
            shannonfanopt=bbinarycodept;
                
            } 
             
            if(bbinarycodepu>=1)
            
            {
                
            binarycodepu.append("1");
            shannonfanopu=bbinarycodepu-1;   
            
            }
            
            else
            
            {
                
            binarycodepu.append("0");
            shannonfanopu=bbinarycodepu;
                
            }
            
            if(bbinarycodepv>=1)
            
            {
                
            binarycodepv.append("1");
            shannonfanopv=bbinarycodepv-1;   
            
            }
            
            else
            
            {
                
            binarycodepv.append("0");
            shannonfanopv=bbinarycodepv;
                
            }
             
            if(bbinarycodepw>=1)
            
            {
                
            binarycodepw.append("1");
            shannonfanopw=bbinarycodepw-1;   
            
            }
            
            else
            
            {
                
            binarycodepw.append("0");
            shannonfanopw=bbinarycodepw;
                
            }
             
            if(bbinarycodepx>=1)
            
            {
                
            binarycodepx.append("1");
            shannonfanopx=bbinarycodepx-1;   
            
            }
            
            else
            
            {
                
            binarycodepx.append("0");
            shannonfanopx=bbinarycodepx;
                
            }
             
            if(bbinarycodepy>=1)
            
            {
                
            binarycodepy.append("1");
            shannonfanopy=bbinarycodepy-1;   
            
            }
            
            else
            
            {
                
            binarycodepy.append("0");
            shannonfanopy=bbinarycodepy;
                
            }
             
            if(bbinarycodepz>=1)
            
            {
                
            binarycodepz.append("1");
            shannonfanopz=bbinarycodepz-1;   
            
            }
            
            else
            
            {
                
            binarycodepz.append("0");
            shannonfanopz=bbinarycodepz;
                
            }
             
            if(bbinarycodepdot>=1)
            
            {
                
            binarycodepdot.append("1");
            shannonfanopdot=bbinarycodepdot-1;   
            
            }
            
            else
            
            {
                
            binarycodepdot.append("0");
            shannonfanopdot=bbinarycodepdot;
                
            }
             
            if(bbinarycodepcomma>=1)
            
            {
                
            binarycodepcomma.append("1");
            shannonfanopcomma=bbinarycodepcomma-1;   
            
            }
            
            else
            
            {
                
            binarycodepcomma.append("0");
            shannonfanopcomma=bbinarycodepcomma;
                
            }
             
            if(bbinarycodepvacuum>=1)
            
            {
                
            binarycodepvacuum.append("1");
            shannonfanopvacuum=bbinarycodepvacuum-1;   
            
            }
            
            else
            
            {
                
            binarycodepvacuum.append("0");
            shannonfanopvacuum=bbinarycodepvacuum;
                
            }
            
            }
            
            System.out.println("\nThe binary code of P(a) is = " + shannonfanopa + " -> " + binarycodepa.toString() + " -> variable length code -> 0010" ); 
            System.out.println("\nThe binary code of P(b) is = " + shannonfanopb + " -> " + binarycodepb.toString() + " -> variable length code -> 1110" ); 
            System.out.println("\nThe binary code of P(c) is = " + shannonfanopc + " -> " + binarycodepc.toString() + " -> variable length code -> 1100" ); 
            System.out.println("\nThe binary code of P(d) is = " + shannonfanopd + " -> " + binarycodepd.toString() + " -> variable length code -> 1000" ); 
            System.out.println("\nThe binary code of P(e) is = " + shannonfanope + " -> " + binarycodepe.toString() + " -> variable length code -> 0001" ); 
            System.out.println("\nThe binary code of P(f) is = " + shannonfanopf + " -> " + binarycodepf.toString() + " -> variable length code -> 1101" ); 
            System.out.println("\nThe binary code of P(g) is = " + shannonfanopg + " -> " + binarycodepg.toString() + " -> variable length code -> 1100" ); 
            System.out.println("\nThe binary code of P(h) is = " + shannonfanoph + " -> " + binarycodeph.toString() + " -> variable length code -> 0011" ); 
            System.out.println("\nThe binary code of P(i) is = " + shannonfanopi + " -> " + binarycodepi.toString() + " -> variable length code -> 0111" ); 
            System.out.println("\nThe binary code of P(j) is = " + shannonfanopj + " -> " + binarycodepj.toString() + " -> variable length code -> 11111" ); 
            System.out.println("\nThe binary code of P(k) is = " + shannonfanopk + " -> " + binarycodepk.toString() + " -> variable length code -> 1101" ); 
            System.out.println("\nThe binary code of P(l) is = " + shannonfanopl + " -> " + binarycodepl.toString() + " -> variable length code -> 1001" ); 
            System.out.println("\nThe binary code of P(m) is = " + shannonfanopm + " -> " + binarycodepm.toString() + " -> variable length code -> 1011" ); 
            System.out.println("\nThe binary code of P(n) is = " + shannonfanopn + " -> " + binarycodepn.toString() + " -> variable length code -> 0110" ); 
            System.out.println("\nThe binary code of P(o) is = " + shannonfanopo + " -> " + binarycodepo.toString() + " -> variable length code -> 0011" ); 
            System.out.println("\nThe binary code of P(p) is = " + shannonfanopp + " -> " + binarycodepp.toString() + " -> variable length code -> 1110" ); 
            System.out.println("\nThe binary code of P(q) is = " + shannonfanopq + " -> " + binarycodepq.toString() + " -> variable length code -> 111111" ); 
            System.out.println("\nThe binary code of P(r) is = " + shannonfanopr + " -> " + binarycodepr.toString() + " -> variable length code -> 1000" ); 
            System.out.println("\nThe binary code of P(s) is = " + shannonfanops + " -> " + binarycodeps.toString() + " -> variable length code -> 0101" ); 
            System.out.println("\nThe binary code of P(t) is = " + shannonfanopt + " -> " + binarycodept.toString() + " -> variable length code -> 0100" ); 
            System.out.println("\nThe binary code of P(u) is = " + shannonfanopu + " -> " + binarycodepu.toString() + " -> variable length code -> 1010" ); 
            System.out.println("\nThe binary code of P(v) is = " + shannonfanopv + " -> " + binarycodepv.toString() + " -> variable length code -> 1111" ); 
            System.out.println("\nThe binary code of P(w) is = " + shannonfanopw + " -> " + binarycodepw.toString() + " -> variable length code -> 1011" ); 
            System.out.println("\nThe binary code of P(x) is = " + shannonfanopx + " -> " + binarycodepx.toString() + " -> variable length code -> 111111" ); 
            System.out.println("\nThe binary code of P(y) is = " + shannonfanopy + " -> " + binarycodepy.toString() + " -> variable length code -> 1010" ); 
            System.out.println("\nThe binary code of P(z) is = " + shannonfanopz + " -> " + binarycodepz.toString() + " -> variable length code -> 1111111" ); 
            System.out.println("\nThe binary code of P(.) is = " + shannonfanopdot + " -> " + binarycodepdot.toString() + " -> variable length code -> 0101" ); 
            System.out.println("\nThe binary code of P(,) is = " + shannonfanopcomma + " -> " + binarycodepcomma.toString() + " -> variable length code -> 1111" ); 
            System.out.println("\nThe binary code of P(vacuum) is = " + shannonfanopvacuum + " -> " + binarycodepvacuum.toString() + " -> variable length code -> 000" ); 
            System.out.println("\nThe determination of the size for the compressed file is = H(s)/L = 3.260578852252319/3.9840902923647468 = " + 3.260578852252319/L); 
            System.out.println("\nThe average symbol length of the code is = L = " + L); 
            System.out.println("\nThe conclusion is that the file can be compressed without losses because the L>H(s) , 3.9840902923647468>3.260578852252319" );
            System.out.println(); 
            
            try    
        
            {

            File file = new File("The-Snowman-by-Jo-Nesbo.txt");

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            String readLine = "";

            while ((readLine = bufferedReader.readLine()) != null) 
            
            {
                
            readLine = readLine.replaceAll("[\\d+'–’‘:©«»—”“/?…!();&-]" , " ").replace("]" , " ").replace("[", " ").replaceAll("Ø" , "O").replaceAll("[ÌÍÎÏ]" , "I").replaceAll("[ÀÁÂÃÄÅ]" , "A").replaceAll("[ÈÉÊË]" , "E").replaceAll("Ç" , "C").replaceAll("ç" , "c").replaceAll("æ" , "ae").replaceAll("ø" , "o").replaceAll("[ìíîï]", "i").replaceAll("[àáâãäå]" , "a").replaceAll("[èéêë]" , "e").replaceAll("[òóôõö]" , "o").replaceAll("[ùúûü]" , "u").replaceAll("œ" , "oe"); 
            
            readLine = readLine.toLowerCase();
            
            readLine = readLine.replaceAll("a" , "0010").replaceAll("b" , "1110").replaceAll("c" , "1100").replaceAll("d" , "1000").replaceAll("e" , "0001").replaceAll("f" , "1101").replaceAll("g" , "1100").replaceAll("h" , "0011").replaceAll("i" , "0111").replaceAll("j" , "11111").replaceAll("k" , "1101").replaceAll("l" , "1001").replaceAll("m" , "1011").replaceAll("n" , "0110").replaceAll("o" , "0011").replaceAll("p" , "1110").replaceAll("q" , "111111").replaceAll("r" , "1000").replaceAll("s" , "0101").replaceAll("t" , "0100").replaceAll("u" , "1010").replaceAll("v" , "1111").replaceAll("w" , "1011").replaceAll("x" , "111111").replaceAll("y" , "1010").replaceAll("z" , "1111111").replaceAll("." , "0101").replaceAll("," , "1111").replaceAll(" " , "000");
          
            System.out.println(readLine);
  
            }

            } 
            
            catch (IOException e) 
    
            {
                
            e.printStackTrace();
               
            }
            
            System.out.println("End of the line.");   
     
            }
         
            }
